
FreeRTOS_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d7e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  0801d928  0801d928  0002d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e800  0801e800  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  0801e800  0801e800  0002e800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e808  0801e808  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e808  0801e808  0002e808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e80c  0801e80c  0002e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0801e810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043d8  20000118  0801e928  00030118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f0  0801e928  000344f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049b6f  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aedc  00000000  00000000  00079cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003810  00000000  00000000  00084b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033b8  00000000  00000000  000883a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae55  00000000  00000000  0008b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046332  00000000  00000000  000b65ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d53a7  00000000  00000000  000fc8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d1c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e6c0  00000000  00000000  001d1cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d910 	.word	0x0801d910

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0801d910 	.word	0x0801d910

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2uiz>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	d20e      	bcs.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30b      	bcc.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d409      	bmi.n	8000b4c <__aeabi_f2uiz+0x28>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	fa23 f002 	lsr.w	r0, r3, r2
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2uiz+0x32>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d102      	bne.n	8000b5c <__aeabi_f2uiz+0x38>
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14d      	bne.n	8000c40 <__udivmoddi4+0xac>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d968      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b152      	cbz	r2, 8000bc6 <__udivmoddi4+0x32>
 8000bb0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb4:	f1c2 0120 	rsb	r1, r2, #32
 8000bb8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc0:	ea41 0803 	orr.w	r8, r1, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000bca:	0c21      	lsrs	r1, r4, #16
 8000bcc:	fbb8 fef5 	udiv	lr, r8, r5
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	fb05 831e 	mls	r3, r5, lr, r8
 8000bd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bdc:	fb0e f107 	mul.w	r1, lr, r7
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x68>
 8000be4:	eb1c 0303 	adds.w	r3, ip, r3
 8000be8:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000bec:	f080 811e 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	f240 811b 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c04:	fb05 3310 	mls	r3, r5, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 f707 	mul.w	r7, r0, r7
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x96>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1c:	f080 8108 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	f240 8105 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c30:	2100      	movs	r1, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa8>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	f000 80ee 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c50:	4608      	mov	r0, r1
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	42ab      	cmp	r3, r5
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e2      	beq.n	8000c3c <__udivmoddi4+0xa8>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8091 	bne.w	8000dac <__udivmoddi4+0x218>
 8000c8a:	eba1 050c 	sub.w	r5, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb5 f3f7 	udiv	r3, r5, r7
 8000c9c:	fb07 5013 	mls	r0, r7, r3, r5
 8000ca0:	0c25      	lsrs	r5, r4, #16
 8000ca2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	42a8      	cmp	r0, r5
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0505 	adds.w	r5, ip, r5
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a2d      	subs	r5, r5, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cc8:	fb07 5510 	mls	r5, r7, r0, r5
 8000ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79e      	b.n	8000c32 <__udivmoddi4+0x9e>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa05 f301 	lsl.w	r3, r5, r1
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f301 	lsl.w	r3, r0, r1
 8000d16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 5518 	mls	r5, r9, r8, r5
 8000d24:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0505 	adds.w	r5, ip, r5
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4465      	add	r5, ip
 8000d4c:	1a2d      	subs	r5, r5, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d54:	fb09 5510 	mls	r5, r9, r0, r5
 8000d58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45ae      	cmp	lr, r5
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0505 	adds.w	r5, ip, r5
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	45ae      	cmp	lr, r5
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4465      	add	r5, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba5 050e 	sub.w	r5, r5, lr
 8000d82:	42a5      	cmp	r5, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15e      	cbz	r6, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb65 050e 	sbc.w	r5, r5, lr
 8000d96:	fa05 f707 	lsl.w	r7, r5, r7
 8000d9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9e:	40cd      	lsrs	r5, r1
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c6 7500 	strd	r7, r5, [r6]
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa25 f303 	lsr.w	r3, r5, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	430d      	orrs	r5, r1
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dcc:	fb07 3011 	mls	r0, r7, r1, r3
 8000dd0:	0c2b      	lsrs	r3, r5, #16
 8000dd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000dd6:	fb01 f00e 	mul.w	r0, r1, lr
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3902      	subs	r1, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	b2ad      	uxth	r5, r5
 8000df8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dfc:	fb07 3310 	mls	r3, r7, r0, r3
 8000e00:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e04:	fb00 f30e 	mul.w	r3, r0, lr
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e10:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4465      	add	r5, ip
 8000e1e:	1aed      	subs	r5, r5, r3
 8000e20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e707      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	e6e5      	b.n	8000bfc <__udivmoddi4+0x68>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6fa      	b.n	8000c2a <__udivmoddi4+0x96>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4465      	add	r5, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	4013      	ands	r3, r2
 8000eb0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <MX_ADC_Init+0x98>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_ADC_Init+0x94>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f3e:	f001 ff81 	bl	8002e44 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 faec 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000134 	.word	0x20000134
 8000f54:	40012400 	.word	0x40012400

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_ADC_MspInit+0x24>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d103      	bne.n	8000f72 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f7ff ff7b 	bl	8000e68 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012400 	.word	0x40012400

08000f80 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_ADC_MspDeInit+0x24>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d103      	bne.n	8000f9a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f7ff ff7f 	bl	8000e98 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SYS_InitMeasurement+0x14>)
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <SYS_InitMeasurement+0x18>)
 8000fb0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000134 	.word	0x20000134
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fd2:	f000 f871 	bl	80010b8 <SYS_GetBatteryLevel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fda:	4830      	ldr	r0, [pc, #192]	; (800109c <SYS_GetTemperatureLevel+0xd8>)
 8000fdc:	f000 f8a0 	bl	8001120 <ADC_ReadChannels>
 8000fe0:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d026      	beq.n	800103c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d01c      	beq.n	8001034 <SYS_GetTemperatureLevel+0x70>
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <SYS_GetTemperatureLevel+0xe4>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	461a      	mov	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2264      	movs	r2, #100	; 0x64
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	fb92 f3f3 	sdiv	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	331e      	adds	r3, #30
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	e001      	b.n	8001038 <SYS_GetTemperatureLevel+0x74>
 8001034:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e01c      	b.n	8001076 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <SYS_GetTemperatureLevel+0xe8>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	0852      	lsrs	r2, r2, #1
 800104e:	4413      	add	r3, r2
 8001050:	0adb      	lsrs	r3, r3, #11
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800105e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <SYS_GetTemperatureLevel+0xec>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1292      	asrs	r2, r2, #10
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	331e      	adds	r3, #30
 8001072:	b29b      	uxth	r3, r3
 8001074:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <SYS_GetTemperatureLevel+0xf0>)
 800107e:	2201      	movs	r2, #1
 8001080:	2100      	movs	r1, #0
 8001082:	2001      	movs	r0, #1
 8001084:	f01b f862 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	b0001000 	.word	0xb0001000
 80010a0:	1fff75c8 	.word	0x1fff75c8
 80010a4:	1fff75a8 	.word	0x1fff75a8
 80010a8:	09ee009f 	.word	0x09ee009f
 80010ac:	00100101 	.word	0x00100101
 80010b0:	68db8bad 	.word	0x68db8bad
 80010b4:	0801d928 	.word	0x0801d928

080010b8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <SYS_GetBatteryLevel+0x5c>)
 80010c8:	f000 f82a 	bl	8001120 <ADC_ReadChannels>
 80010cc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	e016      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00b      	beq.n	80010fe <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010f0:	fb03 f202 	mul.w	r2, r3, r2
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e004      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SYS_GetBatteryLevel+0x64>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001108:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	b4002000 	.word	0xb4002000
 8001118:	1fff75aa 	.word	0x1fff75aa
 800111c:	004c08d8 	.word	0x004c08d8

08001120 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001138:	f7ff fec0 	bl	8000ebc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <ADC_ReadChannels+0x88>)
 800113e:	f002 fc67 	bl	8003a10 <HAL_ADCEx_Calibration_Start>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001148:	f000 f9ec 	bl	8001524 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001160:	f002 f9ce 	bl	8003500 <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800116a:	f000 f9db 	bl	8001524 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001170:	f002 f8aa 	bl	80032c8 <HAL_ADC_Start>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800117a:	f000 f9d3 	bl	8001524 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800117e:	f04f 31ff 	mov.w	r1, #4294967295
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001184:	f002 f918 	bl	80033b8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <ADC_ReadChannels+0x88>)
 800118a:	f002 f8e3 	bl	8003354 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001190:	f002 f9a9 	bl	80034e6 <HAL_ADC_GetValue>
 8001194:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001198:	f002 f81a 	bl	80031d0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800119c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000134 	.word	0x20000134

080011ac <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{ LED_control3(0);
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f997 	bl	80014e8 <LED_control3>
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1, *ulExpectedIdleTime * LSI_VALUE / 1000);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <PreSleepProcessing+0x38>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <PreSleepProcessing+0x3c>)
 80011d2:	f003 fd55 	bl	8004c80 <HAL_LPTIM_Counter_Start_IT>
  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);

  /*Enter Low Power Mode*/
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f004 f96e 	bl	80054b8 <HAL_PWREx_EnterSTOP2Mode>
// SystemClock_Config ();

 // HAL_ResumeTick();
   //ulExpectedIdleTime = 0;

}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	10624dd3 	.word	0x10624dd3
 80011e8:	200009ec 	.word	0x200009ec

080011ec <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <PostSleepProcessing+0x20>)
 80011f6:	f003 fde5 	bl	8004dc4 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 80011fa:	f000 f89f 	bl	800133c <SystemClock_Config>
  (void) ulExpectedIdleTime;

  LED_control3(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 f972 	bl	80014e8 <LED_control3>
  //HAL_Delay (2000);

}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200009ec 	.word	0x200009ec

08001210 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <vApplicationGetIdleTaskMemory+0x2c>)
 8001220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <vApplicationGetIdleTaskMemory+0x30>)
 8001226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000198 	.word	0x20000198
 8001240:	200001ec 	.word	0x200001ec

08001244 <LL_AHB1_GRP1_EnableClock>:
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800124c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff ffe3 	bl	8001244 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffe0 	bl	8001244 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	200f      	movs	r0, #15
 800128a:	f002 fd12 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800128e:	200f      	movs	r0, #15
 8001290:	f002 fd2b 	bl	8003cea <HAL_NVIC_EnableIRQ>

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a8:	f023 0218 	bic.w	r2, r3, #24
 80012ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_AHB2_GRP1_EnableClock>:
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f001 fbcd 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 f81d 	bl	800133c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001302:	f000 f8a5 	bl	8001450 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001306:	f000 f877 	bl	80013f8 <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <main+0x40>)
 800130c:	1d3c      	adds	r4, r7, #4
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f009 f91f 	bl	800a564 <osThreadCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <main+0x44>)
 800132a:	6013      	str	r3, [r2, #0]
 // osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 // LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);

  osKernelStart();
 800132c:	f009 f913 	bl	800a556 <osKernelStart>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */

  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x3c>
 8001332:	bf00      	nop
 8001334:	0801d944 	.word	0x0801d944
 8001338:	20000a28 	.word	0x20000a28

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09a      	sub	sp, #104	; 0x68
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2248      	movs	r2, #72	; 0x48
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f01c fa56 	bl	801d7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001362:	f004 f817 	bl	8005394 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff96 	bl	8001298 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <SystemClock_Config+0xb8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001374:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <SystemClock_Config+0xb8>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <SystemClock_Config+0xb8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 8001388:	232c      	movs	r3, #44	; 0x2c
 800138a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800138c:	2381      	movs	r3, #129	; 0x81
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001394:	2300      	movs	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001398:	23b0      	movs	r3, #176	; 0xb0
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fb3d 	bl	8005a2c <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013b8:	f000 f8b4 	bl	8001524 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80013bc:	234f      	movs	r3, #79	; 0x4f
 80013be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fec2 	bl	8006164 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013e6:	f000 f89d 	bl	8001524 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3768      	adds	r7, #104	; 0x68
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	58000400 	.word	0x58000400

080013f8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_LPTIM1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_LPTIM1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_LPTIM1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_LPTIM1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_LPTIM1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_LPTIM1_Init+0x50>)
 8001436:	f003 fb5b 	bl	8004af0 <HAL_LPTIM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 f870 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200009ec 	.word	0x200009ec
 800144c:	40007c00 	.word	0x40007c00

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff ff2c 	bl	80012c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <MX_GPIO_Init+0x94>)
 8001470:	f003 fa9c 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001474:	2320      	movs	r3, #32
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_GPIO_Init+0x94>)
 800148a:	f003 f861 	bl	8004550 <HAL_GPIO_Init>


  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2108      	movs	r1, #8
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_GPIO_Init+0x94>)
 8001494:	f003 fa8a 	bl	80049ac <HAL_GPIO_WritePin>

   /*Configure GPIO pin : PB5 */
   GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001498:	2308      	movs	r3, #8
 800149a:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_GPIO_Init+0x94>)
 80014ae:	f003 f84f 	bl	8004550 <HAL_GPIO_Init>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <MX_GPIO_Init+0x94>)
 80014ba:	f003 fa77 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_GPIO_Init+0x94>)
 80014d6:	f003 f83b 	bl	8004550 <HAL_GPIO_Init>

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	48000400 	.word	0x48000400

080014e8 <LED_control3>:
  return 0;
}
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
int32_t LED_control3(int value) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, value);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	2108      	movs	r1, #8
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <LED_control3+0x20>)
 80014fa:	f003 fa57 	bl	80049ac <HAL_GPIO_WritePin>
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	48000400 	.word	0x48000400

0800150c <StartLoRaWANTask>:
/* USER CODE BEGIN 4 */


void StartLoRaWANTask(void const * argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 8001514:	f008 fc86 	bl	8009e24 <MX_LoRaWAN_Init>
  /* Infinite loop */

  for(;;)
  { //LED_control1(1);

	MX_LoRaWAN_Process();
 8001518:	f008 fc8c 	bl	8009e34 <MX_LoRaWAN_Process>

	osDelay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f009 f86d 	bl	800a5fc <osDelay>
	MX_LoRaWAN_Process();
 8001522:	e7f9      	b.n	8001518 <StartLoRaWANTask+0xc>

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>

0800152e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <LL_APB1_GRP1_EnableClock>:
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800155c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	222c      	movs	r2, #44	; 0x2c
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f01c f935 	bl	801d7fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_RTC_Init+0x9c>)
 8001594:	4a22      	ldr	r2, [pc, #136]	; (8001620 <MX_RTC_Init+0xa0>)
 8001596:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_RTC_Init+0x9c>)
 800159a:	221f      	movs	r2, #31
 800159c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_RTC_Init+0x9c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_RTC_Init+0x9c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_RTC_Init+0x9c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_RTC_Init+0x9c>)
 80015b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_RTC_Init+0x9c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_RTC_Init+0x9c>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c6:	4815      	ldr	r0, [pc, #84]	; (800161c <MX_RTC_Init+0x9c>)
 80015c8:	f005 fa8e 	bl	8006ae8 <HAL_RTC_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015d2:	f7ff ffa7 	bl	8001524 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <MX_RTC_Init+0x9c>)
 80015d8:	f005 fd7c 	bl	80070d4 <HAL_RTCEx_SetSSRU_IT>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80015e2:	f7ff ff9f 	bl	8001524 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80015f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015f6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80015f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_RTC_Init+0x9c>)
 8001606:	f005 fae9 	bl	8006bdc <HAL_RTC_SetAlarm_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001610:	f7ff ff88 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000a2c 	.word	0x20000a2c
 8001620:	40002800 	.word	0x40002800

08001624 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b090      	sub	sp, #64	; 0x40
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2238      	movs	r2, #56	; 0x38
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f01c f8e1 	bl	801d7fc <memset>
  if(rtcHandle->Instance==RTC)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_RTC_MspInit+0x74>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d125      	bne.n	8001690 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f005 f927 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001660:	f7ff ff60 	bl	8001524 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001664:	f7ff ff63 	bl	800152e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001668:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800166c:	f7ff ff6f 	bl	800154e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2002      	movs	r0, #2
 8001676:	f002 fb1c 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800167a:	2002      	movs	r0, #2
 800167c:	f002 fb35 	bl	8003cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	202a      	movs	r0, #42	; 0x2a
 8001686:	f002 fb14 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800168a:	202a      	movs	r0, #42	; 0x2a
 800168c:	f002 fb2d 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001690:	bf00      	nop
 8001692:	3740      	adds	r7, #64	; 0x40
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40002800 	.word	0x40002800

0800169c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	58000400 	.word	0x58000400

080016b4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80016d0:	f001 fa14 	bl	8002afc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80016d4:	f7ff ffe2 	bl	800169c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80016d8:	2001      	movs	r0, #1
 80016da:	f003 feed 	bl	80054b8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80016e6:	f001 fa17 	bl	8002b18 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80016ea:	f000 ffc1 	bl	8002670 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80016f6:	f001 fa01 	bl	8002afc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80016fa:	2101      	movs	r1, #1
 80016fc:	2000      	movs	r0, #0
 80016fe:	f003 fe57 	bl	80053b0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800170a:	f001 fa05 	bl	8002b18 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <LL_APB1_GRP1_EnableClock>:
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210f      	movs	r1, #15
 800174a:	f06f 0001 	mvn.w	r0, #1
 800174e:	f002 fab0 	bl	8003cb2 <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2238      	movs	r2, #56	; 0x38
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f01c f847 	bl	801d7fc <memset>
  if(hlptim->Instance==LPTIM1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_LPTIM_MspInit+0x60>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d11a      	bne.n	80017ae <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_LPTIM_MspInit+0x64>)
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f005 f88e 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8001792:	f7ff fec7 	bl	8001524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001796:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800179a:	f7ff ffba 	bl	8001712 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2027      	movs	r0, #39	; 0x27
 80017a4:	f002 fa85 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80017a8:	2027      	movs	r0, #39	; 0x27
 80017aa:	f002 fa9e 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3740      	adds	r7, #64	; 0x40
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40007c00 	.word	0x40007c00
 80017bc:	000c0004 	.word	0x000c0004

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f001 f973 	bl	8002ad8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017f2:	f009 fd35 	bl	800b260 <xTaskGetSchedulerState>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d001      	beq.n	8001800 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017fc:	f009 ff24 	bl	800b648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800180a:	f005 fc9f 	bl	800714c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000a2c 	.word	0x20000a2c

08001818 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800181c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001820:	f003 f8dc 	bl	80049dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Channel5_IRQHandler+0x10>)
 800182e:	f002 fcf3 	bl	8004218 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000b08 	.word	0x20000b08

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART1_IRQHandler+0x10>)
 8001842:	f006 fae3 	bl	8007e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000a78 	.word	0x20000a78

08001850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART2_IRQHandler+0x10>)
 8001856:	f006 fad9 	bl	8007e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000b68 	.word	0x20000b68

08001864 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <RTC_Alarm_IRQHandler+0x10>)
 800186a:	f005 fb1f 	bl	8006eac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000a2c 	.word	0x20000a2c

08001878 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <SUBGHZ_Radio_IRQHandler+0x10>)
 800187e:	f005 ffcd 	bl	800781c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000a64 	.word	0x20000a64

0800188c <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <LPTIM1_IRQHandler+0x10>)
 8001892:	f003 fafd 	bl	8004e90 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200009ec 	.word	0x200009ec

080018a0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_SUBGHZ_Init+0x20>)
 80018d6:	2208      	movs	r2, #8
 80018d8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_SUBGHZ_Init+0x20>)
 80018dc:	f005 fd22 	bl	8007324 <HAL_SUBGHZ_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80018e6:	f7ff fe1d 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000a64 	.word	0x20000a64

080018f4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff ffcf 	bl	80018a0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2032      	movs	r0, #50	; 0x32
 8001908:	f002 f9d3 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800190c:	2032      	movs	r0, #50	; 0x32
 800190e:	f002 f9ec 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800192c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <LL_FLASH_GetUDN+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	1fff7580 	.word	0x1fff7580

08001954 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <LL_FLASH_GetDeviceID+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	1fff7584 	.word	0x1fff7584

0800196c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <LL_FLASH_GetSTCompanyID+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0a1b      	lsrs	r3, r3, #8
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	1fff7584 	.word	0x1fff7584

08001984 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ffc6 	bl	800191a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800198e:	f01b fa09 	bl	801cda4 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001992:	f000 f979 	bl	8001c88 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001996:	f01a fbab 	bl	801c0f0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <SystemApp_Init+0x3c>)
 800199c:	f01a fc56 	bl	801c24c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f01a fc61 	bl	801c268 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80019a6:	f7ff faff 	bl	8000fa8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80019aa:	f000 f99f 	bl	8001cec <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80019ae:	f01a fe45 	bl	801c63c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019b2:	2101      	movs	r1, #1
 80019b4:	2001      	movs	r0, #1
 80019b6:	f01a fe81 	bl	801c6bc <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08001b99 	.word	0x08001b99

080019c4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
 UTIL_LPM_EnterLowPower();
 80019c8:	f01a fea8 	bl	801c71c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019da:	f7ff fb6d 	bl	80010b8 <SYS_GetBatteryLevel>
 80019de:	4603      	mov	r3, r0
 80019e0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d902      	bls.n	80019f2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019ec:	23fe      	movs	r3, #254	; 0xfe
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	e014      	b.n	8001a1c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019f8:	d202      	bcs.n	8001a00 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	e00d      	b.n	8001a1c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001a06:	461a      	mov	r2, r3
 8001a08:	4613      	mov	r3, r2
 8001a0a:	01db      	lsls	r3, r3, #7
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <GetBatteryLevel+0x68>)
 8001a14:	fba3 2302 	umull	r2, r3, r3, r2
 8001a18:	09db      	lsrs	r3, r3, #7
 8001a1a:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <GetBatteryLevel+0x6c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	2002      	movs	r0, #2
 8001a28:	f01a fb90 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	1b4e81b5 	.word	0x1b4e81b5
 8001a3c:	0801d960 	.word	0x0801d960

08001a40 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001a4a:	f7ff fabb 	bl	8000fc4 <SYS_GetTemperatureLevel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da00      	bge.n	8001a56 <GetTemperatureLevel+0x16>
 8001a54:	33ff      	adds	r3, #255	; 0xff
 8001a56:	121b      	asrs	r3, r3, #8
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a66:	b590      	push	{r4, r7, lr}
 8001a68:	b087      	sub	sp, #28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a72:	f7ff ff65 	bl	8001940 <LL_FLASH_GetUDN>
 8001a76:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d138      	bne.n	8001af2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a80:	f001 f858 	bl	8002b34 <HAL_GetUIDw0>
 8001a84:	4604      	mov	r4, r0
 8001a86:	f001 f869 	bl	8002b5c <HAL_GetUIDw2>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4423      	add	r3, r4
 8001a8e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a90:	f001 f85a 	bl	8002b48 <HAL_GetUIDw1>
 8001a94:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	0e1a      	lsrs	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	0c1a      	lsrs	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3306      	adds	r3, #6
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	0a1a      	lsrs	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3305      	adds	r3, #5
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	0e1a      	lsrs	r2, r3, #24
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3303      	adds	r3, #3
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0c1a      	lsrs	r2, r3, #16
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0a1a      	lsrs	r2, r3, #8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001af0:	e031      	b.n	8001b56 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3307      	adds	r3, #7
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	0a1a      	lsrs	r2, r3, #8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3306      	adds	r3, #6
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	0c1a      	lsrs	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	0e1a      	lsrs	r2, r3, #24
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001b20:	f7ff ff18 	bl	8001954 <LL_FLASH_GetDeviceID>
 8001b24:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b30:	f7ff ff1c 	bl	800196c <LL_FLASH_GetSTCompanyID>
 8001b34:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	0a1a      	lsrs	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}

08001b5e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001b5e:	b590      	push	{r4, r7, lr}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001b68:	f7ff feea 	bl	8001940 <LL_FLASH_GetUDN>
 8001b6c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d10b      	bne.n	8001b8e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b76:	f000 ffdd 	bl	8002b34 <HAL_GetUIDw0>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	f000 ffe4 	bl	8002b48 <HAL_GetUIDw1>
 8001b80:	4603      	mov	r3, r0
 8001b82:	405c      	eors	r4, r3
 8001b84:	f000 ffea 	bl	8002b5c <HAL_GetUIDw2>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4063      	eors	r3, r4
 8001b8c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b8e:	687b      	ldr	r3, [r7, #4]

}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}

08001b98 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f01b f83e 	bl	801cc28 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bb2:	9200      	str	r2, [sp, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <TimestampNow+0x3c>)
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f81d 	bl	8001bf8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fade 	bl	8000180 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0801d96c 	.word	0x0801d96c

08001bd8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2002      	movs	r0, #2
 8001be0:	f01a fd3c 	bl	801c65c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f01a fd34 	bl	801c65c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001bf8:	b40c      	push	{r2, r3}
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f01b fc6b 	bl	801d4ec <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c20:	b002      	add	sp, #8
 8001c22:	4770      	bx	lr

08001c24 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001c3c:	f000 f91e 	bl	8001e7c <TIMER_IF_GetTimerValue>
 8001c40:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f99a 	bl	8001f8a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c6e:	4905      	ldr	r1, [pc, #20]	; (8001c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	58000800 	.word	0x58000800

08001c88 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001c8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c90:	f7ff ffe6 	bl	8001c60 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <EnvSensors_Read+0x40>)
 8001ca2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <EnvSensors_Read+0x44>)
 8001ca6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <EnvSensors_Read+0x48>)
 8001caa:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <EnvSensors_Read+0x4c>)
 8001cc2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <EnvSensors_Read+0x50>)
 8001cc8:	611a      	str	r2, [r3, #16]

  return 0;
 8001cca:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	42480000 	.word	0x42480000
 8001cdc:	41900000 	.word	0x41900000
 8001ce0:	447a0000 	.word	0x447a0000
 8001ce4:	003e090d 	.word	0x003e090d
 8001ce8:	000503ab 	.word	0x000503ab

08001cec <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001cf0:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <TIMER_IF_Init+0x5c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f083 0301 	eor.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <TIMER_IF_Init+0x60>)
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001d3c:	f7ff fc20 	bl	8001580 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001d40:	f000 f856 	bl	8001df0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <TIMER_IF_Init+0x60>)
 8001d4a:	f005 f853 	bl	8006df4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <TIMER_IF_Init+0x60>)
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <TIMER_IF_Init+0x60>)
 8001d58:	f005 f98a 	bl	8007070 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f9d3 	bl	8002108 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001d62:	f000 f85f 	bl	8001e24 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <TIMER_IF_Init+0x5c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000a70 	.word	0x20000a70
 8001d7c:	20000a2c 	.word	0x20000a2c

08001d80 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	222c      	movs	r2, #44	; 0x2c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f01b fd30 	bl	801d7fc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001d9c:	f000 f828 	bl	8001df0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <TIMER_IF_StartTimer+0x68>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001db8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dbc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <TIMER_IF_StartTimer+0x6c>)
 8001dce:	f004 ff05 	bl	8006bdc <HAL_RTC_SetAlarm_IT>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001dd8:	f7ff fba4 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3738      	adds	r7, #56	; 0x38
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000a74 	.word	0x20000a74
 8001dec:	20000a2c 	.word	0x20000a2c

08001df0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <TIMER_IF_StopTimer+0x2c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <TIMER_IF_StopTimer+0x30>)
 8001e06:	f004 fff5 	bl	8006df4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <TIMER_IF_StopTimer+0x30>)
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40002800 	.word	0x40002800
 8001e20:	20000a2c 	.word	0x20000a2c

08001e24 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001e28:	f000 f98e 	bl	8002148 <GetTimerTicks>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <TIMER_IF_SetTimerContext+0x18>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e32:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <TIMER_IF_SetTimerContext+0x18>)
 8001e34:	681b      	ldr	r3, [r3, #0]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000a74 	.word	0x20000a74

08001e40 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <TIMER_IF_GetTimerContext+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000a74 	.word	0x20000a74

08001e54 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e5e:	f000 f973 	bl	8002148 <GetTimerTicks>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000a74 	.word	0x20000a74

08001e7c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <TIMER_IF_GetTimerValue+0x24>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e8e:	f000 f95b 	bl	8002148 <GetTimerTicks>
 8001e92:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001e94:	687b      	ldr	r3, [r7, #4]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000a70 	.word	0x20000a70

08001ea4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001eae:	2303      	movs	r3, #3
 8001eb0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001ebe:	b5b0      	push	{r4, r5, r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	2000      	movs	r0, #0
 8001ece:	460a      	mov	r2, r1
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	0d95      	lsrs	r5, r2, #22
 8001ed4:	0294      	lsls	r4, r2, #10
 8001ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe fe3f 	bl	8000b64 <__aeabi_uldivmod>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4613      	mov	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}

08001ef8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001ef8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f02:	2100      	movs	r1, #0
 8001f04:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	2000      	movs	r0, #0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f04f 0a00 	mov.w	sl, #0
 8001f16:	f04f 0b00 	mov.w	fp, #0
 8001f1a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f1e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f22:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f26:	4650      	mov	r0, sl
 8001f28:	4659      	mov	r1, fp
 8001f2a:	1b02      	subs	r2, r0, r4
 8001f2c:	eb61 0305 	sbc.w	r3, r1, r5
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0099      	lsls	r1, r3, #2
 8001f3a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f3e:	0090      	lsls	r0, r2, #2
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	eb12 0804 	adds.w	r8, r2, r4
 8001f48:	eb43 0905 	adc.w	r9, r3, r5
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f60:	4690      	mov	r8, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	4640      	mov	r0, r8
 8001f66:	4649      	mov	r1, r9
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	0a82      	lsrs	r2, r0, #10
 8001f72:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f76:	0a8b      	lsrs	r3, r1, #10
 8001f78:	4613      	mov	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f88:	4770      	bx	lr

08001f8a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff93 	bl	8001ebe <TIMER_IF_Convert_ms2Tick>
 8001f98:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001f9a:	f000 f8d5 	bl	8002148 <GetTimerTicks>
 8001f9e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fa0:	e000      	b.n	8001fa4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001fa2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fa4:	f000 f8d0 	bl	8002148 <GetTimerTicks>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f6      	bhi.n	8001fa2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001fc6:	f01b f83b 	bl	801d040 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001fda:	f000 f8a5 	bl	8002128 <TIMER_IF_BkUp_Read_MSBticks>
 8001fde:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f88f 	bl	8002108 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001ff2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002000:	f000 f8a2 	bl	8002148 <GetTimerTicks>
 8002004:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002006:	f000 f88f 	bl	8002128 <TIMER_IF_BkUp_Read_MSBticks>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	2200      	movs	r2, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	60fa      	str	r2, [r7, #12]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	000b      	movs	r3, r1
 8002020:	2200      	movs	r2, #0
 8002022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002024:	2000      	movs	r0, #0
 8002026:	460c      	mov	r4, r1
 8002028:	4605      	mov	r5, r0
 800202a:	eb12 0804 	adds.w	r8, r2, r4
 800202e:	eb43 0905 	adc.w	r9, r3, r5
 8002032:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002036:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	0a82      	lsrs	r2, r0, #10
 8002044:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002048:	0a8b      	lsrs	r3, r1, #10
 800204a:	4613      	mov	r3, r2
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2200      	movs	r2, #0
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800205c:	f04f 0b00 	mov.w	fp, #0
 8002060:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff46 	bl	8001ef8 <TIMER_IF_Convert_Tick2ms>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002076:	4618      	mov	r0, r3
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002080 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	2100      	movs	r1, #0
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800208e:	f005 f881 	bl	8007194 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000a2c 	.word	0x20000a2c

080020a0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	2101      	movs	r1, #1
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80020ae:	f005 f871 	bl	8007194 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000a2c 	.word	0x20000a2c

080020c0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020ca:	2100      	movs	r1, #0
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80020ce:	f005 f879 	bl	80071c4 <HAL_RTCEx_BKUPRead>
 80020d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80020d4:	687b      	ldr	r3, [r7, #4]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000a2c 	.word	0x20000a2c

080020e4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020ee:	2101      	movs	r1, #1
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80020f2:	f005 f867 	bl	80071c4 <HAL_RTCEx_BKUPRead>
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000a2c 	.word	0x20000a2c

08002108 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	2102      	movs	r1, #2
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002116:	f005 f83d 	bl	8007194 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000a2c 	.word	0x20000a2c

08002128 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800212e:	2102      	movs	r1, #2
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002132:	f005 f847 	bl	80071c4 <HAL_RTCEx_BKUPRead>
 8002136:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002138:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000a2c 	.word	0x20000a2c

08002148 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <GetTimerTicks+0x14>)
 800214e:	f7ff fdda 	bl	8001d06 <LL_RTC_TIME_GetSubSecond>
 8002152:	4603      	mov	r3, r0
 8002154:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40002800 	.word	0x40002800

08002160 <LL_AHB2_GRP1_EnableClock>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002184:	68fb      	ldr	r3, [r7, #12]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <LL_APB1_GRP1_EnableClock>:
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b4:	68fb      	ldr	r3, [r7, #12]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <LL_APB1_GRP1_DisableClock>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d6:	4013      	ands	r3, r2
 80021d8:	658b      	str	r3, [r1, #88]	; 0x58
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_APB2_GRP1_EnableClock>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <LL_APB2_GRP1_DisableClock>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	43db      	mvns	r3, r3
 8002226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222a:	4013      	ands	r3, r2
 800222c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <MX_USART1_UART_Init+0x94>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002282:	f005 fc8a 	bl	8007b9a <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800228c:	f7ff f94a 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002290:	2100      	movs	r1, #0
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 8002294:	f007 fcdb 	bl	8009c4e <HAL_UARTEx_SetTxFifoThreshold>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800229e:	f7ff f941 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a2:	2100      	movs	r1, #0
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 80022a6:	f007 fd10 	bl	8009cca <HAL_UARTEx_SetRxFifoThreshold>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b0:	f7ff f938 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_USART1_UART_Init+0x90>)
 80022b6:	f007 fc8f 	bl	8009bd8 <HAL_UARTEx_EnableFifoMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c0:	f7ff f930 	bl	8001524 <Error_Handler>
  }

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000a78 	.word	0x20000a78
 80022cc:	40013800 	.word	0x40013800

080022d0 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b096      	sub	sp, #88	; 0x58
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f01b fa83 	bl	801d7fc <memset>
  if(uartHandle->Instance==USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_UART_MspInit+0x1a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d156      	bne.n	80023ae <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002300:	2301      	movs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002304:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_UART_MspInit+0x1a4>)
 8002306:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4618      	mov	r0, r3
 800230e:	f004 facb 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002318:	f7ff f904 	bl	8001524 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002320:	f7ff ff60 	bl	80021e4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	2002      	movs	r0, #2
 8002326:	f7ff ff1b 	bl	8002160 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233a:	2307      	movs	r3, #7
 800233c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002342:	4619      	mov	r1, r3
 8002344:	484c      	ldr	r0, [pc, #304]	; (8002478 <HAL_UART_MspInit+0x1a8>)
 8002346:	f002 f903 	bl	8004550 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_UART_MspInit+0x1ac>)
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_UART_MspInit+0x1b0>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002352:	2212      	movs	r2, #18
 8002354:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002358:	2210      	movs	r2, #16
 800235a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_UART_MspInit+0x1ac>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002362:	4b46      	ldr	r3, [pc, #280]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_UART_MspInit+0x1ac>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002374:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800237a:	4b40      	ldr	r3, [pc, #256]	; (800247c <HAL_UART_MspInit+0x1ac>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002380:	483e      	ldr	r0, [pc, #248]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002382:	f001 fccf 	bl	8003d24 <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800238c:	f7ff f8ca 	bl	8001524 <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3a      	ldr	r2, [pc, #232]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002394:	679a      	str	r2, [r3, #120]	; 0x78
 8002396:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_UART_MspInit+0x1ac>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2102      	movs	r1, #2
 80023a0:	2024      	movs	r0, #36	; 0x24
 80023a2:	f001 fc86 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a6:	2024      	movs	r0, #36	; 0x24
 80023a8:	f001 fc9f 	bl	8003cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023ac:	e05b      	b.n	8002466 <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_UART_MspInit+0x1b4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d156      	bne.n	8002466 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_UART_MspInit+0x1b8>)
 80023be:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f004 fa6f 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_MspInit+0x104>
      Error_Handler();
 80023d0:	f7ff f8a8 	bl	8001524 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80023d8:	f7ff feda 	bl	8002190 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff febf 	bl	8002160 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80023e2:	230c      	movs	r3, #12
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f2:	2307      	movs	r3, #7
 80023f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f002 f8a6 	bl	8004550 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_UART_MspInit+0x1b0>)
 8002408:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_UART_MspInit+0x1bc>)
 800240c:	2214      	movs	r2, #20
 800240e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002412:	2210      	movs	r2, #16
 8002414:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x1bc>)
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x1bc>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800243a:	4814      	ldr	r0, [pc, #80]	; (800248c <HAL_UART_MspInit+0x1bc>)
 800243c:	f001 fc72 	bl	8003d24 <HAL_DMA_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8002446:	f7ff f86d 	bl	8001524 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_UART_MspInit+0x1bc>)
 800244e:	679a      	str	r2, [r3, #120]	; 0x78
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_UART_MspInit+0x1bc>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2102      	movs	r1, #2
 800245a:	2025      	movs	r0, #37	; 0x25
 800245c:	f001 fc29 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002460:	2025      	movs	r0, #37	; 0x25
 8002462:	f001 fc42 	bl	8003cea <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3758      	adds	r7, #88	; 0x58
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40013800 	.word	0x40013800
 8002474:	00030001 	.word	0x00030001
 8002478:	48000400 	.word	0x48000400
 800247c:	20000b08 	.word	0x20000b08
 8002480:	40020058 	.word	0x40020058
 8002484:	40004400 	.word	0x40004400
 8002488:	000c0004 	.word	0x000c0004
 800248c:	20000bf8 	.word	0x20000bf8

08002490 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_UART_MspDeInit+0x68>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d110      	bne.n	80024c4 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80024a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a6:	f7ff feb5 	bl	8002214 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 80024aa:	21c0      	movs	r1, #192	; 0xc0
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <HAL_UART_MspDeInit+0x6c>)
 80024ae:	f002 f9af 	bl	8004810 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 fcdc 	bl	8003e74 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80024bc:	2024      	movs	r0, #36	; 0x24
 80024be:	f001 fc22 	bl	8003d06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80024c2:	e015      	b.n	80024f0 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_UART_MspDeInit+0x70>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d110      	bne.n	80024f0 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 80024ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024d2:	f7ff fe75 	bl	80021c0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 80024d6:	210c      	movs	r1, #12
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f002 f998 	bl	8004810 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fcc5 	bl	8003e74 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80024ea:	2025      	movs	r0, #37	; 0x25
 80024ec:	f001 fc0b 	bl	8003d06 <HAL_NVIC_DisableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40013800 	.word	0x40013800
 80024fc:	48000400 	.word	0x48000400
 8002500:	40004400 	.word	0x40004400

08002504 <LL_APB2_GRP1_ForceReset>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <LL_APB2_GRP1_ReleaseReset>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	43db      	mvns	r3, r3
 8002538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253c:	4013      	ands	r3, r2
 800253e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <LL_EXTI_EnableIT_0_31>:
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <LL_EXTI_EnableIT_0_31+0x24>)
 8002556:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800255a:	4905      	ldr	r1, [pc, #20]	; (8002570 <LL_EXTI_EnableIT_0_31+0x24>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	58000800 	.word	0x58000800

08002574 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <vcom_Init+0x28>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002582:	f7fe fe77 	bl	8001274 <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 8002586:	f7ff fe57 	bl	8002238 <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800258a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800258e:	f7ff ffdd 	bl	800254c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002592:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000c5c 	.word	0x20000c5c

080025a0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025a8:	f7ff ffac 	bl	8002504 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80025ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b0:	f7ff ffb9 	bl	8002526 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <vcom_DeInit+0x28>)
 80025b6:	f7ff ff6b 	bl	8002490 <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80025ba:	200f      	movs	r0, #15
 80025bc:	f001 fba3 	bl	8003d06 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80025c0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000a78 	.word	0x20000a78

080025cc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	461a      	mov	r2, r3
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4804      	ldr	r0, [pc, #16]	; (80025f0 <vcom_Trace_DMA+0x24>)
 80025e0:	f005 fb82 	bl	8007ce8 <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 80025e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000a78 	.word	0x20000a78

080025f4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <vcom_ReceiveInit+0x70>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002602:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002606:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002610:	4815      	ldr	r0, [pc, #84]	; (8002668 <vcom_ReceiveInit+0x74>)
 8002612:	f007 fa54 	bl	8009abe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002616:	bf00      	nop
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <vcom_ReceiveInit+0x74>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d0f7      	beq.n	8002618 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002628:	bf00      	nop
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <vcom_ReceiveInit+0x74>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002638:	d1f7      	bne.n	800262a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <vcom_ReceiveInit+0x74>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <vcom_ReceiveInit+0x74>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002648:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <vcom_ReceiveInit+0x74>)
 800264c:	f007 fa92 	bl	8009b74 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002650:	2201      	movs	r2, #1
 8002652:	4906      	ldr	r1, [pc, #24]	; (800266c <vcom_ReceiveInit+0x78>)
 8002654:	4804      	ldr	r0, [pc, #16]	; (8002668 <vcom_ReceiveInit+0x74>)
 8002656:	f005 faf1 	bl	8007c3c <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 800265a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000c60 	.word	0x20000c60
 8002668:	20000a78 	.word	0x20000a78
 800266c:	20000c58 	.word	0x20000c58

08002670 <vcom_Resume>:

void vcom_Resume(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
#ifdef USE_USB_SERIAL
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <vcom_Resume+0x28>)
 8002676:	f005 fa90 	bl	8007b9a <HAL_UART_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <vcom_Resume+0x14>
  {
	Error_Handler();
 8002680:	f7fe ff50 	bl	8001524 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <vcom_Resume+0x2c>)
 8002686:	f001 fb4d 	bl	8003d24 <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <vcom_Resume+0x24>
  {
	Error_Handler();
 8002690:	f7fe ff48 	bl	8001524 <Error_Handler>
  }
#endif
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000a78 	.word	0x20000a78
 800269c:	20000b08 	.word	0x20000b08

080026a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_UART_TxCpltCallback+0x18>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2000      	movs	r0, #0
 80026ae:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000c5c 	.word	0x20000c5c

080026bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_UART_RxCpltCallback+0x38>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_UART_RxCpltCallback+0x26>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_UART_RxCpltCallback+0x38>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	2101      	movs	r1, #1
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <HAL_UART_RxCpltCallback+0x3c>)
 80026e0:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80026e2:	2201      	movs	r2, #1
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_UART_RxCpltCallback+0x3c>)
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f005 faa8 	bl	8007c3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000c60 	.word	0x20000c60
 80026f8:	20000c58 	.word	0x20000c58

080026fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002700:	f7ff fafb 	bl	8001cfa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <LoopForever+0x6>)
  ldr r1, =_edata
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <LoopForever+0xe>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <LoopForever+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800272a:	f01b f835 	bl	801d798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800272e:	f7fe fde1 	bl	80012f4 <main>

08002732 <LoopForever>:

LoopForever:
    b LoopForever
 8002732:	e7fe      	b.n	8002732 <LoopForever>
  ldr   r0, =_estack
 8002734:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002740:	0801e810 	.word	0x0801e810
  ldr r2, =_sbss
 8002744:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002748:	200044f0 	.word	0x200044f0

0800274c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC_IRQHandler>

0800274e <LL_AHB2_GRP1_EnableClock>:
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800275c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4013      	ands	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
	...

08002780 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800279a:	2002      	movs	r0, #2
 800279c:	f7ff ffd7 	bl	800274e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80027a0:	2320      	movs	r3, #32
 80027a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ac:	2302      	movs	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <BSP_LED_Init+0x60>)
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	f107 020c 	add.w	r2, r7, #12
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fec6 	bl	8004550 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <BSP_LED_Init+0x60>)
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	2120      	movs	r1, #32
 80027ce:	2201      	movs	r2, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 f8eb 	bl	80049ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000004 	.word	0x20000004

080027e4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <BSP_LED_On+0x28>)
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	2120      	movs	r1, #32
 80027f8:	2200      	movs	r2, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 f8d6 	bl	80049ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004

08002810 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <BSP_LED_Off+0x28>)
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	2120      	movs	r1, #32
 8002824:	2201      	movs	r2, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f002 f8c0 	bl	80049ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000004 	.word	0x20000004

0800283c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	460a      	mov	r2, r1
 8002846:	71fb      	strb	r3, [r7, #7]
 8002848:	4613      	mov	r3, r2
 800284a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800285c:	2002      	movs	r0, #2
 800285e:	f7ff ff76 	bl	800274e <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002866:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <BSP_PB_Init+0xc4>)
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	f107 020c 	add.w	r2, r7, #12
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fe61 	bl	8004550 <HAL_GPIO_Init>
 800288e:	e031      	b.n	80028f4 <BSP_PB_Init+0xb8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002890:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002894:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <BSP_PB_Init+0xc4>)
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	f107 020c 	add.w	r2, r7, #12
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fe53 	bl	8004550 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <BSP_PB_Init+0xc8>)
 80028b0:	441a      	add	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4914      	ldr	r1, [pc, #80]	; (8002908 <BSP_PB_Init+0xcc>)
 80028b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f001 fe34 	bl	800452a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <BSP_PB_Init+0xc8>)
 80028c8:	1898      	adds	r0, r3, r2
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <BSP_PB_Init+0xd0>)
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	461a      	mov	r2, r3
 80028d4:	2100      	movs	r1, #0
 80028d6:	f001 fe0f 	bl	80044f8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80028da:	2029      	movs	r0, #41	; 0x29
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <BSP_PB_Init+0xd4>)
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	f001 f9e3 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028ec:	2329      	movs	r3, #41	; 0x29
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f9fb 	bl	8003cea <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000008 	.word	0x20000008
 8002904:	20000c64 	.word	0x20000c64
 8002908:	0801e2c0 	.word	0x0801e2c0
 800290c:	2000000c 	.word	0x2000000c
 8002910:	20000010 	.word	0x20000010

08002914 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff fff1 	bl	8002914 <BSP_PB_Callback>
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <LL_AHB2_GRP1_EnableClock>:
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4313      	orrs	r3, r2
 800294c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 800297a:	2001      	movs	r0, #1
 800297c:	f7ff ffdb 	bl	8002936 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002980:	2310      	movs	r3, #16
 8002982:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	4619      	mov	r1, r3
 8002994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002998:	f001 fdda 	bl	8004550 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800299c:	2320      	movs	r3, #32
 800299e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a8:	f001 fdd2 	bl	8004550 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029ac:	2200      	movs	r2, #0
 80029ae:	2120      	movs	r1, #32
 80029b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b4:	f001 fffa 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029b8:	2200      	movs	r2, #0
 80029ba:	2110      	movs	r1, #16
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f001 fff4 	bl	80049ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d83f      	bhi.n	8002a60 <BSP_RADIO_ConfigRFSwitch+0x90>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a13 	.word	0x08002a13
 80029f0:	08002a2d 	.word	0x08002a2d
 80029f4:	08002a47 	.word	0x08002a47
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2110      	movs	r1, #16
 80029fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a00:	f001 ffd4 	bl	80049ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2120      	movs	r1, #32
 8002a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0c:	f001 ffce 	bl	80049ac <HAL_GPIO_WritePin>
      break;      
 8002a10:	e027      	b.n	8002a62 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a12:	2201      	movs	r2, #1
 8002a14:	2110      	movs	r1, #16
 8002a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1a:	f001 ffc7 	bl	80049ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2120      	movs	r1, #32
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a26:	f001 ffc1 	bl	80049ac <HAL_GPIO_WritePin>
      break;
 8002a2a:	e01a      	b.n	8002a62 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2110      	movs	r1, #16
 8002a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a34:	f001 ffba 	bl	80049ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a40:	f001 ffb4 	bl	80049ac <HAL_GPIO_WritePin>
      break;
 8002a44:	e00d      	b.n	8002a62 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a46:	2200      	movs	r2, #0
 8002a48:	2110      	movs	r1, #16
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4e:	f001 ffad 	bl	80049ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a52:	2201      	movs	r2, #1
 8002a54:	2120      	movs	r1, #32
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5a:	f001 ffa7 	bl	80049ac <HAL_GPIO_WritePin>
      break;
 8002a5e:	e000      	b.n	8002a62 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002a60:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a70:	2302      	movs	r3, #2
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	f001 f8fa 	bl	8003c9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002aa8:	f003 fd20 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_Init+0x3c>)
 8002ab0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab2:	200f      	movs	r0, #15
 8002ab4:	f7ff f8b6 	bl	8001c24 <HAL_InitTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	e001      	b.n	8002ac8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ac4:	f7fe fe3d 	bl	8001742 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000

08002ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x20>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_IncTick+0x20>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	20000018 	.word	0x20000018
 8002af8:	20000c6c 	.word	0x20000c6c

08002afc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_SuspendTick+0x18>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_SuspendTick+0x18>)
 8002b06:	f023 0302 	bic.w	r3, r3, #2
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_ResumeTick+0x18>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <HAL_ResumeTick+0x18>)
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_GetUIDw0+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	1fff7590 	.word	0x1fff7590

08002b48 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_GetUIDw1+0x10>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	1fff7594 	.word	0x1fff7594

08002b5c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_GetUIDw2+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	1fff7598 	.word	0x1fff7598

08002b70 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2107      	movs	r1, #7
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	401a      	ands	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	210f      	movs	r1, #15
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 010f 	and.w	r1, r3, #15
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0219      	lsls	r1, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	400b      	ands	r3, r1
 8002cba:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ce2:	f023 0317 	bic.w	r3, r3, #23
 8002ce6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d08:	f023 0317 	bic.w	r3, r3, #23
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6093      	str	r3, [r2, #8]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2e:	d101      	bne.n	8002d34 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d50:	f023 0317 	bic.w	r3, r3, #23
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d76:	f023 0317 	bic.w	r3, r3, #23
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <LL_ADC_IsEnabled+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_ADC_IsEnabled+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d101      	bne.n	8002dc8 <LL_ADC_IsDisableOngoing+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_ADC_IsDisableOngoing+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de4:	f023 0317 	bic.w	r3, r3, #23
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	f023 0317 	bic.w	r3, r3, #23
 8002e0e:	f043 0210 	orr.w	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1ae      	b.n	80031c4 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe f86f 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff44 	bl	8002d1a <LL_ADC_IsInternalRegulatorEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d115      	bne.n	8002ec4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff18 	bl	8002cd2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea2:	4b9b      	ldr	r3, [pc, #620]	; (8003110 <HAL_ADC_Init+0x2cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a9a      	ldr	r2, [pc, #616]	; (8003114 <HAL_ADC_Init+0x2d0>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff26 	bl	8002d1a <LL_ADC_IsInternalRegulatorEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff93 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8002efa:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 8154 	bne.w	80031b2 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 8150 	bne.w	80031b2 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff30 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14f      	bne.n	8002fd2 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f023 0118 	bic.w	r1, r3, #24
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d111      	bne.n	8002f8a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f72:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f78:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f7e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	4b61      	ldr	r3, [pc, #388]	; (8003118 <HAL_ADC_Init+0x2d4>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	6979      	ldr	r1, [r7, #20]
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002fa6:	d014      	beq.n	8002fd2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d00f      	beq.n	8002fd2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fba:	d00a      	beq.n	8002fd2 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002fbc:	4b57      	ldr	r3, [pc, #348]	; (800311c <HAL_ADC_Init+0x2d8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fcc:	4953      	ldr	r1, [pc, #332]	; (800311c <HAL_ADC_Init+0x2d8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7e1b      	ldrb	r3, [r3, #24]
 8002fd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e5b      	ldrb	r3, [r3, #25]
 8002fdc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002fde:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e9b      	ldrb	r3, [r3, #26]
 8002fe4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002fe6:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Init+0x1b2>
 8002ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Init+0x1b4>
 8002ff6:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ff8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ffe:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da04      	bge.n	8003012 <HAL_ADC_Init+0x1ce>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003010:	e001      	b.n	8003016 <HAL_ADC_Init+0x1d2>
 8003012:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8003016:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800301e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003020:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d114      	bne.n	800305c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7e9b      	ldrb	r3, [r3, #26]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e00b      	b.n	800305c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003070:	4313      	orrs	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003082:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	430b      	orrs	r3, r1
 800308e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_ADC_Init+0x2dc>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	461a      	mov	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f7ff fd7d 	bl	8002bae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	461a      	mov	r2, r3
 80030be:	4919      	ldr	r1, [pc, #100]	; (8003124 <HAL_ADC_Init+0x2e0>)
 80030c0:	f7ff fd75 	bl	8002bae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d108      	bne.n	80030de <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f062 020f 	orn	r2, r2, #15
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
 80030dc:	e044      	b.n	8003168 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e6:	d13f      	bne.n	8003168 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e00c      	b.n	8003108 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d012      	beq.n	8003128 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b07      	cmp	r3, #7
 800310c:	d9ef      	bls.n	80030ee <HAL_ADC_Init+0x2aa>
 800310e:	e00c      	b.n	800312a <HAL_ADC_Init+0x2e6>
 8003110:	20000000 	.word	0x20000000
 8003114:	053e2d63 	.word	0x053e2d63
 8003118:	1ffffc02 	.word	0x1ffffc02
 800311c:	40012708 	.word	0x40012708
 8003120:	dffffc02 	.word	0xdffffc02
 8003124:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8003128:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d108      	bne.n	8003142 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f062 020f 	orn	r2, r2, #15
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
 8003140:	e012      	b.n	8003168 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	3b01      	subs	r3, #1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	f003 031c 	and.w	r3, r3, #28
 8003154:	f06f 020f 	mvn.w	r2, #15
 8003158:	fa02 f103 	lsl.w	r1, r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_ADC_Init+0x388>)
 8003170:	4013      	ands	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d10b      	bne.n	8003190 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800318e:	e018      	b.n	80031c2 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f023 0312 	bic.w	r3, r3, #18
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80031b0:	e007      	b.n	80031c2 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	833fffe7 	.word	0x833fffe7

080031d0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06a      	b.n	80032b8 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fabe 	bl	8003770 <ADC_ConversionStop>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fb82 	bl	8003908 <ADC_Disable>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fd6d 	bl	8002cf8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800322c:	f023 0303 	bic.w	r3, r3, #3
 8003230:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f240 329f 	movw	r2, #927	; 0x39f
 800323a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_ADC_DeInit+0xf0>)
 8003248:	400b      	ands	r3, r1
 800324a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800325a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0207 	bic.w	r2, r2, #7
 800326a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800327a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_ADC_DeInit+0xf4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <HAL_ADC_DeInit+0xf4>)
 8003290:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003294:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fe72 	bl	8000f80 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	833e0200 	.word	0x833e0200
 80032c4:	40012708 	.word	0x40012708

080032c8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fda3 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d132      	bne.n	8003346 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Start+0x26>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e02e      	b.n	800334c <HAL_ADC_Start+0x84>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa80 	bl	80037fc <ADC_Enable>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11a      	bne.n	800333c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	221c      	movs	r2, #28
 8003326:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fd4d 	bl	8002dd4 <LL_ADC_REG_StartConversion>
 800333a:	e006      	b.n	800334a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003344:	e001      	b.n	800334a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_Stop+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e022      	b.n	80033b0 <HAL_ADC_Stop+0x5c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9fc 	bl	8003770 <ADC_ConversionStop>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d111      	bne.n	80033a6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fac0 	bl	8003908 <ADC_Disable>
 8003388:	4603      	mov	r3, r0
 800338a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d102      	bne.n	80033d0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033ca:	2308      	movs	r3, #8
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e010      	b.n	80033f2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e077      	b.n	80034de <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033ee:	2304      	movs	r3, #4
 80033f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033f2:	f7fe fc21 	bl	8001c38 <HAL_GetTick>
 80033f6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033f8:	e021      	b.n	800343e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d01d      	beq.n	800343e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003402:	f7fe fc19 	bl	8001c38 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <HAL_ADC_PollForConversion+0x60>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d112      	bne.n	800343e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e04f      	b.n	80034de <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0d6      	beq.n	80033fa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fbc4 	bl	8002bea <LL_ADC_REG_IsTriggerSourceSWStart>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d031      	beq.n	80034cc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7e9b      	ldrb	r3, [r3, #26]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12d      	bne.n	80034cc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b08      	cmp	r3, #8
 800347c:	d126      	bne.n	80034cc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fccc 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d112      	bne.n	80034b4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020c 	bic.w	r2, r2, #12
 800349c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58
 80034b2:	e00b      	b.n	80034cc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	220c      	movs	r2, #12
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x28>
 8003524:	2302      	movs	r3, #2
 8003526:	e110      	b.n	800374a <HAL_ADC_ConfigChannel+0x24a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fc73 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 80f7 	bne.w	8003730 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	f000 80b1 	beq.w	80036ae <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003554:	d004      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800355a:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <HAL_ADC_ConfigChannel+0x254>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7ff fb70 	bl	8002c50 <LL_ADC_REG_SetSequencerChAdd>
 8003570:	e041      	b.n	80035f6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	210f      	movs	r1, #15
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0xa0>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	e011      	b.n	80035c4 <HAL_ADC_ConfigChannel+0xc4>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80035b8:	2320      	movs	r3, #32
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	6849      	ldr	r1, [r1, #4]
 80035c8:	f001 011f 	and.w	r1, r1, #31
 80035cc:	408b      	lsls	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d808      	bhi.n	80035f6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	f7ff fb0c 	bl	8002c0e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	461a      	mov	r2, r3
 8003604:	f7ff fb49 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f280 8097 	bge.w	8003740 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003612:	4851      	ldr	r0, [pc, #324]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 8003614:	f7ff fabe 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 8003618:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4f      	ldr	r2, [pc, #316]	; (800375c <HAL_ADC_ConfigChannel+0x25c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d120      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11b      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003634:	4619      	mov	r1, r3
 8003636:	4848      	ldr	r0, [pc, #288]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	f7ff fa9a 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800363c:	4b48      	ldr	r3, [pc, #288]	; (8003760 <HAL_ADC_ConfigChannel+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_ADC_ConfigChannel+0x264>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003656:	e002      	b.n	800365e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3b01      	subs	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f9      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003664:	e06c      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3f      	ldr	r2, [pc, #252]	; (8003768 <HAL_ADC_ConfigChannel+0x268>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10c      	bne.n	800368a <HAL_ADC_ConfigChannel+0x18a>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003680:	4619      	mov	r1, r3
 8003682:	4835      	ldr	r0, [pc, #212]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 8003684:	f7ff fa74 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
 8003688:	e05a      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a37      	ldr	r2, [pc, #220]	; (800376c <HAL_ADC_ConfigChannel+0x26c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d155      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d150      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a4:	4619      	mov	r1, r3
 80036a6:	482c      	ldr	r0, [pc, #176]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 80036a8:	f7ff fa62 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
 80036ac:	e048      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b6:	d004      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_ADC_ConfigChannel+0x254>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d107      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff fad1 	bl	8002c74 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da32      	bge.n	8003740 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036da:	481f      	ldr	r0, [pc, #124]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 80036dc:	f7ff fa5a 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 80036e0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_ADC_ConfigChannel+0x25c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d107      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036f2:	4619      	mov	r1, r3
 80036f4:	4818      	ldr	r0, [pc, #96]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 80036f6:	f7ff fa3b 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
 80036fa:	e021      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_ADC_ConfigChannel+0x268>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d107      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800370c:	4619      	mov	r1, r3
 800370e:	4812      	ldr	r0, [pc, #72]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 8003710:	f7ff fa2e 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
 8003714:	e014      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_ADC_ConfigChannel+0x26c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10f      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003726:	4619      	mov	r1, r3
 8003728:	480b      	ldr	r0, [pc, #44]	; (8003758 <HAL_ADC_ConfigChannel+0x258>)
 800372a:	f7ff fa21 	bl	8002b70 <LL_ADC_SetCommonPathInternalCh>
 800372e:	e007      	b.n	8003740 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003748:	7ffb      	ldrb	r3, [r7, #31]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	80000004 	.word	0x80000004
 8003758:	40012708 	.word	0x40012708
 800375c:	b0001000 	.word	0xb0001000
 8003760:	20000000 	.word	0x20000000
 8003764:	053e2d63 	.word	0x053e2d63
 8003768:	b8004000 	.word	0xb8004000
 800376c:	b4002000 	.word	0xb4002000

08003770 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fb4f 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d033      	beq.n	80037f0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fb0f 	bl	8002db0 <LL_ADC_IsDisableOngoing>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fb2c 	bl	8002dfa <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a2:	f7fe fa49 	bl	8001c38 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037a8:	e01b      	b.n	80037e2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037aa:	f7fe fa45 	bl	8001c38 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d914      	bls.n	80037e2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e007      	b.n	80037f2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1dc      	bne.n	80037aa <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fabd 	bl	8002d8c <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d169      	bne.n	80038ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <ADC_Enable+0xfc>)
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f043 0210 	orr.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e055      	b.n	80038ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fa7a 	bl	8002d40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800384c:	482b      	ldr	r0, [pc, #172]	; (80038fc <ADC_Enable+0x100>)
 800384e:	f7ff f9a1 	bl	8002b94 <LL_ADC_GetCommonPathInternalCh>
 8003852:	4603      	mov	r3, r0
 8003854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00f      	beq.n	800387c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <ADC_Enable+0x104>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	4a28      	ldr	r2, [pc, #160]	; (8003904 <ADC_Enable+0x108>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	3301      	adds	r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800386e:	e002      	b.n	8003876 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	3b01      	subs	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f9      	bne.n	8003870 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7e5b      	ldrb	r3, [r3, #25]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d033      	beq.n	80038ec <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003884:	f7fe f9d8 	bl	8001c38 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800388a:	e028      	b.n	80038de <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fa7b 	bl	8002d8c <LL_ADC_IsEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fa4d 	bl	8002d40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038a6:	f7fe f9c7 	bl	8001c38 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d914      	bls.n	80038de <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d00d      	beq.n	80038de <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e007      	b.n	80038ee <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d1cf      	bne.n	800388c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	80000017 	.word	0x80000017
 80038fc:	40012708 	.word	0x40012708
 8003900:	20000000 	.word	0x20000000
 8003904:	053e2d63 	.word	0x053e2d63

08003908 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fa4b 	bl	8002db0 <LL_ADC_IsDisableOngoing>
 800391a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fa33 	bl	8002d8c <LL_ADC_IsEnabled>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d047      	beq.n	80039bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d144      	bne.n	80039bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0305 	and.w	r3, r3, #5
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10c      	bne.n	800395a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fa0e 	bl	8002d66 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2203      	movs	r2, #3
 8003950:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003952:	f7fe f971 	bl	8001c38 <HAL_GetTick>
 8003956:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003958:	e029      	b.n	80039ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	f043 0210 	orr.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e023      	b.n	80039be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003976:	f7fe f95f 	bl	8001c38 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d914      	bls.n	80039ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e007      	b.n	80039be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1dc      	bne.n	8003976 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <LL_ADC_IsEnabled>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <LL_ADC_IsEnabled+0x18>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_ADC_IsEnabled+0x1a>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <LL_ADC_IsCalibrationOnGoing>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fe:	d101      	bne.n	8003a04 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_ADCEx_Calibration_Start+0x1a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e068      	b.n	8003afc <HAL_ADCEx_Calibration_Start+0xec>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff68 	bl	8003908 <ADC_Disable>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ffc0 	bl	80039c6 <LL_ADC_IsEnabled>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d14c      	bne.n	8003ae6 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a54:	f043 0202 	orr.w	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0203 	bic.w	r2, r2, #3
 8003a76:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a86:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a88:	e014      	b.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003a96:	d30d      	bcc.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f023 0312 	bic.w	r3, r3, #18
 8003aa0:	f043 0210 	orr.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e023      	b.n	8003afc <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff96 	bl	80039ea <LL_ADC_IsCalibrationOnGoing>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e2      	bne.n	8003a8a <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68d9      	ldr	r1, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f023 0303 	bic.w	r3, r3, #3
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae4:	e005      	b.n	8003af2 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4906      	ldr	r1, [pc, #24]	; (8003b9c <__NVIC_EnableIRQ+0x34>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db12      	blt.n	8003bd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	490a      	ldr	r1, [pc, #40]	; (8003be4 <__NVIC_DisableIRQ+0x44>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc6:	3320      	adds	r3, #32
 8003bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bcc:	f3bf 8f4f 	dsb	sy
}
 8003bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bd2:	f3bf 8f6f 	isb	sy
}
 8003bd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  volatile uint32_t PreemptPriorityBits;
  volatile uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2201      	movs	r2, #1
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	1e5a      	subs	r2, r3, #1
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	1e59      	subs	r1, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	4313      	orrs	r3, r2
         );
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff2d 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc0:	f7ff ff44 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	617b      	str	r3, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ffb4 	bl	8003c3c <NVIC_EncodePriority>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff83 	bl	8003be8 <__NVIC_SetPriority>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff35 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff43 	bl	8003ba0 <__NVIC_DisableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e08e      	b.n	8003e54 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_DMA_Init+0x138>)
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d80f      	bhi.n	8003d62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_DMA_Init+0x13c>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <HAL_DMA_Init+0x140>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	009a      	lsls	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_DMA_Init+0x144>)
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_DMA_Init+0x148>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <HAL_DMA_Init+0x140>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	009a      	lsls	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <HAL_DMA_Init+0x14c>)
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fb24 	bl	8004420 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de0:	d102      	bne.n	8003de8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dfe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_DMA_Init+0x106>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d80c      	bhi.n	8003e2a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb4d 	bl	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	e008      	b.n	8003e3c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40020407 	.word	0x40020407
 8003e60:	bffdfff8 	.word	0xbffdfff8
 8003e64:	cccccccd 	.word	0xcccccccd
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	bffdfbf8 	.word	0xbffdfbf8
 8003e70:	40020400 	.word	0x40020400

08003e74 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07b      	b.n	8003f7e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_DMA_DeInit+0x114>)
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d80f      	bhi.n	8003ec2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_DMA_DeInit+0x118>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_DMA_DeInit+0x11c>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	009a      	lsls	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a35      	ldr	r2, [pc, #212]	; (8003f94 <HAL_DMA_DeInit+0x120>)
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8003ec0:	e00e      	b.n	8003ee0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_DMA_DeInit+0x124>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a30      	ldr	r2, [pc, #192]	; (8003f90 <HAL_DMA_DeInit+0x11c>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	009a      	lsls	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <HAL_DMA_DeInit+0x128>)
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f003 021c 	and.w	r2, r3, #28
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa8f 	bl	8004420 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f12:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00f      	beq.n	8003f3c <HAL_DMA_DeInit+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d80b      	bhi.n	8003f3c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fac3 	bl	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40020407 	.word	0x40020407
 8003f8c:	bffdfff8 	.word	0xbffdfff8
 8003f90:	cccccccd 	.word	0xcccccccd
 8003f94:	40020000 	.word	0x40020000
 8003f98:	bffdfbf8 	.word	0xbffdfbf8
 8003f9c:	40020400 	.word	0x40020400

08003fa0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Start_IT+0x20>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e069      	b.n	8004094 <HAL_DMA_Start_IT+0xf4>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d155      	bne.n	8004080 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f9d3 	bl	80043a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 020e 	orr.w	r2, r2, #14
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e00f      	b.n	8004038 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 020a 	orr.w	r2, r2, #10
 8004036:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e008      	b.n	8004092 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2280      	movs	r2, #128	; 0x80
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e04f      	b.n	800414e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d008      	beq.n	80040cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2204      	movs	r2, #4
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e040      	b.n	800414e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020e 	bic.w	r2, r2, #14
 80040da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	f003 021c 	and.w	r2, r3, #28
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004118:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004130:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800413a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d005      	beq.n	800417c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2204      	movs	r2, #4
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e047      	b.n	800420c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 020e 	bic.w	r2, r2, #14
 800418a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 021c 	and.w	r2, r3, #28
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f202 	lsl.w	r2, r1, r2
 80041be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
    }
  }
  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f003 031c 	and.w	r3, r3, #28
 8004238:	2204      	movs	r2, #4
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d027      	beq.n	8004294 <HAL_DMA_IRQHandler+0x7c>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d022      	beq.n	8004294 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	f003 021c 	and.w	r2, r3, #28
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2104      	movs	r1, #4
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8081 	beq.w	800438c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004292:	e07b      	b.n	800438c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f003 031c 	and.w	r3, r3, #28
 800429c:	2202      	movs	r2, #2
 800429e:	409a      	lsls	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d03d      	beq.n	8004324 <HAL_DMA_IRQHandler+0x10c>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d038      	beq.n	8004324 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 020a 	bic.w	r2, r2, #10
 80042ce:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_DMA_IRQHandler+0x180>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d909      	bls.n	80042f8 <HAL_DMA_IRQHandler+0xe0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	f003 031c 	and.w	r3, r3, #28
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_DMA_IRQHandler+0x184>)
 80042ee:	2102      	movs	r1, #2
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	e008      	b.n	800430a <HAL_DMA_IRQHandler+0xf2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 031c 	and.w	r3, r3, #28
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <HAL_DMA_IRQHandler+0x188>)
 8004302:	2102      	movs	r1, #2
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d038      	beq.n	800438c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004322:	e033      	b.n	800438c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	2208      	movs	r2, #8
 800432e:	409a      	lsls	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02a      	beq.n	800438e <HAL_DMA_IRQHandler+0x176>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d025      	beq.n	800438e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 020e 	bic.w	r2, r2, #14
 8004350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f003 021c 	and.w	r2, r3, #28
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800438c:	bf00      	nop
 800438e:	bf00      	nop
}
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40020080 	.word	0x40020080
 800439c:	40020400 	.word	0x40020400
 80043a0:	40020000 	.word	0x40020000

080043a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f003 021c 	and.w	r2, r3, #28
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d108      	bne.n	8004404 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004402:	e007      	b.n	8004414 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr
	...

08004420 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d813      	bhi.n	800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004440:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3b08      	subs	r3, #8
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e011      	b.n	8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004466:	4413      	add	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3b08      	subs	r3, #8
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	3307      	adds	r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004484:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40020407 	.word	0x40020407
 80044a4:	cccccccd 	.word	0xcccccccd
 80044a8:	4002081c 	.word	0x4002081c
 80044ac:	40020880 	.word	0x40020880

080044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b01      	subs	r3, #1
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2201      	movs	r2, #1
 80044e0:	409a      	lsls	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	1000823f 	.word	0x1000823f
 80044f4:	40020940 	.word	0x40020940

080044f8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	460b      	mov	r3, r1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]
      break;
 8004516:	e002      	b.n	800451e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
      break;
 800451c:	bf00      	nop
  }

  return status;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e003      	b.n	8004546 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004544:	2300      	movs	r3, #0
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e140      	b.n	80047e2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2101      	movs	r1, #1
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8132 	beq.w	80047dc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d005      	beq.n	8004590 <HAL_GPIO_Init+0x40>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d130      	bne.n	80045f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c6:	2201      	movs	r2, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0201 	and.w	r2, r3, #1
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d017      	beq.n	800462e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d123      	bne.n	8004682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	08da      	lsrs	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3208      	adds	r2, #8
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 808c 	beq.w	80047dc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80046c4:	4a4e      	ldr	r2, [pc, #312]	; (8004800 <HAL_GPIO_Init+0x2b0>)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	2207      	movs	r2, #7
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ee:	d00d      	beq.n	800470c <HAL_GPIO_Init+0x1bc>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a44      	ldr	r2, [pc, #272]	; (8004804 <HAL_GPIO_Init+0x2b4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <HAL_GPIO_Init+0x1b8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a43      	ldr	r2, [pc, #268]	; (8004808 <HAL_GPIO_Init+0x2b8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_GPIO_Init+0x1b4>
 8004700:	2302      	movs	r3, #2
 8004702:	e004      	b.n	800470e <HAL_GPIO_Init+0x1be>
 8004704:	2307      	movs	r3, #7
 8004706:	e002      	b.n	800470e <HAL_GPIO_Init+0x1be>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_GPIO_Init+0x1be>
 800470c:	2300      	movs	r3, #0
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	f002 0203 	and.w	r2, r2, #3
 8004714:	0092      	lsls	r2, r2, #2
 8004716:	4093      	lsls	r3, r2
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800471e:	4938      	ldr	r1, [pc, #224]	; (8004800 <HAL_GPIO_Init+0x2b0>)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_GPIO_Init+0x2bc>)
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	43db      	mvns	r3, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4013      	ands	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004752:	4a2e      	ldr	r2, [pc, #184]	; (800480c <HAL_GPIO_Init+0x2bc>)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800475a:	4b2c      	ldr	r3, [pc, #176]	; (800480c <HAL_GPIO_Init+0x2bc>)
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004780:	4a22      	ldr	r2, [pc, #136]	; (800480c <HAL_GPIO_Init+0x2bc>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_GPIO_Init+0x2bc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43db      	mvns	r3, r3
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047ac:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_GPIO_Init+0x2bc>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047b2:	4b16      	ldr	r3, [pc, #88]	; (800480c <HAL_GPIO_Init+0x2bc>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047d6:	4a0d      	ldr	r2, [pc, #52]	; (800480c <HAL_GPIO_Init+0x2bc>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	3301      	adds	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f aeb7 	bne.w	8004560 <HAL_GPIO_Init+0x10>
  }
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	48000400 	.word	0x48000400
 8004808:	48000800 	.word	0x48000800
 800480c:	58000800 	.word	0x58000800

08004810 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800481e:	e0af      	b.n	8004980 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004820:	2201      	movs	r2, #1
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a2 	beq.w	800497a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004836:	4a59      	ldr	r2, [pc, #356]	; (800499c <HAL_GPIO_DeInit+0x18c>)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	2207      	movs	r2, #7
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800485e:	d00d      	beq.n	800487c <HAL_GPIO_DeInit+0x6c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a4f      	ldr	r2, [pc, #316]	; (80049a0 <HAL_GPIO_DeInit+0x190>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <HAL_GPIO_DeInit+0x68>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_GPIO_DeInit+0x194>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_GPIO_DeInit+0x64>
 8004870:	2302      	movs	r3, #2
 8004872:	e004      	b.n	800487e <HAL_GPIO_DeInit+0x6e>
 8004874:	2307      	movs	r3, #7
 8004876:	e002      	b.n	800487e <HAL_GPIO_DeInit+0x6e>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_DeInit+0x6e>
 800487c:	2300      	movs	r3, #0
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	429a      	cmp	r2, r3
 800488c:	d136      	bne.n	80048fc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800488e:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 8004890:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	4943      	ldr	r1, [pc, #268]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 800489a:	4013      	ands	r3, r2
 800489c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	493f      	ldr	r1, [pc, #252]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	493b      	ldr	r1, [pc, #236]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048bc:	4013      	ands	r3, r2
 80048be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	4937      	ldr	r1, [pc, #220]	; (80049a8 <HAL_GPIO_DeInit+0x198>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	2207      	movs	r2, #7
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <HAL_GPIO_DeInit+0x18c>)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	3302      	adds	r3, #2
 80048e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	43da      	mvns	r2, r3
 80048ee:	482b      	ldr	r0, [pc, #172]	; (800499c <HAL_GPIO_DeInit+0x18c>)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	400a      	ands	r2, r1
 80048f6:	3302      	adds	r3, #2
 80048f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2103      	movs	r1, #3
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	08d2      	lsrs	r2, r2, #3
 8004930:	4019      	ands	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2103      	movs	r1, #3
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	2101      	movs	r1, #1
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2103      	movs	r1, #3
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]
    }

    position++;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af49 	bne.w	8004820 <HAL_GPIO_DeInit+0x10>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	48000400 	.word	0x48000400
 80049a4:	48000800 	.word	0x48000800
 80049a8:	58000800 	.word	0x58000800

080049ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049bc:	787b      	ldrb	r3, [r7, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049f2:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f005 faa2 	bl	8009f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	58000800 	.word	0x58000800

08004a0c <LL_RCC_SetLPTIMClockSource>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	43db      	mvns	r3, r3
 8004a24:	401a      	ands	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <LL_RCC_GetLPTIMClockSource>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4013      	ands	r3, r2
 8004a52:	0c1a      	lsrs	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4313      	orrs	r3, r2
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <LL_APB1_GRP1_ForceReset>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <LL_APB1_GRP2_ForceReset>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <LL_APB1_GRP1_ReleaseReset>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abc:	4013      	ands	r3, r2
 8004abe:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <LL_APB1_GRP2_ReleaseReset>:
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0b6      	b.n	8004c70 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7fc fe1b 	bl	8001758 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b42:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fac2 	bl	80050dc <LPTIM_WaitForFlag>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d101      	bne.n	8004b62 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e086      	b.n	8004c70 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 faea 	bl	800513c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 faaa 	bl	80050c2 <HAL_LPTIM_GetState>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d101      	bne.n	8004b78 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e07b      	b.n	8004c70 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d004      	beq.n	8004b92 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b90:	d103      	bne.n	8004b9a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f023 031e 	bic.w	r3, r3, #30
 8004b98:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d005      	beq.n	8004bb2 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004bac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <HAL_LPTIM_Init+0x188>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bc2:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004bc8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004bce:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004bd4:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bec:	4313      	orrs	r3, r2
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d004      	beq.n	8004c06 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c04:	d107      	bne.n	8004c16 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00a      	beq.n	8004c38 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c2a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004c30:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0d      	ldr	r2, [pc, #52]	; (8004c7c <HAL_LPTIM_Init+0x18c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	621a      	str	r2, [r3, #32]
 8004c5a:	e004      	b.n	8004c66 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c64:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	ff19f1fe 	.word	0xff19f1fe
 8004c7c:	40007c00 	.word	0x40007c00

08004c80 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a48      	ldr	r2, [pc, #288]	; (8004db8 <HAL_LPTIM_Counter_Start_IT+0x138>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <HAL_LPTIM_Counter_Start_IT+0x2e>
 8004c9c:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca2:	4a46      	ldr	r2, [pc, #280]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004ca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cac:	e015      	b.n	8004cda <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a43      	ldr	r2, [pc, #268]	; (8004dc0 <HAL_LPTIM_Counter_Start_IT+0x140>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <HAL_LPTIM_Counter_Start_IT+0x4a>
 8004cb8:	4b40      	ldr	r3, [pc, #256]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbe:	4a3f      	ldr	r2, [pc, #252]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cc8:	e007      	b.n	8004cda <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004cca:	4b3c      	ldr	r3, [pc, #240]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	; (8004dbc <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d00c      	beq.n	8004cfc <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cea:	d107      	bne.n	8004cfc <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004cfa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2210      	movs	r2, #16
 8004d12:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9dc 	bl	80050dc <LPTIM_WaitForFlag>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d101      	bne.n	8004d2e <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e03f      	b.n	8004dae <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa04 	bl	800513c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9c4 	bl	80050c2 <HAL_LPTIM_GetState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d101      	bne.n	8004d44 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e034      	b.n	8004dae <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0210 	orr.w	r2, r2, #16
 8004d52:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0202 	orr.w	r2, r2, #2
 8004d62:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d72:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d82:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0204 	orr.w	r2, r2, #4
 8004da2:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40007c00 	.word	0x40007c00
 8004dbc:	58000800 	.word	0x58000800
 8004dc0:	40009400 	.word	0x40009400

08004dc4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004de6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dee:	e015      	b.n	8004e1c <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <HAL_LPTIM_Counter_Stop_IT+0x48>
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e0a:	e007      	b.n	8004e1c <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f98d 	bl	800513c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f94d 	bl	80050c2 <HAL_LPTIM_GetState>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d101      	bne.n	8004e32 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e024      	b.n	8004e7c <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0210 	bic.w	r2, r2, #16
 8004e40:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0202 	bic.w	r2, r2, #2
 8004e50:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e70:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40007c00 	.word	0x40007c00
 8004e88:	58000800 	.word	0x58000800
 8004e8c:	40009400 	.word	0x40009400

08004e90 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d106      	bne.n	8004ec2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8af 	bl	8005020 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d10d      	bne.n	8004eec <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d106      	bne.n	8004eec <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8a3 	bl	8005032 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d10d      	bne.n	8004f16 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d106      	bne.n	8004f16 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f897 	bl	8005044 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10d      	bne.n	8004f40 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d106      	bne.n	8004f40 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2208      	movs	r2, #8
 8004f38:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f88b 	bl	8005056 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d10d      	bne.n	8004f6a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d106      	bne.n	8004f6a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2210      	movs	r2, #16
 8004f62:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f87f 	bl	8005068 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d10d      	bne.n	8004f94 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d106      	bne.n	8004f94 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f873 	bl	800507a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d10d      	bne.n	8004fbe <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d106      	bne.n	8004fbe <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f867 	bl	800508c <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d10d      	bne.n	8004fe8 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d106      	bne.n	8004fe8 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f85b 	bl	800509e <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d10f      	bne.n	8005018 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d107      	bne.n	8005018 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005010:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f84c 	bl	80050b0 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr

080050c2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050d0:	b2db      	uxtb	r3, r3
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <LPTIM_WaitForFlag+0x58>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a12      	ldr	r2, [pc, #72]	; (8005138 <LPTIM_WaitForFlag+0x5c>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	0b9b      	lsrs	r3, r3, #14
 80050f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3b01      	subs	r3, #1
 8005104:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	4013      	ands	r3, r2
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d002      	beq.n	8005126 <LPTIM_WaitForFlag+0x4a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ec      	bne.n	8005100 <LPTIM_WaitForFlag+0x24>

  return result;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000
 8005138:	d1b71759 	.word	0xd1b71759

0800513c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005148:	b672      	cpsid	i
}
 800514a:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a8d      	ldr	r2, [pc, #564]	; (8005388 <LPTIM_Disable+0x24c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d015      	beq.n	8005182 <LPTIM_Disable+0x46>
 8005156:	4a8c      	ldr	r2, [pc, #560]	; (8005388 <LPTIM_Disable+0x24c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d818      	bhi.n	800518e <LPTIM_Disable+0x52>
 800515c:	4a8b      	ldr	r2, [pc, #556]	; (800538c <LPTIM_Disable+0x250>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <LPTIM_Disable+0x2e>
 8005162:	4a8b      	ldr	r2, [pc, #556]	; (8005390 <LPTIM_Disable+0x254>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d006      	beq.n	8005176 <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8005168:	e011      	b.n	800518e <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800516a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800516e:	f7ff fc66 	bl	8004a3e <LL_RCC_GetLPTIMClockSource>
 8005172:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005174:	e00c      	b.n	8005190 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005176:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800517a:	f7ff fc60 	bl	8004a3e <LL_RCC_GetLPTIMClockSource>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005180:	e006      	b.n	8005190 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005182:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005186:	f7ff fc5a 	bl	8004a3e <LL_RCC_GetLPTIMClockSource>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800518c:	e000      	b.n	8005190 <LPTIM_Disable+0x54>
      break;
 800518e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a70      	ldr	r2, [pc, #448]	; (8005388 <LPTIM_Disable+0x24c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d019      	beq.n	80051fe <LPTIM_Disable+0xc2>
 80051ca:	4a6f      	ldr	r2, [pc, #444]	; (8005388 <LPTIM_Disable+0x24c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d81d      	bhi.n	800520c <LPTIM_Disable+0xd0>
 80051d0:	4a6e      	ldr	r2, [pc, #440]	; (800538c <LPTIM_Disable+0x250>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <LPTIM_Disable+0xa2>
 80051d6:	4a6e      	ldr	r2, [pc, #440]	; (8005390 <LPTIM_Disable+0x254>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 80051dc:	e016      	b.n	800520c <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80051de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051e2:	f7ff fc3e 	bl	8004a62 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80051e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80051ea:	f7ff fc5c 	bl	8004aa6 <LL_APB1_GRP1_ReleaseReset>
      break;
 80051ee:	e00e      	b.n	800520e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80051f0:	2020      	movs	r0, #32
 80051f2:	f7ff fc47 	bl	8004a84 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80051f6:	2020      	movs	r0, #32
 80051f8:	f7ff fc67 	bl	8004aca <LL_APB1_GRP2_ReleaseReset>
      break;
 80051fc:	e007      	b.n	800520e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80051fe:	2040      	movs	r0, #64	; 0x40
 8005200:	f7ff fc40 	bl	8004a84 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005204:	2040      	movs	r0, #64	; 0x40
 8005206:	f7ff fc60 	bl	8004aca <LL_APB1_GRP2_ReleaseReset>
      break;
 800520a:	e000      	b.n	800520e <LPTIM_Disable+0xd2>
      break;
 800520c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <LPTIM_Disable+0xe6>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <LPTIM_Disable+0xe6>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8096 	beq.w	800534e <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a58      	ldr	r2, [pc, #352]	; (8005388 <LPTIM_Disable+0x24c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <LPTIM_Disable+0x118>
 800522c:	4a56      	ldr	r2, [pc, #344]	; (8005388 <LPTIM_Disable+0x24c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d815      	bhi.n	800525e <LPTIM_Disable+0x122>
 8005232:	4a56      	ldr	r2, [pc, #344]	; (800538c <LPTIM_Disable+0x250>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <LPTIM_Disable+0x104>
 8005238:	4a55      	ldr	r2, [pc, #340]	; (8005390 <LPTIM_Disable+0x254>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d005      	beq.n	800524a <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 800523e:	e00e      	b.n	800525e <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005240:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005244:	f7ff fbe2 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 8005248:	e00a      	b.n	8005260 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800524a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800524e:	f7ff fbdd 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 8005252:	e005      	b.n	8005260 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8005254:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005258:	f7ff fbd8 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 800525c:	e000      	b.n	8005260 <LPTIM_Disable+0x124>
        break;
 800525e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01a      	beq.n	800529c <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800527e:	2108      	movs	r1, #8
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff2b 	bl	80050dc <LPTIM_WaitForFlag>
 8005286:	4603      	mov	r3, r0
 8005288:	2b03      	cmp	r3, #3
 800528a:	d103      	bne.n	8005294 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2203      	movs	r2, #3
 8005290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2208      	movs	r2, #8
 800529a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80052ba:	2110      	movs	r1, #16
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff0d 	bl	80050dc <LPTIM_WaitForFlag>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d103      	bne.n	80052d0 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2203      	movs	r2, #3
 80052cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2210      	movs	r2, #16
 80052d6:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01c      	beq.n	8005318 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80052f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff feee 	bl	80050dc <LPTIM_WaitForFlag>
 8005300:	4603      	mov	r3, r0
 8005302:	2b03      	cmp	r3, #3
 8005304:	d103      	bne.n	800530e <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2203      	movs	r2, #3
 800530a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005316:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <LPTIM_Disable+0x24c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d011      	beq.n	8005346 <LPTIM_Disable+0x20a>
 8005322:	4a19      	ldr	r2, [pc, #100]	; (8005388 <LPTIM_Disable+0x24c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d814      	bhi.n	8005352 <LPTIM_Disable+0x216>
 8005328:	4a18      	ldr	r2, [pc, #96]	; (800538c <LPTIM_Disable+0x250>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <LPTIM_Disable+0x1fa>
 800532e:	4a18      	ldr	r2, [pc, #96]	; (8005390 <LPTIM_Disable+0x254>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8005334:	e00d      	b.n	8005352 <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005338:	f7ff fb68 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 800533c:	e00a      	b.n	8005354 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800533e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005340:	f7ff fb64 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 8005344:	e006      	b.n	8005354 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8005346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005348:	f7ff fb60 	bl	8004a0c <LL_RCC_SetLPTIMClockSource>
        break;
 800534c:	e002      	b.n	8005354 <LPTIM_Disable+0x218>
    }
  }
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <LPTIM_Disable+0x218>
        break;
 8005352:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 800537c:	b662      	cpsie	i
}
 800537e:	bf00      	nop

  __enable_irq();
}
 8005380:	bf00      	nop
 8005382:	3728      	adds	r7, #40	; 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40009800 	.word	0x40009800
 800538c:	40007c00 	.word	0x40007c00
 8005390:	40009400 	.word	0x40009400

08005394 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a03      	ldr	r2, [pc, #12]	; (80053ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	58000400 	.word	0x58000400

080053b0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_PWR_EnterSLEEPMode+0x60>)
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ce:	d10d      	bne.n	80053ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80053d0:	f000 f83c 	bl	800544c <HAL_PWREx_DisableLowPowerRunMode>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80053da:	e015      	b.n	8005408 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <HAL_PWR_EnterSLEEPMode+0x60>)
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80053e8:	f000 f822 	bl	8005430 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_PWR_EnterSLEEPMode+0x64>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <HAL_PWR_EnterSLEEPMode+0x64>)
 80053f2:	f023 0304 	bic.w	r3, r3, #4
 80053f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80053fe:	bf30      	wfi
 8005400:	e002      	b.n	8005408 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005402:	bf40      	sev
    __WFE();
 8005404:	bf20      	wfe
    __WFE();
 8005406:	bf20      	wfe
  }
}
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	58000400 	.word	0x58000400
 8005414:	e000ed00 	.word	0xe000ed00

08005418 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_PWREx_GetVoltageRange+0x14>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005424:	4618      	mov	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	58000400 	.word	0x58000400

08005430 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a03      	ldr	r2, [pc, #12]	; (8005448 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800543a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	58000400 	.word	0x58000400

0800544c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005452:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800545c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2232      	movs	r2, #50	; 0x32
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0c9b      	lsrs	r3, r3, #18
 8005470:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005472:	e002      	b.n	800547a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005486:	d102      	bne.n	800548e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f2      	bne.n	8005474 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800549a:	d101      	bne.n	80054a0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e000      	b.n	80054a2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	58000400 	.word	0x58000400
 80054b0:	20000000 	.word	0x20000000
 80054b4:	431bde83 	.word	0x431bde83

080054b8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80054c2:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4a0c      	ldr	r2, [pc, #48]	; (8005508 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80054e4:	bf30      	wfi
 80054e6:	e002      	b.n	80054ee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054e8:	bf40      	sev
    __WFE();
 80054ea:	bf20      	wfe
    __WFE();
 80054ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	6113      	str	r3, [r2, #16]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	58000400 	.word	0x58000400
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <LL_PWR_IsEnabledBkUpAccess>:
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551c:	d101      	bne.n	8005522 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	58000400 	.word	0x58000400

08005530 <LL_RCC_HSE_EnableTcxo>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800553e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <LL_RCC_HSE_DisableTcxo>:
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800555a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555e:	6013      	str	r3, [r2, #0]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557a:	d101      	bne.n	8005580 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <LL_RCC_HSE_Enable>:
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <LL_RCC_HSE_Disable>:
{
 80055a6:	b480      	push	{r7}
 80055a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <LL_RCC_HSE_IsReady>:
{
 80055c2:	b480      	push	{r7}
 80055c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d4:	d101      	bne.n	80055da <LL_RCC_HSE_IsReady+0x18>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <LL_RCC_HSE_IsReady+0x1a>
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <LL_RCC_HSI_Enable>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f6:	6013      	str	r3, [r2, #0]
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <LL_RCC_HSI_Disable>:
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800560e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <LL_RCC_HSI_IsReady>:
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d101      	bne.n	8005634 <LL_RCC_HSI_IsReady+0x18>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <LL_RCC_HSI_IsReady+0x1a>
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <LL_RCC_HSI_SetCalibTrimming>:
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <LL_RCC_LSE_IsReady>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d101      	bne.n	800567e <LL_RCC_LSE_IsReady+0x18>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <LL_RCC_LSE_IsReady+0x1a>
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <LL_RCC_LSI_Enable>:
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_LSI_Disable>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <LL_RCC_LSI_IsReady>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d101      	bne.n	80056e0 <LL_RCC_LSI_IsReady+0x18>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <LL_RCC_LSI_IsReady+0x1a>
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <LL_RCC_MSI_Enable>:
{
 80056ea:	b480      	push	{r7}
 80056ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <LL_RCC_MSI_Disable>:
{
 8005706:	b480      	push	{r7}
 8005708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	6013      	str	r3, [r2, #0]
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <LL_RCC_MSI_IsReady>:
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b02      	cmp	r3, #2
 8005732:	d101      	bne.n	8005738 <LL_RCC_MSI_IsReady+0x16>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <LL_RCC_MSI_IsReady+0x18>
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr

08005742 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b08      	cmp	r3, #8
 8005752:	d101      	bne.n	8005758 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <LL_RCC_MSI_GetRange>:
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005784:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <LL_RCC_SetSysClkSource>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 0203 	bic.w	r2, r3, #3
 80057ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <LL_RCC_GetSysClkSource>:
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_SetAHBPrescaler>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <LL_RCC_SetAHB3Prescaler>:
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005826:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800582a:	f023 020f 	bic.w	r2, r3, #15
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <LL_RCC_SetAPB1Prescaler>:
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <LL_RCC_SetAPB2Prescaler>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800587e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4313      	orrs	r3, r2
 8005886:	608b      	str	r3, [r1, #8]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <LL_RCC_GetAHBPrescaler>:
{
 8005892:	b480      	push	{r7}
 8005894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <LL_RCC_GetAHB3Prescaler>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <LL_RCC_GetAPB1Prescaler>:
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <LL_RCC_GetAPB2Prescaler>:
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005900:	6013      	str	r3, [r2, #0]
}
 8005902:	bf00      	nop
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591c:	6013      	str	r3, [r2, #0]
}
 800591e:	bf00      	nop
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005926:	b480      	push	{r7}
 8005928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005938:	d101      	bne.n	800593e <LL_RCC_PLL_IsReady+0x18>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <LL_RCC_PLL_IsReady+0x1a>
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800597a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0303 	and.w	r3, r3, #3
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80059a2:	b480      	push	{r7}
 80059a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d101      	bne.n	80059ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d8:	d101      	bne.n	80059de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059fa:	d101      	bne.n	8005a00 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a1c:	d101      	bne.n	8005a22 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e38b      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	f7ff fece 	bl	80057de <LL_RCC_GetSysClkSource>
 8005a42:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a44:	f7ff ffa2 	bl	800598c <LL_RCC_PLL_GetMainSource>
 8005a48:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80c9 	beq.w	8005bea <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x3e>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d17b      	bne.n	8005b5c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d178      	bne.n	8005b5c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a6a:	f7ff fe5a 	bl	8005722 <LL_RCC_MSI_IsReady>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x54>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e36a      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_RCC_OscConfig+0x72>
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a9c:	e006      	b.n	8005aac <HAL_RCC_OscConfig+0x80>
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d222      	bcs.n	8005af6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fd51 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e348      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ace:	f043 0308 	orr.w	r3, r3, #8
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fe4e 	bl	8005790 <LL_RCC_MSI_SetCalibTrimming>
 8005af4:	e021      	b.n	8005b3a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b00:	f043 0308 	orr.w	r3, r3, #8
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fe35 	bl	8005790 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd16 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e30d      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b3a:	f000 fcd7 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4aa1      	ldr	r2, [pc, #644]	; (8005dc8 <HAL_RCC_OscConfig+0x39c>)
 8005b42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b44:	4ba1      	ldr	r3, [pc, #644]	; (8005dcc <HAL_RCC_OscConfig+0x3a0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fc f86b 	bl	8001c24 <HAL_InitTick>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d047      	beq.n	8005be8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
 8005b5a:	e2fc      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02c      	beq.n	8005bbe <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b64:	f7ff fdc1 	bl	80056ea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b68:	f7fc f866 	bl	8001c38 <HAL_GetTick>
 8005b6c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b70:	f7fc f862 	bl	8001c38 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e2e9      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b82:	f7ff fdce 	bl	8005722 <LL_RCC_MSI_IsReady>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f1      	beq.n	8005b70 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b96:	f043 0308 	orr.w	r3, r3, #8
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fdea 	bl	8005790 <LL_RCC_MSI_SetCalibTrimming>
 8005bbc:	e015      	b.n	8005bea <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005bbe:	f7ff fda2 	bl	8005706 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bc2:	f7fc f839 	bl	8001c38 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bca:	f7fc f835 	bl	8001c38 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e2bc      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bdc:	f7ff fda1 	bl	8005722 <LL_RCC_MSI_IsReady>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f1      	bne.n	8005bca <HAL_RCC_OscConfig+0x19e>
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005be8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d05f      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_OscConfig+0x1dc>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d10d      	bne.n	8005c1e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d10a      	bne.n	8005c1e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	f7ff fcdb 	bl	80055c2 <LL_RCC_HSE_IsReady>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d050      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x288>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d14c      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e29b      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d102      	bne.n	8005c44 <HAL_RCC_OscConfig+0x218>
 8005c3e:	f7ff fca4 	bl	800558a <LL_RCC_HSE_Enable>
 8005c42:	e00d      	b.n	8005c60 <HAL_RCC_OscConfig+0x234>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005c4c:	d104      	bne.n	8005c58 <HAL_RCC_OscConfig+0x22c>
 8005c4e:	f7ff fc6f 	bl	8005530 <LL_RCC_HSE_EnableTcxo>
 8005c52:	f7ff fc9a 	bl	800558a <LL_RCC_HSE_Enable>
 8005c56:	e003      	b.n	8005c60 <HAL_RCC_OscConfig+0x234>
 8005c58:	f7ff fca5 	bl	80055a6 <LL_RCC_HSE_Disable>
 8005c5c:	f7ff fc76 	bl	800554c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d012      	beq.n	8005c8e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fb ffe6 	bl	8001c38 <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fb ffe2 	bl	8001c38 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	; 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e269      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c82:	f7ff fc9e 	bl	80055c2 <LL_RCC_HSE_IsReady>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f1      	beq.n	8005c70 <HAL_RCC_OscConfig+0x244>
 8005c8c:	e013      	b.n	8005cb6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8e:	f7fb ffd3 	bl	8001c38 <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c96:	f7fb ffcf 	bl	8001c38 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b64      	cmp	r3, #100	; 0x64
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e256      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005ca8:	f7ff fc8b 	bl	80055c2 <LL_RCC_HSE_IsReady>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f1      	bne.n	8005c96 <HAL_RCC_OscConfig+0x26a>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04b      	beq.n	8005d5a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x2a8>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b0c      	cmp	r3, #12
 8005ccc:	d113      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d110      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd4:	f7ff fca2 	bl	800561c <LL_RCC_HSI_IsReady>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x2be>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e235      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fca5 	bl	800563e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf4:	e031      	b.n	8005d5a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cfe:	f7ff fc71 	bl	80055e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d02:	f7fb ff99 	bl	8001c38 <HAL_GetTick>
 8005d06:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d0a:	f7fb ff95 	bl	8001c38 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e21c      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005d1c:	f7ff fc7e 	bl	800561c <LL_RCC_HSI_IsReady>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f1      	beq.n	8005d0a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fc87 	bl	800563e <LL_RCC_HSI_SetCalibTrimming>
 8005d30:	e013      	b.n	8005d5a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d32:	f7ff fc65 	bl	8005600 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fb ff7f 	bl	8001c38 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3e:	f7fb ff7b 	bl	8001c38 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e202      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005d50:	f7ff fc64 	bl	800561c <LL_RCC_HSI_IsReady>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f1      	bne.n	8005d3e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d06f      	beq.n	8005e46 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d057      	beq.n	8005e1e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d76:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d036      	beq.n	8005df4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e1db      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d018      	beq.n	8005dda <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005da8:	f7ff fc7e 	bl	80056a8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dac:	f7fb ff44 	bl	8001c38 <HAL_GetTick>
 8005db0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005db2:	e00d      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db4:	f7fb ff40 	bl	8001c38 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b11      	cmp	r3, #17
 8005dc0:	d906      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e1c7      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
 8005dc6:	bf00      	nop
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8005dd0:	f7ff fc7a 	bl	80056c8 <LL_RCC_LSI_IsReady>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1ec      	bne.n	8005db4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de2:	f023 0210 	bic.w	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005df4:	f7ff fc48 	bl	8005688 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fb ff1e 	bl	8001c38 <HAL_GetTick>
 8005dfc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e00:	f7fb ff1a 	bl	8001c38 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b11      	cmp	r3, #17
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e1a1      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005e12:	f7ff fc59 	bl	80056c8 <LL_RCC_LSI_IsReady>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f1      	beq.n	8005e00 <HAL_RCC_OscConfig+0x3d4>
 8005e1c:	e013      	b.n	8005e46 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e1e:	f7ff fc43 	bl	80056a8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fb ff09 	bl	8001c38 <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fb ff05 	bl	8001c38 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b11      	cmp	r3, #17
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e18c      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005e3c:	f7ff fc44 	bl	80056c8 <LL_RCC_LSI_IsReady>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f1      	bne.n	8005e2a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80d8 	beq.w	8006004 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005e54:	f7ff fb5a 	bl	800550c <LL_PWR_IsEnabledBkUpAccess>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d113      	bne.n	8005e86 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e5e:	f7ff fa99 	bl	8005394 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e62:	f7fb fee9 	bl	8001c38 <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6a:	f7fb fee5 	bl	8001c38 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e16c      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005e7c:	f7ff fb46 	bl	800550c <LL_PWR_IsEnabledBkUpAccess>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f1      	beq.n	8005e6a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d07b      	beq.n	8005f86 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b85      	cmp	r3, #133	; 0x85
 8005e94:	d003      	beq.n	8005e9e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eaa:	f043 0304 	orr.w	r3, r3, #4
 8005eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb2:	f7fb fec1 	bl	8001c38 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fb feb3 	bl	8001c38 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e138      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ee4:	f7ff fbbf 	bl	8005666 <LL_RCC_LSE_IsReady>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0ef      	beq.n	8005ece <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	2b81      	cmp	r3, #129	; 0x81
 8005ef4:	d003      	beq.n	8005efe <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	2b85      	cmp	r3, #133	; 0x85
 8005efc:	d121      	bne.n	8005f42 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efe:	f7fb fe9b 	bl	8001c38 <HAL_GetTick>
 8005f02:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1a:	f7fb fe8d 	bl	8001c38 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e112      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ec      	beq.n	8005f1a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005f40:	e060      	b.n	8006004 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fb fe79 	bl	8001c38 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fb fe6b 	bl	8001c38 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e0f0      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1ec      	bne.n	8005f5e <HAL_RCC_OscConfig+0x532>
 8005f84:	e03e      	b.n	8006004 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f86:	f7fb fe57 	bl	8001c38 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa2:	f7fb fe49 	bl	8001c38 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0ce      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ec      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fb fe36 	bl	8001c38 <HAL_GetTick>
 8005fcc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fb fe28 	bl	8001c38 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0ad      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005ffa:	f7ff fb34 	bl	8005666 <LL_RCC_LSE_IsReady>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ef      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80a3 	beq.w	8006154 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d076      	beq.n	8006102 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	2b02      	cmp	r3, #2
 800601a:	d14b      	bne.n	80060b4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601c:	f7ff fc75 	bl	800590a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fb fe0a 	bl	8001c38 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006028:	f7fb fe06 	bl	8001c38 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b0a      	cmp	r3, #10
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e08d      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800603a:	f7ff fc74 	bl	8005926 <LL_RCC_PLL_IsReady>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f1      	bne.n	8006028 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	4b45      	ldr	r3, [pc, #276]	; (8006160 <HAL_RCC_OscConfig+0x734>)
 800604c:	4013      	ands	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006056:	4311      	orrs	r1, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800605c:	0212      	lsls	r2, r2, #8
 800605e:	4311      	orrs	r1, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006064:	4311      	orrs	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800606a:	4311      	orrs	r1, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006070:	430a      	orrs	r2, r1
 8006072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006076:	4313      	orrs	r3, r2
 8006078:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800607a:	f7ff fc38 	bl	80058ee <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fb fdd3 	bl	8001c38 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006096:	f7fb fdcf 	bl	8001c38 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b0a      	cmp	r3, #10
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e056      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80060a8:	f7ff fc3d 	bl	8005926 <LL_RCC_PLL_IsReady>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f1      	beq.n	8006096 <HAL_RCC_OscConfig+0x66a>
 80060b2:	e04f      	b.n	8006154 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b4:	f7ff fc29 	bl	800590a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060da:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fdac 	bl	8001c38 <HAL_GetTick>
 80060e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fb fda8 	bl	8001c38 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b0a      	cmp	r3, #10
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e02f      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80060f6:	f7ff fc16 	bl	8005926 <LL_RCC_PLL_IsReady>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f1      	bne.n	80060e4 <HAL_RCC_OscConfig+0x6b8>
 8006100:	e028      	b.n	8006154 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e023      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f003 0203 	and.w	r2, r3, #3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	429a      	cmp	r2, r3
 8006122:	d115      	bne.n	8006150 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	429a      	cmp	r2, r3
 8006130:	d10e      	bne.n	8006150 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	429a      	cmp	r2, r3
 8006140:	d106      	bne.n	8006150 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	11c1808c 	.word	0x11c1808c

08006164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e10f      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006178:	4b89      	ldr	r3, [pc, #548]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d91b      	bls.n	80061be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b86      	ldr	r3, [pc, #536]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	4984      	ldr	r1, [pc, #528]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006196:	f7fb fd4f 	bl	8001c38 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800619e:	f7fb fd4b 	bl	8001c38 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0f3      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b0:	4b7b      	ldr	r3, [pc, #492]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d1ef      	bne.n	800619e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fb10 	bl	80057f4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061d4:	f7fb fd30 	bl	8001c38 <HAL_GetTick>
 80061d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061dc:	f7fb fd2c 	bl	8001c38 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0d4      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80061ee:	f7ff fbd8 	bl	80059a2 <LL_RCC_IsActiveFlag_HPRE>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f1      	beq.n	80061dc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d016      	beq.n	8006232 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fb06 	bl	800581a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800620e:	f7fb fd13 	bl	8001c38 <HAL_GetTick>
 8006212:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006216:	f7fb fd0f 	bl	8001c38 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e0b7      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006228:	f7ff fbcc 	bl	80059c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f1      	beq.n	8006216 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff faff 	bl	8005846 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006248:	f7fb fcf6 	bl	8001c38 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006250:	f7fb fcf2 	bl	8001c38 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e09a      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006262:	f7ff fbc1 	bl	80059e8 <LL_RCC_IsActiveFlag_PPRE1>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f1      	beq.n	8006250 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff faf4 	bl	800586c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006284:	f7fb fcd8 	bl	8001c38 <HAL_GetTick>
 8006288:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800628c:	f7fb fcd4 	bl	8001c38 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e07c      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800629e:	f7ff fbb4 	bl	8005a0a <LL_RCC_IsActiveFlag_PPRE2>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f1      	beq.n	800628c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d043      	beq.n	800633c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d106      	bne.n	80062ca <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80062bc:	f7ff f981 	bl	80055c2 <LL_RCC_HSE_IsReady>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d11e      	bne.n	8006304 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e066      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d106      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80062d2:	f7ff fb28 	bl	8005926 <LL_RCC_PLL_IsReady>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d113      	bne.n	8006304 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e05b      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80062e8:	f7ff fa1b 	bl	8005722 <LL_RCC_MSI_IsReady>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d108      	bne.n	8006304 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e050      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80062f6:	f7ff f991 	bl	800561c <LL_RCC_HSI_IsReady>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e049      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fa55 	bl	80057b8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fb fc93 	bl	8001c38 <HAL_GetTick>
 8006312:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006314:	e00a      	b.n	800632c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006316:	f7fb fc8f 	bl	8001c38 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	; 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e035      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632c:	f7ff fa57 	bl	80057de <LL_RCC_GetSysClkSource>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	429a      	cmp	r2, r3
 800633a:	d1ec      	bne.n	8006316 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d21b      	bcs.n	8006382 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 0207 	bic.w	r2, r3, #7
 8006352:	4913      	ldr	r1, [pc, #76]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635a:	f7fb fc6d 	bl	8001c38 <HAL_GetTick>
 800635e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006360:	e008      	b.n	8006374 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006362:	f7fb fc69 	bl	8001c38 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e011      	b.n	8006398 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x23c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d1ef      	bne.n	8006362 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006382:	f000 f8b3 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8006386:	4603      	mov	r3, r0
 8006388:	4a06      	ldr	r2, [pc, #24]	; (80063a4 <HAL_RCC_ClockConfig+0x240>)
 800638a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <HAL_RCC_ClockConfig+0x244>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f7fb fc47 	bl	8001c24 <HAL_InitTick>
 8006396:	4603      	mov	r3, r0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	58004000 	.word	0x58004000
 80063a4:	20000000 	.word	0x20000000
 80063a8:	20000014 	.word	0x20000014

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ba:	f7ff fa10 	bl	80057de <LL_RCC_GetSysClkSource>
 80063be:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	f7ff fae4 	bl	800598c <LL_RCC_PLL_GetMainSource>
 80063c4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d139      	bne.n	8006446 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d136      	bne.n	8006446 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80063d8:	f7ff f9b3 	bl	8005742 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d115      	bne.n	800640e <HAL_RCC_GetSysClockFreq+0x62>
 80063e2:	f7ff f9ae 	bl	8005742 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d106      	bne.n	80063fa <HAL_RCC_GetSysClockFreq+0x4e>
 80063ec:	f7ff f9b9 	bl	8005762 <LL_RCC_MSI_GetRange>
 80063f0:	4603      	mov	r3, r0
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	e005      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x5a>
 80063fa:	f7ff f9bd 	bl	8005778 <LL_RCC_MSI_GetRangeAfterStandby>
 80063fe:	4603      	mov	r3, r0
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	4a36      	ldr	r2, [pc, #216]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	e014      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x8c>
 800640e:	f7ff f998 	bl	8005742 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d106      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x7a>
 8006418:	f7ff f9a3 	bl	8005762 <LL_RCC_MSI_GetRange>
 800641c:	4603      	mov	r3, r0
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	e005      	b.n	8006432 <HAL_RCC_GetSysClockFreq+0x86>
 8006426:	f7ff f9a7 	bl	8005778 <LL_RCC_MSI_GetRangeAfterStandby>
 800642a:	4603      	mov	r3, r0
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	4a2b      	ldr	r2, [pc, #172]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d115      	bne.n	800646c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006444:	e012      	b.n	800646c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b04      	cmp	r3, #4
 800644a:	d102      	bne.n	8006452 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800644c:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e00c      	b.n	800646c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d109      	bne.n	800646c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006458:	f7ff f886 	bl	8005568 <LL_RCC_HSE_IsEnabledDiv2>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d102      	bne.n	8006468 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e001      	b.n	800646c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006468:	4b1f      	ldr	r3, [pc, #124]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800646a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800646c:	f7ff f9b7 	bl	80057de <LL_RCC_GetSysClkSource>
 8006470:	4603      	mov	r3, r0
 8006472:	2b0c      	cmp	r3, #12
 8006474:	d12f      	bne.n	80064d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006476:	f7ff fa89 	bl	800598c <LL_RCC_PLL_GetMainSource>
 800647a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d003      	beq.n	800648a <HAL_RCC_GetSysClockFreq+0xde>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d003      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0xe4>
 8006488:	e00d      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800648a:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800648c:	60fb      	str	r3, [r7, #12]
        break;
 800648e:	e00d      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006490:	f7ff f86a 	bl	8005568 <LL_RCC_HSE_IsEnabledDiv2>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d102      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800649c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800649e:	e005      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80064a2:	60fb      	str	r3, [r7, #12]
        break;
 80064a4:	e002      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	60fb      	str	r3, [r7, #12]
        break;
 80064aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80064ac:	f7ff fa4c 	bl	8005948 <LL_RCC_PLL_GetN>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	fb03 f402 	mul.w	r4, r3, r2
 80064b8:	f7ff fa5d 	bl	8005976 <LL_RCC_PLL_GetDivider>
 80064bc:	4603      	mov	r3, r0
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	3301      	adds	r3, #1
 80064c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80064c6:	f7ff fa4b 	bl	8005960 <LL_RCC_PLL_GetR>
 80064ca:	4603      	mov	r3, r0
 80064cc:	0f5b      	lsrs	r3, r3, #29
 80064ce:	3301      	adds	r3, #1
 80064d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80064d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80064d6:	697b      	ldr	r3, [r7, #20]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	0801e230 	.word	0x0801e230
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	01e84800 	.word	0x01e84800

080064ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ec:	b598      	push	{r3, r4, r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064f0:	f7ff ff5c 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 80064f4:	4604      	mov	r4, r0
 80064f6:	f7ff f9cc 	bl	8005892 <LL_RCC_GetAHBPrescaler>
 80064fa:	4603      	mov	r3, r0
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	4a03      	ldr	r2, [pc, #12]	; (8006510 <HAL_RCC_GetHCLKFreq+0x24>)
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd98      	pop	{r3, r4, r7, pc}
 8006510:	0801e1d0 	.word	0x0801e1d0

08006514 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006514:	b598      	push	{r3, r4, r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006518:	f7ff ffe8 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 800651c:	4604      	mov	r4, r0
 800651e:	f7ff f9d0 	bl	80058c2 <LL_RCC_GetAPB1Prescaler>
 8006522:	4603      	mov	r3, r0
 8006524:	0a1b      	lsrs	r3, r3, #8
 8006526:	4a03      	ldr	r2, [pc, #12]	; (8006534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	bd98      	pop	{r3, r4, r7, pc}
 8006534:	0801e210 	.word	0x0801e210

08006538 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006538:	b598      	push	{r3, r4, r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800653c:	f7ff ffd6 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8006540:	4604      	mov	r4, r0
 8006542:	f7ff f9c9 	bl	80058d8 <LL_RCC_GetAPB2Prescaler>
 8006546:	4603      	mov	r3, r0
 8006548:	0adb      	lsrs	r3, r3, #11
 800654a:	4a03      	ldr	r2, [pc, #12]	; (8006558 <HAL_RCC_GetPCLK2Freq+0x20>)
 800654c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006550:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd98      	pop	{r3, r4, r7, pc}
 8006558:	0801e210 	.word	0x0801e210

0800655c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800656e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006572:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006574:	f7ff f998 	bl	80058a8 <LL_RCC_GetAHB3Prescaler>
 8006578:	4603      	mov	r3, r0
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0c9c      	lsrs	r4, r3, #18
 8006598:	f7fe ff3e 	bl	8005418 <HAL_PWREx_GetVoltageRange>
 800659c:	4603      	mov	r3, r0
 800659e:	4619      	mov	r1, r3
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f80b 	bl	80065bc <RCC_SetFlashLatency>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd90      	pop	{r4, r7, pc}
 80065b0:	0801e230 	.word	0x0801e230
 80065b4:	0801e1d0 	.word	0x0801e1d0
 80065b8:	431bde83 	.word	0x431bde83

080065bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80065c6:	4a3a      	ldr	r2, [pc, #232]	; (80066b0 <RCC_SetFlashLatency+0xf4>)
 80065c8:	f107 0320 	add.w	r3, r7, #32
 80065cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065d0:	6018      	str	r0, [r3, #0]
 80065d2:	3304      	adds	r3, #4
 80065d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80065d6:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <RCC_SetFlashLatency+0xf8>)
 80065d8:	f107 0318 	add.w	r3, r7, #24
 80065dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065e0:	6018      	str	r0, [r3, #0]
 80065e2:	3304      	adds	r3, #4
 80065e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80065e6:	4a34      	ldr	r2, [pc, #208]	; (80066b8 <RCC_SetFlashLatency+0xfc>)
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80065ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80065f2:	2300      	movs	r3, #0
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d11b      	bne.n	8006636 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065fe:	2300      	movs	r3, #0
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
 8006602:	e014      	b.n	800662e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	3338      	adds	r3, #56	; 0x38
 800660a:	443b      	add	r3, r7
 800660c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4293      	cmp	r3, r2
 8006616:	d807      	bhi.n	8006628 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	3338      	adds	r3, #56	; 0x38
 800661e:	443b      	add	r3, r7
 8006620:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006626:	e021      	b.n	800666c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	3301      	adds	r3, #1
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b02      	cmp	r3, #2
 8006632:	d9e7      	bls.n	8006604 <RCC_SetFlashLatency+0x48>
 8006634:	e01a      	b.n	800666c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006636:	2300      	movs	r3, #0
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663a:	e014      	b.n	8006666 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	3338      	adds	r3, #56	; 0x38
 8006642:	443b      	add	r3, r7
 8006644:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4293      	cmp	r3, r2
 800664e:	d807      	bhi.n	8006660 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	3338      	adds	r3, #56	; 0x38
 8006656:	443b      	add	r3, r7
 8006658:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800665e:	e005      	b.n	800666c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	3301      	adds	r3, #1
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b02      	cmp	r3, #2
 800666a:	d9e7      	bls.n	800663c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800666c:	4b13      	ldr	r3, [pc, #76]	; (80066bc <RCC_SetFlashLatency+0x100>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 0207 	bic.w	r2, r3, #7
 8006674:	4911      	ldr	r1, [pc, #68]	; (80066bc <RCC_SetFlashLatency+0x100>)
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	4313      	orrs	r3, r2
 800667a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800667c:	f7fb fadc 	bl	8001c38 <HAL_GetTick>
 8006680:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006682:	e008      	b.n	8006696 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006684:	f7fb fad8 	bl	8001c38 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e007      	b.n	80066a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006696:	4b09      	ldr	r3, [pc, #36]	; (80066bc <RCC_SetFlashLatency+0x100>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d1ef      	bne.n	8006684 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3738      	adds	r7, #56	; 0x38
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	0801d978 	.word	0x0801d978
 80066b4:	0801d980 	.word	0x0801d980
 80066b8:	0801d988 	.word	0x0801d988
 80066bc:	58004000 	.word	0x58004000

080066c0 <LL_RCC_LSE_IsReady>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d101      	bne.n	80066d8 <LL_RCC_LSE_IsReady+0x18>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <LL_RCC_LSE_IsReady+0x1a>
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <LL_RCC_SetUSARTClockSource>:
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	43db      	mvns	r3, r3
 80066f8:	401a      	ands	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <LL_RCC_SetI2SClockSource>:
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800671a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <LL_RCC_SetLPUARTClockSource>:
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <LL_RCC_SetI2CClockSource>:
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006772:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800677e:	43db      	mvns	r3, r3
 8006780:	401a      	ands	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800678a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <LL_RCC_SetLPTIMClockSource>:
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80067a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	43db      	mvns	r3, r3
 80067b6:	401a      	ands	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <LL_RCC_SetRNGClockSource>:
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80067d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <LL_RCC_SetADCClockSource>:
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800680e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <LL_RCC_SetRTCClockSource>:
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800682c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <LL_RCC_GetRTCClockSource>:
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <LL_RCC_ForceBackupDomainReset>:
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800687e:	bf00      	nop
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800689e:	bf00      	nop
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status*/
  #define RCC_PERIPHCLK_RTC              0x00010000U  /*!< RTC Peripheral Clock Selection         */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	volatile uint32_t tmpregister = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;
  volatile HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
  volatile HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80068b8:	2300      	movs	r3, #0
 80068ba:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d05c      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xda>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80068c8:	f7fe fd64 	bl	8005394 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068cc:	f7fb f9b4 	bl	8001c38 <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80068d2:	e009      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d4:	f7fb f9b0 	bl	8001c38 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d902      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
        break;
 80068e6:	e006      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80068e8:	4b7e      	ldr	r3, [pc, #504]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f4:	d1ee      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d13e      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80068fe:	f7ff ffa6 	bl	800684e <LL_RCC_GetRTCClockSource>
 8006902:	4602      	mov	r2, r0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	429a      	cmp	r2, r3
 800690a:	d00f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800690c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006918:	613b      	str	r3, [r7, #16]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800691a:	f7ff ffa4 	bl	8006866 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800691e:	f7ff ffb2 	bl	8006886 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d114      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fb f97f 	bl	8001c38 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800693c:	e00b      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fb f97b 	bl	8001c38 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	; 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d902      	bls.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xae>
          {
            ret = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
            break;
 8006954:	e004      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006956:	f7ff feb3 	bl	80066c0 <LL_RCC_LSE_IsReady>
 800695a:	4603      	mov	r3, r0
 800695c:	2b01      	cmp	r3, #1
 800695e:	d1ee      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x96>
          }
        }
      }

      if (ret == HAL_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff59 	bl	8006824 <LL_RCC_SetRTCClockSource>
 8006972:	e006      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	73bb      	strb	r3, [r7, #14]
 800697a:	e002      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	73bb      	strb	r3, [r7, #14]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fea5 	bl	80066e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fe9a 	bl	80066e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff febc 	bl	800673c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fee2 	bl	800679e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fed7 	bl	800679e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fecc 	bl	800679e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fea5 	bl	8006766 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fe9a 	bl	8006766 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fe8f 	bl	8006766 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d011      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fe5a 	bl	8006712 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a66:	d107      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fea1 	bl	80067d0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d011      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fe9f 	bl	80067fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	b2db      	uxtb	r3, r3
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	58000400 	.word	0x58000400

08006ae8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d068      	beq.n	8006bcc <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fa fd88 	bl	8001624 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b1c:	4b2e      	ldr	r3, [pc, #184]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b1e:	22ca      	movs	r2, #202	; 0xca
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
 8006b22:	4b2d      	ldr	r3, [pc, #180]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b24:	2253      	movs	r2, #83	; 0x53
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa0f 	bl	8006f4c <RTC_EnterInitMode>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d13f      	bne.n	8006bb8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006b38:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b3e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b46:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006b48:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	4319      	orrs	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	491e      	ldr	r1, [pc, #120]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	491a      	ldr	r1, [pc, #104]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006b72:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	430b      	orrs	r3, r1
 8006b84:	4914      	ldr	r1, [pc, #80]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa12 	bl	8006fb4 <RTC_ExitInitMode>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10e      	bne.n	8006bb8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a19      	ldr	r1, [r3, #32]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	4319      	orrs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	4909      	ldr	r1, [pc, #36]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb8:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <HAL_RTC_Init+0xf0>)
 8006bba:	22ff      	movs	r2, #255	; 0xff
 8006bbc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40002800 	.word	0x40002800

08006bdc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_RTC_SetAlarm_IT+0x1e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0f3      	b.n	8006de2 <HAL_RTC_SetAlarm_IT+0x206>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006c0a:	4b78      	ldr	r3, [pc, #480]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c12:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1a:	d06a      	beq.n	8006cf2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13a      	bne.n	8006c98 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c22:	4b72      	ldr	r3, [pc, #456]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 f9f5 	bl	8007030 <RTC_ByteToBcd2>
 8006c46:	4603      	mov	r3, r0
 8006c48:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f9ee 	bl	8007030 <RTC_ByteToBcd2>
 8006c54:	4603      	mov	r3, r0
 8006c56:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c58:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	789b      	ldrb	r3, [r3, #2]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f9e6 	bl	8007030 <RTC_ByteToBcd2>
 8006c64:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c66:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	78db      	ldrb	r3, [r3, #3]
 8006c6e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c70:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f9d8 	bl	8007030 <RTC_ByteToBcd2>
 8006c80:	4603      	mov	r3, r0
 8006c82:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c84:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c8c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e02c      	b.n	8006cf2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006ca0:	d00d      	beq.n	8006cbe <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006caa:	d008      	beq.n	8006cbe <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cac:	4b4f      	ldr	r3, [pc, #316]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cca:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cd0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cd8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ce0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ce2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ce8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cf2:	4b3e      	ldr	r3, [pc, #248]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006cf4:	22ca      	movs	r2, #202	; 0xca
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8006cf8:	4b3c      	ldr	r3, [pc, #240]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006cfa:	2253      	movs	r2, #83	; 0x53
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d06:	d12c      	bne.n	8006d62 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d08:	4b38      	ldr	r3, [pc, #224]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	4a37      	ldr	r2, [pc, #220]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d12:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d14:	4b35      	ldr	r3, [pc, #212]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d20:	d107      	bne.n	8006d32 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4930      	ldr	r1, [pc, #192]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	644b      	str	r3, [r1, #68]	; 0x44
 8006d30:	e006      	b.n	8006d40 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006d32:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006d38:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006d40:	4a2a      	ldr	r2, [pc, #168]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f043 0201 	orr.w	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4a24      	ldr	r2, [pc, #144]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006d5e:	6193      	str	r3, [r2, #24]
 8006d60:	e02b      	b.n	8006dba <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d62:	4b22      	ldr	r3, [pc, #136]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	4a21      	ldr	r2, [pc, #132]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d68:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006d6c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006d6e:	4b1f      	ldr	r3, [pc, #124]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d70:	2202      	movs	r2, #2
 8006d72:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7a:	d107      	bne.n	8006d8c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	4919      	ldr	r1, [pc, #100]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d8a:	e006      	b.n	8006d9a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d9a:	4a14      	ldr	r2, [pc, #80]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f043 0202 	orr.w	r2, r3, #2
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006db4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006db8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <HAL_RTC_SetAlarm_IT+0x214>)
 8006dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc0:	4a0b      	ldr	r2, [pc, #44]	; (8006df0 <HAL_RTC_SetAlarm_IT+0x214>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dca:	4b08      	ldr	r3, [pc, #32]	; (8006dec <HAL_RTC_SetAlarm_IT+0x210>)
 8006dcc:	22ff      	movs	r2, #255	; 0xff
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd90      	pop	{r4, r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40002800 	.word	0x40002800
 8006df0:	58000800 	.word	0x58000800

08006df4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_RTC_DeactivateAlarm+0x18>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e048      	b.n	8006e9e <HAL_RTC_DeactivateAlarm+0xaa>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e1c:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e1e:	22ca      	movs	r2, #202	; 0xca
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24
 8006e22:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e24:	2253      	movs	r2, #83	; 0x53
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2e:	d115      	bne.n	8006e5c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e3a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006e3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e46:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	f023 0201 	bic.w	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e5a:	e014      	b.n	8006e86 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e5c:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e62:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006e66:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f023 0202 	bic.w	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e82:	2202      	movs	r2, #2
 8006e84:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e88:	22ff      	movs	r2, #255	; 0xff
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	40002800 	.word	0x40002800

08006eac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006eb4:	4b11      	ldr	r3, [pc, #68]	; (8006efc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fb f874 	bl	8001fbe <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f94a 	bl	8007180 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40002800 	.word	0x40002800

08006f00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006f08:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <HAL_RTC_WaitForSynchro+0x48>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4a0e      	ldr	r2, [pc, #56]	; (8006f48 <HAL_RTC_WaitForSynchro+0x48>)
 8006f0e:	f023 0320 	bic.w	r3, r3, #32
 8006f12:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006f14:	f7fa fe90 	bl	8001c38 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006f1a:	e009      	b.n	8006f30 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f1c:	f7fa fe8c 	bl	8001c38 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2a:	d901      	bls.n	8006f30 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_RTC_WaitForSynchro+0x48>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0ef      	beq.n	8006f1c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40002800 	.word	0x40002800

08006f4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006f58:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <RTC_EnterInitMode+0x64>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d120      	bne.n	8006fa6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f64:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <RTC_EnterInitMode+0x64>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <RTC_EnterInitMode+0x64>)
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006f70:	f7fa fe62 	bl	8001c38 <HAL_GetTick>
 8006f74:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f76:	e00d      	b.n	8006f94 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f78:	f7fa fe5e 	bl	8001c38 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f86:	d905      	bls.n	8006f94 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <RTC_EnterInitMode+0x64>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <RTC_EnterInitMode+0x5a>
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d1e8      	bne.n	8006f78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40002800 	.word	0x40002800

08006fb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <RTC_ExitInitMode+0x78>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4a19      	ldr	r2, [pc, #100]	; (800702c <RTC_ExitInitMode+0x78>)
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fcc:	4b17      	ldr	r3, [pc, #92]	; (800702c <RTC_ExitInitMode+0x78>)
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10c      	bne.n	8006ff2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff ff91 	bl	8006f00 <HAL_RTC_WaitForSynchro>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01e      	beq.n	8007022 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e017      	b.n	8007022 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ff2:	4b0e      	ldr	r3, [pc, #56]	; (800702c <RTC_ExitInitMode+0x78>)
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	4a0d      	ldr	r2, [pc, #52]	; (800702c <RTC_ExitInitMode+0x78>)
 8006ff8:	f023 0320 	bic.w	r3, r3, #32
 8006ffc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ff7e 	bl	8006f00 <HAL_RTC_WaitForSynchro>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2203      	movs	r2, #3
 800700e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <RTC_ExitInitMode+0x78>)
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	4a04      	ldr	r2, [pc, #16]	; (800702c <RTC_ExitInitMode+0x78>)
 800701c:	f043 0320 	orr.w	r3, r3, #32
 8007020:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40002800 	.word	0x40002800

08007030 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007042:	e005      	b.n	8007050 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	3b0a      	subs	r3, #10
 800704e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	2b09      	cmp	r3, #9
 8007054:	d8f6      	bhi.n	8007044 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	b2da      	uxtb	r2, r3
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	4313      	orrs	r3, r2
 8007062:	b2db      	uxtb	r3, r3
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr
	...

08007070 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007082:	2302      	movs	r3, #2
 8007084:	e01f      	b.n	80070c6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007098:	22ca      	movs	r2, #202	; 0xca
 800709a:	625a      	str	r2, [r3, #36]	; 0x24
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800709e:	2253      	movs	r2, #83	; 0x53
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070a8:	f043 0320 	orr.w	r3, r3, #32
 80070ac:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070b0:	22ff      	movs	r2, #255	; 0xff
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr
 80070d0:	40002800 	.word	0x40002800

080070d4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_RTCEx_SetSSRU_IT+0x16>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e027      	b.n	800713a <HAL_RTCEx_SetSSRU_IT+0x66>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fa:	4b12      	ldr	r3, [pc, #72]	; (8007144 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80070fc:	22ca      	movs	r2, #202	; 0xca
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007100:	4b10      	ldr	r3, [pc, #64]	; (8007144 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007102:	2253      	movs	r2, #83	; 0x53
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	4a0e      	ldr	r2, [pc, #56]	; (8007144 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007118:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800711a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800711e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	40002800 	.word	0x40002800
 8007148:	58000800 	.word	0x58000800

0800714c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007162:	2240      	movs	r2, #64	; 0x40
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa ff33 	bl	8001fd2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40002800 	.word	0x40002800

08007180 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
	...

08007194 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80071a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	4000b100 	.word	0x4000b100

080071c4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <HAL_RTCEx_BKUPRead+0x28>)
 80071d0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	4000b100 	.word	0x4000b100

080071f0 <LL_PWR_SetRadioBusyTrigger>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007200:	4904      	ldr	r1, [pc, #16]	; (8007214 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4313      	orrs	r3, r2
 8007206:	608b      	str	r3, [r1, #8]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	58000400 	.word	0x58000400

08007218 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	4a04      	ldr	r2, [pc, #16]	; (8007234 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800722c:	bf00      	nop
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr
 8007234:	58000400 	.word	0x58000400

08007238 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007242:	4a04      	ldr	r2, [pc, #16]	; (8007254 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007244:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	58000400 	.word	0x58000400

08007258 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800725c:	4b03      	ldr	r3, [pc, #12]	; (800726c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800725e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007262:	619a      	str	r2, [r3, #24]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr
 800726c:	58000400 	.word	0x58000400

08007270 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d101      	bne.n	8007284 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	58000400 	.word	0x58000400

08007294 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007298:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d101      	bne.n	80072a8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	58000400 	.word	0x58000400

080072b8 <LL_RCC_RF_DisableReset>:
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <LL_RCC_IsRFUnderReset>:
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80072dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ec:	d101      	bne.n	80072f2 <LL_RCC_IsRFUnderReset+0x1a>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <LL_RCC_IsRFUnderReset+0x1c>
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <LL_EXTI_EnableIT_32_63>:
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <LL_EXTI_EnableIT_32_63+0x24>)
 8007306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800730a:	4905      	ldr	r1, [pc, #20]	; (8007320 <LL_EXTI_EnableIT_32_63+0x24>)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58000800 	.word	0x58000800

08007324 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
    return status;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	e04b      	b.n	80073d2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	799b      	ldrb	r3, [r3, #6]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fa fad0 	bl	80018f4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800735a:	f7ff ffad 	bl	80072b8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800735e:	4b1f      	ldr	r3, [pc, #124]	; (80073dc <HAL_SUBGHZ_Init+0xb8>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	0cdb      	lsrs	r3, r3, #19
 800736c:	2264      	movs	r2, #100	; 0x64
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	609a      	str	r2, [r3, #8]
      break;
 8007384:	e007      	b.n	8007396 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3b01      	subs	r3, #1
 800738a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800738c:	f7ff ffa4 	bl	80072d8 <LL_RCC_IsRFUnderReset>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ee      	bne.n	8007374 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007396:	f7ff ff3f 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800739a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800739e:	f7ff ffad 	bl	80072fc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80073a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80073a6:	f7ff ff23 	bl	80071f0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80073aa:	f7ff ff55 	bl	8007258 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 faad 	bl	8007918 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	719a      	strb	r2, [r3, #6]

  return status;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000000 	.word	0x20000000

080073e0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	461a      	mov	r2, r3
 80073ec:	460b      	mov	r3, r1
 80073ee:	817b      	strh	r3, [r7, #10]
 80073f0:	4613      	mov	r3, r2
 80073f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	799b      	ldrb	r3, [r3, #6]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d14a      	bne.n	8007494 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	795b      	ldrb	r3, [r3, #5]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007406:	2302      	movs	r3, #2
 8007408:	e045      	b.n	8007496 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2202      	movs	r2, #2
 8007414:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fb4c 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800741c:	f7ff ff0c 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007420:	210d      	movs	r1, #13
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fa98 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007428:	897b      	ldrh	r3, [r7, #10]
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa90 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007438:	897b      	ldrh	r3, [r7, #10]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fa8a 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007444:	2300      	movs	r3, #0
 8007446:	82bb      	strh	r3, [r7, #20]
 8007448:	e00a      	b.n	8007460 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800744a:	8abb      	ldrh	r3, [r7, #20]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fa7f 	bl	8007958 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800745a:	8abb      	ldrh	r3, [r7, #20]
 800745c:	3301      	adds	r3, #1
 800745e:	82bb      	strh	r3, [r7, #20]
 8007460:	8aba      	ldrh	r2, [r7, #20]
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3f0      	bcc.n	800744a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007468:	f7ff fed6 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fb45 	bl	8007afc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
 800747e:	e001      	b.n	8007484 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	715a      	strb	r2, [r3, #5]

    return status;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	e000      	b.n	8007496 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007494:	2302      	movs	r3, #2
  }
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b088      	sub	sp, #32
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	461a      	mov	r2, r3
 80074aa:	460b      	mov	r3, r1
 80074ac:	817b      	strh	r3, [r7, #10]
 80074ae:	4613      	mov	r3, r2
 80074b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	799b      	ldrb	r3, [r3, #6]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d14a      	bne.n	8007556 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	795b      	ldrb	r3, [r3, #5]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e045      	b.n	8007558 <HAL_SUBGHZ_ReadRegisters+0xba>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 faee 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80074d8:	f7ff feae 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80074dc:	211d      	movs	r1, #29
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fa3a 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80074e4:	897b      	ldrh	r3, [r7, #10]
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fa32 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80074f4:	897b      	ldrh	r3, [r7, #10]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa2c 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007500:	2100      	movs	r1, #0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fa28 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007508:	2300      	movs	r3, #0
 800750a:	82fb      	strh	r3, [r7, #22]
 800750c:	e009      	b.n	8007522 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800750e:	69b9      	ldr	r1, [r7, #24]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fa77 	bl	8007a04 <SUBGHZSPI_Receive>
      pData++;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	3301      	adds	r3, #1
 800751a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800751c:	8afb      	ldrh	r3, [r7, #22]
 800751e:	3301      	adds	r3, #1
 8007520:	82fb      	strh	r3, [r7, #22]
 8007522:	8afa      	ldrh	r2, [r7, #22]
 8007524:	893b      	ldrh	r3, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	d3f1      	bcc.n	800750e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800752a:	f7ff fe75 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fae4 	bl	8007afc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e001      	b.n	8007546 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	715a      	strb	r2, [r3, #5]

    return status;
 8007552:	7ffb      	ldrb	r3, [r7, #31]
 8007554:	e000      	b.n	8007558 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	460b      	mov	r3, r1
 800756e:	72fb      	strb	r3, [r7, #11]
 8007570:	4613      	mov	r3, r2
 8007572:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	799b      	ldrb	r3, [r3, #6]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d14a      	bne.n	8007614 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007586:	2302      	movs	r3, #2
 8007588:	e045      	b.n	8007616 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fa8f 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	2b84      	cmp	r3, #132	; 0x84
 800759a:	d002      	beq.n	80075a2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	2b94      	cmp	r3, #148	; 0x94
 80075a0:	d103      	bne.n	80075aa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	711a      	strb	r2, [r3, #4]
 80075a8:	e002      	b.n	80075b0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075b0:	f7ff fe42 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f9cd 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075be:	2300      	movs	r3, #0
 80075c0:	82bb      	strh	r3, [r7, #20]
 80075c2:	e00a      	b.n	80075da <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80075c4:	8abb      	ldrh	r3, [r7, #20]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f9c2 	bl	8007958 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80075d4:	8abb      	ldrh	r3, [r7, #20]
 80075d6:	3301      	adds	r3, #1
 80075d8:	82bb      	strh	r3, [r7, #20]
 80075da:	8aba      	ldrh	r2, [r7, #20]
 80075dc:	893b      	ldrh	r3, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d3f0      	bcc.n	80075c4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075e2:	f7ff fe19 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	2b84      	cmp	r3, #132	; 0x84
 80075ea:	d002      	beq.n	80075f2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fa85 	bl	8007afc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	75fb      	strb	r3, [r7, #23]
 80075fe:	e001      	b.n	8007604 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	715a      	strb	r2, [r3, #5]

    return status;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	e000      	b.n	8007616 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007614:	2302      	movs	r3, #2
  }
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b088      	sub	sp, #32
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	461a      	mov	r2, r3
 800762a:	460b      	mov	r3, r1
 800762c:	72fb      	strb	r3, [r7, #11]
 800762e:	4613      	mov	r3, r2
 8007630:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	799b      	ldrb	r3, [r3, #6]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d13d      	bne.n	80076bc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	795b      	ldrb	r3, [r3, #5]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007648:	2302      	movs	r3, #2
 800764a:	e038      	b.n	80076be <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fa2e 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007658:	f7ff fdee 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f979 	bl	8007958 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007666:	2100      	movs	r1, #0
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f975 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800766e:	2300      	movs	r3, #0
 8007670:	82fb      	strh	r3, [r7, #22]
 8007672:	e009      	b.n	8007688 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007674:	69b9      	ldr	r1, [r7, #24]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f9c4 	bl	8007a04 <SUBGHZSPI_Receive>
      pData++;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	3301      	adds	r3, #1
 8007680:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007682:	8afb      	ldrh	r3, [r7, #22]
 8007684:	3301      	adds	r3, #1
 8007686:	82fb      	strh	r3, [r7, #22]
 8007688:	8afa      	ldrh	r2, [r7, #22]
 800768a:	893b      	ldrh	r3, [r7, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d3f1      	bcc.n	8007674 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007690:	f7ff fdc2 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fa31 	bl	8007afc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e001      	b.n	80076ac <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	715a      	strb	r2, [r3, #5]

    return status;
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
 80076ba:	e000      	b.n	80076be <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	461a      	mov	r2, r3
 80076d2:	460b      	mov	r3, r1
 80076d4:	72fb      	strb	r3, [r7, #11]
 80076d6:	4613      	mov	r3, r2
 80076d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	799b      	ldrb	r3, [r3, #6]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d13e      	bne.n	8007762 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	795b      	ldrb	r3, [r3, #5]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e039      	b.n	8007764 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f9dc 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076fc:	f7ff fd9c 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007700:	210e      	movs	r1, #14
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f928 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	4619      	mov	r1, r3
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f923 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007712:	2300      	movs	r3, #0
 8007714:	82bb      	strh	r3, [r7, #20]
 8007716:	e00a      	b.n	800772e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007718:	8abb      	ldrh	r3, [r7, #20]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	4619      	mov	r1, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f918 	bl	8007958 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007728:	8abb      	ldrh	r3, [r7, #20]
 800772a:	3301      	adds	r3, #1
 800772c:	82bb      	strh	r3, [r7, #20]
 800772e:	8aba      	ldrh	r2, [r7, #20]
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d3f0      	bcc.n	8007718 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007736:	f7ff fd6f 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 f9de 	bl	8007afc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
 800774c:	e001      	b.n	8007752 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	715a      	strb	r2, [r3, #5]

    return status;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	e000      	b.n	8007764 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	461a      	mov	r2, r3
 8007778:	460b      	mov	r3, r1
 800777a:	72fb      	strb	r3, [r7, #11]
 800777c:	4613      	mov	r3, r2
 800777e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	799b      	ldrb	r3, [r3, #6]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d141      	bne.n	8007812 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007796:	2302      	movs	r3, #2
 8007798:	e03c      	b.n	8007814 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f987 	bl	8007ab4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077a6:	f7ff fd47 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80077aa:	211e      	movs	r1, #30
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f8d3 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	4619      	mov	r1, r3
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f8ce 	bl	8007958 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80077bc:	2100      	movs	r1, #0
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f8ca 	bl	8007958 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	82fb      	strh	r3, [r7, #22]
 80077c8:	e009      	b.n	80077de <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077ca:	69b9      	ldr	r1, [r7, #24]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f919 	bl	8007a04 <SUBGHZSPI_Receive>
      pData++;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	3301      	adds	r3, #1
 80077d6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	3301      	adds	r3, #1
 80077dc:	82fb      	strh	r3, [r7, #22]
 80077de:	8afa      	ldrh	r2, [r7, #22]
 80077e0:	893b      	ldrh	r3, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3f1      	bcc.n	80077ca <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077e6:	f7ff fd17 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f986 	bl	8007afc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e001      	b.n	8007802 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	715a      	strb	r2, [r3, #5]

    return status;
 800780e:	7ffb      	ldrb	r3, [r7, #31]
 8007810:	e000      	b.n	8007814 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007812:	2302      	movs	r3, #2
  }
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007824:	2300      	movs	r3, #0
 8007826:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007828:	f107 020c 	add.w	r2, r7, #12
 800782c:	2302      	movs	r3, #2
 800782e:	2112      	movs	r1, #18
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fef4 	bl	800761e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007836:	7b3b      	ldrb	r3, [r7, #12]
 8007838:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800783a:	89fb      	ldrh	r3, [r7, #14]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	b21a      	sxth	r2, r3
 8007840:	7b7b      	ldrb	r3, [r7, #13]
 8007842:	b21b      	sxth	r3, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	b21b      	sxth	r3, r3
 8007848:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f014 fa7f 	bl	801bd58 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800785a:	89fb      	ldrh	r3, [r7, #14]
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f014 fa84 	bl	801bd74 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800786c:	89fb      	ldrh	r3, [r7, #14]
 800786e:	089b      	lsrs	r3, r3, #2
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f014 fad3 	bl	801be24 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800787e:	89fb      	ldrh	r3, [r7, #14]
 8007880:	08db      	lsrs	r3, r3, #3
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f014 fad8 	bl	801be40 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007890:	89fb      	ldrh	r3, [r7, #14]
 8007892:	091b      	lsrs	r3, r3, #4
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f014 fadd 	bl	801be5c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80078a2:	89fb      	ldrh	r3, [r7, #14]
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f014 faaa 	bl	801be08 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80078b4:	89fb      	ldrh	r3, [r7, #14]
 80078b6:	099b      	lsrs	r3, r3, #6
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f014 fa65 	bl	801bd90 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	09db      	lsrs	r3, r3, #7
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80078d2:	89fb      	ldrh	r3, [r7, #14]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80078de:	2101      	movs	r1, #1
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f014 fa63 	bl	801bdac <HAL_SUBGHZ_CADStatusCallback>
 80078e6:	e003      	b.n	80078f0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80078e8:	2100      	movs	r1, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f014 fa5e 	bl	801bdac <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	0a5b      	lsrs	r3, r3, #9
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f014 fa73 	bl	801bde8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007902:	f107 020c 	add.w	r2, r7, #12
 8007906:	2302      	movs	r3, #2
 8007908:	2102      	movs	r1, #2
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fe28 	bl	8007560 <HAL_SUBGHZ_ExecSetCmd>
}
 8007910:	bf00      	nop
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a0b      	ldr	r2, [pc, #44]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 8007926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800792c:	4a09      	ldr	r2, [pc, #36]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007934:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 8007938:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800793c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <SUBGHZSPI_Init+0x3c>)
 8007944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007948:	6013      	str	r3, [r2, #0]
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	58010000 	.word	0x58010000

08007958 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007968:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <SUBGHZSPI_Transmit+0xa0>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	0cdb      	lsrs	r3, r3, #19
 8007976:	2264      	movs	r2, #100	; 0x64
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	609a      	str	r2, [r3, #8]
      break;
 800798e:	e008      	b.n	80079a2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3b01      	subs	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007996:	4b19      	ldr	r3, [pc, #100]	; (80079fc <SUBGHZSPI_Transmit+0xa4>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d1ed      	bne.n	800797e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80079a2:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <SUBGHZSPI_Transmit+0xa8>)
 80079a4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <SUBGHZSPI_Transmit+0xa0>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	0cdb      	lsrs	r3, r3, #19
 80079ba:	2264      	movs	r2, #100	; 0x64
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	609a      	str	r2, [r3, #8]
      break;
 80079d2:	e008      	b.n	80079e6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80079da:	4b08      	ldr	r3, [pc, #32]	; (80079fc <SUBGHZSPI_Transmit+0xa4>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d1ed      	bne.n	80079c2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <SUBGHZSPI_Transmit+0xa4>)
 80079e8:	68db      	ldr	r3, [r3, #12]

  return status;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000000 	.word	0x20000000
 80079fc:	58010000 	.word	0x58010000
 8007a00:	5801000c 	.word	0x5801000c

08007a04 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a12:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <SUBGHZSPI_Receive+0xa4>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	0cdb      	lsrs	r3, r3, #19
 8007a20:	2264      	movs	r2, #100	; 0x64
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	609a      	str	r2, [r3, #8]
      break;
 8007a38:	e008      	b.n	8007a4c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <SUBGHZSPI_Receive+0xa8>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d1ed      	bne.n	8007a28 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007a4c:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <SUBGHZSPI_Receive+0xac>)
 8007a4e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	22ff      	movs	r2, #255	; 0xff
 8007a54:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <SUBGHZSPI_Receive+0xa4>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	1a9b      	subs	r3, r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	0cdb      	lsrs	r3, r3, #19
 8007a64:	2264      	movs	r2, #100	; 0x64
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	609a      	str	r2, [r3, #8]
      break;
 8007a7c:	e008      	b.n	8007a90 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007a84:	4b09      	ldr	r3, [pc, #36]	; (8007aac <SUBGHZSPI_Receive+0xa8>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d1ed      	bne.n	8007a6c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a90:	4b06      	ldr	r3, [pc, #24]	; (8007aac <SUBGHZSPI_Receive+0xa8>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	701a      	strb	r2, [r3, #0]

  return status;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000000 	.word	0x20000000
 8007aac:	58010000 	.word	0x58010000
 8007ab0:	5801000c 	.word	0x5801000c

08007ab4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d111      	bne.n	8007ae8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <SUBGHZ_CheckDeviceReady+0x44>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	4413      	add	r3, r2
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ad4:	f7ff fbb0 	bl	8007238 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f9      	bne.n	8007ad8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ae4:	f7ff fb98 	bl	8007218 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f807 	bl	8007afc <SUBGHZ_WaitOnBusy>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000000 	.word	0x20000000

08007afc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007b08:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <SUBGHZ_WaitOnBusy+0x58>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	0d1b      	lsrs	r3, r3, #20
 8007b16:	2264      	movs	r2, #100	; 0x64
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007b1e:	f7ff fbb9 	bl	8007294 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007b22:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	609a      	str	r2, [r3, #8]
      break;
 8007b34:	e009      	b.n	8007b4a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007b3c:	f7ff fb98 	bl	8007270 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d0e9      	beq.n	8007b1e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000000 	.word	0x20000000

08007b58 <LL_RCC_GetUSARTClockSource>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	401a      	ands	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	041b      	lsls	r3, r3, #16
 8007b70:	4313      	orrs	r3, r2
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <LL_RCC_GetLPUARTClockSource>:
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e042      	b.n	8007c32 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fa fb86 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2224      	movs	r2, #36	; 0x24
 8007bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc4b 	bl	8008478 <UART_SetConfig>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e022      	b.n	8007c32 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 feb3 	bl	8008960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 ff39 	bl	8008aa2 <UART_CheckIdleState>
 8007c30:	4603      	mov	r3, r0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	; 0x28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d142      	bne.n	8007cda <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_UART_Receive_IT+0x24>
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e03b      	b.n	8007cdc <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_UART_Receive_IT+0x36>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e034      	b.n	8007cdc <HAL_UART_Receive_IT+0xa0>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <HAL_UART_Receive_IT+0xa8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d01f      	beq.n	8007cca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	623b      	str	r3, [r7, #32]
 8007cb8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fff9 	bl	8008cc8 <UART_Start_Receive_IT>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3728      	adds	r7, #40	; 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40008000 	.word	0x40008000

08007ce8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d17a      	bne.n	8007df6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_UART_Transmit_DMA+0x24>
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e073      	b.n	8007df8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Transmit_DMA+0x36>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e06c      	b.n	8007df8 <HAL_UART_Transmit_DMA+0x110>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2221      	movs	r2, #33	; 0x21
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d02c      	beq.n	8007dae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d58:	4a29      	ldr	r2, [pc, #164]	; (8007e00 <HAL_UART_Transmit_DMA+0x118>)
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d60:	4a28      	ldr	r2, [pc, #160]	; (8007e04 <HAL_UART_Transmit_DMA+0x11c>)
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <HAL_UART_Transmit_DMA+0x120>)
 8007d6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d70:	2200      	movs	r2, #0
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3328      	adds	r3, #40	; 0x28
 8007d84:	461a      	mov	r2, r3
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	f7fc f90a 	bl	8003fa0 <HAL_DMA_Start_IT>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00d      	beq.n	8007dae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2210      	movs	r2, #16
 8007d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e024      	b.n	8007df8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2240      	movs	r2, #64	; 0x40
 8007db4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	623a      	str	r2, [r7, #32]
 8007de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	69f9      	ldr	r1, [r7, #28]
 8007de4:	6a3a      	ldr	r2, [r7, #32]
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
  }
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3728      	adds	r7, #40	; 0x28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	08009017 	.word	0x08009017
 8007e04:	080090b1 	.word	0x080090b1
 8007e08:	080090cd 	.word	0x080090cd

08007e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b0ba      	sub	sp, #232	; 0xe8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11b      	bne.n	8007e80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d015      	beq.n	8007e80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d105      	bne.n	8007e6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 82d6 	beq.w	8008422 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
      }
      return;
 8007e7e:	e2d0      	b.n	8008422 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 811f 	beq.w	80080c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e8e:	4b8b      	ldr	r3, [pc, #556]	; (80080bc <HAL_UART_IRQHandler+0x2b0>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e9a:	4b89      	ldr	r3, [pc, #548]	; (80080c0 <HAL_UART_IRQHandler+0x2b4>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 8112 	beq.w	80080c8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d011      	beq.n	8007ed4 <HAL_UART_IRQHandler+0xc8>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d011      	beq.n	8007f04 <HAL_UART_IRQHandler+0xf8>
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007efa:	f043 0204 	orr.w	r2, r3, #4
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d011      	beq.n	8007f34 <HAL_UART_IRQHandler+0x128>
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2204      	movs	r2, #4
 8007f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d017      	beq.n	8007f70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f50:	4b5a      	ldr	r3, [pc, #360]	; (80080bc <HAL_UART_IRQHandler+0x2b0>)
 8007f52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f66:	f043 0208 	orr.w	r2, r3, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x196>
 8007f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 823c 	beq.w	8008426 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d013      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b40      	cmp	r3, #64	; 0x40
 8007ff8:	d005      	beq.n	8008006 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d04f      	beq.n	80080a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 ffa0 	bl	8008f4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d141      	bne.n	800809e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800804a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800805e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d9      	bne.n	800801a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008072:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <HAL_UART_IRQHandler+0x2b8>)
 8008074:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc f86c 	bl	8004158 <HAL_DMA_Abort_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d017      	beq.n	80080b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008094:	e00f      	b.n	80080b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9d9 	bl	800844e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	e00b      	b.n	80080b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9d5 	bl	800844e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	e007      	b.n	80080b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9d1 	bl	800844e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80080b4:	e1b7      	b.n	8008426 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b6:	bf00      	nop
    return;
 80080b8:	e1b5      	b.n	8008426 <HAL_UART_IRQHandler+0x61a>
 80080ba:	bf00      	nop
 80080bc:	10000001 	.word	0x10000001
 80080c0:	04000120 	.word	0x04000120
 80080c4:	0800914d 	.word	0x0800914d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	f040 814a 	bne.w	8008366 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8143 	beq.w	8008366 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 813c 	beq.w	8008366 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2210      	movs	r2, #16
 80080f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	f040 80b5 	bne.w	8008270 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008112:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8187 	beq.w	800842a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008126:	429a      	cmp	r2, r3
 8008128:	f080 817f 	bcs.w	800842a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 8086 	bne.w	8008254 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800815c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008176:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800817e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800818a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1da      	bne.n	8008148 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081a4:	f023 0301 	bic.w	r3, r3, #1
 80081a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3308      	adds	r3, #8
 80081b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e1      	bne.n	8008192 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3308      	adds	r3, #8
 80081ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e3      	bne.n	80081ce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008236:	65bb      	str	r3, [r7, #88]	; 0x58
 8008238:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800823c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e4      	bne.n	8008214 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824e:	4618      	mov	r0, r3
 8008250:	f7fb ff24 	bl	800409c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008260:	b29b      	uxth	r3, r3
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	b29b      	uxth	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8f9 	bl	8008460 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800826e:	e0dc      	b.n	800842a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800827c:	b29b      	uxth	r3, r3
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80ce 	beq.w	800842e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80c9 	beq.w	800842e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082be:	647b      	str	r3, [r7, #68]	; 0x44
 80082c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e4      	bne.n	800829c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	623b      	str	r3, [r7, #32]
   return(result);
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082fa:	633a      	str	r2, [r7, #48]	; 0x30
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e1      	bne.n	80082d2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0310 	bic.w	r3, r3, #16
 8008336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008344:	61fb      	str	r3, [r7, #28]
 8008346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	617b      	str	r3, [r7, #20]
   return(result);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e4      	bne.n	8008322 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f87e 	bl	8008460 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008364:	e063      	b.n	800842e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <HAL_UART_IRQHandler+0x584>
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d008      	beq.n	8008390 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fb7d 	bl	8009a88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800838e:	e051      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b00      	cmp	r3, #0
 800839a:	d014      	beq.n	80083c6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800839c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d105      	bne.n	80083b4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d03a      	beq.n	8008432 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
    }
    return;
 80083c4:	e035      	b.n	8008432 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <HAL_UART_IRQHandler+0x5da>
 80083d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 feca 	bl	8009178 <UART_EndTransmit_IT>
    return;
 80083e4:	e026      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80083e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d009      	beq.n	8008406 <HAL_UART_IRQHandler+0x5fa>
 80083f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fb54 	bl	8009aac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008404:	e016      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_UART_IRQHandler+0x628>
 8008412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008416:	2b00      	cmp	r3, #0
 8008418:	da0c      	bge.n	8008434 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fb3d 	bl	8009a9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008420:	e008      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
      return;
 8008422:	bf00      	nop
 8008424:	e006      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
    return;
 8008426:	bf00      	nop
 8008428:	e004      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
      return;
 800842a:	bf00      	nop
 800842c:	e002      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
      return;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <HAL_UART_IRQHandler+0x628>
    return;
 8008432:	bf00      	nop
  }
}
 8008434:	37e8      	adds	r7, #232	; 0xe8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop

0800843c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr
	...

08008478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800847c:	b08c      	sub	sp, #48	; 0x30
 800847e:	af00      	add	r7, sp, #0
 8008480:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	431a      	orrs	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	431a      	orrs	r2, r3
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	4313      	orrs	r3, r2
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b94      	ldr	r3, [pc, #592]	; (80086f8 <UART_SetConfig+0x280>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a89      	ldr	r2, [pc, #548]	; (80086fc <UART_SetConfig+0x284>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d004      	beq.n	80084e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e0:	4313      	orrs	r3, r2
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f8:	430b      	orrs	r3, r1
 80084fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	f023 010f 	bic.w	r1, r3, #15
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a7a      	ldr	r2, [pc, #488]	; (8008700 <UART_SetConfig+0x288>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d127      	bne.n	800856c <UART_SetConfig+0xf4>
 800851c:	2003      	movs	r0, #3
 800851e:	f7ff fb1b 	bl	8007b58 <LL_RCC_GetUSARTClockSource>
 8008522:	4603      	mov	r3, r0
 8008524:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008528:	2b03      	cmp	r3, #3
 800852a:	d81b      	bhi.n	8008564 <UART_SetConfig+0xec>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0xbc>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008545 	.word	0x08008545
 8008538:	08008555 	.word	0x08008555
 800853c:	0800854d 	.word	0x0800854d
 8008540:	0800855d 	.word	0x0800855d
 8008544:	2301      	movs	r3, #1
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800854a:	e080      	b.n	800864e <UART_SetConfig+0x1d6>
 800854c:	2302      	movs	r3, #2
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008552:	e07c      	b.n	800864e <UART_SetConfig+0x1d6>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855a:	e078      	b.n	800864e <UART_SetConfig+0x1d6>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008562:	e074      	b.n	800864e <UART_SetConfig+0x1d6>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856a:	e070      	b.n	800864e <UART_SetConfig+0x1d6>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a64      	ldr	r2, [pc, #400]	; (8008704 <UART_SetConfig+0x28c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d138      	bne.n	80085e8 <UART_SetConfig+0x170>
 8008576:	200c      	movs	r0, #12
 8008578:	f7ff faee 	bl	8007b58 <LL_RCC_GetUSARTClockSource>
 800857c:	4603      	mov	r3, r0
 800857e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008582:	2b0c      	cmp	r3, #12
 8008584:	d82c      	bhi.n	80085e0 <UART_SetConfig+0x168>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <UART_SetConfig+0x114>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085c1 	.word	0x080085c1
 8008590:	080085e1 	.word	0x080085e1
 8008594:	080085e1 	.word	0x080085e1
 8008598:	080085e1 	.word	0x080085e1
 800859c:	080085d1 	.word	0x080085d1
 80085a0:	080085e1 	.word	0x080085e1
 80085a4:	080085e1 	.word	0x080085e1
 80085a8:	080085e1 	.word	0x080085e1
 80085ac:	080085c9 	.word	0x080085c9
 80085b0:	080085e1 	.word	0x080085e1
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	080085e1 	.word	0x080085e1
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e042      	b.n	800864e <UART_SetConfig+0x1d6>
 80085c8:	2302      	movs	r3, #2
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e03e      	b.n	800864e <UART_SetConfig+0x1d6>
 80085d0:	2304      	movs	r3, #4
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e03a      	b.n	800864e <UART_SetConfig+0x1d6>
 80085d8:	2308      	movs	r3, #8
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085de:	e036      	b.n	800864e <UART_SetConfig+0x1d6>
 80085e0:	2310      	movs	r3, #16
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e032      	b.n	800864e <UART_SetConfig+0x1d6>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a43      	ldr	r2, [pc, #268]	; (80086fc <UART_SetConfig+0x284>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d12a      	bne.n	8008648 <UART_SetConfig+0x1d0>
 80085f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80085f6:	f7ff fac1 	bl	8007b7c <LL_RCC_GetLPUARTClockSource>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008600:	d01a      	beq.n	8008638 <UART_SetConfig+0x1c0>
 8008602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008606:	d81b      	bhi.n	8008640 <UART_SetConfig+0x1c8>
 8008608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860c:	d00c      	beq.n	8008628 <UART_SetConfig+0x1b0>
 800860e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008612:	d815      	bhi.n	8008640 <UART_SetConfig+0x1c8>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <UART_SetConfig+0x1a8>
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861c:	d008      	beq.n	8008630 <UART_SetConfig+0x1b8>
 800861e:	e00f      	b.n	8008640 <UART_SetConfig+0x1c8>
 8008620:	2300      	movs	r3, #0
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008626:	e012      	b.n	800864e <UART_SetConfig+0x1d6>
 8008628:	2302      	movs	r3, #2
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862e:	e00e      	b.n	800864e <UART_SetConfig+0x1d6>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008636:	e00a      	b.n	800864e <UART_SetConfig+0x1d6>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863e:	e006      	b.n	800864e <UART_SetConfig+0x1d6>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008646:	e002      	b.n	800864e <UART_SetConfig+0x1d6>
 8008648:	2310      	movs	r3, #16
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <UART_SetConfig+0x284>)
 8008654:	4293      	cmp	r3, r2
 8008656:	f040 80a4 	bne.w	80087a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800865a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800865e:	2b08      	cmp	r3, #8
 8008660:	d823      	bhi.n	80086aa <UART_SetConfig+0x232>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0x1f0>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	0800868d 	.word	0x0800868d
 800866c:	080086ab 	.word	0x080086ab
 8008670:	08008695 	.word	0x08008695
 8008674:	080086ab 	.word	0x080086ab
 8008678:	0800869b 	.word	0x0800869b
 800867c:	080086ab 	.word	0x080086ab
 8008680:	080086ab 	.word	0x080086ab
 8008684:	080086ab 	.word	0x080086ab
 8008688:	080086a3 	.word	0x080086a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800868c:	f7fd ff42 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008692:	e010      	b.n	80086b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008694:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <UART_SetConfig+0x290>)
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008698:	e00d      	b.n	80086b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800869a:	f7fd fe87 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086a0:	e009      	b.n	80086b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a8:	e005      	b.n	80086b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8137 	beq.w	800892c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	4a12      	ldr	r2, [pc, #72]	; (800870c <UART_SetConfig+0x294>)
 80086c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4413      	add	r3, r2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d305      	bcc.n	80086ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d910      	bls.n	8008710 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086f4:	e11a      	b.n	800892c <UART_SetConfig+0x4b4>
 80086f6:	bf00      	nop
 80086f8:	cfff69f3 	.word	0xcfff69f3
 80086fc:	40008000 	.word	0x40008000
 8008700:	40013800 	.word	0x40013800
 8008704:	40004400 	.word	0x40004400
 8008708:	00f42400 	.word	0x00f42400
 800870c:	0801e2c4 	.word	0x0801e2c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	2200      	movs	r2, #0
 8008714:	60bb      	str	r3, [r7, #8]
 8008716:	60fa      	str	r2, [r7, #12]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	4a8e      	ldr	r2, [pc, #568]	; (8008958 <UART_SetConfig+0x4e0>)
 800871e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008722:	b29b      	uxth	r3, r3
 8008724:	2200      	movs	r2, #0
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008732:	f7f8 fa17 	bl	8000b64 <__aeabi_uldivmod>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4610      	mov	r0, r2
 800873c:	4619      	mov	r1, r3
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	020b      	lsls	r3, r1, #8
 8008748:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800874c:	0202      	lsls	r2, r0, #8
 800874e:	6979      	ldr	r1, [r7, #20]
 8008750:	6849      	ldr	r1, [r1, #4]
 8008752:	0849      	lsrs	r1, r1, #1
 8008754:	2000      	movs	r0, #0
 8008756:	460c      	mov	r4, r1
 8008758:	4605      	mov	r5, r0
 800875a:	eb12 0804 	adds.w	r8, r2, r4
 800875e:	eb43 0905 	adc.w	r9, r3, r5
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	469a      	mov	sl, r3
 800876a:	4693      	mov	fp, r2
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	f7f8 f9f6 	bl	8000b64 <__aeabi_uldivmod>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4613      	mov	r3, r2
 800877e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008786:	d308      	bcc.n	800879a <UART_SetConfig+0x322>
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878e:	d204      	bcs.n	800879a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	60da      	str	r2, [r3, #12]
 8008798:	e0c8      	b.n	800892c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087a0:	e0c4      	b.n	800892c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087aa:	d168      	bne.n	800887e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80087ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d828      	bhi.n	8008806 <UART_SetConfig+0x38e>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0x344>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087e9 	.word	0x080087e9
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	08008807 	.word	0x08008807
 80087cc:	080087f7 	.word	0x080087f7
 80087d0:	08008807 	.word	0x08008807
 80087d4:	08008807 	.word	0x08008807
 80087d8:	08008807 	.word	0x08008807
 80087dc:	080087ff 	.word	0x080087ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087e0:	f7fd fe98 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087e6:	e014      	b.n	8008812 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e8:	f7fd fea6 	bl	8006538 <HAL_RCC_GetPCLK2Freq>
 80087ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087ee:	e010      	b.n	8008812 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087f0:	4b5a      	ldr	r3, [pc, #360]	; (800895c <UART_SetConfig+0x4e4>)
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087f4:	e00d      	b.n	8008812 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087f6:	f7fd fdd9 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 80087fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fc:	e009      	b.n	8008812 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008804:	e005      	b.n	8008812 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8089 	beq.w	800892c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	4a4e      	ldr	r2, [pc, #312]	; (8008958 <UART_SetConfig+0x4e0>)
 8008820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008824:	461a      	mov	r2, r3
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	fbb3 f3f2 	udiv	r3, r3, r2
 800882c:	005a      	lsls	r2, r3, #1
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	441a      	add	r2, r3
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	fbb2 f3f3 	udiv	r3, r2, r3
 800883e:	b29b      	uxth	r3, r3
 8008840:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	2b0f      	cmp	r3, #15
 8008846:	d916      	bls.n	8008876 <UART_SetConfig+0x3fe>
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884e:	d212      	bcs.n	8008876 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f023 030f 	bic.w	r3, r3, #15
 8008858:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	b29a      	uxth	r2, r3
 8008866:	8bfb      	ldrh	r3, [r7, #30]
 8008868:	4313      	orrs	r3, r2
 800886a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	8bfa      	ldrh	r2, [r7, #30]
 8008872:	60da      	str	r2, [r3, #12]
 8008874:	e05a      	b.n	800892c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800887c:	e056      	b.n	800892c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800887e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008882:	2b08      	cmp	r3, #8
 8008884:	d827      	bhi.n	80088d6 <UART_SetConfig+0x45e>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <UART_SetConfig+0x414>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088c1 	.word	0x080088c1
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088d7 	.word	0x080088d7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b0:	f7fd fe30 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 80088b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088b6:	e014      	b.n	80088e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b8:	f7fd fe3e 	bl	8006538 <HAL_RCC_GetPCLK2Freq>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b26      	ldr	r3, [pc, #152]	; (800895c <UART_SetConfig+0x4e4>)
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fd fd71 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088e0:	bf00      	nop
    }

    if (pclk != 0U)
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d021      	beq.n	800892c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	4a1a      	ldr	r2, [pc, #104]	; (8008958 <UART_SetConfig+0x4e0>)
 80088ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	441a      	add	r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	fbb2 f3f3 	udiv	r3, r2, r3
 800890a:	b29b      	uxth	r3, r3
 800890c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	2b0f      	cmp	r3, #15
 8008912:	d908      	bls.n	8008926 <UART_SetConfig+0x4ae>
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800891a:	d204      	bcs.n	8008926 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a3a      	ldr	r2, [r7, #32]
 8008922:	60da      	str	r2, [r3, #12]
 8008924:	e002      	b.n	800892c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2200      	movs	r2, #0
 8008940:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008948:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800894c:	4618      	mov	r0, r3
 800894e:	3730      	adds	r7, #48	; 0x30
 8008950:	46bd      	mov	sp, r7
 8008952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008956:	bf00      	nop
 8008958:	0801e2c4 	.word	0x0801e2c4
 800895c:	00f42400 	.word	0x00f42400

08008960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01a      	beq.n	8008a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5e:	d10a      	bne.n	8008a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr

08008aa2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af02      	add	r7, sp, #8
 8008aa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab2:	f7f9 f8c1 	bl	8001c38 <HAL_GetTick>
 8008ab6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d10e      	bne.n	8008ae4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f82f 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e025      	b.n	8008b30 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d10e      	bne.n	8008b10 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f819 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e00f      	b.n	8008b30 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b09c      	sub	sp, #112	; 0x70
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b48:	e0a9      	b.n	8008c9e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	f000 80a5 	beq.w	8008c9e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b54:	f7f9 f870 	bl	8001c38 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <UART_WaitOnFlagUntilTimeout+0x32>
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d140      	bne.n	8008bec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e069      	b.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d051      	beq.n	8008c9e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c08:	d149      	bne.n	8008c9e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
 8008c34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e6      	bne.n	8008c14 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	613b      	str	r3, [r7, #16]
   return(result);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c66:	623a      	str	r2, [r7, #32]
 8008c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	69f9      	ldr	r1, [r7, #28]
 8008c6c:	6a3a      	ldr	r2, [r7, #32]
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e5      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e010      	b.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69da      	ldr	r2, [r3, #28]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	bf0c      	ite	eq
 8008cae:	2301      	moveq	r3, #1
 8008cb0:	2300      	movne	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	f43f af46 	beq.w	8008b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3770      	adds	r7, #112	; 0x70
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b09d      	sub	sp, #116	; 0x74
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfa:	d10e      	bne.n	8008d1a <UART_Start_Receive_IT+0x52>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <UART_Start_Receive_IT+0x48>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d0e:	e02d      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	22ff      	movs	r2, #255	; 0xff
 8008d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d18:	e028      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10d      	bne.n	8008d3e <UART_Start_Receive_IT+0x76>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <UART_Start_Receive_IT+0x6c>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	22ff      	movs	r2, #255	; 0xff
 8008d2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d32:	e01b      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	227f      	movs	r2, #127	; 0x7f
 8008d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d3c:	e016      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d46:	d10d      	bne.n	8008d64 <UART_Start_Receive_IT+0x9c>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <UART_Start_Receive_IT+0x92>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	227f      	movs	r2, #127	; 0x7f
 8008d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d58:	e008      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	223f      	movs	r2, #63	; 0x3f
 8008d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d62:	e003      	b.n	8008d6c <UART_Start_Receive_IT+0xa4>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2222      	movs	r2, #34	; 0x22
 8008d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3308      	adds	r3, #8
 8008d9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d9c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008d9e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e5      	bne.n	8008d7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db8:	d14d      	bne.n	8008e56 <UART_Start_Receive_IT+0x18e>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d347      	bcc.n	8008e56 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	d107      	bne.n	8008de0 <UART_Start_Receive_IT+0x118>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a38      	ldr	r2, [pc, #224]	; (8008ebc <UART_Start_Receive_IT+0x1f4>)
 8008ddc:	671a      	str	r2, [r3, #112]	; 0x70
 8008dde:	e002      	b.n	8008de6 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a37      	ldr	r2, [pc, #220]	; (8008ec0 <UART_Start_Receive_IT+0x1f8>)
 8008de4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e0e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e6      	bne.n	8008dee <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3308      	adds	r3, #8
 8008e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e36:	667b      	str	r3, [r7, #100]	; 0x64
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e40:	637a      	str	r2, [r7, #52]	; 0x34
 8008e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e5      	bne.n	8008e20 <UART_Start_Receive_IT+0x158>
 8008e54:	e02c      	b.n	8008eb0 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5e:	d107      	bne.n	8008e70 <UART_Start_Receive_IT+0x1a8>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a16      	ldr	r2, [pc, #88]	; (8008ec4 <UART_Start_Receive_IT+0x1fc>)
 8008e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8008e6e:	e002      	b.n	8008e76 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <UART_Start_Receive_IT+0x200>)
 8008e74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e92:	663b      	str	r3, [r7, #96]	; 0x60
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	69f9      	ldr	r1, [r7, #28]
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e6      	bne.n	8008e7e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3774      	adds	r7, #116	; 0x74
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr
 8008ebc:	08009789 	.word	0x08009789
 8008ec0:	08009491 	.word	0x08009491
 8008ec4:	0800932f 	.word	0x0800932f
 8008ec8:	080091cf 	.word	0x080091cf

08008ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b08f      	sub	sp, #60	; 0x3c
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f26:	61ba      	str	r2, [r7, #24]
 8008f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6979      	ldr	r1, [r7, #20]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	613b      	str	r3, [r7, #16]
   return(result);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e5      	bne.n	8008f06 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008f42:	bf00      	nop
 8008f44:	373c      	adds	r7, #60	; 0x3c
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b095      	sub	sp, #84	; 0x54
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	643b      	str	r3, [r7, #64]	; 0x40
 8008f74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e3      	bne.n	8008f86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d118      	bne.n	8008ff8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f023 0310 	bic.w	r3, r3, #16
 8008fda:	647b      	str	r3, [r7, #68]	; 0x44
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6979      	ldr	r1, [r7, #20]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800900c:	bf00      	nop
 800900e:	3754      	adds	r7, #84	; 0x54
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b090      	sub	sp, #64	; 0x40
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d137      	bne.n	80090a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009034:	2200      	movs	r2, #0
 8009036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800903a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	623b      	str	r3, [r7, #32]
   return(result);
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38
 8009052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800905a:	633a      	str	r2, [r7, #48]	; 0x30
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e5      	bne.n	800903a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800906e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	60fb      	str	r3, [r7, #12]
   return(result);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	61fb      	str	r3, [r7, #28]
 800908e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	69b9      	ldr	r1, [r7, #24]
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	617b      	str	r3, [r7, #20]
   return(result);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e6      	bne.n	800906e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090a0:	e002      	b.n	80090a8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090a4:	f7f9 fafc 	bl	80026a0 <HAL_UART_TxCpltCallback>
}
 80090a8:	bf00      	nop
 80090aa:	3740      	adds	r7, #64	; 0x40
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff f9bc 	bl	800843c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f4:	2b80      	cmp	r3, #128	; 0x80
 80090f6:	d109      	bne.n	800910c <UART_DMAError+0x40>
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2b21      	cmp	r3, #33	; 0x21
 80090fc:	d106      	bne.n	800910c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2200      	movs	r2, #0
 8009102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009106:	6978      	ldr	r0, [r7, #20]
 8009108:	f7ff fee0 	bl	8008ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d109      	bne.n	800912e <UART_DMAError+0x62>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b22      	cmp	r3, #34	; 0x22
 800911e:	d106      	bne.n	800912e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2200      	movs	r2, #0
 8009124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009128:	6978      	ldr	r0, [r7, #20]
 800912a:	f7ff ff0f 	bl	8008f4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800913e:	6978      	ldr	r0, [r7, #20]
 8009140:	f7ff f985 	bl	800844e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009144:	bf00      	nop
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff f96f 	bl	800844e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	60bb      	str	r3, [r7, #8]
   return(result);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009194:	61fb      	str	r3, [r7, #28]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6979      	ldr	r1, [r7, #20]
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	613b      	str	r3, [r7, #16]
   return(result);
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e6      	bne.n	8009180 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7f9 fa6d 	bl	80026a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091c6:	bf00      	nop
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b096      	sub	sp, #88	; 0x58
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	2b22      	cmp	r3, #34	; 0x22
 80091e8:	f040 8095 	bne.w	8009316 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091fa:	b2d9      	uxtb	r1, r3
 80091fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009200:	b2da      	uxtb	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009206:	400a      	ands	r2, r1
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d178      	bne.n	8009326 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009248:	653b      	str	r3, [r7, #80]	; 0x50
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009252:	647b      	str	r3, [r7, #68]	; 0x44
 8009254:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e6      	bne.n	8009234 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	623b      	str	r3, [r7, #32]
   return(result);
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009286:	633a      	str	r2, [r7, #48]	; 0x30
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800928c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e5      	bne.n	8009266 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d12e      	bne.n	800930e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	617b      	str	r3, [r7, #20]
   return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d103      	bne.n	80092fe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2210      	movs	r2, #16
 80092fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff f8aa 	bl	8008460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800930c:	e00b      	b.n	8009326 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f9 f9d4 	bl	80026bc <HAL_UART_RxCpltCallback>
}
 8009314:	e007      	b.n	8009326 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0208 	orr.w	r2, r2, #8
 8009324:	619a      	str	r2, [r3, #24]
}
 8009326:	bf00      	nop
 8009328:	3758      	adds	r7, #88	; 0x58
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b096      	sub	sp, #88	; 0x58
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800933c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009346:	2b22      	cmp	r3, #34	; 0x22
 8009348:	f040 8095 	bne.w	8009476 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800935c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009360:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009364:	4013      	ands	r3, r2
 8009366:	b29a      	uxth	r2, r3
 8009368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	1c9a      	adds	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	3b01      	subs	r3, #1
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800938e:	b29b      	uxth	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d178      	bne.n	8009486 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	643b      	str	r3, [r7, #64]	; 0x40
 80093b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e6      	bne.n	8009394 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3308      	adds	r3, #8
 80093e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e5      	bne.n	80093c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d12e      	bne.n	800946e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	60bb      	str	r3, [r7, #8]
   return(result);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f023 0310 	bic.w	r3, r3, #16
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	613b      	str	r3, [r7, #16]
   return(result);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b10      	cmp	r3, #16
 8009454:	d103      	bne.n	800945e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2210      	movs	r2, #16
 800945c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fe fffa 	bl	8008460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800946c:	e00b      	b.n	8009486 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7f9 f924 	bl	80026bc <HAL_UART_RxCpltCallback>
}
 8009474:	e007      	b.n	8009486 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699a      	ldr	r2, [r3, #24]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0208 	orr.w	r2, r2, #8
 8009484:	619a      	str	r2, [r3, #24]
}
 8009486:	bf00      	nop
 8009488:	3758      	adds	r7, #88	; 0x58
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b0a6      	sub	sp, #152	; 0x98
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800949e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c6:	2b22      	cmp	r3, #34	; 0x22
 80094c8:	f040 814f 	bne.w	800976a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094d6:	e0f6      	b.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094e2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80094e6:	b2d9      	uxtb	r1, r3
 80094e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	400a      	ands	r2, r1
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800951e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	2b00      	cmp	r3, #0
 8009528:	d053      	beq.n	80095d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800952a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d011      	beq.n	800955a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800953a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00b      	beq.n	800955a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2201      	movs	r2, #1
 8009548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009550:	f043 0201 	orr.w	r2, r3, #1
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800955a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d011      	beq.n	800958a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2202      	movs	r2, #2
 8009578:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009580:	f043 0204 	orr.w	r2, r3, #4
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800958a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	d011      	beq.n	80095ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2204      	movs	r2, #4
 80095a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b0:	f043 0202 	orr.w	r2, r3, #2
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d006      	beq.n	80095d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7fe ff42 	bl	800844e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d173      	bne.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80095ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009600:	66bb      	str	r3, [r7, #104]	; 0x68
 8009602:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800960e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e4      	bne.n	80095de <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3308      	adds	r3, #8
 800961a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800962a:	f023 0301 	bic.w	r3, r3, #1
 800962e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3308      	adds	r3, #8
 8009636:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009638:	657a      	str	r2, [r7, #84]	; 0x54
 800963a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800963e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009640:	e841 2300 	strex	r3, r2, [r1]
 8009644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1e3      	bne.n	8009614 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965e:	2b01      	cmp	r3, #1
 8009660:	d12e      	bne.n	80096c0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	f023 0310 	bic.w	r3, r3, #16
 800967c:	67bb      	str	r3, [r7, #120]	; 0x78
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009686:	643b      	str	r3, [r7, #64]	; 0x40
 8009688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800968c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e6      	bne.n	8009668 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d103      	bne.n	80096b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2210      	movs	r2, #16
 80096ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7fe fed1 	bl	8008460 <HAL_UARTEx_RxEventCallback>
 80096be:	e002      	b.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7f8 fffb 	bl	80026bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80096ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096d2:	f003 0320 	and.w	r3, r3, #32
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f47f aefe 	bne.w	80094d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d045      	beq.n	800977a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d23e      	bcs.n	800977a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3308      	adds	r3, #8
 8009702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	61fb      	str	r3, [r7, #28]
   return(result);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009712:	673b      	str	r3, [r7, #112]	; 0x70
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3308      	adds	r3, #8
 800971a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800971c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e5      	bne.n	80096fc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a14      	ldr	r2, [pc, #80]	; (8009784 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009734:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	e853 3f00 	ldrex	r3, [r3]
 8009742:	60bb      	str	r3, [r7, #8]
   return(result);
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f043 0320 	orr.w	r3, r3, #32
 800974a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009754:	61bb      	str	r3, [r7, #24]
 8009756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009758:	6979      	ldr	r1, [r7, #20]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	e841 2300 	strex	r3, r2, [r1]
 8009760:	613b      	str	r3, [r7, #16]
   return(result);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e6      	bne.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009768:	e007      	b.n	800977a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0208 	orr.w	r2, r2, #8
 8009778:	619a      	str	r2, [r3, #24]
}
 800977a:	bf00      	nop
 800977c:	3798      	adds	r7, #152	; 0x98
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	080091cf 	.word	0x080091cf

08009788 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b0a8      	sub	sp, #160	; 0xa0
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009796:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097be:	2b22      	cmp	r3, #34	; 0x22
 80097c0:	f040 8153 	bne.w	8009a6a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ce:	e0fa      	b.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80097e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80097e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097ea:	4013      	ands	r3, r2
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f8:	1c9a      	adds	r2, r3, #2
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800981a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	2b00      	cmp	r3, #0
 8009824:	d053      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009826:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d011      	beq.n	8009856 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00b      	beq.n	8009856 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2201      	movs	r2, #1
 8009844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984c:	f043 0201 	orr.w	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009856:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2202      	movs	r2, #2
 8009874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987c:	f043 0204 	orr.w	r2, r3, #4
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2204      	movs	r2, #4
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ac:	f043 0202 	orr.w	r2, r3, #2
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d006      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe fdc4 	bl	800844e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d175      	bne.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009902:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800990a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e4      	bne.n	80098da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3308      	adds	r3, #8
 8009916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009938:	65ba      	str	r2, [r7, #88]	; 0x58
 800993a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e1      	bne.n	8009910 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2220      	movs	r2, #32
 8009950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d12e      	bne.n	80099c0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	f023 0310 	bic.w	r3, r3, #16
 800997c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009986:	647b      	str	r3, [r7, #68]	; 0x44
 8009988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800998c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e6      	bne.n	8009968 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d103      	bne.n	80099b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2210      	movs	r2, #16
 80099ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7fe fd51 	bl	8008460 <HAL_UARTEx_RxEventCallback>
 80099be:	e002      	b.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7f8 fe7b 	bl	80026bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d006      	beq.n	80099dc <UART_RxISR_16BIT_FIFOEN+0x254>
 80099ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f47f aefa 	bne.w	80097d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d045      	beq.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099f4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d23e      	bcs.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3308      	adds	r3, #8
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a12:	677b      	str	r3, [r7, #116]	; 0x74
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a1c:	633a      	str	r2, [r7, #48]	; 0x30
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e5      	bne.n	80099fc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a14      	ldr	r2, [pc, #80]	; (8009a84 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009a34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f043 0320 	orr.w	r3, r3, #32
 8009a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a54:	61fb      	str	r3, [r7, #28]
 8009a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	69b9      	ldr	r1, [r7, #24]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	617b      	str	r3, [r7, #20]
   return(result);
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a68:	e007      	b.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0208 	orr.w	r2, r2, #8
 8009a78:	619a      	str	r2, [r3, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	37a0      	adds	r7, #160	; 0xa0
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	0800932f 	.word	0x0800932f

08009a88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bc80      	pop	{r7}
 8009abc:	4770      	bx	lr

08009abe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b088      	sub	sp, #32
 8009ac2:	af02      	add	r7, sp, #8
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	1d3b      	adds	r3, r7, #4
 8009ac8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e046      	b.n	8009b6c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2224      	movs	r2, #36	; 0x24
 8009aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009b18:	1d3b      	adds	r3, r7, #4
 8009b1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f911 	bl	8009d46 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0201 	orr.w	r2, r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b34:	f7f8 f880 	bl	8001c38 <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7fe fff5 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e003      	b.n	8009b62 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b089      	sub	sp, #36	; 0x24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <HAL_UARTEx_EnableStopMode+0x16>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e021      	b.n	8009bce <HAL_UARTEx_EnableStopMode+0x5a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	61bb      	str	r3, [r7, #24]
 8009bb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6979      	ldr	r1, [r7, #20]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e6      	bne.n	8009b92 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3724      	adds	r7, #36	; 0x24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc80      	pop	{r7}
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_UARTEx_EnableFifoMode+0x16>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e02b      	b.n	8009c46 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2224      	movs	r2, #36	; 0x24
 8009bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0201 	bic.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f8ac 	bl	8009d8c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e02d      	b.n	8009cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	; 0x24
 8009c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f872 	bl	8009d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e02d      	b.n	8009d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2224      	movs	r2, #36	; 0x24
 8009cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0201 	bic.w	r2, r2, #1
 8009d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f834 	bl	8009d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	1d3b      	adds	r3, r7, #4
 8009d50:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f023 0210 	bic.w	r2, r3, #16
 8009d5e:	893b      	ldrh	r3, [r7, #8]
 8009d60:	4619      	mov	r1, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009d74:	7abb      	ldrb	r3, [r7, #10]
 8009d76:	061a      	lsls	r2, r3, #24
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]
}
 8009d80:	bf00      	nop
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr
	...

08009d8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d108      	bne.n	8009dae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dac:	e031      	b.n	8009e12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dae:	2308      	movs	r3, #8
 8009db0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009db2:	2308      	movs	r3, #8
 8009db4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	0e5b      	lsrs	r3, r3, #25
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	0f5b      	lsrs	r3, r3, #29
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	7b3a      	ldrb	r2, [r7, #12]
 8009dda:	4910      	ldr	r1, [pc, #64]	; (8009e1c <UARTEx_SetNbDataToProcess+0x90>)
 8009ddc:	5c8a      	ldrb	r2, [r1, r2]
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009de2:	7b3a      	ldrb	r2, [r7, #12]
 8009de4:	490e      	ldr	r1, [pc, #56]	; (8009e20 <UARTEx_SetNbDataToProcess+0x94>)
 8009de6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	7b7a      	ldrb	r2, [r7, #13]
 8009df8:	4908      	ldr	r1, [pc, #32]	; (8009e1c <UARTEx_SetNbDataToProcess+0x90>)
 8009dfa:	5c8a      	ldrb	r2, [r1, r2]
 8009dfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e00:	7b7a      	ldrb	r2, [r7, #13]
 8009e02:	4907      	ldr	r1, [pc, #28]	; (8009e20 <UARTEx_SetNbDataToProcess+0x94>)
 8009e04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bc80      	pop	{r7}
 8009e1a:	4770      	bx	lr
 8009e1c:	0801e2dc 	.word	0x0801e2dc
 8009e20:	0801e2e4 	.word	0x0801e2e4

08009e24 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009e28:	f7f7 fdac 	bl	8001984 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009e2c:	f000 f80a 	bl	8009e44 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009e30:	bf00      	nop
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3c:	f012 fcde 	bl	801c7fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009e40:	bf00      	nop
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_RED);
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f7f8 fc98 	bl	8002780 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009e50:	2101      	movs	r1, #1
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7f8 fcf2 	bl	800283c <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	2301      	movs	r3, #1
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4b2b      	ldr	r3, [pc, #172]	; (8009f14 <LoRaWAN_Init+0xd0>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	2002      	movs	r0, #2
 8009e6c:	f012 f96e 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009e70:	2300      	movs	r3, #0
 8009e72:	9302      	str	r3, [sp, #8]
 8009e74:	2303      	movs	r3, #3
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	2302      	movs	r3, #2
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	4b26      	ldr	r3, [pc, #152]	; (8009f18 <LoRaWAN_Init+0xd4>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2100      	movs	r1, #0
 8009e82:	2002      	movs	r0, #2
 8009e84:	f012 f962 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	2301      	movs	r3, #1
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4b21      	ldr	r3, [pc, #132]	; (8009f1c <LoRaWAN_Init+0xd8>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	2002      	movs	r0, #2
 8009e9c:	f012 f956 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n\r\n\r\n----------LoRaWAN_End_Node_FreeRTOS----------\r\n\r\n\r\n");
 8009ea0:	4b1f      	ldr	r3, [pc, #124]	; (8009f20 <LoRaWAN_Init+0xdc>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	2002      	movs	r0, #2
 8009ea8:	f012 f950 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <LoRaWAN_Init+0xe0>)
 8009eae:	2100      	movs	r1, #0
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	f012 fd87 	bl	801c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009eb6:	4a1c      	ldr	r2, [pc, #112]	; (8009f28 <LoRaWAN_Init+0xe4>)
 8009eb8:	2100      	movs	r1, #0
 8009eba:	2002      	movs	r0, #2
 8009ebc:	f012 fd82 	bl	801c9c4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009ec0:	f000 fac6 	bl	800a450 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009ec4:	4819      	ldr	r0, [pc, #100]	; (8009f2c <LoRaWAN_Init+0xe8>)
 8009ec6:	f003 faef 	bl	800d4a8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009eca:	4819      	ldr	r0, [pc, #100]	; (8009f30 <LoRaWAN_Init+0xec>)
 8009ecc:	f003 fb38 	bl	800d540 <LmHandlerConfigure>


  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009ed0:	4b18      	ldr	r3, [pc, #96]	; (8009f34 <LoRaWAN_Init+0xf0>)
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f003 fc69 	bl	800d7ac <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009eda:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <LoRaWAN_Init+0xf4>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d111      	bne.n	8009f06 <LoRaWAN_Init+0xc2>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <LoRaWAN_Init+0xf8>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f04f 31ff 	mov.w	r1, #4294967295
 8009eee:	4814      	ldr	r0, [pc, #80]	; (8009f40 <LoRaWAN_Init+0xfc>)
 8009ef0:	f012 ff68 	bl	801cdc4 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8009ef4:	f242 7110 	movw	r1, #10000	; 0x2710
 8009ef8:	4811      	ldr	r0, [pc, #68]	; (8009f40 <LoRaWAN_Init+0xfc>)
 8009efa:	f013 f877 	bl	801cfec <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009efe:	4810      	ldr	r0, [pc, #64]	; (8009f40 <LoRaWAN_Init+0xfc>)
 8009f00:	f012 ff96 	bl	801ce30 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009f04:	e003      	b.n	8009f0e <LoRaWAN_Init+0xca>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009f06:	2101      	movs	r1, #1
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f7f8 fc97 	bl	800283c <BSP_PB_Init>
}
 8009f0e:	bf00      	nop
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	0801d994 	.word	0x0801d994
 8009f18:	0801d9b4 	.word	0x0801d9b4
 8009f1c:	0801d9d4 	.word	0x0801d9d4
 8009f20:	0801d9f4 	.word	0x0801d9f4
 8009f24:	0800d799 	.word	0x0800d799
 8009f28:	0800a095 	.word	0x0800a095
 8009f2c:	2000001c 	.word	0x2000001c
 8009f30:	20000050 	.word	0x20000050
 8009f34:	20000019 	.word	0x20000019
 8009f38:	20000c70 	.word	0x20000c70
 8009f3c:	0800a301 	.word	0x0800a301
 8009f40:	20000c74 	.word	0x20000c74

08009f44 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f54:	d104      	bne.n	8009f60 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUTTON_SW1_PIN:
      /* Note: when "EventType == TX_ON_TIMER" this GPIO is not initialized */
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009f56:	2100      	movs	r1, #0
 8009f58:	2002      	movs	r0, #2
 8009f5a:	f012 fd55 	bl	801ca08 <UTIL_SEQ_SetTask>
      break;
 8009f5e:	e000      	b.n	8009f62 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009f60:	bf00      	nop
  }
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009f6c:	b5b0      	push	{r4, r5, r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af06      	add	r7, sp, #24
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <OnRxData+0x16>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d072      	beq.n	800a068 <OnRxData+0xfc>
  {
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009f82:	4b3e      	ldr	r3, [pc, #248]	; (800a07c <OnRxData+0x110>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	2002      	movs	r0, #2
 8009f8a:	f012 f8df 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4a39      	ldr	r2, [pc, #228]	; (800a080 <OnRxData+0x114>)
 8009f9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	7809      	ldrb	r1, [r1, #0]
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8009fac:	460c      	mov	r4, r1
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8009fbc:	9105      	str	r1, [sp, #20]
 8009fbe:	9504      	str	r5, [sp, #16]
 8009fc0:	9403      	str	r4, [sp, #12]
 8009fc2:	9002      	str	r0, [sp, #8]
 8009fc4:	9201      	str	r2, [sp, #4]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <OnRxData+0x118>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	2003      	movs	r0, #3
 8009fd0:	f012 f8bc 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d021      	beq.n	800a020 <OnRxData+0xb4>
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d145      	bne.n	800a06c <OnRxData+0x100>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d117      	bne.n	800a018 <OnRxData+0xac>
        {
          switch (appData->Buffer[0])
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d00e      	beq.n	800a010 <OnRxData+0xa4>
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	dc12      	bgt.n	800a01c <OnRxData+0xb0>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <OnRxData+0x94>
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d004      	beq.n	800a008 <OnRxData+0x9c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8009ffe:	e00d      	b.n	800a01c <OnRxData+0xb0>
              LmHandlerRequestClass(CLASS_A);
 800a000:	2000      	movs	r0, #0
 800a002:	f003 fd35 	bl	800da70 <LmHandlerRequestClass>
              break;
 800a006:	e00a      	b.n	800a01e <OnRxData+0xb2>
              LmHandlerRequestClass(CLASS_B);
 800a008:	2001      	movs	r0, #1
 800a00a:	f003 fd31 	bl	800da70 <LmHandlerRequestClass>
              break;
 800a00e:	e006      	b.n	800a01e <OnRxData+0xb2>
              LmHandlerRequestClass(CLASS_C);
 800a010:	2002      	movs	r0, #2
 800a012:	f003 fd2d 	bl	800da70 <LmHandlerRequestClass>
              break;
 800a016:	e002      	b.n	800a01e <OnRxData+0xb2>
          }
        }
 800a018:	bf00      	nop
 800a01a:	e02a      	b.n	800a072 <OnRxData+0x106>
              break;
 800a01c:	bf00      	nop
        break;
 800a01e:	e028      	b.n	800a072 <OnRxData+0x106>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d123      	bne.n	800a070 <OnRxData+0x104>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	b2da      	uxtb	r2, r3
 800a034:	4b14      	ldr	r3, [pc, #80]	; (800a088 <OnRxData+0x11c>)
 800a036:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a038:	4b13      	ldr	r3, [pc, #76]	; (800a088 <OnRxData+0x11c>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d109      	bne.n	800a054 <OnRxData+0xe8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <OnRxData+0x120>)
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	2003      	movs	r0, #3
 800a048:	f012 f880 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a04c:	2000      	movs	r0, #0
 800a04e:	f7f8 fbdf 	bl	8002810 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a052:	e00d      	b.n	800a070 <OnRxData+0x104>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <OnRxData+0x124>)
 800a056:	2200      	movs	r2, #0
 800a058:	2100      	movs	r1, #0
 800a05a:	2003      	movs	r0, #3
 800a05c:	f012 f876 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a060:	2000      	movs	r0, #0
 800a062:	f7f8 fbbf 	bl	80027e4 <BSP_LED_On>
        break;
 800a066:	e003      	b.n	800a070 <OnRxData+0x104>

      default:

        break;
    }
  }
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <OnRxData+0x106>
        break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <OnRxData+0x106>
        break;
 800a070:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bdb0      	pop	{r4, r5, r7, pc}
 800a07a:	bf00      	nop
 800a07c:	0801da30 	.word	0x0801da30
 800a080:	20000068 	.word	0x20000068
 800a084:	0801da64 	.word	0x0801da64
 800a088:	20000d7e 	.word	0x20000d7e
 800a08c:	0801daac 	.word	0x0801daac
 800a090:	0801dab8 	.word	0x0801dab8

0800a094 <SendTxData>:

static void SendTxData(void)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b091      	sub	sp, #68	; 0x44
 800a098:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f7 fdea 	bl	8001c98 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a0c4:	f7f6 ff7e 	bl	8000fc4 <SYS_GetTemperatureLevel>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	121b      	asrs	r3, r3, #8
 800a0cc:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	4983      	ldr	r1, [pc, #524]	; (800a2e0 <SendTxData+0x24c>)
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f6 fbd6 	bl	8000884 <__aeabi_fmul>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4982      	ldr	r1, [pc, #520]	; (800a2e4 <SendTxData+0x250>)
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f6 fc85 	bl	80009ec <__aeabi_fdiv>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f6 fd1d 	bl	8000b24 <__aeabi_f2uiz>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a0ee:	4b7e      	ldr	r3, [pc, #504]	; (800a2e8 <SendTxData+0x254>)
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	497b      	ldr	r1, [pc, #492]	; (800a2e4 <SendTxData+0x250>)
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f6 fbc3 	bl	8000884 <__aeabi_fmul>
 800a0fe:	4603      	mov	r3, r0
 800a100:	4618      	mov	r0, r3
 800a102:	f7f6 fd0f 	bl	8000b24 <__aeabi_f2uiz>
 800a106:	4603      	mov	r3, r0
 800a108:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a10a:	4b77      	ldr	r3, [pc, #476]	; (800a2e8 <SendTxData+0x254>)
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a110:	1c59      	adds	r1, r3, #1
 800a112:	6379      	str	r1, [r7, #52]	; 0x34
 800a114:	4413      	add	r3, r2
 800a116:	4a75      	ldr	r2, [pc, #468]	; (800a2ec <SendTxData+0x258>)
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a11c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	b298      	uxth	r0, r3
 800a122:	4b71      	ldr	r3, [pc, #452]	; (800a2e8 <SendTxData+0x254>)
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	1c59      	adds	r1, r3, #1
 800a12a:	6379      	str	r1, [r7, #52]	; 0x34
 800a12c:	4413      	add	r3, r2
 800a12e:	b2c2      	uxtb	r2, r0
 800a130:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a132:	4b6d      	ldr	r3, [pc, #436]	; (800a2e8 <SendTxData+0x254>)
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a138:	1c59      	adds	r1, r3, #1
 800a13a:	6379      	str	r1, [r7, #52]	; 0x34
 800a13c:	4413      	add	r3, r2
 800a13e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a144:	4b68      	ldr	r3, [pc, #416]	; (800a2e8 <SendTxData+0x254>)
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	6379      	str	r1, [r7, #52]	; 0x34
 800a14e:	4413      	add	r3, r2
 800a150:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a158:	0a1b      	lsrs	r3, r3, #8
 800a15a:	b298      	uxth	r0, r3
 800a15c:	4b62      	ldr	r3, [pc, #392]	; (800a2e8 <SendTxData+0x254>)
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	1c59      	adds	r1, r3, #1
 800a164:	6379      	str	r1, [r7, #52]	; 0x34
 800a166:	4413      	add	r3, r2
 800a168:	b2c2      	uxtb	r2, r0
 800a16a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a16c:	4b5e      	ldr	r3, [pc, #376]	; (800a2e8 <SendTxData+0x254>)
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a172:	1c59      	adds	r1, r3, #1
 800a174:	6379      	str	r1, [r7, #52]	; 0x34
 800a176:	4413      	add	r3, r2
 800a178:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a17e:	4b5c      	ldr	r3, [pc, #368]	; (800a2f0 <SendTxData+0x25c>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b08      	cmp	r3, #8
 800a184:	d007      	beq.n	800a196 <SendTxData+0x102>
 800a186:	4b5a      	ldr	r3, [pc, #360]	; (800a2f0 <SendTxData+0x25c>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d003      	beq.n	800a196 <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a18e:	4b58      	ldr	r3, [pc, #352]	; (800a2f0 <SendTxData+0x25c>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d120      	bne.n	800a1d8 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a196:	4b54      	ldr	r3, [pc, #336]	; (800a2e8 <SendTxData+0x254>)
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19c:	1c59      	adds	r1, r3, #1
 800a19e:	6379      	str	r1, [r7, #52]	; 0x34
 800a1a0:	4413      	add	r3, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a1a6:	4b50      	ldr	r3, [pc, #320]	; (800a2e8 <SendTxData+0x254>)
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	1c59      	adds	r1, r3, #1
 800a1ae:	6379      	str	r1, [r7, #52]	; 0x34
 800a1b0:	4413      	add	r3, r2
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a1b6:	4b4c      	ldr	r3, [pc, #304]	; (800a2e8 <SendTxData+0x254>)
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1bc:	1c59      	adds	r1, r3, #1
 800a1be:	6379      	str	r1, [r7, #52]	; 0x34
 800a1c0:	4413      	add	r3, r2
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a1c6:	4b48      	ldr	r3, [pc, #288]	; (800a2e8 <SendTxData+0x254>)
 800a1c8:	685a      	ldr	r2, [r3, #4]
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1cc:	1c59      	adds	r1, r3, #1
 800a1ce:	6379      	str	r1, [r7, #52]	; 0x34
 800a1d0:	4413      	add	r3, r2
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	e05b      	b.n	800a290 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a1e0:	4b41      	ldr	r3, [pc, #260]	; (800a2e8 <SendTxData+0x254>)
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e6:	1c59      	adds	r1, r3, #1
 800a1e8:	6379      	str	r1, [r7, #52]	; 0x34
 800a1ea:	18d4      	adds	r4, r2, r3
 800a1ec:	f7f7 fbf0 	bl	80019d0 <GetBatteryLevel>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	1418      	asrs	r0, r3, #16
 800a1f8:	4b3b      	ldr	r3, [pc, #236]	; (800a2e8 <SendTxData+0x254>)
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fe:	1c59      	adds	r1, r3, #1
 800a200:	6379      	str	r1, [r7, #52]	; 0x34
 800a202:	4413      	add	r3, r2
 800a204:	b2c2      	uxtb	r2, r0
 800a206:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	1218      	asrs	r0, r3, #8
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <SendTxData+0x254>)
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a212:	1c59      	adds	r1, r3, #1
 800a214:	6379      	str	r1, [r7, #52]	; 0x34
 800a216:	4413      	add	r3, r2
 800a218:	b2c2      	uxtb	r2, r0
 800a21a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a21c:	4b32      	ldr	r3, [pc, #200]	; (800a2e8 <SendTxData+0x254>)
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	1c59      	adds	r1, r3, #1
 800a224:	6379      	str	r1, [r7, #52]	; 0x34
 800a226:	4413      	add	r3, r2
 800a228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	1418      	asrs	r0, r3, #16
 800a232:	4b2d      	ldr	r3, [pc, #180]	; (800a2e8 <SendTxData+0x254>)
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	1c59      	adds	r1, r3, #1
 800a23a:	6379      	str	r1, [r7, #52]	; 0x34
 800a23c:	4413      	add	r3, r2
 800a23e:	b2c2      	uxtb	r2, r0
 800a240:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	1218      	asrs	r0, r3, #8
 800a246:	4b28      	ldr	r3, [pc, #160]	; (800a2e8 <SendTxData+0x254>)
 800a248:	685a      	ldr	r2, [r3, #4]
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	1c59      	adds	r1, r3, #1
 800a24e:	6379      	str	r1, [r7, #52]	; 0x34
 800a250:	4413      	add	r3, r2
 800a252:	b2c2      	uxtb	r2, r0
 800a254:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a256:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <SendTxData+0x254>)
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25c:	1c59      	adds	r1, r3, #1
 800a25e:	6379      	str	r1, [r7, #52]	; 0x34
 800a260:	4413      	add	r3, r2
 800a262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a26a:	0a1b      	lsrs	r3, r3, #8
 800a26c:	b298      	uxth	r0, r3
 800a26e:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <SendTxData+0x254>)
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a274:	1c59      	adds	r1, r3, #1
 800a276:	6379      	str	r1, [r7, #52]	; 0x34
 800a278:	4413      	add	r3, r2
 800a27a:	b2c2      	uxtb	r2, r0
 800a27c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a27e:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <SendTxData+0x254>)
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	1c59      	adds	r1, r3, #1
 800a286:	6379      	str	r1, [r7, #52]	; 0x34
 800a288:	4413      	add	r3, r2
 800a28a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	b2da      	uxtb	r2, r3
 800a294:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <SendTxData+0x254>)
 800a296:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a298:	1d3a      	adds	r2, r7, #4
 800a29a:	2300      	movs	r3, #0
 800a29c:	2101      	movs	r1, #1
 800a29e:	4812      	ldr	r0, [pc, #72]	; (800a2e8 <SendTxData+0x254>)
 800a2a0:	f003 fafa 	bl	800d898 <LmHandlerSend>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d106      	bne.n	800a2b8 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <SendTxData+0x260>)
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f011 ff4b 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a2b6:	e00e      	b.n	800a2d6 <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a0d      	ldr	r2, [pc, #52]	; (800a2f8 <SendTxData+0x264>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	099b      	lsrs	r3, r3, #6
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <SendTxData+0x268>)
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	f011 ff3b 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800a2d6:	bf00      	nop
 800a2d8:	373c      	adds	r7, #60	; 0x3c
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd90      	pop	{r4, r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	42c80000 	.word	0x42c80000
 800a2e4:	41200000 	.word	0x41200000
 800a2e8:	20000060 	.word	0x20000060
 800a2ec:	20000d7e 	.word	0x20000d7e
 800a2f0:	20000050 	.word	0x20000050
 800a2f4:	0801dac4 	.word	0x0801dac4
 800a2f8:	10624dd3 	.word	0x10624dd3
 800a2fc:	0801dad4 	.word	0x0801dad4

0800a300 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a308:	2100      	movs	r1, #0
 800a30a:	2002      	movs	r0, #2
 800a30c:	f012 fb7c 	bl	801ca08 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a310:	4803      	ldr	r0, [pc, #12]	; (800a320 <OnTxTimerEvent+0x20>)
 800a312:	f012 fd8d 	bl	801ce30 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000c74 	.word	0x20000c74

0800a324 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af04      	add	r7, sp, #16
 800a32a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d03e      	beq.n	800a3b0 <OnTxData+0x8c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d03a      	beq.n	800a3b0 <OnTxData+0x8c>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a33a:	4b1f      	ldr	r3, [pc, #124]	; (800a3b8 <OnTxData+0x94>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	2002      	movs	r0, #2
 800a342:	f011 ff03 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	7b12      	ldrb	r2, [r2, #12]
 800a34e:	4611      	mov	r1, r2
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a356:	4610      	mov	r0, r2
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a35e:	9203      	str	r2, [sp, #12]
 800a360:	9002      	str	r0, [sp, #8]
 800a362:	9101      	str	r1, [sp, #4]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <OnTxData+0x98>)
 800a368:	2200      	movs	r2, #0
 800a36a:	2100      	movs	r1, #0
 800a36c:	2003      	movs	r0, #3
 800a36e:	f011 feed 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a372:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <OnTxData+0x9c>)
 800a374:	2200      	movs	r2, #0
 800a376:	2100      	movs	r1, #0
 800a378:	2003      	movs	r0, #3
 800a37a:	f011 fee7 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	789b      	ldrb	r3, [r3, #2]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d10e      	bne.n	800a3a4 <OnTxData+0x80>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	78db      	ldrb	r3, [r3, #3]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <OnTxData+0x6e>
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <OnTxData+0xa0>)
 800a390:	e000      	b.n	800a394 <OnTxData+0x70>
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <OnTxData+0xa4>)
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <OnTxData+0xa8>)
 800a398:	2200      	movs	r2, #0
 800a39a:	2100      	movs	r1, #0
 800a39c:	2003      	movs	r0, #3
 800a39e:	f011 fed5 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a3a2:	e005      	b.n	800a3b0 <OnTxData+0x8c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <OnTxData+0xac>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2003      	movs	r0, #3
 800a3ac:	f011 fece 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0801daf4 	.word	0x0801daf4
 800a3bc:	0801db28 	.word	0x0801db28
 800a3c0:	0801db5c 	.word	0x0801db5c
 800a3c4:	0801db6c 	.word	0x0801db6c
 800a3c8:	0801db70 	.word	0x0801db70
 800a3cc:	0801db78 	.word	0x0801db78
 800a3d0:	0801db8c 	.word	0x0801db8c

0800a3d4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d022      	beq.n	800a428 <OnJoinRequest+0x54>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d117      	bne.n	800a41c <OnJoinRequest+0x48>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a3ec:	4b10      	ldr	r3, [pc, #64]	; (800a430 <OnJoinRequest+0x5c>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2002      	movs	r0, #2
 800a3f4:	f011 feaa 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	789b      	ldrb	r3, [r3, #2]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d106      	bne.n	800a40e <OnJoinRequest+0x3a>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <OnJoinRequest+0x60>)
 800a402:	2200      	movs	r2, #0
 800a404:	2100      	movs	r1, #0
 800a406:	2002      	movs	r0, #2
 800a408:	f011 fea0 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a40c:	e00c      	b.n	800a428 <OnJoinRequest+0x54>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a40e:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <OnJoinRequest+0x64>)
 800a410:	2200      	movs	r2, #0
 800a412:	2100      	movs	r1, #0
 800a414:	2002      	movs	r0, #2
 800a416:	f011 fe99 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800a41a:	e005      	b.n	800a428 <OnJoinRequest+0x54>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a41c:	4b07      	ldr	r3, [pc, #28]	; (800a43c <OnJoinRequest+0x68>)
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	2002      	movs	r0, #2
 800a424:	f011 fe92 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	0801db9c 	.word	0x0801db9c
 800a434:	0801dbb4 	.word	0x0801dbb4
 800a438:	0801dbd4 	.word	0x0801dbd4
 800a43c:	0801dbf4 	.word	0x0801dbf4

0800a440 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a444:	2100      	movs	r1, #0
 800a446:	2001      	movs	r0, #1
 800a448:	f012 fade 	bl	801ca08 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a44c:	bf00      	nop
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a454:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a45a:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a460:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a462:	2200      	movs	r2, #0
 800a464:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a468:	2200      	movs	r2, #0
 800a46a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a46c:	4b12      	ldr	r3, [pc, #72]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f043 0320 	orr.w	r3, r3, #32
 800a474:	4a10      	ldr	r2, [pc, #64]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a476:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a480:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a482:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10c      	bne.n	800a4a6 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a48c:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <LoraInfo_Init+0x6c>)
 800a48e:	2200      	movs	r2, #0
 800a490:	2100      	movs	r1, #0
 800a492:	2000      	movs	r0, #0
 800a494:	f011 fe5a 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a498:	bf00      	nop
 800a49a:	f011 fe45 	bl	801c128 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d1fa      	bne.n	800a49a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a4a4:	e7fe      	b.n	800a4a4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a4a6:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <LoraInfo_Init+0x68>)
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20000d80 	.word	0x20000d80
 800a4bc:	0801dc4c 	.word	0x0801dc4c

0800a4c0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a4c4:	4b02      	ldr	r3, [pc, #8]	; (800a4d0 <LoraInfo_GetPtr+0x10>)
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20000d80 	.word	0x20000d80

0800a4d4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a4d8:	f7f8 fa45 	bl	8002966 <BSP_RADIO_Init>
 800a4dc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f8 fa6e 	bl	80029d0 <BSP_RADIO_ConfigRFSwitch>
 800a4f4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a502:	f7f8 fab3 	bl	8002a6c <BSP_RADIO_GetTxConfig>
 800a506:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a510:	f7f8 fab3 	bl	8002a7a <BSP_RADIO_IsTCXO>
 800a514:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a516:	4618      	mov	r0, r3
 800a518:	bd80      	pop	{r7, pc}

0800a51a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a51e:	f7f8 fab3 	bl	8002a88 <BSP_RADIO_IsDCDC>
 800a522:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}

0800a528 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a53a:	2b84      	cmp	r3, #132	; 0x84
 800a53c:	d005      	beq.n	800a54a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a53e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	3303      	adds	r3, #3
 800a548:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a54a:	68fb      	ldr	r3, [r7, #12]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	bc80      	pop	{r7}
 800a554:	4770      	bx	lr

0800a556 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a55a:	f000 fad9 	bl	800ab10 <vTaskStartScheduler>
  
  return osOK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	bd80      	pop	{r7, pc}

0800a564 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a566:	b089      	sub	sp, #36	; 0x24
 800a568:	af04      	add	r7, sp, #16
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d020      	beq.n	800a5b8 <osThreadCreate+0x54>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01c      	beq.n	800a5b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685c      	ldr	r4, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681d      	ldr	r5, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691e      	ldr	r6, [r3, #16]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff ffc9 	bl	800a528 <makeFreeRtosPriority>
 800a596:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5a0:	9202      	str	r2, [sp, #8]
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	9100      	str	r1, [sp, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 f8e8 	bl	800a782 <xTaskCreateStatic>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e01c      	b.n	800a5f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685c      	ldr	r4, [r3, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a5c4:	b29e      	uxth	r6, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff ffab 	bl	800a528 <makeFreeRtosPriority>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	f107 030c 	add.w	r3, r7, #12
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	9200      	str	r2, [sp, #0]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	4632      	mov	r2, r6
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f92a 	bl	800a83c <xTaskCreate>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d001      	beq.n	800a5f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e000      	b.n	800a5f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <osDelay+0x16>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	e000      	b.n	800a614 <osDelay+0x18>
 800a612:	2301      	movs	r3, #1
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fa47 	bl	800aaa8 <vTaskDelay>
  
  return osOK;
 800a61a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f103 0208 	add.w	r2, r3, #8
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f04f 32ff 	mov.w	r2, #4294967295
 800a63c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f103 0208 	add.w	r2, r3, #8
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f103 0208 	add.w	r2, r3, #8
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc80      	pop	{r7}
 800a660:	4770      	bx	lr

0800a662 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr

0800a67a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d103      	bne.n	800a6e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	e00c      	b.n	800a6fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	60fb      	str	r3, [r7, #12]
 800a6e6:	e002      	b.n	800a6ee <vListInsert+0x2e>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d2f6      	bcs.n	800a6e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bc80      	pop	{r7}
 800a72e:	4770      	bx	lr

0800a730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6892      	ldr	r2, [r2, #8]
 800a746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6852      	ldr	r2, [r2, #4]
 800a750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d103      	bne.n	800a764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	1e5a      	subs	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a782:	b580      	push	{r7, lr}
 800a784:	b08e      	sub	sp, #56	; 0x38
 800a786:	af04      	add	r7, sp, #16
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	60b9      	str	r1, [r7, #8]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <xTaskCreateStatic+0x46>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	61fb      	str	r3, [r7, #28]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7c8:	2354      	movs	r3, #84	; 0x54
 800a7ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	2b54      	cmp	r3, #84	; 0x54
 800a7d0:	d00a      	beq.n	800a7e8 <xTaskCreateStatic+0x66>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	61bb      	str	r3, [r7, #24]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a7e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01e      	beq.n	800a82e <xTaskCreateStatic+0xac>
 800a7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d01b      	beq.n	800a82e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	2202      	movs	r2, #2
 800a804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a808:	2300      	movs	r3, #0
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	9302      	str	r3, [sp, #8]
 800a810:	f107 0314 	add.w	r3, r7, #20
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f850 	bl	800a8c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a828:	f000 f8d4 	bl	800a9d4 <prvAddNewTaskToReadyList>
 800a82c:	e001      	b.n	800a832 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a832:	697b      	ldr	r3, [r7, #20]
	}
 800a834:	4618      	mov	r0, r3
 800a836:	3728      	adds	r7, #40	; 0x28
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af04      	add	r7, sp, #16
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a84c:	88fb      	ldrh	r3, [r7, #6]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4618      	mov	r0, r3
 800a852:	f001 f823 	bl	800b89c <pvPortMalloc>
 800a856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00e      	beq.n	800a87c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a85e:	2054      	movs	r0, #84	; 0x54
 800a860:	f001 f81c 	bl	800b89c <pvPortMalloc>
 800a864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	631a      	str	r2, [r3, #48]	; 0x30
 800a872:	e005      	b.n	800a880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a874:	6978      	ldr	r0, [r7, #20]
 800a876:	f001 f8d5 	bl	800ba24 <vPortFree>
 800a87a:	e001      	b.n	800a880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d017      	beq.n	800a8b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	2300      	movs	r3, #0
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f80e 	bl	800a8c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8aa:	69f8      	ldr	r0, [r7, #28]
 800a8ac:	f000 f892 	bl	800a9d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	e002      	b.n	800a8bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
 800a8d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00a      	beq.n	800a90e <prvInitialiseNewTask+0x48>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	617b      	str	r3, [r7, #20]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01f      	beq.n	800a954 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	e012      	b.n	800a940 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	4413      	add	r3, r2
 800a920:	7819      	ldrb	r1, [r3, #0]
 800a922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	4413      	add	r3, r2
 800a928:	3334      	adds	r3, #52	; 0x34
 800a92a:	460a      	mov	r2, r1
 800a92c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	4413      	add	r3, r2
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d006      	beq.n	800a948 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d9e9      	bls.n	800a91a <prvInitialiseNewTask+0x54>
 800a946:	e000      	b.n	800a94a <prvInitialiseNewTask+0x84>
			{
				break;
 800a948:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a952:	e003      	b.n	800a95c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	2b06      	cmp	r3, #6
 800a960:	d901      	bls.n	800a966 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a962:	2306      	movs	r3, #6
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a96a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a970:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	2200      	movs	r2, #0
 800a976:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fe70 	bl	800a662 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	3318      	adds	r3, #24
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fe6b 	bl	800a662 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a990:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	f1c3 0207 	rsb	r2, r3, #7
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	68f9      	ldr	r1, [r7, #12]
 800a9b4:	69b8      	ldr	r0, [r7, #24]
 800a9b6:	f000 fcd7 	bl	800b368 <pxPortInitialiseStack>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9cc:	bf00      	nop
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9dc:	f000 fdb6 	bl	800b54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9e0:	4b2a      	ldr	r3, [pc, #168]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	4a29      	ldr	r2, [pc, #164]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ea:	4b29      	ldr	r3, [pc, #164]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9f2:	4a27      	ldr	r2, [pc, #156]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9f8:	4b24      	ldr	r3, [pc, #144]	; (800aa8c <prvAddNewTaskToReadyList+0xb8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d110      	bne.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa00:	f000 fb70 	bl	800b0e4 <prvInitialiseTaskLists>
 800aa04:	e00d      	b.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa06:	4b23      	ldr	r3, [pc, #140]	; (800aa94 <prvAddNewTaskToReadyList+0xc0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d109      	bne.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa0e:	4b20      	ldr	r3, [pc, #128]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d802      	bhi.n	800aa22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa1c:	4a1c      	ldr	r2, [pc, #112]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <prvAddNewTaskToReadyList+0xc4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <prvAddNewTaskToReadyList+0xc4>)
 800aa2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <prvAddNewTaskToReadyList+0xc8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <prvAddNewTaskToReadyList+0xc8>)
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4a15      	ldr	r2, [pc, #84]	; (800aaa0 <prvAddNewTaskToReadyList+0xcc>)
 800aa4c:	441a      	add	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7ff fe10 	bl	800a67a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa5a:	f000 fda7 	bl	800b5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <prvAddNewTaskToReadyList+0xc0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <prvAddNewTaskToReadyList+0xbc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d207      	bcs.n	800aa84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <prvAddNewTaskToReadyList+0xd0>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000e90 	.word	0x20000e90
 800aa90:	20000d90 	.word	0x20000d90
 800aa94:	20000e9c 	.word	0x20000e9c
 800aa98:	20000eac 	.word	0x20000eac
 800aa9c:	20000e98 	.word	0x20000e98
 800aaa0:	20000d94 	.word	0x20000d94
 800aaa4:	e000ed04 	.word	0xe000ed04

0800aaa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d017      	beq.n	800aaea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <vTaskDelay+0x60>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <vTaskDelay+0x30>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	60bb      	str	r3, [r7, #8]
}
 800aad4:	bf00      	nop
 800aad6:	e7fe      	b.n	800aad6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aad8:	f000 f87a 	bl	800abd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aadc:	2100      	movs	r1, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fbdc 	bl	800b29c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aae4:	f000 f8bc 	bl	800ac60 <xTaskResumeAll>
 800aae8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d107      	bne.n	800ab00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <vTaskDelay+0x64>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab00:	bf00      	nop
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20000eb8 	.word	0x20000eb8
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	; 0x28
 800ab14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab1e:	463a      	mov	r2, r7
 800ab20:	1d39      	adds	r1, r7, #4
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f6 fb72 	bl	8001210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	9202      	str	r2, [sp, #8]
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	2300      	movs	r3, #0
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	460a      	mov	r2, r1
 800ab3e:	491e      	ldr	r1, [pc, #120]	; (800abb8 <vTaskStartScheduler+0xa8>)
 800ab40:	481e      	ldr	r0, [pc, #120]	; (800abbc <vTaskStartScheduler+0xac>)
 800ab42:	f7ff fe1e 	bl	800a782 <xTaskCreateStatic>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4a1d      	ldr	r2, [pc, #116]	; (800abc0 <vTaskStartScheduler+0xb0>)
 800ab4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab4c:	4b1c      	ldr	r3, [pc, #112]	; (800abc0 <vTaskStartScheduler+0xb0>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e001      	b.n	800ab5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d116      	bne.n	800ab92 <vTaskStartScheduler+0x82>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	613b      	str	r3, [r7, #16]
}
 800ab76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab78:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <vTaskStartScheduler+0xb4>)
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <vTaskStartScheduler+0xb8>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab86:	4b11      	ldr	r3, [pc, #68]	; (800abcc <vTaskStartScheduler+0xbc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab8c:	f000 fc6c 	bl	800b468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab90:	e00e      	b.n	800abb0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d10a      	bne.n	800abb0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	60fb      	str	r3, [r7, #12]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <vTaskStartScheduler+0x9e>
}
 800abb0:	bf00      	nop
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	0801dc9c 	.word	0x0801dc9c
 800abbc:	0800b009 	.word	0x0800b009
 800abc0:	20000eb4 	.word	0x20000eb4
 800abc4:	20000eb0 	.word	0x20000eb0
 800abc8:	20000e9c 	.word	0x20000e9c
 800abcc:	20000e94 	.word	0x20000e94

0800abd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <vTaskSuspendAll+0x18>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	4a03      	ldr	r2, [pc, #12]	; (800abe8 <vTaskSuspendAll+0x18>)
 800abdc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800abde:	bf00      	nop
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20000eb8 	.word	0x20000eb8

0800abec <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800abf6:	2301      	movs	r3, #1
 800abf8:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800abfa:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <prvGetExpectedIdleTime+0x60>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d201      	bcs.n	800ac08 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ac04:	2301      	movs	r3, #1
 800ac06:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <prvGetExpectedIdleTime+0x64>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e012      	b.n	800ac3e <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ac18:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <prvGetExpectedIdleTime+0x68>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d902      	bls.n	800ac26 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	e00b      	b.n	800ac3e <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e005      	b.n	800ac3e <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <prvGetExpectedIdleTime+0x6c>)
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <prvGetExpectedIdleTime+0x70>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	20000e98 	.word	0x20000e98
 800ac50:	20000d90 	.word	0x20000d90
 800ac54:	20000d94 	.word	0x20000d94
 800ac58:	20000eb0 	.word	0x20000eb0
 800ac5c:	20000e94 	.word	0x20000e94

0800ac60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac6e:	4b41      	ldr	r3, [pc, #260]	; (800ad74 <xTaskResumeAll+0x114>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <xTaskResumeAll+0x2c>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	603b      	str	r3, [r7, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac8c:	f000 fc5e 	bl	800b54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac90:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <xTaskResumeAll+0x114>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	4a37      	ldr	r2, [pc, #220]	; (800ad74 <xTaskResumeAll+0x114>)
 800ac98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac9a:	4b36      	ldr	r3, [pc, #216]	; (800ad74 <xTaskResumeAll+0x114>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d161      	bne.n	800ad66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aca2:	4b35      	ldr	r3, [pc, #212]	; (800ad78 <xTaskResumeAll+0x118>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d05d      	beq.n	800ad66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acaa:	e02e      	b.n	800ad0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acac:	4b33      	ldr	r3, [pc, #204]	; (800ad7c <xTaskResumeAll+0x11c>)
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3318      	adds	r3, #24
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff fd39 	bl	800a730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff fd34 	bl	800a730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	2201      	movs	r2, #1
 800acce:	409a      	lsls	r2, r3
 800acd0:	4b2b      	ldr	r3, [pc, #172]	; (800ad80 <xTaskResumeAll+0x120>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	4a2a      	ldr	r2, [pc, #168]	; (800ad80 <xTaskResumeAll+0x120>)
 800acd8:	6013      	str	r3, [r2, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4a27      	ldr	r2, [pc, #156]	; (800ad84 <xTaskResumeAll+0x124>)
 800ace8:	441a      	add	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3304      	adds	r3, #4
 800acee:	4619      	mov	r1, r3
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7ff fcc2 	bl	800a67a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfa:	4b23      	ldr	r3, [pc, #140]	; (800ad88 <xTaskResumeAll+0x128>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d302      	bcc.n	800ad0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ad04:	4b21      	ldr	r3, [pc, #132]	; (800ad8c <xTaskResumeAll+0x12c>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad0a:	4b1c      	ldr	r3, [pc, #112]	; (800ad7c <xTaskResumeAll+0x11c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1cc      	bne.n	800acac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad18:	f000 fa82 	bl	800b220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ad1c:	4b1c      	ldr	r3, [pc, #112]	; (800ad90 <xTaskResumeAll+0x130>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad28:	f000 f85c 	bl	800ade4 <xTaskIncrementTick>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ad32:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <xTaskResumeAll+0x12c>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f1      	bne.n	800ad28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ad44:	4b12      	ldr	r3, [pc, #72]	; (800ad90 <xTaskResumeAll+0x130>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad4a:	4b10      	ldr	r3, [pc, #64]	; (800ad8c <xTaskResumeAll+0x12c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d009      	beq.n	800ad66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad52:	2301      	movs	r3, #1
 800ad54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <xTaskResumeAll+0x134>)
 800ad58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad66:	f000 fc21 	bl	800b5ac <vPortExitCritical>

	return xAlreadyYielded;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20000eb8 	.word	0x20000eb8
 800ad78:	20000e90 	.word	0x20000e90
 800ad7c:	20000e50 	.word	0x20000e50
 800ad80:	20000e98 	.word	0x20000e98
 800ad84:	20000d94 	.word	0x20000d94
 800ad88:	20000d90 	.word	0x20000d90
 800ad8c:	20000ea4 	.word	0x20000ea4
 800ad90:	20000ea0 	.word	0x20000ea0
 800ad94:	e000ed04 	.word	0xe000ed04

0800ad98 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800ada0:	4b0e      	ldr	r3, [pc, #56]	; (800addc <vTaskStepTick+0x44>)
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	441a      	add	r2, r3
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <vTaskStepTick+0x48>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d90a      	bls.n	800adc6 <vTaskStepTick+0x2e>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60fb      	str	r3, [r7, #12]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800adc6:	4b05      	ldr	r3, [pc, #20]	; (800addc <vTaskStepTick+0x44>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4413      	add	r3, r2
 800adce:	4a03      	ldr	r2, [pc, #12]	; (800addc <vTaskStepTick+0x44>)
 800add0:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	bc80      	pop	{r7}
 800adda:	4770      	bx	lr
 800addc:	20000e94 	.word	0x20000e94
 800ade0:	20000eb0 	.word	0x20000eb0

0800ade4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adee:	4b4e      	ldr	r3, [pc, #312]	; (800af28 <xTaskIncrementTick+0x144>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 8088 	bne.w	800af08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adf8:	4b4c      	ldr	r3, [pc, #304]	; (800af2c <xTaskIncrementTick+0x148>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3301      	adds	r3, #1
 800adfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae00:	4a4a      	ldr	r2, [pc, #296]	; (800af2c <xTaskIncrementTick+0x148>)
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d120      	bne.n	800ae4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae0c:	4b48      	ldr	r3, [pc, #288]	; (800af30 <xTaskIncrementTick+0x14c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00a      	beq.n	800ae2c <xTaskIncrementTick+0x48>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	603b      	str	r3, [r7, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	e7fe      	b.n	800ae2a <xTaskIncrementTick+0x46>
 800ae2c:	4b40      	ldr	r3, [pc, #256]	; (800af30 <xTaskIncrementTick+0x14c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	4b40      	ldr	r3, [pc, #256]	; (800af34 <xTaskIncrementTick+0x150>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a3e      	ldr	r2, [pc, #248]	; (800af30 <xTaskIncrementTick+0x14c>)
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	4a3e      	ldr	r2, [pc, #248]	; (800af34 <xTaskIncrementTick+0x150>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	4b3d      	ldr	r3, [pc, #244]	; (800af38 <xTaskIncrementTick+0x154>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	4a3c      	ldr	r2, [pc, #240]	; (800af38 <xTaskIncrementTick+0x154>)
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	f000 f9e9 	bl	800b220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae4e:	4b3b      	ldr	r3, [pc, #236]	; (800af3c <xTaskIncrementTick+0x158>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d348      	bcc.n	800aeea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae58:	4b35      	ldr	r3, [pc, #212]	; (800af30 <xTaskIncrementTick+0x14c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d104      	bne.n	800ae6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae62:	4b36      	ldr	r3, [pc, #216]	; (800af3c <xTaskIncrementTick+0x158>)
 800ae64:	f04f 32ff 	mov.w	r2, #4294967295
 800ae68:	601a      	str	r2, [r3, #0]
					break;
 800ae6a:	e03e      	b.n	800aeea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae6c:	4b30      	ldr	r3, [pc, #192]	; (800af30 <xTaskIncrementTick+0x14c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d203      	bcs.n	800ae8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae84:	4a2d      	ldr	r2, [pc, #180]	; (800af3c <xTaskIncrementTick+0x158>)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae8a:	e02e      	b.n	800aeea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff fc4d 	bl	800a730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	3318      	adds	r3, #24
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fc44 	bl	800a730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	2201      	movs	r2, #1
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	4b23      	ldr	r3, [pc, #140]	; (800af40 <xTaskIncrementTick+0x15c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	4a22      	ldr	r2, [pc, #136]	; (800af40 <xTaskIncrementTick+0x15c>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4a1f      	ldr	r2, [pc, #124]	; (800af44 <xTaskIncrementTick+0x160>)
 800aec8:	441a      	add	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	3304      	adds	r3, #4
 800aece:	4619      	mov	r1, r3
 800aed0:	4610      	mov	r0, r2
 800aed2:	f7ff fbd2 	bl	800a67a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	4b1b      	ldr	r3, [pc, #108]	; (800af48 <xTaskIncrementTick+0x164>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d3b9      	bcc.n	800ae58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee8:	e7b6      	b.n	800ae58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aeea:	4b17      	ldr	r3, [pc, #92]	; (800af48 <xTaskIncrementTick+0x164>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef0:	4914      	ldr	r1, [pc, #80]	; (800af44 <xTaskIncrementTick+0x160>)
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d907      	bls.n	800af12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800af02:	2301      	movs	r3, #1
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	e004      	b.n	800af12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800af08:	4b10      	ldr	r3, [pc, #64]	; (800af4c <xTaskIncrementTick+0x168>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	4a0f      	ldr	r2, [pc, #60]	; (800af4c <xTaskIncrementTick+0x168>)
 800af10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800af12:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <xTaskIncrementTick+0x16c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800af1a:	2301      	movs	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800af1e:	697b      	ldr	r3, [r7, #20]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20000eb8 	.word	0x20000eb8
 800af2c:	20000e94 	.word	0x20000e94
 800af30:	20000e48 	.word	0x20000e48
 800af34:	20000e4c 	.word	0x20000e4c
 800af38:	20000ea8 	.word	0x20000ea8
 800af3c:	20000eb0 	.word	0x20000eb0
 800af40:	20000e98 	.word	0x20000e98
 800af44:	20000d94 	.word	0x20000d94
 800af48:	20000d90 	.word	0x20000d90
 800af4c:	20000ea0 	.word	0x20000ea0
 800af50:	20000ea4 	.word	0x20000ea4

0800af54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af5a:	4b26      	ldr	r3, [pc, #152]	; (800aff4 <vTaskSwitchContext+0xa0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af62:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <vTaskSwitchContext+0xa4>)
 800af64:	2201      	movs	r2, #1
 800af66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af68:	e03f      	b.n	800afea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800af6a:	4b23      	ldr	r3, [pc, #140]	; (800aff8 <vTaskSwitchContext+0xa4>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af70:	4b22      	ldr	r3, [pc, #136]	; (800affc <vTaskSwitchContext+0xa8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	fab3 f383 	clz	r3, r3
 800af7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af7e:	7afb      	ldrb	r3, [r7, #11]
 800af80:	f1c3 031f 	rsb	r3, r3, #31
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	491e      	ldr	r1, [pc, #120]	; (800b000 <vTaskSwitchContext+0xac>)
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	607b      	str	r3, [r7, #4]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vTaskSwitchContext+0x5a>
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4613      	mov	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4a11      	ldr	r2, [pc, #68]	; (800b000 <vTaskSwitchContext+0xac>)
 800afbc:	4413      	add	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3308      	adds	r3, #8
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d104      	bne.n	800afe0 <vTaskSwitchContext+0x8c>
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	605a      	str	r2, [r3, #4]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	4a07      	ldr	r2, [pc, #28]	; (800b004 <vTaskSwitchContext+0xb0>)
 800afe8:	6013      	str	r3, [r2, #0]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr
 800aff4:	20000eb8 	.word	0x20000eb8
 800aff8:	20000ea4 	.word	0x20000ea4
 800affc:	20000e98 	.word	0x20000e98
 800b000:	20000d94 	.word	0x20000d94
 800b004:	20000d90 	.word	0x20000d90

0800b008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b010:	f000 f8a8 	bl	800b164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b014:	4b18      	ldr	r3, [pc, #96]	; (800b078 <prvIdleTask+0x70>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d907      	bls.n	800b02c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b01c:	4b17      	ldr	r3, [pc, #92]	; (800b07c <prvIdleTask+0x74>)
 800b01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b02c:	f7ff fdde 	bl	800abec <prvGetExpectedIdleTime>
 800b030:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d9eb      	bls.n	800b010 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b038:	f7ff fdca 	bl	800abd0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b03c:	4b10      	ldr	r3, [pc, #64]	; (800b080 <prvIdleTask+0x78>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <prvIdleTask+0x7c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d20a      	bcs.n	800b05e <prvIdleTask+0x56>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	60bb      	str	r3, [r7, #8]
}
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b05e:	f7ff fdc5 	bl	800abec <prvGetExpectedIdleTime>
 800b062:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d902      	bls.n	800b070 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 fb0e 	bl	800b68c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b070:	f7ff fdf6 	bl	800ac60 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b074:	e7cc      	b.n	800b010 <prvIdleTask+0x8>
 800b076:	bf00      	nop
 800b078:	20000d94 	.word	0x20000d94
 800b07c:	e000ed04 	.word	0xe000ed04
 800b080:	20000eb0 	.word	0x20000eb0
 800b084:	20000e94 	.word	0x20000e94

0800b088 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b092:	2301      	movs	r3, #1
 800b094:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b096:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <eTaskConfirmSleepModeStatus+0x4c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	71fb      	strb	r3, [r7, #7]
 800b0a2:	e010      	b.n	800b0c6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b0a4:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <eTaskConfirmSleepModeStatus+0x50>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	71fb      	strb	r3, [r7, #7]
 800b0b0:	e009      	b.n	800b0c6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <eTaskConfirmSleepModeStatus+0x54>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	4b0a      	ldr	r3, [pc, #40]	; (800b0e0 <eTaskConfirmSleepModeStatus+0x58>)
 800b0b8:	6819      	ldr	r1, [r3, #0]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	1acb      	subs	r3, r1, r3
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d101      	bne.n	800b0c6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
	}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bc80      	pop	{r7}
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	20000e50 	.word	0x20000e50
 800b0d8:	20000ea4 	.word	0x20000ea4
 800b0dc:	20000e7c 	.word	0x20000e7c
 800b0e0:	20000e90 	.word	0x20000e90

0800b0e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	e00c      	b.n	800b10a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4a12      	ldr	r2, [pc, #72]	; (800b144 <prvInitialiseTaskLists+0x60>)
 800b0fc:	4413      	add	r3, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fa90 	bl	800a624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b06      	cmp	r3, #6
 800b10e:	d9ef      	bls.n	800b0f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b110:	480d      	ldr	r0, [pc, #52]	; (800b148 <prvInitialiseTaskLists+0x64>)
 800b112:	f7ff fa87 	bl	800a624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b116:	480d      	ldr	r0, [pc, #52]	; (800b14c <prvInitialiseTaskLists+0x68>)
 800b118:	f7ff fa84 	bl	800a624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b11c:	480c      	ldr	r0, [pc, #48]	; (800b150 <prvInitialiseTaskLists+0x6c>)
 800b11e:	f7ff fa81 	bl	800a624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b122:	480c      	ldr	r0, [pc, #48]	; (800b154 <prvInitialiseTaskLists+0x70>)
 800b124:	f7ff fa7e 	bl	800a624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b128:	480b      	ldr	r0, [pc, #44]	; (800b158 <prvInitialiseTaskLists+0x74>)
 800b12a:	f7ff fa7b 	bl	800a624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <prvInitialiseTaskLists+0x78>)
 800b130:	4a05      	ldr	r2, [pc, #20]	; (800b148 <prvInitialiseTaskLists+0x64>)
 800b132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <prvInitialiseTaskLists+0x7c>)
 800b136:	4a05      	ldr	r2, [pc, #20]	; (800b14c <prvInitialiseTaskLists+0x68>)
 800b138:	601a      	str	r2, [r3, #0]
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000d94 	.word	0x20000d94
 800b148:	20000e20 	.word	0x20000e20
 800b14c:	20000e34 	.word	0x20000e34
 800b150:	20000e50 	.word	0x20000e50
 800b154:	20000e64 	.word	0x20000e64
 800b158:	20000e7c 	.word	0x20000e7c
 800b15c:	20000e48 	.word	0x20000e48
 800b160:	20000e4c 	.word	0x20000e4c

0800b164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b16a:	e019      	b.n	800b1a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b16c:	f000 f9ee 	bl	800b54c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b170:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <prvCheckTasksWaitingTermination+0x50>)
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fad7 	bl	800a730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <prvCheckTasksWaitingTermination+0x54>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3b01      	subs	r3, #1
 800b188:	4a0b      	ldr	r2, [pc, #44]	; (800b1b8 <prvCheckTasksWaitingTermination+0x54>)
 800b18a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3b01      	subs	r3, #1
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b196:	f000 fa09 	bl	800b5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f810 	bl	800b1c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <prvCheckTasksWaitingTermination+0x58>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e1      	bne.n	800b16c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20000e64 	.word	0x20000e64
 800b1b8:	20000e90 	.word	0x20000e90
 800b1bc:	20000e78 	.word	0x20000e78

0800b1c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d108      	bne.n	800b1e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 fc24 	bl	800ba24 <vPortFree>
				vPortFree( pxTCB );
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc21 	bl	800ba24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1e2:	e018      	b.n	800b216 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d103      	bne.n	800b1f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fc18 	bl	800ba24 <vPortFree>
	}
 800b1f4:	e00f      	b.n	800b216 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d00a      	beq.n	800b216 <prvDeleteTCB+0x56>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <prvDeleteTCB+0x54>
	}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <prvResetNextTaskUnblockTime+0x38>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <prvResetNextTaskUnblockTime+0x3c>)
 800b232:	f04f 32ff 	mov.w	r2, #4294967295
 800b236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b238:	e008      	b.n	800b24c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b23a:	4b07      	ldr	r3, [pc, #28]	; (800b258 <prvResetNextTaskUnblockTime+0x38>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	4a04      	ldr	r2, [pc, #16]	; (800b25c <prvResetNextTaskUnblockTime+0x3c>)
 800b24a:	6013      	str	r3, [r2, #0]
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	bc80      	pop	{r7}
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20000e48 	.word	0x20000e48
 800b25c:	20000eb0 	.word	0x20000eb0

0800b260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b266:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <xTaskGetSchedulerState+0x34>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d102      	bne.n	800b274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b26e:	2301      	movs	r3, #1
 800b270:	607b      	str	r3, [r7, #4]
 800b272:	e008      	b.n	800b286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b274:	4b08      	ldr	r3, [pc, #32]	; (800b298 <xTaskGetSchedulerState+0x38>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d102      	bne.n	800b282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b27c:	2302      	movs	r3, #2
 800b27e:	607b      	str	r3, [r7, #4]
 800b280:	e001      	b.n	800b286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b286:	687b      	ldr	r3, [r7, #4]
	}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bc80      	pop	{r7}
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20000e9c 	.word	0x20000e9c
 800b298:	20000eb8 	.word	0x20000eb8

0800b29c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2a6:	4b29      	ldr	r3, [pc, #164]	; (800b34c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ac:	4b28      	ldr	r3, [pc, #160]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fa3c 	bl	800a730 <uxListRemove>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10b      	bne.n	800b2d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b2be:	4b24      	ldr	r3, [pc, #144]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ca:	43da      	mvns	r2, r3
 800b2cc:	4b21      	ldr	r3, [pc, #132]	; (800b354 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	4a20      	ldr	r2, [pc, #128]	; (800b354 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d10a      	bne.n	800b2f4 <prvAddCurrentTaskToDelayedList+0x58>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	481a      	ldr	r0, [pc, #104]	; (800b358 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2ee:	f7ff f9c4 	bl	800a67a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2f2:	e026      	b.n	800b342 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d209      	bcs.n	800b320 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b30c:	4b13      	ldr	r3, [pc, #76]	; (800b35c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7ff f9d1 	bl	800a6c0 <vListInsert>
}
 800b31e:	e010      	b.n	800b342 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b320:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7ff f9c7 	bl	800a6c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b332:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d202      	bcs.n	800b342 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b33c:	4a09      	ldr	r2, [pc, #36]	; (800b364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6013      	str	r3, [r2, #0]
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20000e94 	.word	0x20000e94
 800b350:	20000d90 	.word	0x20000d90
 800b354:	20000e98 	.word	0x20000e98
 800b358:	20000e7c 	.word	0x20000e7c
 800b35c:	20000e4c 	.word	0x20000e4c
 800b360:	20000e48 	.word	0x20000e48
 800b364:	20000eb0 	.word	0x20000eb0

0800b368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3b04      	subs	r3, #4
 800b378:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3b04      	subs	r3, #4
 800b386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f023 0201 	bic.w	r2, r3, #1
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3b04      	subs	r3, #4
 800b396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b398:	4a08      	ldr	r2, [pc, #32]	; (800b3bc <pxPortInitialiseStack+0x54>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3b14      	subs	r3, #20
 800b3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3b20      	subs	r3, #32
 800b3ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bc80      	pop	{r7}
 800b3ba:	4770      	bx	lr
 800b3bc:	0800b3c1 	.word	0x0800b3c1

0800b3c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <prvTaskExitError+0x54>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d2:	d00a      	beq.n	800b3ea <prvTaskExitError+0x2a>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	60fb      	str	r3, [r7, #12]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <prvTaskExitError+0x28>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	60bb      	str	r3, [r7, #8]
}
 800b3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3fe:	bf00      	nop
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0fc      	beq.n	800b400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b406:	bf00      	nop
 800b408:	bf00      	nop
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20000080 	.word	0x20000080
	...

0800b420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <pxCurrentTCBConst2>)
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	6808      	ldr	r0, [r1, #0]
 800b426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b42a:	f380 8809 	msr	PSP, r0
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f380 8811 	msr	BASEPRI, r0
 800b43a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b43e:	4770      	bx	lr

0800b440 <pxCurrentTCBConst2>:
 800b440:	20000d90 	.word	0x20000d90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b448:	4806      	ldr	r0, [pc, #24]	; (800b464 <prvPortStartFirstTask+0x1c>)
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	6800      	ldr	r0, [r0, #0]
 800b44e:	f380 8808 	msr	MSP, r0
 800b452:	b662      	cpsie	i
 800b454:	b661      	cpsie	f
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	df00      	svc	0
 800b460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b462:	bf00      	nop
 800b464:	e000ed08 	.word	0xe000ed08

0800b468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b46e:	4b32      	ldr	r3, [pc, #200]	; (800b538 <xPortStartScheduler+0xd0>)
 800b470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	b2db      	uxtb	r3, r3
 800b486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b2a      	ldr	r3, [pc, #168]	; (800b53c <xPortStartScheduler+0xd4>)
 800b494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b496:	4b2a      	ldr	r3, [pc, #168]	; (800b540 <xPortStartScheduler+0xd8>)
 800b498:	2207      	movs	r2, #7
 800b49a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b49c:	e009      	b.n	800b4b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b49e:	4b28      	ldr	r3, [pc, #160]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	4a26      	ldr	r2, [pc, #152]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ba:	2b80      	cmp	r3, #128	; 0x80
 800b4bc:	d0ef      	beq.n	800b49e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4be:	4b20      	ldr	r3, [pc, #128]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f1c3 0307 	rsb	r3, r3, #7
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d00a      	beq.n	800b4e0 <xPortStartScheduler+0x78>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	60bb      	str	r3, [r7, #8]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4e0:	4b17      	ldr	r3, [pc, #92]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	4a16      	ldr	r2, [pc, #88]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4f2:	4a13      	ldr	r2, [pc, #76]	; (800b540 <xPortStartScheduler+0xd8>)
 800b4f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4fe:	4b11      	ldr	r3, [pc, #68]	; (800b544 <xPortStartScheduler+0xdc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a10      	ldr	r2, [pc, #64]	; (800b544 <xPortStartScheduler+0xdc>)
 800b504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b50a:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <xPortStartScheduler+0xdc>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a0d      	ldr	r2, [pc, #52]	; (800b544 <xPortStartScheduler+0xdc>)
 800b510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b516:	f000 f985 	bl	800b824 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <xPortStartScheduler+0xe0>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b520:	f7ff ff92 	bl	800b448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b524:	f7ff fd16 	bl	800af54 <vTaskSwitchContext>
	prvTaskExitError();
 800b528:	f7ff ff4a 	bl	800b3c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	e000e400 	.word	0xe000e400
 800b53c:	20000ec8 	.word	0x20000ec8
 800b540:	20000ecc 	.word	0x20000ecc
 800b544:	e000ed20 	.word	0xe000ed20
 800b548:	20000080 	.word	0x20000080

0800b54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	607b      	str	r3, [r7, #4]
}
 800b564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <vPortEnterCritical+0x58>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	4a0d      	ldr	r2, [pc, #52]	; (800b5a4 <vPortEnterCritical+0x58>)
 800b56e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b570:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <vPortEnterCritical+0x58>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d10f      	bne.n	800b598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b578:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <vPortEnterCritical+0x5c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00a      	beq.n	800b598 <vPortEnterCritical+0x4c>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	603b      	str	r3, [r7, #0]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <vPortEnterCritical+0x4a>
	}
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000080 	.word	0x20000080
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <vPortExitCritical+0x4c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <vPortExitCritical+0x24>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
 800b5ce:	e7fe      	b.n	800b5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <vPortExitCritical+0x4c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	4a08      	ldr	r2, [pc, #32]	; (800b5f8 <vPortExitCritical+0x4c>)
 800b5d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5da:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <vPortExitCritical+0x4c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d105      	bne.n	800b5ee <vPortExitCritical+0x42>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5ee:	bf00      	nop
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr
 800b5f8:	20000080 	.word	0x20000080
 800b5fc:	00000000 	.word	0x00000000

0800b600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b600:	f3ef 8009 	mrs	r0, PSP
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <pxCurrentTCBConst>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b610:	6010      	str	r0, [r2, #0]
 800b612:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b61a:	f380 8811 	msr	BASEPRI, r0
 800b61e:	f7ff fc99 	bl	800af54 <vTaskSwitchContext>
 800b622:	f04f 0000 	mov.w	r0, #0
 800b626:	f380 8811 	msr	BASEPRI, r0
 800b62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b636:	f380 8809 	msr	PSP, r0
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	4770      	bx	lr

0800b640 <pxCurrentTCBConst>:
 800b640:	20000d90 	.word	0x20000d90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	607b      	str	r3, [r7, #4]
}
 800b660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b662:	f7ff fbbf 	bl	800ade4 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <xPortSysTickHandler+0x40>)
 800b66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f383 8811 	msr	BASEPRI, r3
}
 800b67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b088      	sub	sp, #32
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4b5d      	ldr	r3, [pc, #372]	; (800b80c <vPortSuppressTicksAndSleep+0x180>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d902      	bls.n	800b6a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b69e:	4b5b      	ldr	r3, [pc, #364]	; (800b80c <vPortSuppressTicksAndSleep+0x180>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b6a4:	4b5a      	ldr	r3, [pc, #360]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a59      	ldr	r2, [pc, #356]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b6aa:	f023 0301 	bic.w	r3, r3, #1
 800b6ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b6b0:	4b58      	ldr	r3, [pc, #352]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	4957      	ldr	r1, [pc, #348]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b6ba:	6809      	ldr	r1, [r1, #0]
 800b6bc:	fb01 f303 	mul.w	r3, r1, r3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b6c4:	4b55      	ldr	r3, [pc, #340]	; (800b81c <vPortSuppressTicksAndSleep+0x190>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d904      	bls.n	800b6d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b6ce:	4b53      	ldr	r3, [pc, #332]	; (800b81c <vPortSuppressTicksAndSleep+0x190>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b6d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b6da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b6de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b6e2:	f7ff fcd1 	bl	800b088 <eTaskConfirmSleepModeStatus>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d110      	bne.n	800b70e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b6ec:	4b49      	ldr	r3, [pc, #292]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b6ee:	4a4c      	ldr	r2, [pc, #304]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b6f4:	4b46      	ldr	r3, [pc, #280]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a45      	ldr	r2, [pc, #276]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b6fa:	f043 0301 	orr.w	r3, r3, #1
 800b6fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b700:	4b45      	ldr	r3, [pc, #276]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a46      	ldr	r2, [pc, #280]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b706:	3b01      	subs	r3, #1
 800b708:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b70a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b70c:	e07a      	b.n	800b804 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b70e:	4a44      	ldr	r2, [pc, #272]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b714:	4b3f      	ldr	r3, [pc, #252]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b71a:	4b3d      	ldr	r3, [pc, #244]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a3c      	ldr	r2, [pc, #240]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b720:	f043 0301 	orr.w	r3, r3, #1
 800b724:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b72a:	f107 030c 	add.w	r3, r7, #12
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f5 fd3c 	bl	80011ac <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b73a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b73e:	bf30      	wfi
				__asm volatile( "isb" );
 800b740:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b744:	1d3b      	adds	r3, r7, #4
 800b746:	4618      	mov	r0, r3
 800b748:	f7f5 fd50 	bl	80011ec <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b74c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b74e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b752:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b756:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b758:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b75c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b760:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b762:	2206      	movs	r2, #6
 800b764:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b766:	4b2a      	ldr	r3, [pc, #168]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d01d      	beq.n	800b7ae <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b772:	4b29      	ldr	r3, [pc, #164]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b27      	ldr	r3, [pc, #156]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	1acb      	subs	r3, r1, r3
 800b77e:	4413      	add	r3, r2
 800b780:	3b01      	subs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b784:	4b25      	ldr	r3, [pc, #148]	; (800b81c <vPortSuppressTicksAndSleep+0x190>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d304      	bcc.n	800b798 <vPortSuppressTicksAndSleep+0x10c>
 800b78e:	4b22      	ldr	r3, [pc, #136]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	429a      	cmp	r2, r3
 800b796:	d903      	bls.n	800b7a0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b798:	4b1f      	ldr	r3, [pc, #124]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b7a0:	4a1f      	ldr	r2, [pc, #124]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	61bb      	str	r3, [r7, #24]
 800b7ac:	e018      	b.n	800b7e0 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b7b2:	6812      	ldr	r2, [r2, #0]
 800b7b4:	fb03 f202 	mul.w	r2, r3, r2
 800b7b8:	4b16      	ldr	r3, [pc, #88]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b7c0:	4b15      	ldr	r3, [pc, #84]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ca:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	4a11      	ldr	r2, [pc, #68]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	fb03 f202 	mul.w	r2, r3, r2
 800b7d8:	4911      	ldr	r1, [pc, #68]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7e0:	4b0c      	ldr	r3, [pc, #48]	; (800b814 <vPortSuppressTicksAndSleep+0x188>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a09      	ldr	r2, [pc, #36]	; (800b810 <vPortSuppressTicksAndSleep+0x184>)
 800b7ec:	f043 0301 	orr.w	r3, r3, #1
 800b7f0:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b7f2:	69b8      	ldr	r0, [r7, #24]
 800b7f4:	f7ff fad0 	bl	800ad98 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b7f8:	4b07      	ldr	r3, [pc, #28]	; (800b818 <vPortSuppressTicksAndSleep+0x18c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a08      	ldr	r2, [pc, #32]	; (800b820 <vPortSuppressTicksAndSleep+0x194>)
 800b7fe:	3b01      	subs	r3, #1
 800b800:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b802:	b662      	cpsie	i
	}
 800b804:	bf00      	nop
 800b806:	3720      	adds	r7, #32
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20000ec0 	.word	0x20000ec0
 800b810:	e000e010 	.word	0xe000e010
 800b814:	e000e018 	.word	0xe000e018
 800b818:	20000ebc 	.word	0x20000ebc
 800b81c:	20000ec4 	.word	0x20000ec4
 800b820:	e000e014 	.word	0xe000e014

0800b824 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b828:	4b14      	ldr	r3, [pc, #80]	; (800b87c <vPortSetupTimerInterrupt+0x58>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a14      	ldr	r2, [pc, #80]	; (800b880 <vPortSetupTimerInterrupt+0x5c>)
 800b82e:	fba2 2303 	umull	r2, r3, r2, r3
 800b832:	099b      	lsrs	r3, r3, #6
 800b834:	4a13      	ldr	r2, [pc, #76]	; (800b884 <vPortSetupTimerInterrupt+0x60>)
 800b836:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b838:	4b12      	ldr	r3, [pc, #72]	; (800b884 <vPortSetupTimerInterrupt+0x60>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b840:	fbb2 f3f3 	udiv	r3, r2, r3
 800b844:	4a10      	ldr	r2, [pc, #64]	; (800b888 <vPortSetupTimerInterrupt+0x64>)
 800b846:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b848:	4b10      	ldr	r3, [pc, #64]	; (800b88c <vPortSetupTimerInterrupt+0x68>)
 800b84a:	222d      	movs	r2, #45	; 0x2d
 800b84c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b84e:	4b10      	ldr	r3, [pc, #64]	; (800b890 <vPortSetupTimerInterrupt+0x6c>)
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b854:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <vPortSetupTimerInterrupt+0x70>)
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85a:	4b08      	ldr	r3, [pc, #32]	; (800b87c <vPortSetupTimerInterrupt+0x58>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a08      	ldr	r2, [pc, #32]	; (800b880 <vPortSetupTimerInterrupt+0x5c>)
 800b860:	fba2 2303 	umull	r2, r3, r2, r3
 800b864:	099b      	lsrs	r3, r3, #6
 800b866:	4a0c      	ldr	r2, [pc, #48]	; (800b898 <vPortSetupTimerInterrupt+0x74>)
 800b868:	3b01      	subs	r3, #1
 800b86a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <vPortSetupTimerInterrupt+0x6c>)
 800b86e:	2207      	movs	r2, #7
 800b870:	601a      	str	r2, [r3, #0]
}
 800b872:	bf00      	nop
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20000000 	.word	0x20000000
 800b880:	10624dd3 	.word	0x10624dd3
 800b884:	20000ebc 	.word	0x20000ebc
 800b888:	20000ec0 	.word	0x20000ec0
 800b88c:	20000ec4 	.word	0x20000ec4
 800b890:	e000e010 	.word	0xe000e010
 800b894:	e000e018 	.word	0xe000e018
 800b898:	e000e014 	.word	0xe000e014

0800b89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08a      	sub	sp, #40	; 0x28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8a8:	f7ff f992 	bl	800abd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8ac:	4b58      	ldr	r3, [pc, #352]	; (800ba10 <pvPortMalloc+0x174>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8b4:	f000 f910 	bl	800bad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8b8:	4b56      	ldr	r3, [pc, #344]	; (800ba14 <pvPortMalloc+0x178>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f040 808e 	bne.w	800b9e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01d      	beq.n	800b908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8cc:	2208      	movs	r2, #8
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d014      	beq.n	800b908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f023 0307 	bic.w	r3, r3, #7
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00a      	beq.n	800b908 <pvPortMalloc+0x6c>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	617b      	str	r3, [r7, #20]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d069      	beq.n	800b9e2 <pvPortMalloc+0x146>
 800b90e:	4b42      	ldr	r3, [pc, #264]	; (800ba18 <pvPortMalloc+0x17c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d864      	bhi.n	800b9e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b918:	4b40      	ldr	r3, [pc, #256]	; (800ba1c <pvPortMalloc+0x180>)
 800b91a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b91c:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <pvPortMalloc+0x180>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b922:	e004      	b.n	800b92e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d903      	bls.n	800b940 <pvPortMalloc+0xa4>
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1f1      	bne.n	800b924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b940:	4b33      	ldr	r3, [pc, #204]	; (800ba10 <pvPortMalloc+0x174>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b946:	429a      	cmp	r2, r3
 800b948:	d04b      	beq.n	800b9e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2208      	movs	r2, #8
 800b950:	4413      	add	r3, r2
 800b952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	1ad2      	subs	r2, r2, r3
 800b964:	2308      	movs	r3, #8
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	429a      	cmp	r2, r3
 800b96a:	d91f      	bls.n	800b9ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4413      	add	r3, r2
 800b972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <pvPortMalloc+0xf8>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	613b      	str	r3, [r7, #16]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	1ad2      	subs	r2, r2, r3
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9a6:	69b8      	ldr	r0, [r7, #24]
 800b9a8:	f000 f8f8 	bl	800bb9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ba18 <pvPortMalloc+0x17c>)
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	4a18      	ldr	r2, [pc, #96]	; (800ba18 <pvPortMalloc+0x17c>)
 800b9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9ba:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <pvPortMalloc+0x17c>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	4b18      	ldr	r3, [pc, #96]	; (800ba20 <pvPortMalloc+0x184>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d203      	bcs.n	800b9ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <pvPortMalloc+0x17c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a15      	ldr	r2, [pc, #84]	; (800ba20 <pvPortMalloc+0x184>)
 800b9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <pvPortMalloc+0x178>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9e2:	f7ff f93d 	bl	800ac60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <pvPortMalloc+0x16a>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	60fb      	str	r3, [r7, #12]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <pvPortMalloc+0x168>
	return pvReturn;
 800ba06:	69fb      	ldr	r3, [r7, #28]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3728      	adds	r7, #40	; 0x28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20002e90 	.word	0x20002e90
 800ba14:	20002e9c 	.word	0x20002e9c
 800ba18:	20002e94 	.word	0x20002e94
 800ba1c:	20002e88 	.word	0x20002e88
 800ba20:	20002e98 	.word	0x20002e98

0800ba24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d048      	beq.n	800bac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba36:	2308      	movs	r3, #8
 800ba38:	425b      	negs	r3, r3
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	685a      	ldr	r2, [r3, #4]
 800ba48:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <vPortFree+0xac>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10a      	bne.n	800ba68 <vPortFree+0x44>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60fb      	str	r3, [r7, #12]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00a      	beq.n	800ba86 <vPortFree+0x62>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60bb      	str	r3, [r7, #8]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	685a      	ldr	r2, [r3, #4]
 800ba8a:	4b11      	ldr	r3, [pc, #68]	; (800bad0 <vPortFree+0xac>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d019      	beq.n	800bac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d115      	bne.n	800bac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	4b0b      	ldr	r3, [pc, #44]	; (800bad0 <vPortFree+0xac>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	43db      	mvns	r3, r3
 800baa6:	401a      	ands	r2, r3
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800baac:	f7ff f890 	bl	800abd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <vPortFree+0xb0>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4413      	add	r3, r2
 800baba:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <vPortFree+0xb0>)
 800babc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800babe:	6938      	ldr	r0, [r7, #16]
 800bac0:	f000 f86c 	bl	800bb9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bac4:	f7ff f8cc 	bl	800ac60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bac8:	bf00      	nop
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20002e9c 	.word	0x20002e9c
 800bad4:	20002e94 	.word	0x20002e94

0800bad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bade:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800bae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bae4:	4b27      	ldr	r3, [pc, #156]	; (800bb84 <prvHeapInit+0xac>)
 800bae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00c      	beq.n	800bb0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3307      	adds	r3, #7
 800baf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 0307 	bic.w	r3, r3, #7
 800bafe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	4a1f      	ldr	r2, [pc, #124]	; (800bb84 <prvHeapInit+0xac>)
 800bb08:	4413      	add	r3, r2
 800bb0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb10:	4a1d      	ldr	r2, [pc, #116]	; (800bb88 <prvHeapInit+0xb0>)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb16:	4b1c      	ldr	r3, [pc, #112]	; (800bb88 <prvHeapInit+0xb0>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4413      	add	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb24:	2208      	movs	r2, #8
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1a9b      	subs	r3, r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0307 	bic.w	r3, r3, #7
 800bb32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	4a15      	ldr	r2, [pc, #84]	; (800bb8c <prvHeapInit+0xb4>)
 800bb38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb3a:	4b14      	ldr	r3, [pc, #80]	; (800bb8c <prvHeapInit+0xb4>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb42:	4b12      	ldr	r3, [pc, #72]	; (800bb8c <prvHeapInit+0xb4>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	1ad2      	subs	r2, r2, r3
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <prvHeapInit+0xb4>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4a0a      	ldr	r2, [pc, #40]	; (800bb90 <prvHeapInit+0xb8>)
 800bb66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <prvHeapInit+0xbc>)
 800bb6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb70:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <prvHeapInit+0xc0>)
 800bb72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb76:	601a      	str	r2, [r3, #0]
}
 800bb78:	bf00      	nop
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bc80      	pop	{r7}
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	20000ed0 	.word	0x20000ed0
 800bb88:	20002e88 	.word	0x20002e88
 800bb8c:	20002e90 	.word	0x20002e90
 800bb90:	20002e98 	.word	0x20002e98
 800bb94:	20002e94 	.word	0x20002e94
 800bb98:	20002e9c 	.word	0x20002e9c

0800bb9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bba4:	4b27      	ldr	r3, [pc, #156]	; (800bc44 <prvInsertBlockIntoFreeList+0xa8>)
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e002      	b.n	800bbb0 <prvInsertBlockIntoFreeList+0x14>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d8f7      	bhi.n	800bbaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d108      	bne.n	800bbde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	441a      	add	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d118      	bne.n	800bc24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <prvInsertBlockIntoFreeList+0xac>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d00d      	beq.n	800bc1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	441a      	add	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	e008      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <prvInsertBlockIntoFreeList+0xac>)
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	e003      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d002      	beq.n	800bc3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc3a:	bf00      	nop
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bc80      	pop	{r7}
 800bc42:	4770      	bx	lr
 800bc44:	20002e88 	.word	0x20002e88
 800bc48:	20002e90 	.word	0x20002e90

0800bc4c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	33f1      	adds	r3, #241	; 0xf1
 800bc58:	2210      	movs	r2, #16
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f00d f95d 	bl	8018f1c <memset1>
    ctx->M_n = 0;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	22f0      	movs	r2, #240	; 0xf0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	4618      	mov	r0, r3
 800bc72:	f00d f953 	bl	8018f1c <memset1>
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b082      	sub	sp, #8
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	2110      	movs	r1, #16
 800bc8e:	6838      	ldr	r0, [r7, #0]
 800bc90:	f000 fe5c 	bl	800c94c <lorawan_aes_set_key>
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08c      	sub	sp, #48	; 0x30
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 80a1 	beq.w	800bdf6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcba:	f1c3 0310 	rsb	r3, r3, #16
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	bf28      	it	cs
 800bcc4:	4613      	movcs	r3, r2
 800bcc6:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f203 1201 	addw	r2, r3, #257	; 0x101
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcd4:	4413      	add	r3, r2
 800bcd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd8:	b292      	uxth	r2, r2
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f00d f8e2 	bl	8018ea6 <memcpy1>
        ctx->M_n += mlen;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	441a      	add	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bcf8:	2b0f      	cmp	r3, #15
 800bcfa:	f240 808d 	bls.w	800be18 <AES_CMAC_Update+0x17c>
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f000 8088 	beq.w	800be18 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bd08:	2300      	movs	r3, #0
 800bd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd0c:	e015      	b.n	800bd3a <AES_CMAC_Update+0x9e>
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	4413      	add	r3, r2
 800bd14:	33f1      	adds	r3, #241	; 0xf1
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	68f9      	ldr	r1, [r7, #12]
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	440b      	add	r3, r1
 800bd1e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	4053      	eors	r3, r2
 800bd26:	b2d9      	uxtb	r1, r3
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	4413      	add	r3, r2
 800bd2e:	33f1      	adds	r3, #241	; 0xf1
 800bd30:	460a      	mov	r2, r1
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	3301      	adds	r3, #1
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2b0f      	cmp	r3, #15
 800bd3e:	dde6      	ble.n	800bd0e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bd46:	f107 0314 	add.w	r3, r7, #20
 800bd4a:	2210      	movs	r2, #16
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f00d f8aa 	bl	8018ea6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	f107 0114 	add.w	r1, r7, #20
 800bd58:	f107 0314 	add.w	r3, r7, #20
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fed3 	bl	800cb08 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	33f1      	adds	r3, #241	; 0xf1
 800bd66:	f107 0114 	add.w	r1, r7, #20
 800bd6a:	2210      	movs	r2, #16
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f00d f89a 	bl	8018ea6 <memcpy1>

        data += mlen;
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	4413      	add	r3, r2
 800bd78:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bd82:	e038      	b.n	800bdf6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bd84:	2300      	movs	r3, #0
 800bd86:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd88:	e013      	b.n	800bdb2 <AES_CMAC_Update+0x116>
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	4413      	add	r3, r2
 800bd90:	33f1      	adds	r3, #241	; 0xf1
 800bd92:	781a      	ldrb	r2, [r3, #0]
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	440b      	add	r3, r1
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4053      	eors	r3, r2
 800bd9e:	b2d9      	uxtb	r1, r3
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	4413      	add	r3, r2
 800bda6:	33f1      	adds	r3, #241	; 0xf1
 800bda8:	460a      	mov	r2, r1
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	3301      	adds	r3, #1
 800bdb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	2b0f      	cmp	r3, #15
 800bdb6:	dde8      	ble.n	800bd8a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bdbe:	f107 0314 	add.w	r3, r7, #20
 800bdc2:	2210      	movs	r2, #16
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f00d f86e 	bl	8018ea6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	f107 0114 	add.w	r1, r7, #20
 800bdd0:	f107 0314 	add.w	r3, r7, #20
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fe97 	bl	800cb08 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	33f1      	adds	r3, #241	; 0xf1
 800bdde:	f107 0114 	add.w	r1, r7, #20
 800bde2:	2210      	movs	r2, #16
 800bde4:	4618      	mov	r0, r3
 800bde6:	f00d f85e 	bl	8018ea6 <memcpy1>

        data += 16;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3310      	adds	r3, #16
 800bdee:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3b10      	subs	r3, #16
 800bdf4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b10      	cmp	r3, #16
 800bdfa:	d8c3      	bhi.n	800bd84 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	b292      	uxth	r2, r2
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f00d f84c 	bl	8018ea6 <memcpy1>
    ctx->M_n = len;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800be16:	e000      	b.n	800be1a <AES_CMAC_Update+0x17e>
            return;
 800be18:	bf00      	nop
}
 800be1a:	3730      	adds	r7, #48	; 0x30
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b092      	sub	sp, #72	; 0x48
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800be2a:	f107 031c 	add.w	r3, r7, #28
 800be2e:	2210      	movs	r2, #16
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f00d f872 	bl	8018f1c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	f107 011c 	add.w	r1, r7, #28
 800be3e:	f107 031c 	add.w	r3, r7, #28
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fe60 	bl	800cb08 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800be48:	7f3b      	ldrb	r3, [r7, #28]
 800be4a:	b25b      	sxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	da30      	bge.n	800beb2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800be50:	2300      	movs	r3, #0
 800be52:	647b      	str	r3, [r7, #68]	; 0x44
 800be54:	e01b      	b.n	800be8e <AES_CMAC_Final+0x6e>
 800be56:	f107 021c 	add.w	r2, r7, #28
 800be5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be5c:	4413      	add	r3, r2
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	b25a      	sxtb	r2, r3
 800be64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be66:	3301      	adds	r3, #1
 800be68:	3348      	adds	r3, #72	; 0x48
 800be6a:	443b      	add	r3, r7
 800be6c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be70:	09db      	lsrs	r3, r3, #7
 800be72:	b2db      	uxtb	r3, r3
 800be74:	b25b      	sxtb	r3, r3
 800be76:	4313      	orrs	r3, r2
 800be78:	b25b      	sxtb	r3, r3
 800be7a:	b2d9      	uxtb	r1, r3
 800be7c:	f107 021c 	add.w	r2, r7, #28
 800be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be82:	4413      	add	r3, r2
 800be84:	460a      	mov	r2, r1
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be8a:	3301      	adds	r3, #1
 800be8c:	647b      	str	r3, [r7, #68]	; 0x44
 800be8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be90:	2b0e      	cmp	r3, #14
 800be92:	dde0      	ble.n	800be56 <AES_CMAC_Final+0x36>
 800be94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800bea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bea4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bea8:	43db      	mvns	r3, r3
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beb0:	e027      	b.n	800bf02 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800beb2:	2300      	movs	r3, #0
 800beb4:	643b      	str	r3, [r7, #64]	; 0x40
 800beb6:	e01b      	b.n	800bef0 <AES_CMAC_Final+0xd0>
 800beb8:	f107 021c 	add.w	r2, r7, #28
 800bebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bebe:	4413      	add	r3, r2
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	b25a      	sxtb	r2, r3
 800bec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec8:	3301      	adds	r3, #1
 800beca:	3348      	adds	r3, #72	; 0x48
 800becc:	443b      	add	r3, r7
 800bece:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bed2:	09db      	lsrs	r3, r3, #7
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	b25b      	sxtb	r3, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	b2d9      	uxtb	r1, r3
 800bede:	f107 021c 	add.w	r2, r7, #28
 800bee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee4:	4413      	add	r3, r2
 800bee6:	460a      	mov	r2, r1
 800bee8:	701a      	strb	r2, [r3, #0]
 800beea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beec:	3301      	adds	r3, #1
 800beee:	643b      	str	r3, [r7, #64]	; 0x40
 800bef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef2:	2b0e      	cmp	r3, #14
 800bef4:	dde0      	ble.n	800beb8 <AES_CMAC_Final+0x98>
 800bef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	b2db      	uxtb	r3, r3
 800befe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf08:	2b10      	cmp	r3, #16
 800bf0a:	d11d      	bne.n	800bf48 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf10:	e016      	b.n	800bf40 <AES_CMAC_Final+0x120>
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf16:	4413      	add	r3, r2
 800bf18:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	f107 011c 	add.w	r1, r7, #28
 800bf22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf24:	440b      	add	r3, r1
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	4053      	eors	r3, r2
 800bf2a:	b2d9      	uxtb	r1, r3
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf30:	4413      	add	r3, r2
 800bf32:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bf36:	460a      	mov	r2, r1
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	2b0f      	cmp	r3, #15
 800bf44:	dde5      	ble.n	800bf12 <AES_CMAC_Final+0xf2>
 800bf46:	e096      	b.n	800c076 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bf48:	7f3b      	ldrb	r3, [r7, #28]
 800bf4a:	b25b      	sxtb	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	da30      	bge.n	800bfb2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bf50:	2300      	movs	r3, #0
 800bf52:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf54:	e01b      	b.n	800bf8e <AES_CMAC_Final+0x16e>
 800bf56:	f107 021c 	add.w	r2, r7, #28
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	4413      	add	r3, r2
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	b25a      	sxtb	r2, r3
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	3301      	adds	r3, #1
 800bf68:	3348      	adds	r3, #72	; 0x48
 800bf6a:	443b      	add	r3, r7
 800bf6c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf70:	09db      	lsrs	r3, r3, #7
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	b25b      	sxtb	r3, r3
 800bf76:	4313      	orrs	r3, r2
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	b2d9      	uxtb	r1, r3
 800bf7c:	f107 021c 	add.w	r2, r7, #28
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	4413      	add	r3, r2
 800bf84:	460a      	mov	r2, r1
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	2b0e      	cmp	r3, #14
 800bf92:	dde0      	ble.n	800bf56 <AES_CMAC_Final+0x136>
 800bf94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800bfa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfa4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bfa8:	43db      	mvns	r3, r3
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfb0:	e027      	b.n	800c002 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb6:	e01b      	b.n	800bff0 <AES_CMAC_Final+0x1d0>
 800bfb8:	f107 021c 	add.w	r2, r7, #28
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbe:	4413      	add	r3, r2
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	b25a      	sxtb	r2, r3
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc8:	3301      	adds	r3, #1
 800bfca:	3348      	adds	r3, #72	; 0x48
 800bfcc:	443b      	add	r3, r7
 800bfce:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bfd2:	09db      	lsrs	r3, r3, #7
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	b25b      	sxtb	r3, r3
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	b25b      	sxtb	r3, r3
 800bfdc:	b2d9      	uxtb	r1, r3
 800bfde:	f107 021c 	add.w	r2, r7, #28
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	4413      	add	r3, r2
 800bfe6:	460a      	mov	r2, r1
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	3301      	adds	r3, #1
 800bfee:	637b      	str	r3, [r7, #52]	; 0x34
 800bff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff2:	2b0e      	cmp	r3, #14
 800bff4:	dde0      	ble.n	800bfb8 <AES_CMAC_Final+0x198>
 800bff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	4413      	add	r3, r2
 800c00c:	2280      	movs	r2, #128	; 0x80
 800c00e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c012:	e007      	b.n	800c024 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	4413      	add	r3, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c038:	2b0f      	cmp	r3, #15
 800c03a:	d9eb      	bls.n	800c014 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c03c:	2300      	movs	r3, #0
 800c03e:	633b      	str	r3, [r7, #48]	; 0x30
 800c040:	e016      	b.n	800c070 <AES_CMAC_Final+0x250>
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	4413      	add	r3, r2
 800c048:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c04c:	781a      	ldrb	r2, [r3, #0]
 800c04e:	f107 011c 	add.w	r1, r7, #28
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	440b      	add	r3, r1
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	4053      	eors	r3, r2
 800c05a:	b2d9      	uxtb	r1, r3
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	4413      	add	r3, r2
 800c062:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c066:	460a      	mov	r2, r1
 800c068:	701a      	strb	r2, [r3, #0]
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	3301      	adds	r3, #1
 800c06e:	633b      	str	r3, [r7, #48]	; 0x30
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	2b0f      	cmp	r3, #15
 800c074:	dde5      	ble.n	800c042 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c076:	2300      	movs	r3, #0
 800c078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c07a:	e015      	b.n	800c0a8 <AES_CMAC_Final+0x288>
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	4413      	add	r3, r2
 800c082:	33f1      	adds	r3, #241	; 0xf1
 800c084:	781a      	ldrb	r2, [r3, #0]
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	440b      	add	r3, r1
 800c08c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	4053      	eors	r3, r2
 800c094:	b2d9      	uxtb	r1, r3
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	4413      	add	r3, r2
 800c09c:	33f1      	adds	r3, #241	; 0xf1
 800c09e:	460a      	mov	r2, r1
 800c0a0:	701a      	strb	r2, [r3, #0]
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	dde6      	ble.n	800c07c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c0b4:	f107 030c 	add.w	r3, r7, #12
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f00c fef3 	bl	8018ea6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	6879      	ldr	r1, [r7, #4]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 fd1d 	bl	800cb08 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c0ce:	f107 031c 	add.w	r3, r7, #28
 800c0d2:	2210      	movs	r2, #16
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f00c ff20 	bl	8018f1c <memset1>
}
 800c0dc:	bf00      	nop
 800c0de:	3748      	adds	r7, #72	; 0x48
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	7852      	ldrb	r2, [r2, #1]
 800c0fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	3302      	adds	r3, #2
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	7892      	ldrb	r2, [r2, #2]
 800c108:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3303      	adds	r3, #3
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	78d2      	ldrb	r2, [r2, #3]
 800c112:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3304      	adds	r3, #4
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	7912      	ldrb	r2, [r2, #4]
 800c11c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3305      	adds	r3, #5
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	7952      	ldrb	r2, [r2, #5]
 800c126:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3306      	adds	r3, #6
 800c12c:	683a      	ldr	r2, [r7, #0]
 800c12e:	7992      	ldrb	r2, [r2, #6]
 800c130:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3307      	adds	r3, #7
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	79d2      	ldrb	r2, [r2, #7]
 800c13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3308      	adds	r3, #8
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	7a12      	ldrb	r2, [r2, #8]
 800c144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3309      	adds	r3, #9
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	7a52      	ldrb	r2, [r2, #9]
 800c14e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	330a      	adds	r3, #10
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	7a92      	ldrb	r2, [r2, #10]
 800c158:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	330b      	adds	r3, #11
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	7ad2      	ldrb	r2, [r2, #11]
 800c162:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	330c      	adds	r3, #12
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	7b12      	ldrb	r2, [r2, #12]
 800c16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	330d      	adds	r3, #13
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	7b52      	ldrb	r2, [r2, #13]
 800c176:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	330e      	adds	r3, #14
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	7b92      	ldrb	r2, [r2, #14]
 800c180:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	330f      	adds	r3, #15
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	7bd2      	ldrb	r2, [r2, #15]
 800c18a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	4770      	bx	lr

0800c196 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c1a4:	e007      	b.n	800c1b6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	1c53      	adds	r3, r2, #1
 800c1aa:	60bb      	str	r3, [r7, #8]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	1c59      	adds	r1, r3, #1
 800c1b0:	60f9      	str	r1, [r7, #12]
 800c1b2:	7812      	ldrb	r2, [r2, #0]
 800c1b4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c1b6:	79fb      	ldrb	r3, [r7, #7]
 800c1b8:	1e5a      	subs	r2, r3, #1
 800c1ba:	71fa      	strb	r2, [r7, #7]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1f2      	bne.n	800c1a6 <copy_block_nn+0x10>
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bc80      	pop	{r7}
 800c1ca:	4770      	bx	lr

0800c1cc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	781a      	ldrb	r2, [r3, #0]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	4053      	eors	r3, r2
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	7819      	ldrb	r1, [r3, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	404a      	eors	r2, r1
 800c1f8:	b2d2      	uxtb	r2, r2
 800c1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3302      	adds	r3, #2
 800c200:	7819      	ldrb	r1, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	3302      	adds	r3, #2
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3302      	adds	r3, #2
 800c20c:	404a      	eors	r2, r1
 800c20e:	b2d2      	uxtb	r2, r2
 800c210:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3303      	adds	r3, #3
 800c216:	7819      	ldrb	r1, [r3, #0]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	3303      	adds	r3, #3
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3303      	adds	r3, #3
 800c222:	404a      	eors	r2, r1
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3304      	adds	r3, #4
 800c22c:	7819      	ldrb	r1, [r3, #0]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	3304      	adds	r3, #4
 800c232:	781a      	ldrb	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3304      	adds	r3, #4
 800c238:	404a      	eors	r2, r1
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3305      	adds	r3, #5
 800c242:	7819      	ldrb	r1, [r3, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	3305      	adds	r3, #5
 800c248:	781a      	ldrb	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3305      	adds	r3, #5
 800c24e:	404a      	eors	r2, r1
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3306      	adds	r3, #6
 800c258:	7819      	ldrb	r1, [r3, #0]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	3306      	adds	r3, #6
 800c25e:	781a      	ldrb	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3306      	adds	r3, #6
 800c264:	404a      	eors	r2, r1
 800c266:	b2d2      	uxtb	r2, r2
 800c268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3307      	adds	r3, #7
 800c26e:	7819      	ldrb	r1, [r3, #0]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	3307      	adds	r3, #7
 800c274:	781a      	ldrb	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3307      	adds	r3, #7
 800c27a:	404a      	eors	r2, r1
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3308      	adds	r3, #8
 800c284:	7819      	ldrb	r1, [r3, #0]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	781a      	ldrb	r2, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3308      	adds	r3, #8
 800c290:	404a      	eors	r2, r1
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3309      	adds	r3, #9
 800c29a:	7819      	ldrb	r1, [r3, #0]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	3309      	adds	r3, #9
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3309      	adds	r3, #9
 800c2a6:	404a      	eors	r2, r1
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	330a      	adds	r3, #10
 800c2b0:	7819      	ldrb	r1, [r3, #0]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	330a      	adds	r3, #10
 800c2b6:	781a      	ldrb	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	330a      	adds	r3, #10
 800c2bc:	404a      	eors	r2, r1
 800c2be:	b2d2      	uxtb	r2, r2
 800c2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	330b      	adds	r3, #11
 800c2c6:	7819      	ldrb	r1, [r3, #0]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	330b      	adds	r3, #11
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	330b      	adds	r3, #11
 800c2d2:	404a      	eors	r2, r1
 800c2d4:	b2d2      	uxtb	r2, r2
 800c2d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	330c      	adds	r3, #12
 800c2dc:	7819      	ldrb	r1, [r3, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	330c      	adds	r3, #12
 800c2e2:	781a      	ldrb	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	404a      	eors	r2, r1
 800c2ea:	b2d2      	uxtb	r2, r2
 800c2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	330d      	adds	r3, #13
 800c2f2:	7819      	ldrb	r1, [r3, #0]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	330d      	adds	r3, #13
 800c2f8:	781a      	ldrb	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	330d      	adds	r3, #13
 800c2fe:	404a      	eors	r2, r1
 800c300:	b2d2      	uxtb	r2, r2
 800c302:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	330e      	adds	r3, #14
 800c308:	7819      	ldrb	r1, [r3, #0]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	330e      	adds	r3, #14
 800c30e:	781a      	ldrb	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	330e      	adds	r3, #14
 800c314:	404a      	eors	r2, r1
 800c316:	b2d2      	uxtb	r2, r2
 800c318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	330f      	adds	r3, #15
 800c31e:	7819      	ldrb	r1, [r3, #0]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	330f      	adds	r3, #15
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	330f      	adds	r3, #15
 800c32a:	404a      	eors	r2, r1
 800c32c:	b2d2      	uxtb	r2, r2
 800c32e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	bc80      	pop	{r7}
 800c338:	4770      	bx	lr

0800c33a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c33a:	b480      	push	{r7}
 800c33c:	b085      	sub	sp, #20
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	4053      	eors	r3, r2
 800c350:	b2da      	uxtb	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	3301      	adds	r3, #1
 800c35a:	7819      	ldrb	r1, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3301      	adds	r3, #1
 800c360:	781a      	ldrb	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	404a      	eors	r2, r1
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	3302      	adds	r3, #2
 800c370:	7819      	ldrb	r1, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3302      	adds	r3, #2
 800c376:	781a      	ldrb	r2, [r3, #0]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	3302      	adds	r3, #2
 800c37c:	404a      	eors	r2, r1
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	3303      	adds	r3, #3
 800c386:	7819      	ldrb	r1, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3303      	adds	r3, #3
 800c38c:	781a      	ldrb	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3303      	adds	r3, #3
 800c392:	404a      	eors	r2, r1
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	3304      	adds	r3, #4
 800c39c:	7819      	ldrb	r1, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	404a      	eors	r2, r1
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	3305      	adds	r3, #5
 800c3b2:	7819      	ldrb	r1, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3305      	adds	r3, #5
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3305      	adds	r3, #5
 800c3be:	404a      	eors	r2, r1
 800c3c0:	b2d2      	uxtb	r2, r2
 800c3c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	3306      	adds	r3, #6
 800c3c8:	7819      	ldrb	r1, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3306      	adds	r3, #6
 800c3ce:	781a      	ldrb	r2, [r3, #0]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3306      	adds	r3, #6
 800c3d4:	404a      	eors	r2, r1
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	3307      	adds	r3, #7
 800c3de:	7819      	ldrb	r1, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3307      	adds	r3, #7
 800c3ea:	404a      	eors	r2, r1
 800c3ec:	b2d2      	uxtb	r2, r2
 800c3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	7819      	ldrb	r1, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	781a      	ldrb	r2, [r3, #0]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3308      	adds	r3, #8
 800c400:	404a      	eors	r2, r1
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	3309      	adds	r3, #9
 800c40a:	7819      	ldrb	r1, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3309      	adds	r3, #9
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3309      	adds	r3, #9
 800c416:	404a      	eors	r2, r1
 800c418:	b2d2      	uxtb	r2, r2
 800c41a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	330a      	adds	r3, #10
 800c420:	7819      	ldrb	r1, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	330a      	adds	r3, #10
 800c426:	781a      	ldrb	r2, [r3, #0]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	330a      	adds	r3, #10
 800c42c:	404a      	eors	r2, r1
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	330b      	adds	r3, #11
 800c436:	7819      	ldrb	r1, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	330b      	adds	r3, #11
 800c43c:	781a      	ldrb	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	330b      	adds	r3, #11
 800c442:	404a      	eors	r2, r1
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	330c      	adds	r3, #12
 800c44c:	7819      	ldrb	r1, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	330c      	adds	r3, #12
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	330c      	adds	r3, #12
 800c458:	404a      	eors	r2, r1
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	330d      	adds	r3, #13
 800c462:	7819      	ldrb	r1, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	330d      	adds	r3, #13
 800c468:	781a      	ldrb	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	330d      	adds	r3, #13
 800c46e:	404a      	eors	r2, r1
 800c470:	b2d2      	uxtb	r2, r2
 800c472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	330e      	adds	r3, #14
 800c478:	7819      	ldrb	r1, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	330e      	adds	r3, #14
 800c47e:	781a      	ldrb	r2, [r3, #0]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	330e      	adds	r3, #14
 800c484:	404a      	eors	r2, r1
 800c486:	b2d2      	uxtb	r2, r2
 800c488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	330f      	adds	r3, #15
 800c48e:	7819      	ldrb	r1, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	330f      	adds	r3, #15
 800c494:	781a      	ldrb	r2, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	330f      	adds	r3, #15
 800c49a:	404a      	eors	r2, r1
 800c49c:	b2d2      	uxtb	r2, r2
 800c49e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr

0800c4aa <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe88 	bl	800c1cc <xor_block>
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4b48      	ldr	r3, [pc, #288]	; (800c5f4 <shift_sub_rows+0x130>)
 800c4d4:	5c9a      	ldrb	r2, [r3, r2]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	701a      	strb	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4a43      	ldr	r2, [pc, #268]	; (800c5f4 <shift_sub_rows+0x130>)
 800c4e8:	5c52      	ldrb	r2, [r2, r1]
 800c4ea:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	4a3e      	ldr	r2, [pc, #248]	; (800c5f4 <shift_sub_rows+0x130>)
 800c4fa:	5c52      	ldrb	r2, [r2, r1]
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	330c      	adds	r3, #12
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	4619      	mov	r1, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	330c      	adds	r3, #12
 800c50a:	4a3a      	ldr	r2, [pc, #232]	; (800c5f4 <shift_sub_rows+0x130>)
 800c50c:	5c52      	ldrb	r2, [r2, r1]
 800c50e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	785b      	ldrb	r3, [r3, #1]
 800c514:	73fb      	strb	r3, [r7, #15]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3305      	adds	r3, #5
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	4619      	mov	r1, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3301      	adds	r3, #1
 800c522:	4a34      	ldr	r2, [pc, #208]	; (800c5f4 <shift_sub_rows+0x130>)
 800c524:	5c52      	ldrb	r2, [r2, r1]
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3309      	adds	r3, #9
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	4619      	mov	r1, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3305      	adds	r3, #5
 800c534:	4a2f      	ldr	r2, [pc, #188]	; (800c5f4 <shift_sub_rows+0x130>)
 800c536:	5c52      	ldrb	r2, [r2, r1]
 800c538:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	330d      	adds	r3, #13
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	4619      	mov	r1, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3309      	adds	r3, #9
 800c546:	4a2b      	ldr	r2, [pc, #172]	; (800c5f4 <shift_sub_rows+0x130>)
 800c548:	5c52      	ldrb	r2, [r2, r1]
 800c54a:	701a      	strb	r2, [r3, #0]
 800c54c:	7bfa      	ldrb	r2, [r7, #15]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	330d      	adds	r3, #13
 800c552:	4928      	ldr	r1, [pc, #160]	; (800c5f4 <shift_sub_rows+0x130>)
 800c554:	5c8a      	ldrb	r2, [r1, r2]
 800c556:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	789b      	ldrb	r3, [r3, #2]
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	330a      	adds	r3, #10
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	4619      	mov	r1, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	3302      	adds	r3, #2
 800c56a:	4a22      	ldr	r2, [pc, #136]	; (800c5f4 <shift_sub_rows+0x130>)
 800c56c:	5c52      	ldrb	r2, [r2, r1]
 800c56e:	701a      	strb	r2, [r3, #0]
 800c570:	7bfa      	ldrb	r2, [r7, #15]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	330a      	adds	r3, #10
 800c576:	491f      	ldr	r1, [pc, #124]	; (800c5f4 <shift_sub_rows+0x130>)
 800c578:	5c8a      	ldrb	r2, [r1, r2]
 800c57a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	799b      	ldrb	r3, [r3, #6]
 800c580:	73fb      	strb	r3, [r7, #15]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	330e      	adds	r3, #14
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	4619      	mov	r1, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3306      	adds	r3, #6
 800c58e:	4a19      	ldr	r2, [pc, #100]	; (800c5f4 <shift_sub_rows+0x130>)
 800c590:	5c52      	ldrb	r2, [r2, r1]
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	7bfa      	ldrb	r2, [r7, #15]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	330e      	adds	r3, #14
 800c59a:	4916      	ldr	r1, [pc, #88]	; (800c5f4 <shift_sub_rows+0x130>)
 800c59c:	5c8a      	ldrb	r2, [r1, r2]
 800c59e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7bdb      	ldrb	r3, [r3, #15]
 800c5a4:	73fb      	strb	r3, [r7, #15]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	330b      	adds	r3, #11
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	330f      	adds	r3, #15
 800c5b2:	4a10      	ldr	r2, [pc, #64]	; (800c5f4 <shift_sub_rows+0x130>)
 800c5b4:	5c52      	ldrb	r2, [r2, r1]
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3307      	adds	r3, #7
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	330b      	adds	r3, #11
 800c5c4:	4a0b      	ldr	r2, [pc, #44]	; (800c5f4 <shift_sub_rows+0x130>)
 800c5c6:	5c52      	ldrb	r2, [r2, r1]
 800c5c8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3303      	adds	r3, #3
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3307      	adds	r3, #7
 800c5d6:	4a07      	ldr	r2, [pc, #28]	; (800c5f4 <shift_sub_rows+0x130>)
 800c5d8:	5c52      	ldrb	r2, [r2, r1]
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	7bfa      	ldrb	r2, [r7, #15]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3303      	adds	r3, #3
 800c5e2:	4904      	ldr	r1, [pc, #16]	; (800c5f4 <shift_sub_rows+0x130>)
 800c5e4:	5c8a      	ldrb	r2, [r1, r2]
 800c5e6:	701a      	strb	r2, [r3, #0]
}
 800c5e8:	bf00      	nop
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	0801e2ec 	.word	0x0801e2ec

0800c5f8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c600:	f107 0308 	add.w	r3, r7, #8
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff fd6c 	bl	800c0e4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c60c:	7a3b      	ldrb	r3, [r7, #8]
 800c60e:	461a      	mov	r2, r3
 800c610:	4b9a      	ldr	r3, [pc, #616]	; (800c87c <mix_sub_columns+0x284>)
 800c612:	5c9a      	ldrb	r2, [r3, r2]
 800c614:	7b7b      	ldrb	r3, [r7, #13]
 800c616:	4619      	mov	r1, r3
 800c618:	4b99      	ldr	r3, [pc, #612]	; (800c880 <mix_sub_columns+0x288>)
 800c61a:	5c5b      	ldrb	r3, [r3, r1]
 800c61c:	4053      	eors	r3, r2
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	7cbb      	ldrb	r3, [r7, #18]
 800c622:	4619      	mov	r1, r3
 800c624:	4b97      	ldr	r3, [pc, #604]	; (800c884 <mix_sub_columns+0x28c>)
 800c626:	5c5b      	ldrb	r3, [r3, r1]
 800c628:	4053      	eors	r3, r2
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	4619      	mov	r1, r3
 800c630:	4b94      	ldr	r3, [pc, #592]	; (800c884 <mix_sub_columns+0x28c>)
 800c632:	5c5b      	ldrb	r3, [r3, r1]
 800c634:	4053      	eors	r3, r2
 800c636:	b2da      	uxtb	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c63c:	7a3b      	ldrb	r3, [r7, #8]
 800c63e:	461a      	mov	r2, r3
 800c640:	4b90      	ldr	r3, [pc, #576]	; (800c884 <mix_sub_columns+0x28c>)
 800c642:	5c9a      	ldrb	r2, [r3, r2]
 800c644:	7b7b      	ldrb	r3, [r7, #13]
 800c646:	4619      	mov	r1, r3
 800c648:	4b8c      	ldr	r3, [pc, #560]	; (800c87c <mix_sub_columns+0x284>)
 800c64a:	5c5b      	ldrb	r3, [r3, r1]
 800c64c:	4053      	eors	r3, r2
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	7cbb      	ldrb	r3, [r7, #18]
 800c652:	4619      	mov	r1, r3
 800c654:	4b8a      	ldr	r3, [pc, #552]	; (800c880 <mix_sub_columns+0x288>)
 800c656:	5c5b      	ldrb	r3, [r3, r1]
 800c658:	4053      	eors	r3, r2
 800c65a:	b2d9      	uxtb	r1, r3
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	461a      	mov	r2, r3
 800c660:	4b88      	ldr	r3, [pc, #544]	; (800c884 <mix_sub_columns+0x28c>)
 800c662:	5c9a      	ldrb	r2, [r3, r2]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3301      	adds	r3, #1
 800c668:	404a      	eors	r2, r1
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c66e:	7a3b      	ldrb	r3, [r7, #8]
 800c670:	461a      	mov	r2, r3
 800c672:	4b84      	ldr	r3, [pc, #528]	; (800c884 <mix_sub_columns+0x28c>)
 800c674:	5c9a      	ldrb	r2, [r3, r2]
 800c676:	7b7b      	ldrb	r3, [r7, #13]
 800c678:	4619      	mov	r1, r3
 800c67a:	4b82      	ldr	r3, [pc, #520]	; (800c884 <mix_sub_columns+0x28c>)
 800c67c:	5c5b      	ldrb	r3, [r3, r1]
 800c67e:	4053      	eors	r3, r2
 800c680:	b2da      	uxtb	r2, r3
 800c682:	7cbb      	ldrb	r3, [r7, #18]
 800c684:	4619      	mov	r1, r3
 800c686:	4b7d      	ldr	r3, [pc, #500]	; (800c87c <mix_sub_columns+0x284>)
 800c688:	5c5b      	ldrb	r3, [r3, r1]
 800c68a:	4053      	eors	r3, r2
 800c68c:	b2d9      	uxtb	r1, r3
 800c68e:	7dfb      	ldrb	r3, [r7, #23]
 800c690:	461a      	mov	r2, r3
 800c692:	4b7b      	ldr	r3, [pc, #492]	; (800c880 <mix_sub_columns+0x288>)
 800c694:	5c9a      	ldrb	r2, [r3, r2]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3302      	adds	r3, #2
 800c69a:	404a      	eors	r2, r1
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c6a0:	7a3b      	ldrb	r3, [r7, #8]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b76      	ldr	r3, [pc, #472]	; (800c880 <mix_sub_columns+0x288>)
 800c6a6:	5c9a      	ldrb	r2, [r3, r2]
 800c6a8:	7b7b      	ldrb	r3, [r7, #13]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4b75      	ldr	r3, [pc, #468]	; (800c884 <mix_sub_columns+0x28c>)
 800c6ae:	5c5b      	ldrb	r3, [r3, r1]
 800c6b0:	4053      	eors	r3, r2
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	7cbb      	ldrb	r3, [r7, #18]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4b72      	ldr	r3, [pc, #456]	; (800c884 <mix_sub_columns+0x28c>)
 800c6ba:	5c5b      	ldrb	r3, [r3, r1]
 800c6bc:	4053      	eors	r3, r2
 800c6be:	b2d9      	uxtb	r1, r3
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4b6d      	ldr	r3, [pc, #436]	; (800c87c <mix_sub_columns+0x284>)
 800c6c6:	5c9a      	ldrb	r2, [r3, r2]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3303      	adds	r3, #3
 800c6cc:	404a      	eors	r2, r1
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c6d2:	7b3b      	ldrb	r3, [r7, #12]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4b69      	ldr	r3, [pc, #420]	; (800c87c <mix_sub_columns+0x284>)
 800c6d8:	5c9a      	ldrb	r2, [r3, r2]
 800c6da:	7c7b      	ldrb	r3, [r7, #17]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4b68      	ldr	r3, [pc, #416]	; (800c880 <mix_sub_columns+0x288>)
 800c6e0:	5c5b      	ldrb	r3, [r3, r1]
 800c6e2:	4053      	eors	r3, r2
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	7dbb      	ldrb	r3, [r7, #22]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4b66      	ldr	r3, [pc, #408]	; (800c884 <mix_sub_columns+0x28c>)
 800c6ec:	5c5b      	ldrb	r3, [r3, r1]
 800c6ee:	4053      	eors	r3, r2
 800c6f0:	b2d9      	uxtb	r1, r3
 800c6f2:	7afb      	ldrb	r3, [r7, #11]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	4b63      	ldr	r3, [pc, #396]	; (800c884 <mix_sub_columns+0x28c>)
 800c6f8:	5c9a      	ldrb	r2, [r3, r2]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	404a      	eors	r2, r1
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c704:	7b3b      	ldrb	r3, [r7, #12]
 800c706:	461a      	mov	r2, r3
 800c708:	4b5e      	ldr	r3, [pc, #376]	; (800c884 <mix_sub_columns+0x28c>)
 800c70a:	5c9a      	ldrb	r2, [r3, r2]
 800c70c:	7c7b      	ldrb	r3, [r7, #17]
 800c70e:	4619      	mov	r1, r3
 800c710:	4b5a      	ldr	r3, [pc, #360]	; (800c87c <mix_sub_columns+0x284>)
 800c712:	5c5b      	ldrb	r3, [r3, r1]
 800c714:	4053      	eors	r3, r2
 800c716:	b2da      	uxtb	r2, r3
 800c718:	7dbb      	ldrb	r3, [r7, #22]
 800c71a:	4619      	mov	r1, r3
 800c71c:	4b58      	ldr	r3, [pc, #352]	; (800c880 <mix_sub_columns+0x288>)
 800c71e:	5c5b      	ldrb	r3, [r3, r1]
 800c720:	4053      	eors	r3, r2
 800c722:	b2d9      	uxtb	r1, r3
 800c724:	7afb      	ldrb	r3, [r7, #11]
 800c726:	461a      	mov	r2, r3
 800c728:	4b56      	ldr	r3, [pc, #344]	; (800c884 <mix_sub_columns+0x28c>)
 800c72a:	5c9a      	ldrb	r2, [r3, r2]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3305      	adds	r3, #5
 800c730:	404a      	eors	r2, r1
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c736:	7b3b      	ldrb	r3, [r7, #12]
 800c738:	461a      	mov	r2, r3
 800c73a:	4b52      	ldr	r3, [pc, #328]	; (800c884 <mix_sub_columns+0x28c>)
 800c73c:	5c9a      	ldrb	r2, [r3, r2]
 800c73e:	7c7b      	ldrb	r3, [r7, #17]
 800c740:	4619      	mov	r1, r3
 800c742:	4b50      	ldr	r3, [pc, #320]	; (800c884 <mix_sub_columns+0x28c>)
 800c744:	5c5b      	ldrb	r3, [r3, r1]
 800c746:	4053      	eors	r3, r2
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	7dbb      	ldrb	r3, [r7, #22]
 800c74c:	4619      	mov	r1, r3
 800c74e:	4b4b      	ldr	r3, [pc, #300]	; (800c87c <mix_sub_columns+0x284>)
 800c750:	5c5b      	ldrb	r3, [r3, r1]
 800c752:	4053      	eors	r3, r2
 800c754:	b2d9      	uxtb	r1, r3
 800c756:	7afb      	ldrb	r3, [r7, #11]
 800c758:	461a      	mov	r2, r3
 800c75a:	4b49      	ldr	r3, [pc, #292]	; (800c880 <mix_sub_columns+0x288>)
 800c75c:	5c9a      	ldrb	r2, [r3, r2]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3306      	adds	r3, #6
 800c762:	404a      	eors	r2, r1
 800c764:	b2d2      	uxtb	r2, r2
 800c766:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c768:	7b3b      	ldrb	r3, [r7, #12]
 800c76a:	461a      	mov	r2, r3
 800c76c:	4b44      	ldr	r3, [pc, #272]	; (800c880 <mix_sub_columns+0x288>)
 800c76e:	5c9a      	ldrb	r2, [r3, r2]
 800c770:	7c7b      	ldrb	r3, [r7, #17]
 800c772:	4619      	mov	r1, r3
 800c774:	4b43      	ldr	r3, [pc, #268]	; (800c884 <mix_sub_columns+0x28c>)
 800c776:	5c5b      	ldrb	r3, [r3, r1]
 800c778:	4053      	eors	r3, r2
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	7dbb      	ldrb	r3, [r7, #22]
 800c77e:	4619      	mov	r1, r3
 800c780:	4b40      	ldr	r3, [pc, #256]	; (800c884 <mix_sub_columns+0x28c>)
 800c782:	5c5b      	ldrb	r3, [r3, r1]
 800c784:	4053      	eors	r3, r2
 800c786:	b2d9      	uxtb	r1, r3
 800c788:	7afb      	ldrb	r3, [r7, #11]
 800c78a:	461a      	mov	r2, r3
 800c78c:	4b3b      	ldr	r3, [pc, #236]	; (800c87c <mix_sub_columns+0x284>)
 800c78e:	5c9a      	ldrb	r2, [r3, r2]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3307      	adds	r3, #7
 800c794:	404a      	eors	r2, r1
 800c796:	b2d2      	uxtb	r2, r2
 800c798:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c79a:	7c3b      	ldrb	r3, [r7, #16]
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b37      	ldr	r3, [pc, #220]	; (800c87c <mix_sub_columns+0x284>)
 800c7a0:	5c9a      	ldrb	r2, [r3, r2]
 800c7a2:	7d7b      	ldrb	r3, [r7, #21]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4b36      	ldr	r3, [pc, #216]	; (800c880 <mix_sub_columns+0x288>)
 800c7a8:	5c5b      	ldrb	r3, [r3, r1]
 800c7aa:	4053      	eors	r3, r2
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	7abb      	ldrb	r3, [r7, #10]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4b34      	ldr	r3, [pc, #208]	; (800c884 <mix_sub_columns+0x28c>)
 800c7b4:	5c5b      	ldrb	r3, [r3, r1]
 800c7b6:	4053      	eors	r3, r2
 800c7b8:	b2d9      	uxtb	r1, r3
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	4b31      	ldr	r3, [pc, #196]	; (800c884 <mix_sub_columns+0x28c>)
 800c7c0:	5c9a      	ldrb	r2, [r3, r2]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	404a      	eors	r2, r1
 800c7c8:	b2d2      	uxtb	r2, r2
 800c7ca:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c7cc:	7c3b      	ldrb	r3, [r7, #16]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4b2c      	ldr	r3, [pc, #176]	; (800c884 <mix_sub_columns+0x28c>)
 800c7d2:	5c9a      	ldrb	r2, [r3, r2]
 800c7d4:	7d7b      	ldrb	r3, [r7, #21]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4b28      	ldr	r3, [pc, #160]	; (800c87c <mix_sub_columns+0x284>)
 800c7da:	5c5b      	ldrb	r3, [r3, r1]
 800c7dc:	4053      	eors	r3, r2
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	7abb      	ldrb	r3, [r7, #10]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	4b26      	ldr	r3, [pc, #152]	; (800c880 <mix_sub_columns+0x288>)
 800c7e6:	5c5b      	ldrb	r3, [r3, r1]
 800c7e8:	4053      	eors	r3, r2
 800c7ea:	b2d9      	uxtb	r1, r3
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4b24      	ldr	r3, [pc, #144]	; (800c884 <mix_sub_columns+0x28c>)
 800c7f2:	5c9a      	ldrb	r2, [r3, r2]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3309      	adds	r3, #9
 800c7f8:	404a      	eors	r2, r1
 800c7fa:	b2d2      	uxtb	r2, r2
 800c7fc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c7fe:	7c3b      	ldrb	r3, [r7, #16]
 800c800:	461a      	mov	r2, r3
 800c802:	4b20      	ldr	r3, [pc, #128]	; (800c884 <mix_sub_columns+0x28c>)
 800c804:	5c9a      	ldrb	r2, [r3, r2]
 800c806:	7d7b      	ldrb	r3, [r7, #21]
 800c808:	4619      	mov	r1, r3
 800c80a:	4b1e      	ldr	r3, [pc, #120]	; (800c884 <mix_sub_columns+0x28c>)
 800c80c:	5c5b      	ldrb	r3, [r3, r1]
 800c80e:	4053      	eors	r3, r2
 800c810:	b2da      	uxtb	r2, r3
 800c812:	7abb      	ldrb	r3, [r7, #10]
 800c814:	4619      	mov	r1, r3
 800c816:	4b19      	ldr	r3, [pc, #100]	; (800c87c <mix_sub_columns+0x284>)
 800c818:	5c5b      	ldrb	r3, [r3, r1]
 800c81a:	4053      	eors	r3, r2
 800c81c:	b2d9      	uxtb	r1, r3
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	461a      	mov	r2, r3
 800c822:	4b17      	ldr	r3, [pc, #92]	; (800c880 <mix_sub_columns+0x288>)
 800c824:	5c9a      	ldrb	r2, [r3, r2]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	330a      	adds	r3, #10
 800c82a:	404a      	eors	r2, r1
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c830:	7c3b      	ldrb	r3, [r7, #16]
 800c832:	461a      	mov	r2, r3
 800c834:	4b12      	ldr	r3, [pc, #72]	; (800c880 <mix_sub_columns+0x288>)
 800c836:	5c9a      	ldrb	r2, [r3, r2]
 800c838:	7d7b      	ldrb	r3, [r7, #21]
 800c83a:	4619      	mov	r1, r3
 800c83c:	4b11      	ldr	r3, [pc, #68]	; (800c884 <mix_sub_columns+0x28c>)
 800c83e:	5c5b      	ldrb	r3, [r3, r1]
 800c840:	4053      	eors	r3, r2
 800c842:	b2da      	uxtb	r2, r3
 800c844:	7abb      	ldrb	r3, [r7, #10]
 800c846:	4619      	mov	r1, r3
 800c848:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <mix_sub_columns+0x28c>)
 800c84a:	5c5b      	ldrb	r3, [r3, r1]
 800c84c:	4053      	eors	r3, r2
 800c84e:	b2d9      	uxtb	r1, r3
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	461a      	mov	r2, r3
 800c854:	4b09      	ldr	r3, [pc, #36]	; (800c87c <mix_sub_columns+0x284>)
 800c856:	5c9a      	ldrb	r2, [r3, r2]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	330b      	adds	r3, #11
 800c85c:	404a      	eors	r2, r1
 800c85e:	b2d2      	uxtb	r2, r2
 800c860:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c862:	7d3b      	ldrb	r3, [r7, #20]
 800c864:	461a      	mov	r2, r3
 800c866:	4b05      	ldr	r3, [pc, #20]	; (800c87c <mix_sub_columns+0x284>)
 800c868:	5c9a      	ldrb	r2, [r3, r2]
 800c86a:	7a7b      	ldrb	r3, [r7, #9]
 800c86c:	4619      	mov	r1, r3
 800c86e:	4b04      	ldr	r3, [pc, #16]	; (800c880 <mix_sub_columns+0x288>)
 800c870:	5c5b      	ldrb	r3, [r3, r1]
 800c872:	4053      	eors	r3, r2
 800c874:	b2da      	uxtb	r2, r3
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	4619      	mov	r1, r3
 800c87a:	e005      	b.n	800c888 <mix_sub_columns+0x290>
 800c87c:	0801e3ec 	.word	0x0801e3ec
 800c880:	0801e4ec 	.word	0x0801e4ec
 800c884:	0801e2ec 	.word	0x0801e2ec
 800c888:	4b2d      	ldr	r3, [pc, #180]	; (800c940 <mix_sub_columns+0x348>)
 800c88a:	5c5b      	ldrb	r3, [r3, r1]
 800c88c:	4053      	eors	r3, r2
 800c88e:	b2d9      	uxtb	r1, r3
 800c890:	7cfb      	ldrb	r3, [r7, #19]
 800c892:	461a      	mov	r2, r3
 800c894:	4b2a      	ldr	r3, [pc, #168]	; (800c940 <mix_sub_columns+0x348>)
 800c896:	5c9a      	ldrb	r2, [r3, r2]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	330c      	adds	r3, #12
 800c89c:	404a      	eors	r2, r1
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c8a2:	7d3b      	ldrb	r3, [r7, #20]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	4b26      	ldr	r3, [pc, #152]	; (800c940 <mix_sub_columns+0x348>)
 800c8a8:	5c9a      	ldrb	r2, [r3, r2]
 800c8aa:	7a7b      	ldrb	r3, [r7, #9]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4b25      	ldr	r3, [pc, #148]	; (800c944 <mix_sub_columns+0x34c>)
 800c8b0:	5c5b      	ldrb	r3, [r3, r1]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4b23      	ldr	r3, [pc, #140]	; (800c948 <mix_sub_columns+0x350>)
 800c8bc:	5c5b      	ldrb	r3, [r3, r1]
 800c8be:	4053      	eors	r3, r2
 800c8c0:	b2d9      	uxtb	r1, r3
 800c8c2:	7cfb      	ldrb	r3, [r7, #19]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4b1e      	ldr	r3, [pc, #120]	; (800c940 <mix_sub_columns+0x348>)
 800c8c8:	5c9a      	ldrb	r2, [r3, r2]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	330d      	adds	r3, #13
 800c8ce:	404a      	eors	r2, r1
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c8d4:	7d3b      	ldrb	r3, [r7, #20]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4b19      	ldr	r3, [pc, #100]	; (800c940 <mix_sub_columns+0x348>)
 800c8da:	5c9a      	ldrb	r2, [r3, r2]
 800c8dc:	7a7b      	ldrb	r3, [r7, #9]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	4b17      	ldr	r3, [pc, #92]	; (800c940 <mix_sub_columns+0x348>)
 800c8e2:	5c5b      	ldrb	r3, [r3, r1]
 800c8e4:	4053      	eors	r3, r2
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4b15      	ldr	r3, [pc, #84]	; (800c944 <mix_sub_columns+0x34c>)
 800c8ee:	5c5b      	ldrb	r3, [r3, r1]
 800c8f0:	4053      	eors	r3, r2
 800c8f2:	b2d9      	uxtb	r1, r3
 800c8f4:	7cfb      	ldrb	r3, [r7, #19]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4b13      	ldr	r3, [pc, #76]	; (800c948 <mix_sub_columns+0x350>)
 800c8fa:	5c9a      	ldrb	r2, [r3, r2]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	330e      	adds	r3, #14
 800c900:	404a      	eors	r2, r1
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c906:	7d3b      	ldrb	r3, [r7, #20]
 800c908:	461a      	mov	r2, r3
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <mix_sub_columns+0x350>)
 800c90c:	5c9a      	ldrb	r2, [r3, r2]
 800c90e:	7a7b      	ldrb	r3, [r7, #9]
 800c910:	4619      	mov	r1, r3
 800c912:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <mix_sub_columns+0x348>)
 800c914:	5c5b      	ldrb	r3, [r3, r1]
 800c916:	4053      	eors	r3, r2
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
 800c91c:	4619      	mov	r1, r3
 800c91e:	4b08      	ldr	r3, [pc, #32]	; (800c940 <mix_sub_columns+0x348>)
 800c920:	5c5b      	ldrb	r3, [r3, r1]
 800c922:	4053      	eors	r3, r2
 800c924:	b2d9      	uxtb	r1, r3
 800c926:	7cfb      	ldrb	r3, [r7, #19]
 800c928:	461a      	mov	r2, r3
 800c92a:	4b06      	ldr	r3, [pc, #24]	; (800c944 <mix_sub_columns+0x34c>)
 800c92c:	5c9a      	ldrb	r2, [r3, r2]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	330f      	adds	r3, #15
 800c932:	404a      	eors	r2, r1
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
  }
 800c938:	bf00      	nop
 800c93a:	3718      	adds	r7, #24
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	0801e2ec 	.word	0x0801e2ec
 800c944:	0801e3ec 	.word	0x0801e3ec
 800c948:	0801e4ec 	.word	0x0801e4ec

0800c94c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	460b      	mov	r3, r1
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c95a:	7afb      	ldrb	r3, [r7, #11]
 800c95c:	3b10      	subs	r3, #16
 800c95e:	2b10      	cmp	r3, #16
 800c960:	bf8c      	ite	hi
 800c962:	2201      	movhi	r2, #1
 800c964:	2200      	movls	r2, #0
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	2a00      	cmp	r2, #0
 800c96a:	d10d      	bne.n	800c988 <lorawan_aes_set_key+0x3c>
 800c96c:	2201      	movs	r2, #1
 800c96e:	fa02 f303 	lsl.w	r3, r2, r3
 800c972:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bf14      	ite	ne
 800c97e:	2301      	movne	r3, #1
 800c980:	2300      	moveq	r3, #0
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d105      	bne.n	800c994 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800c990:	23ff      	movs	r3, #255	; 0xff
 800c992:	e0b2      	b.n	800cafa <lorawan_aes_set_key+0x1ae>
        break;
 800c994:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7afa      	ldrb	r2, [r7, #11]
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fbfa 	bl	800c196 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	331c      	adds	r3, #28
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c9ac:	7c7b      	ldrb	r3, [r7, #17]
 800c9ae:	091b      	lsrs	r3, r3, #4
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c9bc:	7afb      	ldrb	r3, [r7, #11]
 800c9be:	75fb      	strb	r3, [r7, #23]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	75bb      	strb	r3, [r7, #22]
 800c9c4:	e093      	b.n	800caee <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	3b04      	subs	r3, #4
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	5cd3      	ldrb	r3, [r2, r3]
 800c9ce:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	3b03      	subs	r3, #3
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	5cd3      	ldrb	r3, [r2, r3]
 800c9d8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	3b02      	subs	r3, #2
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	5cd3      	ldrb	r3, [r2, r3]
 800c9e2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	5cd3      	ldrb	r3, [r2, r3]
 800c9ec:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	7afa      	ldrb	r2, [r7, #11]
 800c9f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9f6:	fb01 f202 	mul.w	r2, r1, r2
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d127      	bne.n	800ca52 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ca02:	7d7b      	ldrb	r3, [r7, #21]
 800ca04:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ca06:	7d3b      	ldrb	r3, [r7, #20]
 800ca08:	4a3e      	ldr	r2, [pc, #248]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca0a:	5cd2      	ldrb	r2, [r2, r3]
 800ca0c:	7dbb      	ldrb	r3, [r7, #22]
 800ca0e:	4053      	eors	r3, r2
 800ca10:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ca12:	7cfb      	ldrb	r3, [r7, #19]
 800ca14:	4a3b      	ldr	r2, [pc, #236]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca16:	5cd3      	ldrb	r3, [r2, r3]
 800ca18:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ca1a:	7cbb      	ldrb	r3, [r7, #18]
 800ca1c:	4a39      	ldr	r2, [pc, #228]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca1e:	5cd3      	ldrb	r3, [r2, r3]
 800ca20:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ca22:	7c3b      	ldrb	r3, [r7, #16]
 800ca24:	4a37      	ldr	r2, [pc, #220]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca26:	5cd3      	ldrb	r3, [r2, r3]
 800ca28:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ca2a:	7dbb      	ldrb	r3, [r7, #22]
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	b25a      	sxtb	r2, r3
 800ca30:	7dbb      	ldrb	r3, [r7, #22]
 800ca32:	09db      	lsrs	r3, r3, #7
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	4619      	mov	r1, r3
 800ca38:	0049      	lsls	r1, r1, #1
 800ca3a:	440b      	add	r3, r1
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	00c8      	lsls	r0, r1, #3
 800ca40:	4619      	mov	r1, r3
 800ca42:	4603      	mov	r3, r0
 800ca44:	440b      	add	r3, r1
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	4053      	eors	r3, r2
 800ca4c:	b25b      	sxtb	r3, r3
 800ca4e:	75bb      	strb	r3, [r7, #22]
 800ca50:	e01c      	b.n	800ca8c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ca52:	7afb      	ldrb	r3, [r7, #11]
 800ca54:	2b18      	cmp	r3, #24
 800ca56:	d919      	bls.n	800ca8c <lorawan_aes_set_key+0x140>
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	7afa      	ldrb	r2, [r7, #11]
 800ca5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca60:	fb01 f202 	mul.w	r2, r1, r2
 800ca64:	1a9b      	subs	r3, r3, r2
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b10      	cmp	r3, #16
 800ca6a:	d10f      	bne.n	800ca8c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800ca6c:	7d7b      	ldrb	r3, [r7, #21]
 800ca6e:	4a25      	ldr	r2, [pc, #148]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca70:	5cd3      	ldrb	r3, [r2, r3]
 800ca72:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ca74:	7d3b      	ldrb	r3, [r7, #20]
 800ca76:	4a23      	ldr	r2, [pc, #140]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca78:	5cd3      	ldrb	r3, [r2, r3]
 800ca7a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ca7c:	7cfb      	ldrb	r3, [r7, #19]
 800ca7e:	4a21      	ldr	r2, [pc, #132]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca80:	5cd3      	ldrb	r3, [r2, r3]
 800ca82:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ca84:	7cbb      	ldrb	r3, [r7, #18]
 800ca86:	4a1f      	ldr	r2, [pc, #124]	; (800cb04 <lorawan_aes_set_key+0x1b8>)
 800ca88:	5cd3      	ldrb	r3, [r2, r3]
 800ca8a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ca8c:	7dfa      	ldrb	r2, [r7, #23]
 800ca8e:	7afb      	ldrb	r3, [r7, #11]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ca94:	7c3b      	ldrb	r3, [r7, #16]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	5cd1      	ldrb	r1, [r2, r3]
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	7d7a      	ldrb	r2, [r7, #21]
 800ca9e:	404a      	eors	r2, r1
 800caa0:	b2d1      	uxtb	r1, r2
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800caa6:	7c3b      	ldrb	r3, [r7, #16]
 800caa8:	3301      	adds	r3, #1
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	5cd1      	ldrb	r1, [r2, r3]
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	3301      	adds	r3, #1
 800cab2:	7d3a      	ldrb	r2, [r7, #20]
 800cab4:	404a      	eors	r2, r1
 800cab6:	b2d1      	uxtb	r1, r2
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cabc:	7c3b      	ldrb	r3, [r7, #16]
 800cabe:	3302      	adds	r3, #2
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	5cd1      	ldrb	r1, [r2, r3]
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	3302      	adds	r3, #2
 800cac8:	7cfa      	ldrb	r2, [r7, #19]
 800caca:	404a      	eors	r2, r1
 800cacc:	b2d1      	uxtb	r1, r2
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cad2:	7c3b      	ldrb	r3, [r7, #16]
 800cad4:	3303      	adds	r3, #3
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	5cd1      	ldrb	r1, [r2, r3]
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	3303      	adds	r3, #3
 800cade:	7cba      	ldrb	r2, [r7, #18]
 800cae0:	404a      	eors	r2, r1
 800cae2:	b2d1      	uxtb	r1, r2
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
 800caea:	3304      	adds	r3, #4
 800caec:	75fb      	strb	r3, [r7, #23]
 800caee:	7dfa      	ldrb	r2, [r7, #23]
 800caf0:	7c7b      	ldrb	r3, [r7, #17]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	f4ff af67 	bcc.w	800c9c6 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	0801e2ec 	.word	0x0801e2ec

0800cb08 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08a      	sub	sp, #40	; 0x28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d038      	beq.n	800cb90 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	f107 0314 	add.w	r3, r7, #20
 800cb24:	68f9      	ldr	r1, [r7, #12]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fc07 	bl	800c33a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb32:	e014      	b.n	800cb5e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cb34:	f107 0314 	add.w	r3, r7, #20
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fd5d 	bl	800c5f8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb44:	0112      	lsls	r2, r2, #4
 800cb46:	441a      	add	r2, r3
 800cb48:	f107 0314 	add.w	r3, r7, #20
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff fcab 	bl	800c4aa <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb58:	3301      	adds	r3, #1
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cb64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d3e3      	bcc.n	800cb34 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cb6c:	f107 0314 	add.w	r3, r7, #20
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff fca7 	bl	800c4c4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb7c:	0112      	lsls	r2, r2, #4
 800cb7e:	441a      	add	r2, r3
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	4619      	mov	r1, r3
 800cb86:	68b8      	ldr	r0, [r7, #8]
 800cb88:	f7ff fbd7 	bl	800c33a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e000      	b.n	800cb92 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cb90:	23ff      	movs	r3, #255	; 0xff
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3728      	adds	r7, #40	; 0x28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800cb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9e:	b09d      	sub	sp, #116	; 0x74
 800cba0:	af10      	add	r7, sp, #64	; 0x40
 800cba2:	4603      	mov	r3, r0
 800cba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cba8:	2306      	movs	r3, #6
 800cbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800cbae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cbb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 fa19 	bl	800cff0 <SecureElementGetKeyByID>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800cbc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f040 80b0 	bne.w	800cd2e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800cbce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d106      	bne.n	800cbe4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800cbd6:	4b58      	ldr	r3, [pc, #352]	; (800cd38 <PrintKey+0x19c>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2100      	movs	r1, #0
 800cbdc:	2002      	movs	r0, #2
 800cbde:	f00f fab5 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cbe2:	e056      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d106      	bne.n	800cbfa <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800cbec:	4b53      	ldr	r3, [pc, #332]	; (800cd3c <PrintKey+0x1a0>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	2002      	movs	r0, #2
 800cbf4:	f00f faaa 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cbf8:	e04b      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800cbfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d106      	bne.n	800cc10 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800cc02:	4b4f      	ldr	r3, [pc, #316]	; (800cd40 <PrintKey+0x1a4>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	2100      	movs	r1, #0
 800cc08:	2002      	movs	r0, #2
 800cc0a:	f00f fa9f 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc0e:	e040      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d106      	bne.n	800cc26 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800cc18:	4b4a      	ldr	r3, [pc, #296]	; (800cd44 <PrintKey+0x1a8>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	2002      	movs	r0, #2
 800cc20:	f00f fa94 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc24:	e035      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800cc26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc2a:	2b04      	cmp	r3, #4
 800cc2c:	d106      	bne.n	800cc3c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800cc2e:	4b46      	ldr	r3, [pc, #280]	; (800cd48 <PrintKey+0x1ac>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	2100      	movs	r1, #0
 800cc34:	2002      	movs	r0, #2
 800cc36:	f00f fa89 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc3a:	e02a      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc40:	2b7f      	cmp	r3, #127	; 0x7f
 800cc42:	d106      	bne.n	800cc52 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800cc44:	4b41      	ldr	r3, [pc, #260]	; (800cd4c <PrintKey+0x1b0>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2002      	movs	r0, #2
 800cc4c:	f00f fa7e 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc50:	e01f      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800cc52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc56:	2b80      	cmp	r3, #128	; 0x80
 800cc58:	d106      	bne.n	800cc68 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800cc5a:	4b3d      	ldr	r3, [pc, #244]	; (800cd50 <PrintKey+0x1b4>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	2100      	movs	r1, #0
 800cc60:	2002      	movs	r0, #2
 800cc62:	f00f fa73 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc66:	e014      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800cc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc6c:	2b81      	cmp	r3, #129	; 0x81
 800cc6e:	d106      	bne.n	800cc7e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800cc70:	4b38      	ldr	r3, [pc, #224]	; (800cd54 <PrintKey+0x1b8>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	2100      	movs	r1, #0
 800cc76:	2002      	movs	r0, #2
 800cc78:	f00f fa68 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 800cc7c:	e009      	b.n	800cc92 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800cc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc82:	2b82      	cmp	r3, #130	; 0x82
 800cc84:	d105      	bne.n	800cc92 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800cc86:	4b34      	ldr	r3, [pc, #208]	; (800cd58 <PrintKey+0x1bc>)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	2002      	movs	r0, #2
 800cc8e:	f00f fa5d 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	4618      	mov	r0, r3
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	789b      	ldrb	r3, [r3, #2]
 800cc9c:	461c      	mov	r4, r3
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	78db      	ldrb	r3, [r3, #3]
 800cca2:	461d      	mov	r5, r3
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	791b      	ldrb	r3, [r3, #4]
 800cca8:	461e      	mov	r6, r3
 800ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccac:	795b      	ldrb	r3, [r3, #5]
 800ccae:	623b      	str	r3, [r7, #32]
 800ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb2:	799b      	ldrb	r3, [r3, #6]
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb8:	79db      	ldrb	r3, [r3, #7]
 800ccba:	61bb      	str	r3, [r7, #24]
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	7a1b      	ldrb	r3, [r3, #8]
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc4:	7a5b      	ldrb	r3, [r3, #9]
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	7a9b      	ldrb	r3, [r3, #10]
 800cccc:	60fb      	str	r3, [r7, #12]
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	7adb      	ldrb	r3, [r3, #11]
 800ccd2:	60bb      	str	r3, [r7, #8]
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	7b1b      	ldrb	r3, [r3, #12]
 800ccd8:	607b      	str	r3, [r7, #4]
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	7b5b      	ldrb	r3, [r3, #13]
 800ccde:	603b      	str	r3, [r7, #0]
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	7b9b      	ldrb	r3, [r3, #14]
 800cce4:	4619      	mov	r1, r3
 800cce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce8:	7bdb      	ldrb	r3, [r3, #15]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	7c1b      	ldrb	r3, [r3, #16]
 800ccf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf2:	920e      	str	r2, [sp, #56]	; 0x38
 800ccf4:	910d      	str	r1, [sp, #52]	; 0x34
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	920c      	str	r2, [sp, #48]	; 0x30
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	920b      	str	r2, [sp, #44]	; 0x2c
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	920a      	str	r2, [sp, #40]	; 0x28
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	9209      	str	r2, [sp, #36]	; 0x24
 800cd06:	693a      	ldr	r2, [r7, #16]
 800cd08:	9208      	str	r2, [sp, #32]
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	9207      	str	r2, [sp, #28]
 800cd0e:	69ba      	ldr	r2, [r7, #24]
 800cd10:	9206      	str	r2, [sp, #24]
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	9205      	str	r2, [sp, #20]
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	9603      	str	r6, [sp, #12]
 800cd1c:	9502      	str	r5, [sp, #8]
 800cd1e:	9401      	str	r4, [sp, #4]
 800cd20:	9000      	str	r0, [sp, #0]
 800cd22:	4b0e      	ldr	r3, [pc, #56]	; (800cd5c <PrintKey+0x1c0>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	2100      	movs	r1, #0
 800cd28:	2002      	movs	r0, #2
 800cd2a:	f00f fa0f 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800cd2e:	bf00      	nop
 800cd30:	3734      	adds	r7, #52	; 0x34
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd36:	bf00      	nop
 800cd38:	0801dca4 	.word	0x0801dca4
 800cd3c:	0801dcbc 	.word	0x0801dcbc
 800cd40:	0801dcd4 	.word	0x0801dcd4
 800cd44:	0801dcec 	.word	0x0801dcec
 800cd48:	0801dd04 	.word	0x0801dd04
 800cd4c:	0801dd1c 	.word	0x0801dd1c
 800cd50:	0801dd34 	.word	0x0801dd34
 800cd54:	0801dd4c 	.word	0x0801dd4c
 800cd58:	0801dd64 	.word	0x0801dd64
 800cd5c:	0801dd7c 	.word	0x0801dd7c

0800cd60 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	6039      	str	r1, [r7, #0]
 800cd6a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]
 800cd70:	e01a      	b.n	800cda8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cd72:	4b12      	ldr	r3, [pc, #72]	; (800cdbc <GetKeyByID+0x5c>)
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	7bfa      	ldrb	r2, [r7, #15]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	011b      	lsls	r3, r3, #4
 800cd7c:	4413      	add	r3, r2
 800cd7e:	440b      	add	r3, r1
 800cd80:	3310      	adds	r3, #16
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	79fa      	ldrb	r2, [r7, #7]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d10b      	bne.n	800cda2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cd8a:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <GetKeyByID+0x5c>)
 800cd8c:	6819      	ldr	r1, [r3, #0]
 800cd8e:	7bfa      	ldrb	r2, [r7, #15]
 800cd90:	4613      	mov	r3, r2
 800cd92:	011b      	lsls	r3, r3, #4
 800cd94:	4413      	add	r3, r2
 800cd96:	3310      	adds	r3, #16
 800cd98:	18ca      	adds	r2, r1, r3
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e006      	b.n	800cdb0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	3301      	adds	r3, #1
 800cda6:	73fb      	strb	r3, [r7, #15]
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b09      	cmp	r3, #9
 800cdac:	d9e1      	bls.n	800cd72 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cdae:	2303      	movs	r3, #3
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20002ea0 	.word	0x20002ea0

0800cdc0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800cdc0:	b590      	push	{r4, r7, lr}
 800cdc2:	b0d1      	sub	sp, #324	; 0x144
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800cdca:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800cdce:	6020      	str	r0, [r4, #0]
 800cdd0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800cdd4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800cdd8:	6001      	str	r1, [r0, #0]
 800cdda:	4619      	mov	r1, r3
 800cddc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cde0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdea:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cdee:	460a      	mov	r2, r1
 800cdf0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cdf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <ComputeCmac+0x48>
 800ce00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e05c      	b.n	800cec6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ce0c:	f107 0314 	add.w	r3, r7, #20
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe ff1b 	bl	800bc4c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ce16:	f107 0210 	add.w	r2, r7, #16
 800ce1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce1e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	4611      	mov	r1, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff ff9a 	bl	800cd60 <GetKeyByID>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ce32:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d143      	bne.n	800cec2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ce3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	1c5a      	adds	r2, r3, #1
 800ce46:	f107 0314 	add.w	r3, r7, #20
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe ff16 	bl	800bc7e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ce52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d009      	beq.n	800ce74 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ce60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce64:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ce68:	f107 0014 	add.w	r0, r7, #20
 800ce6c:	2210      	movs	r2, #16
 800ce6e:	6819      	ldr	r1, [r3, #0]
 800ce70:	f7fe ff14 	bl	800bc9c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ce74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce78:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ce7c:	881a      	ldrh	r2, [r3, #0]
 800ce7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ce86:	f107 0014 	add.w	r0, r7, #20
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	f7fe ff06 	bl	800bc9c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ce90:	f107 0214 	add.w	r2, r7, #20
 800ce94:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ce98:	4611      	mov	r1, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe ffc0 	bl	800be20 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cea0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800cea4:	061a      	lsls	r2, r3, #24
 800cea6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ceaa:	041b      	lsls	r3, r3, #16
 800ceac:	431a      	orrs	r2, r3
 800ceae:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ceb6:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ceba:	431a      	orrs	r2, r3
 800cebc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cec0:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800cec2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ced0:	b5b0      	push	{r4, r5, r7, lr}
 800ced2:	b0b2      	sub	sp, #200	; 0xc8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	22c0      	movs	r2, #192	; 0xc0
 800cee0:	2100      	movs	r1, #0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f010 fc8a 	bl	801d7fc <memset>
 800cee8:	4a3b      	ldr	r2, [pc, #236]	; (800cfd8 <SecureElementInit+0x108>)
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cef2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cef6:	4a39      	ldr	r2, [pc, #228]	; (800cfdc <SecureElementInit+0x10c>)
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf00:	e883 0003 	stmia.w	r3, {r0, r1}
 800cf04:	4b36      	ldr	r3, [pc, #216]	; (800cfe0 <SecureElementInit+0x110>)
 800cf06:	f107 0419 	add.w	r4, r7, #25
 800cf0a:	461d      	mov	r5, r3
 800cf0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf0e:	6020      	str	r0, [r4, #0]
 800cf10:	6061      	str	r1, [r4, #4]
 800cf12:	60a2      	str	r2, [r4, #8]
 800cf14:	60e3      	str	r3, [r4, #12]
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800cf1c:	4b30      	ldr	r3, [pc, #192]	; (800cfe0 <SecureElementInit+0x110>)
 800cf1e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800cf22:	461d      	mov	r5, r3
 800cf24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf26:	6020      	str	r0, [r4, #0]
 800cf28:	6061      	str	r1, [r4, #4]
 800cf2a:	60a2      	str	r2, [r4, #8]
 800cf2c:	60e3      	str	r3, [r4, #12]
 800cf2e:	2302      	movs	r3, #2
 800cf30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800cf34:	4b2a      	ldr	r3, [pc, #168]	; (800cfe0 <SecureElementInit+0x110>)
 800cf36:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800cf3a:	461d      	mov	r5, r3
 800cf3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	6061      	str	r1, [r4, #4]
 800cf42:	60a2      	str	r2, [r4, #8]
 800cf44:	60e3      	str	r3, [r4, #12]
 800cf46:	2303      	movs	r3, #3
 800cf48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cf4c:	4b24      	ldr	r3, [pc, #144]	; (800cfe0 <SecureElementInit+0x110>)
 800cf4e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cf52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf58:	2304      	movs	r3, #4
 800cf5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800cf5e:	237f      	movs	r3, #127	; 0x7f
 800cf60:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800cf64:	2380      	movs	r3, #128	; 0x80
 800cf66:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800cf6a:	2381      	movs	r3, #129	; 0x81
 800cf6c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800cf70:	2382      	movs	r3, #130	; 0x82
 800cf72:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800cf76:	2383      	movs	r3, #131	; 0x83
 800cf78:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf82:	2302      	movs	r3, #2
 800cf84:	e023      	b.n	800cfce <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800cf86:	4a17      	ldr	r2, [pc, #92]	; (800cfe4 <SecureElementInit+0x114>)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800cf8c:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <SecureElementInit+0x114>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f107 0108 	add.w	r1, r7, #8
 800cf94:	22c0      	movs	r2, #192	; 0xc0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f00b ff85 	bl	8018ea6 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cf9c:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <SecureElementInit+0x118>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	2002      	movs	r0, #2
 800cfa4:	f00f f8d2 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	f7ff fdf7 	bl	800cb9c <PrintKey>
    PrintKey(NWK_KEY);
 800cfae:	2001      	movs	r0, #1
 800cfb0:	f7ff fdf4 	bl	800cb9c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cfb4:	4b0d      	ldr	r3, [pc, #52]	; (800cfec <SecureElementInit+0x11c>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	2100      	movs	r1, #0
 800cfba:	2002      	movs	r0, #2
 800cfbc:	f00f f8c6 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800cfc0:	2003      	movs	r0, #3
 800cfc2:	f7ff fdeb 	bl	800cb9c <PrintKey>
    PrintKey(NWK_S_KEY);
 800cfc6:	2002      	movs	r0, #2
 800cfc8:	f7ff fde8 	bl	800cb9c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	37c8      	adds	r7, #200	; 0xc8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0801de00 	.word	0x0801de00
 800cfdc:	0801de08 	.word	0x0801de08
 800cfe0:	0801de10 	.word	0x0801de10
 800cfe4:	20002ea0 	.word	0x20002ea0
 800cfe8:	0801ddd0 	.word	0x0801ddd0
 800cfec:	0801dde8 	.word	0x0801dde8

0800cff0 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	6039      	str	r1, [r7, #0]
 800cffa:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]
 800d000:	e01a      	b.n	800d038 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d002:	4b12      	ldr	r3, [pc, #72]	; (800d04c <SecureElementGetKeyByID+0x5c>)
 800d004:	6819      	ldr	r1, [r3, #0]
 800d006:	7bfa      	ldrb	r2, [r7, #15]
 800d008:	4613      	mov	r3, r2
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	4413      	add	r3, r2
 800d00e:	440b      	add	r3, r1
 800d010:	3310      	adds	r3, #16
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	79fa      	ldrb	r2, [r7, #7]
 800d016:	429a      	cmp	r2, r3
 800d018:	d10b      	bne.n	800d032 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800d01a:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <SecureElementGetKeyByID+0x5c>)
 800d01c:	6819      	ldr	r1, [r3, #0]
 800d01e:	7bfa      	ldrb	r2, [r7, #15]
 800d020:	4613      	mov	r3, r2
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	4413      	add	r3, r2
 800d026:	3310      	adds	r3, #16
 800d028:	18ca      	adds	r2, r1, r3
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d02e:	2300      	movs	r3, #0
 800d030:	e006      	b.n	800d040 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	3301      	adds	r3, #1
 800d036:	73fb      	strb	r3, [r7, #15]
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	2b09      	cmp	r3, #9
 800d03c:	d9e1      	bls.n	800d002 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d03e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800d040:	4618      	mov	r0, r3
 800d042:	3714      	adds	r7, #20
 800d044:	46bd      	mov	sp, r7
 800d046:	bc80      	pop	{r7}
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20002ea0 	.word	0x20002ea0

0800d050 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b088      	sub	sp, #32
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	6039      	str	r1, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d062:	2302      	movs	r3, #2
 800d064:	e04c      	b.n	800d100 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d066:	2300      	movs	r3, #0
 800d068:	77fb      	strb	r3, [r7, #31]
 800d06a:	e045      	b.n	800d0f8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d06c:	4b26      	ldr	r3, [pc, #152]	; (800d108 <SecureElementSetKey+0xb8>)
 800d06e:	6819      	ldr	r1, [r3, #0]
 800d070:	7ffa      	ldrb	r2, [r7, #31]
 800d072:	4613      	mov	r3, r2
 800d074:	011b      	lsls	r3, r3, #4
 800d076:	4413      	add	r3, r2
 800d078:	440b      	add	r3, r1
 800d07a:	3310      	adds	r3, #16
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	79fa      	ldrb	r2, [r7, #7]
 800d080:	429a      	cmp	r2, r3
 800d082:	d136      	bne.n	800d0f2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d084:	79fb      	ldrb	r3, [r7, #7]
 800d086:	2b80      	cmp	r3, #128	; 0x80
 800d088:	d123      	bne.n	800d0d2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d08a:	2306      	movs	r3, #6
 800d08c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d08e:	2300      	movs	r3, #0
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	f107 0310 	add.w	r3, r7, #16
 800d096:	2200      	movs	r2, #0
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	605a      	str	r2, [r3, #4]
 800d09c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d09e:	f107 030c 	add.w	r3, r7, #12
 800d0a2:	227f      	movs	r2, #127	; 0x7f
 800d0a4:	2110      	movs	r1, #16
 800d0a6:	6838      	ldr	r0, [r7, #0]
 800d0a8:	f000 f87d 	bl	800d1a6 <SecureElementAesEncrypt>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d0b0:	4b15      	ldr	r3, [pc, #84]	; (800d108 <SecureElementSetKey+0xb8>)
 800d0b2:	6819      	ldr	r1, [r3, #0]
 800d0b4:	7ffa      	ldrb	r2, [r7, #31]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	4413      	add	r3, r2
 800d0bc:	3310      	adds	r3, #16
 800d0be:	440b      	add	r3, r1
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	f107 010c 	add.w	r1, r7, #12
 800d0c6:	2210      	movs	r2, #16
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f00b feec 	bl	8018ea6 <memcpy1>
                return retval;
 800d0ce:	7fbb      	ldrb	r3, [r7, #30]
 800d0d0:	e016      	b.n	800d100 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d0d2:	4b0d      	ldr	r3, [pc, #52]	; (800d108 <SecureElementSetKey+0xb8>)
 800d0d4:	6819      	ldr	r1, [r3, #0]
 800d0d6:	7ffa      	ldrb	r2, [r7, #31]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	4413      	add	r3, r2
 800d0de:	3310      	adds	r3, #16
 800d0e0:	440b      	add	r3, r1
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	2210      	movs	r2, #16
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f00b fedc 	bl	8018ea6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e006      	b.n	800d100 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d0f2:	7ffb      	ldrb	r3, [r7, #31]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	77fb      	strb	r3, [r7, #31]
 800d0f8:	7ffb      	ldrb	r3, [r7, #31]
 800d0fa:	2b09      	cmp	r3, #9
 800d0fc:	d9b6      	bls.n	800d06c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d0fe:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	20002ea0 	.word	0x20002ea0

0800d10c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af02      	add	r7, sp, #8
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	4611      	mov	r1, r2
 800d118:	461a      	mov	r2, r3
 800d11a:	460b      	mov	r3, r1
 800d11c:	80fb      	strh	r3, [r7, #6]
 800d11e:	4613      	mov	r3, r2
 800d120:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d122:	797b      	ldrb	r3, [r7, #5]
 800d124:	2b7e      	cmp	r3, #126	; 0x7e
 800d126:	d901      	bls.n	800d12c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d128:	2303      	movs	r3, #3
 800d12a:	e009      	b.n	800d140 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d12c:	7979      	ldrb	r1, [r7, #5]
 800d12e:	88fa      	ldrh	r2, [r7, #6]
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	460b      	mov	r3, r1
 800d136:	68b9      	ldr	r1, [r7, #8]
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7ff fe41 	bl	800cdc0 <ComputeCmac>
 800d13e:	4603      	mov	r3, r0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	607a      	str	r2, [r7, #4]
 800d152:	461a      	mov	r2, r3
 800d154:	460b      	mov	r3, r1
 800d156:	817b      	strh	r3, [r7, #10]
 800d158:	4613      	mov	r3, r2
 800d15a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d162:	2302      	movs	r3, #2
 800d164:	e01b      	b.n	800d19e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d166:	2306      	movs	r3, #6
 800d168:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d16e:	7a79      	ldrb	r1, [r7, #9]
 800d170:	897a      	ldrh	r2, [r7, #10]
 800d172:	f107 0310 	add.w	r3, r7, #16
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	460b      	mov	r3, r1
 800d17a:	68f9      	ldr	r1, [r7, #12]
 800d17c:	2000      	movs	r0, #0
 800d17e:	f7ff fe1f 	bl	800cdc0 <ComputeCmac>
 800d182:	4603      	mov	r3, r0
 800d184:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	e006      	b.n	800d19e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d001      	beq.n	800d19c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d198:	2301      	movs	r3, #1
 800d19a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b0c2      	sub	sp, #264	; 0x108
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	60f8      	str	r0, [r7, #12]
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d1b6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	4603      	mov	r3, r0
 800d1be:	817b      	strh	r3, [r7, #10]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d006      	beq.n	800d1d8 <SecureElementAesEncrypt+0x32>
 800d1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1d8:	2302      	movs	r3, #2
 800d1da:	e046      	b.n	800d26a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d1dc:	897b      	ldrh	r3, [r7, #10]
 800d1de:	f003 030f 	and.w	r3, r3, #15
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d1e8:	2305      	movs	r3, #5
 800d1ea:	e03e      	b.n	800d26a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d1ec:	f107 0314 	add.w	r3, r7, #20
 800d1f0:	22f0      	movs	r2, #240	; 0xf0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f00b fe91 	bl	8018f1c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d1fa:	f107 0210 	add.w	r2, r7, #16
 800d1fe:	7a7b      	ldrb	r3, [r7, #9]
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff fdac 	bl	800cd60 <GetKeyByID>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d20e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d212:	2b00      	cmp	r3, #0
 800d214:	d127      	bne.n	800d266 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	3301      	adds	r3, #1
 800d21a:	f107 0214 	add.w	r2, r7, #20
 800d21e:	2110      	movs	r1, #16
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff fb93 	bl	800c94c <lorawan_aes_set_key>

        uint8_t block = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d22c:	e018      	b.n	800d260 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d22e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	18d0      	adds	r0, r2, r3
 800d236:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d23a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d23e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	4413      	add	r3, r2
 800d246:	f107 0214 	add.w	r2, r7, #20
 800d24a:	4619      	mov	r1, r3
 800d24c:	f7ff fc5c 	bl	800cb08 <lorawan_aes_encrypt>
            block = block + 16;
 800d250:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d254:	3310      	adds	r3, #16
 800d256:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d25a:	897b      	ldrh	r3, [r7, #10]
 800d25c:	3b10      	subs	r3, #16
 800d25e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d260:	897b      	ldrh	r3, [r7, #10]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e3      	bne.n	800d22e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d266:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
 800d280:	4613      	mov	r3, r2
 800d282:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d28a:	2302      	movs	r3, #2
 800d28c:	e02e      	b.n	800d2ec <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d28e:	2306      	movs	r3, #6
 800d290:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d292:	78bb      	ldrb	r3, [r7, #2]
 800d294:	2b7f      	cmp	r3, #127	; 0x7f
 800d296:	d104      	bne.n	800d2a2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d298:	78fb      	ldrb	r3, [r7, #3]
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d001      	beq.n	800d2a2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e024      	b.n	800d2ec <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	f107 0310 	add.w	r3, r7, #16
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	605a      	str	r2, [r3, #4]
 800d2b0:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	78fa      	ldrb	r2, [r7, #3]
 800d2b8:	2110      	movs	r1, #16
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ff73 	bl	800d1a6 <SecureElementAesEncrypt>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d2c4:	7ffb      	ldrb	r3, [r7, #31]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
 800d2cc:	e00e      	b.n	800d2ec <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d2ce:	f107 020c 	add.w	r2, r7, #12
 800d2d2:	78bb      	ldrb	r3, [r7, #2]
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff feba 	bl	800d050 <SecureElementSetKey>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d2e0:	7ffb      	ldrb	r3, [r7, #31]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d2e6:	7ffb      	ldrb	r3, [r7, #31]
 800d2e8:	e000      	b.n	800d2ec <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d2ea:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3720      	adds	r7, #32
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	4603      	mov	r3, r0
 800d300:	73fb      	strb	r3, [r7, #15]
 800d302:	4613      	mov	r3, r2
 800d304:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <SecureElementProcessJoinAccept+0x24>
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <SecureElementProcessJoinAccept+0x24>
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	2b00      	cmp	r3, #0
 800d316:	d101      	bne.n	800d31c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d318:	2302      	movs	r3, #2
 800d31a:	e064      	b.n	800d3e6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d31c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d320:	2b21      	cmp	r3, #33	; 0x21
 800d322:	d901      	bls.n	800d328 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d324:	2305      	movs	r3, #5
 800d326:	e05e      	b.n	800d3e6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d328:	2301      	movs	r3, #1
 800d32a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d32c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d330:	b29b      	uxth	r3, r3
 800d332:	461a      	mov	r2, r3
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d338:	f00b fdb5 	bl	8018ea6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	1c58      	adds	r0, r3, #1
 800d340:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d344:	b29b      	uxth	r3, r3
 800d346:	3b01      	subs	r3, #1
 800d348:	b299      	uxth	r1, r3
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	3301      	adds	r3, #1
 800d34e:	7dfa      	ldrb	r2, [r7, #23]
 800d350:	f7ff ff29 	bl	800d1a6 <SecureElementAesEncrypt>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d35a:	2307      	movs	r3, #7
 800d35c:	e043      	b.n	800d3e6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	330b      	adds	r3, #11
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	09db      	lsrs	r3, r3, #7
 800d366:	b2da      	uxtb	r2, r3
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d370:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d374:	3b04      	subs	r3, #4
 800d376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d378:	4413      	add	r3, r2
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d37e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d382:	3b03      	subs	r3, #3
 800d384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d386:	4413      	add	r3, r2
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	4313      	orrs	r3, r2
 800d390:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d392:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d396:	3b02      	subs	r3, #2
 800d398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d39a:	4413      	add	r3, r2
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	041b      	lsls	r3, r3, #16
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d3a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ae:	4413      	add	r3, r2
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	061b      	lsls	r3, r3, #24
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10e      	bne.n	800d3e0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d3c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3b04      	subs	r3, #4
 800d3ca:	b299      	uxth	r1, r3
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3d2:	f7ff feb9 	bl	800d148 <SecureElementVerifyAesCmac>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e002      	b.n	800d3e6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d3e0:	2304      	movs	r3, #4
 800d3e2:	e000      	b.n	800d3e6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3fe:	2302      	movs	r3, #2
 800d400:	e006      	b.n	800d410 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <SecureElementRandomNumber+0x28>)
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	4798      	blx	r3
 800d408:	4602      	mov	r2, r0
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	0801e6b8 	.word	0x0801e6b8

0800d41c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d42a:	2302      	movs	r3, #2
 800d42c:	e007      	b.n	800d43e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d42e:	4b06      	ldr	r3, [pc, #24]	; (800d448 <SecureElementSetDevEui+0x2c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2208      	movs	r2, #8
 800d434:	6879      	ldr	r1, [r7, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	f00b fd35 	bl	8018ea6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	20002ea0 	.word	0x20002ea0

0800d44c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d450:	4b02      	ldr	r3, [pc, #8]	; (800d45c <SecureElementGetDevEui+0x10>)
 800d452:	681b      	ldr	r3, [r3, #0]
}
 800d454:	4618      	mov	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	bc80      	pop	{r7}
 800d45a:	4770      	bx	lr
 800d45c:	20002ea0 	.word	0x20002ea0

0800d460 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d46e:	2302      	movs	r3, #2
 800d470:	e008      	b.n	800d484 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d472:	4b06      	ldr	r3, [pc, #24]	; (800d48c <SecureElementSetJoinEui+0x2c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	2208      	movs	r2, #8
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f00b fd12 	bl	8018ea6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20002ea0 	.word	0x20002ea0

0800d490 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d490:	b480      	push	{r7}
 800d492:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d494:	4b03      	ldr	r3, [pc, #12]	; (800d4a4 <SecureElementGetJoinEui+0x14>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3308      	adds	r3, #8
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bc80      	pop	{r7}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20002ea0 	.word	0x20002ea0

0800d4a8 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800d4b0:	4a1a      	ldr	r2, [pc, #104]	; (800d51c <LmHandlerInit+0x74>)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d4b6:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <LmHandlerInit+0x78>)
 800d4b8:	4a1a      	ldr	r2, [pc, #104]	; (800d524 <LmHandlerInit+0x7c>)
 800d4ba:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d4bc:	4b18      	ldr	r3, [pc, #96]	; (800d520 <LmHandlerInit+0x78>)
 800d4be:	4a1a      	ldr	r2, [pc, #104]	; (800d528 <LmHandlerInit+0x80>)
 800d4c0:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d4c2:	4b17      	ldr	r3, [pc, #92]	; (800d520 <LmHandlerInit+0x78>)
 800d4c4:	4a19      	ldr	r2, [pc, #100]	; (800d52c <LmHandlerInit+0x84>)
 800d4c6:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d4c8:	4b15      	ldr	r3, [pc, #84]	; (800d520 <LmHandlerInit+0x78>)
 800d4ca:	4a19      	ldr	r2, [pc, #100]	; (800d530 <LmHandlerInit+0x88>)
 800d4cc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <LmHandlerInit+0x74>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a17      	ldr	r2, [pc, #92]	; (800d534 <LmHandlerInit+0x8c>)
 800d4d6:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d4d8:	4b10      	ldr	r3, [pc, #64]	; (800d51c <LmHandlerInit+0x74>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	4a15      	ldr	r2, [pc, #84]	; (800d534 <LmHandlerInit+0x8c>)
 800d4e0:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d4e2:	4b0e      	ldr	r3, [pc, #56]	; (800d51c <LmHandlerInit+0x74>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	4a12      	ldr	r2, [pc, #72]	; (800d534 <LmHandlerInit+0x8c>)
 800d4ea:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d4ec:	4b11      	ldr	r3, [pc, #68]	; (800d534 <LmHandlerInit+0x8c>)
 800d4ee:	4a12      	ldr	r2, [pc, #72]	; (800d538 <LmHandlerInit+0x90>)
 800d4f0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d4f2:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <LmHandlerInit+0x74>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	4a0e      	ldr	r2, [pc, #56]	; (800d534 <LmHandlerInit+0x8c>)
 800d4fa:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d4fc:	490f      	ldr	r1, [pc, #60]	; (800d53c <LmHandlerInit+0x94>)
 800d4fe:	2000      	movs	r0, #0
 800d500:	f000 fcfe 	bl	800df00 <LmHandlerPackageRegister>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d002      	beq.n	800d510 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800d50a:	f04f 33ff 	mov.w	r3, #4294967295
 800d50e:	e000      	b.n	800d512 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	20002ec8 	.word	0x20002ec8
 800d520:	20002ecc 	.word	0x20002ecc
 800d524:	0800dc55 	.word	0x0800dc55
 800d528:	0800dcbd 	.word	0x0800dcbd
 800d52c:	0800dd9d 	.word	0x0800dd9d
 800d530:	0800de61 	.word	0x0800de61
 800d534:	20002edc 	.word	0x20002edc
 800d538:	0800e171 	.word	0x0800e171
 800d53c:	2000009c 	.word	0x2000009c

0800d540 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d542:	b099      	sub	sp, #100	; 0x64
 800d544:	af08      	add	r7, sp, #32
 800d546:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d54c:	2210      	movs	r2, #16
 800d54e:	6879      	ldr	r1, [r7, #4]
 800d550:	4882      	ldr	r0, [pc, #520]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d552:	f00f f919 	bl	801c788 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800d556:	f7fc ffb3 	bl	800a4c0 <LoraInfo_GetPtr>
 800d55a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d55c:	4b7f      	ldr	r3, [pc, #508]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	461a      	mov	r2, r3
 800d562:	2301      	movs	r3, #1
 800d564:	4093      	lsls	r3, r2
 800d566:	461a      	mov	r2, r3
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	4013      	ands	r3, r2
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00c      	beq.n	800d58c <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d572:	4b7a      	ldr	r3, [pc, #488]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	4979      	ldr	r1, [pc, #484]	; (800d760 <LmHandlerConfigure+0x220>)
 800d57a:	487a      	ldr	r0, [pc, #488]	; (800d764 <LmHandlerConfigure+0x224>)
 800d57c:	f004 fb1a 	bl	8011bb4 <LoRaMacInitialization>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d009      	beq.n	800d59a <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800d586:	f04f 33ff 	mov.w	r3, #4294967295
 800d58a:	e0e2      	b.n	800d752 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d58c:	4b76      	ldr	r3, [pc, #472]	; (800d768 <LmHandlerConfigure+0x228>)
 800d58e:	2201      	movs	r2, #1
 800d590:	2100      	movs	r1, #0
 800d592:	2000      	movs	r0, #0
 800d594:	f00e fdda 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d598:	e7fe      	b.n	800d598 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800d59a:	f000 fdfa 	bl	800e192 <NvmDataMgmtRestore>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800d5a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d003      	beq.n	800d5b0 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800d5a8:	4b70      	ldr	r3, [pc, #448]	; (800d76c <LmHandlerConfigure+0x22c>)
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	701a      	strb	r2, [r3, #0]
 800d5ae:	e002      	b.n	800d5b6 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800d5b0:	4b6e      	ldr	r3, [pc, #440]	; (800d76c <LmHandlerConfigure+0x22c>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d5b6:	2302      	movs	r3, #2
 800d5b8:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d5ba:	f107 0314 	add.w	r3, r7, #20
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f004 fe42 	bl	8012248 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	2208      	movs	r2, #8
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4869      	ldr	r0, [pc, #420]	; (800d770 <LmHandlerConfigure+0x230>)
 800d5cc:	f00b fc6b 	bl	8018ea6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d5d4:	f107 0314 	add.w	r3, r7, #20
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f004 fe35 	bl	8012248 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	2208      	movs	r2, #8
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4863      	ldr	r0, [pc, #396]	; (800d774 <LmHandlerConfigure+0x234>)
 800d5e6:	f00b fc5e 	bl	8018ea6 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d5ea:	4b63      	ldr	r3, [pc, #396]	; (800d778 <LmHandlerConfigure+0x238>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	4798      	blx	r3
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4a5e      	ldr	r2, [pc, #376]	; (800d770 <LmHandlerConfigure+0x230>)
 800d5f6:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800d5f8:	2306      	movs	r3, #6
 800d5fa:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d5fc:	4b5c      	ldr	r3, [pc, #368]	; (800d770 <LmHandlerConfigure+0x230>)
 800d5fe:	695b      	ldr	r3, [r3, #20]
 800d600:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d602:	f107 0314 	add.w	r3, r7, #20
 800d606:	4618      	mov	r0, r3
 800d608:	f004 ff7c 	bl	8012504 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d60c:	4b58      	ldr	r3, [pc, #352]	; (800d770 <LmHandlerConfigure+0x230>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	461a      	mov	r2, r3
 800d612:	4b57      	ldr	r3, [pc, #348]	; (800d770 <LmHandlerConfigure+0x230>)
 800d614:	785b      	ldrb	r3, [r3, #1]
 800d616:	4619      	mov	r1, r3
 800d618:	4b55      	ldr	r3, [pc, #340]	; (800d770 <LmHandlerConfigure+0x230>)
 800d61a:	789b      	ldrb	r3, [r3, #2]
 800d61c:	4618      	mov	r0, r3
 800d61e:	4b54      	ldr	r3, [pc, #336]	; (800d770 <LmHandlerConfigure+0x230>)
 800d620:	78db      	ldrb	r3, [r3, #3]
 800d622:	461c      	mov	r4, r3
 800d624:	4b52      	ldr	r3, [pc, #328]	; (800d770 <LmHandlerConfigure+0x230>)
 800d626:	791b      	ldrb	r3, [r3, #4]
 800d628:	461d      	mov	r5, r3
 800d62a:	4b51      	ldr	r3, [pc, #324]	; (800d770 <LmHandlerConfigure+0x230>)
 800d62c:	795b      	ldrb	r3, [r3, #5]
 800d62e:	461e      	mov	r6, r3
 800d630:	4b4f      	ldr	r3, [pc, #316]	; (800d770 <LmHandlerConfigure+0x230>)
 800d632:	799b      	ldrb	r3, [r3, #6]
 800d634:	603b      	str	r3, [r7, #0]
 800d636:	4b4e      	ldr	r3, [pc, #312]	; (800d770 <LmHandlerConfigure+0x230>)
 800d638:	79db      	ldrb	r3, [r3, #7]
 800d63a:	9307      	str	r3, [sp, #28]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	9306      	str	r3, [sp, #24]
 800d640:	9605      	str	r6, [sp, #20]
 800d642:	9504      	str	r5, [sp, #16]
 800d644:	9403      	str	r4, [sp, #12]
 800d646:	9002      	str	r0, [sp, #8]
 800d648:	9101      	str	r1, [sp, #4]
 800d64a:	9200      	str	r2, [sp, #0]
 800d64c:	4b4b      	ldr	r3, [pc, #300]	; (800d77c <LmHandlerConfigure+0x23c>)
 800d64e:	2200      	movs	r2, #0
 800d650:	2100      	movs	r1, #0
 800d652:	2002      	movs	r0, #2
 800d654:	f00e fd7a 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d658:	4b45      	ldr	r3, [pc, #276]	; (800d770 <LmHandlerConfigure+0x230>)
 800d65a:	7a1b      	ldrb	r3, [r3, #8]
 800d65c:	461a      	mov	r2, r3
 800d65e:	4b44      	ldr	r3, [pc, #272]	; (800d770 <LmHandlerConfigure+0x230>)
 800d660:	7a5b      	ldrb	r3, [r3, #9]
 800d662:	4619      	mov	r1, r3
 800d664:	4b42      	ldr	r3, [pc, #264]	; (800d770 <LmHandlerConfigure+0x230>)
 800d666:	7a9b      	ldrb	r3, [r3, #10]
 800d668:	4618      	mov	r0, r3
 800d66a:	4b41      	ldr	r3, [pc, #260]	; (800d770 <LmHandlerConfigure+0x230>)
 800d66c:	7adb      	ldrb	r3, [r3, #11]
 800d66e:	461c      	mov	r4, r3
 800d670:	4b3f      	ldr	r3, [pc, #252]	; (800d770 <LmHandlerConfigure+0x230>)
 800d672:	7b1b      	ldrb	r3, [r3, #12]
 800d674:	461d      	mov	r5, r3
 800d676:	4b3e      	ldr	r3, [pc, #248]	; (800d770 <LmHandlerConfigure+0x230>)
 800d678:	7b5b      	ldrb	r3, [r3, #13]
 800d67a:	461e      	mov	r6, r3
 800d67c:	4b3c      	ldr	r3, [pc, #240]	; (800d770 <LmHandlerConfigure+0x230>)
 800d67e:	7b9b      	ldrb	r3, [r3, #14]
 800d680:	603b      	str	r3, [r7, #0]
 800d682:	4b3b      	ldr	r3, [pc, #236]	; (800d770 <LmHandlerConfigure+0x230>)
 800d684:	7bdb      	ldrb	r3, [r3, #15]
 800d686:	9307      	str	r3, [sp, #28]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	9306      	str	r3, [sp, #24]
 800d68c:	9605      	str	r6, [sp, #20]
 800d68e:	9504      	str	r5, [sp, #16]
 800d690:	9403      	str	r4, [sp, #12]
 800d692:	9002      	str	r0, [sp, #8]
 800d694:	9101      	str	r1, [sp, #4]
 800d696:	9200      	str	r2, [sp, #0]
 800d698:	4b39      	ldr	r3, [pc, #228]	; (800d780 <LmHandlerConfigure+0x240>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	2002      	movs	r0, #2
 800d6a0:	f00e fd54 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800d6a4:	4b37      	ldr	r3, [pc, #220]	; (800d784 <LmHandlerConfigure+0x244>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	4b37      	ldr	r3, [pc, #220]	; (800d788 <LmHandlerConfigure+0x248>)
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4b36      	ldr	r3, [pc, #216]	; (800d78c <LmHandlerConfigure+0x24c>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	4b36      	ldr	r3, [pc, #216]	; (800d790 <LmHandlerConfigure+0x250>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	9002      	str	r0, [sp, #8]
 800d6be:	9101      	str	r1, [sp, #4]
 800d6c0:	9200      	str	r2, [sp, #0]
 800d6c2:	4b34      	ldr	r3, [pc, #208]	; (800d794 <LmHandlerConfigure+0x254>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	2002      	movs	r0, #2
 800d6ca:	f00e fd3f 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d6ce:	230f      	movs	r3, #15
 800d6d0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d6d6:	f107 0314 	add.w	r3, r7, #20
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f004 ff12 	bl	8012504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800d6e0:	2305      	movs	r3, #5
 800d6e2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d6e8:	f107 0314 	add.w	r3, r7, #20
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f004 ff09 	bl	8012504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d6f2:	2310      	movs	r3, #16
 800d6f4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d6fa:	f107 0314 	add.w	r3, r7, #20
 800d6fe:	4618      	mov	r0, r3
 800d700:	f004 ff00 	bl	8012504 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d704:	2304      	movs	r3, #4
 800d706:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d708:	4b14      	ldr	r3, [pc, #80]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d70a:	789b      	ldrb	r3, [r3, #2]
 800d70c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d70e:	f107 0314 	add.w	r3, r7, #20
 800d712:	4618      	mov	r0, r3
 800d714:	f004 fef6 	bl	8012504 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d718:	230f      	movs	r3, #15
 800d71a:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d71c:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	f107 020c 	add.w	r2, r7, #12
 800d724:	4611      	mov	r1, r2
 800d726:	4618      	mov	r0, r3
 800d728:	f007 fcfd 	bl	8015126 <RegionGetPhyParam>
 800d72c:	4603      	mov	r3, r0
 800d72e:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	bf14      	ite	ne
 800d736:	2301      	movne	r3, #1
 800d738:	2300      	moveq	r3, #0
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	4b07      	ldr	r3, [pc, #28]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d73e:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800d740:	2014      	movs	r0, #20
 800d742:	f000 fa6f 	bl	800dc24 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d746:	4b05      	ldr	r3, [pc, #20]	; (800d75c <LmHandlerConfigure+0x21c>)
 800d748:	795b      	ldrb	r3, [r3, #5]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f005 fc4e 	bl	8012fec <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3744      	adds	r7, #68	; 0x44
 800d756:	46bd      	mov	sp, r7
 800d758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20002eb8 	.word	0x20002eb8
 800d760:	20002edc 	.word	0x20002edc
 800d764:	20002ecc 	.word	0x20002ecc
 800d768:	0801de20 	.word	0x0801de20
 800d76c:	20002ffa 	.word	0x20002ffa
 800d770:	20000084 	.word	0x20000084
 800d774:	2000008c 	.word	0x2000008c
 800d778:	20002ec8 	.word	0x20002ec8
 800d77c:	0801de6c 	.word	0x0801de6c
 800d780:	0801dea8 	.word	0x0801dea8
 800d784:	2000009b 	.word	0x2000009b
 800d788:	2000009a 	.word	0x2000009a
 800d78c:	20000099 	.word	0x20000099
 800d790:	20000098 	.word	0x20000098
 800d794:	0801dee4 	.word	0x0801dee4

0800d798 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d79c:	f002 f9b8 	bl	800fb10 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d7a0:	f000 fc9a 	bl	800e0d8 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800d7a4:	f000 fcee 	bl	800e184 <NvmDataMgmtStore>
}
 800d7a8:	bf00      	nop
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b090      	sub	sp, #64	; 0x40
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d111      	bne.n	800d7e0 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d7bc:	4b23      	ldr	r3, [pc, #140]	; (800d84c <LmHandlerJoin+0xa0>)
 800d7be:	2202      	movs	r2, #2
 800d7c0:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800d7c2:	f004 fcab 	bl	801211c <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d7ca:	4b21      	ldr	r3, [pc, #132]	; (800d850 <LmHandlerJoin+0xa4>)
 800d7cc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d7d4:	f107 0308 	add.w	r3, r7, #8
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f005 f9d1 	bl	8012b80 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800d7de:	e030      	b.n	800d842 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d7e0:	4b1a      	ldr	r3, [pc, #104]	; (800d84c <LmHandlerJoin+0xa0>)
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	; (800d850 <LmHandlerJoin+0xa4>)
 800d7e8:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <LmHandlerJoin+0xa0>)
 800d7ee:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d7f0:	4b16      	ldr	r3, [pc, #88]	; (800d84c <LmHandlerJoin+0xa0>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800d7f6:	4b17      	ldr	r3, [pc, #92]	; (800d854 <LmHandlerJoin+0xa8>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	f083 0301 	eor.w	r3, r3, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d008      	beq.n	800d816 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d804:	2327      	movs	r3, #39	; 0x27
 800d806:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d808:	4b13      	ldr	r3, [pc, #76]	; (800d858 <LmHandlerJoin+0xac>)
 800d80a:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d80c:	f107 031c 	add.w	r3, r7, #28
 800d810:	4618      	mov	r0, r3
 800d812:	f004 fe77 	bl	8012504 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d816:	f004 fc81 	bl	801211c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d81a:	2301      	movs	r3, #1
 800d81c:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d81e:	2301      	movs	r3, #1
 800d820:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d824:	f107 031c 	add.w	r3, r7, #28
 800d828:	4618      	mov	r0, r3
 800d82a:	f004 fe6b 	bl	8012504 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d82e:	4b0b      	ldr	r3, [pc, #44]	; (800d85c <LmHandlerJoin+0xb0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	69db      	ldr	r3, [r3, #28]
 800d834:	4805      	ldr	r0, [pc, #20]	; (800d84c <LmHandlerJoin+0xa0>)
 800d836:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <LmHandlerJoin+0xa4>)
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 f917 	bl	800da70 <LmHandlerRequestClass>
}
 800d842:	bf00      	nop
 800d844:	3740      	adds	r7, #64	; 0x40
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	200000a8 	.word	0x200000a8
 800d850:	20002eb8 	.word	0x20002eb8
 800d854:	20002ffa 	.word	0x20002ffa
 800d858:	01000300 	.word	0x01000300
 800d85c:	20002ec8 	.word	0x20002ec8

0800d860 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08a      	sub	sp, #40	; 0x28
 800d864:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d866:	2301      	movs	r3, #1
 800d868:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d86a:	463b      	mov	r3, r7
 800d86c:	4618      	mov	r0, r3
 800d86e:	f004 fceb 	bl	8012248 <LoRaMacMibGetRequestConfirm>
 800d872:	4603      	mov	r3, r0
 800d874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800d878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d106      	bne.n	800d88e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d880:	793b      	ldrb	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d886:	2300      	movs	r3, #0
 800d888:	e002      	b.n	800d890 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d88e:	2300      	movs	r3, #0
    }
}
 800d890:	4618      	mov	r0, r3
 800d892:	3728      	adds	r7, #40	; 0x28
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	; 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	72fb      	strb	r3, [r7, #11]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d8ac:	23ff      	movs	r3, #255	; 0xff
 800d8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d8b2:	f001 fe97 	bl	800f5e4 <LoRaMacIsBusy>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d8bc:	f06f 0301 	mvn.w	r3, #1
 800d8c0:	e0b4      	b.n	800da2c <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d8c2:	f7ff ffcd 	bl	800d860 <LmHandlerJoinStatus>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d007      	beq.n	800d8dc <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800d8cc:	4b59      	ldr	r3, [pc, #356]	; (800da34 <LmHandlerSend+0x19c>)
 800d8ce:	789b      	ldrb	r3, [r3, #2]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff ff6b 	bl	800d7ac <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d8d6:	f06f 0302 	mvn.w	r3, #2
 800d8da:	e0a7      	b.n	800da2c <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800d8dc:	4b56      	ldr	r3, [pc, #344]	; (800da38 <LmHandlerSend+0x1a0>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	4798      	blx	r3
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00d      	beq.n	800d906 <LmHandlerSend+0x6e>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	781a      	ldrb	r2, [r3, #0]
 800d8ee:	4b52      	ldr	r3, [pc, #328]	; (800da38 <LmHandlerSend+0x1a0>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d006      	beq.n	800d906 <LmHandlerSend+0x6e>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d900:	f06f 0303 	mvn.w	r3, #3
 800d904:	e092      	b.n	800da2c <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d906:	4b4d      	ldr	r3, [pc, #308]	; (800da3c <LmHandlerSend+0x1a4>)
 800d908:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d90c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	785b      	ldrb	r3, [r3, #1]
 800d914:	f107 0214 	add.w	r2, r7, #20
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f004 fc0c 	bl	8012138 <LoRaMacQueryTxPossible>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d009      	beq.n	800d93a <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d926:	4b46      	ldr	r3, [pc, #280]	; (800da40 <LmHandlerSend+0x1a8>)
 800d928:	2200      	movs	r2, #0
 800d92a:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d92c:	2300      	movs	r3, #0
 800d92e:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d930:	2300      	movs	r3, #0
 800d932:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d938:	e017      	b.n	800d96a <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800d93a:	4a41      	ldr	r2, [pc, #260]	; (800da40 <LmHandlerSend+0x1a8>)
 800d93c:	7afb      	ldrb	r3, [r7, #11]
 800d93e:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	785b      	ldrb	r3, [r3, #1]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800d954:	7afb      	ldrb	r3, [r7, #11]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d102      	bne.n	800d960 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800d95a:	2300      	movs	r3, #0
 800d95c:	763b      	strb	r3, [r7, #24]
 800d95e:	e004      	b.n	800d96a <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800d960:	2301      	movs	r3, #1
 800d962:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800d964:	2308      	movs	r3, #8
 800d966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800d96a:	4b35      	ldr	r3, [pc, #212]	; (800da40 <LmHandlerSend+0x1a8>)
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	330c      	adds	r3, #12
 800d970:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d974:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d978:	4b30      	ldr	r3, [pc, #192]	; (800da3c <LmHandlerSend+0x1a4>)
 800d97a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d97e:	4b30      	ldr	r3, [pc, #192]	; (800da40 <LmHandlerSend+0x1a8>)
 800d980:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d982:	7aba      	ldrb	r2, [r7, #10]
 800d984:	f107 0318 	add.w	r3, r7, #24
 800d988:	4611      	mov	r1, r2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f005 fa38 	bl	8012e00 <LoRaMacMcpsRequest>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800d9a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d9a6:	2b11      	cmp	r3, #17
 800d9a8:	d83a      	bhi.n	800da20 <LmHandlerSend+0x188>
 800d9aa:	a201      	add	r2, pc, #4	; (adr r2, 800d9b0 <LmHandlerSend+0x118>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800d9f9 	.word	0x0800d9f9
 800d9b4:	0800da01 	.word	0x0800da01
 800d9b8:	0800da21 	.word	0x0800da21
 800d9bc:	0800da21 	.word	0x0800da21
 800d9c0:	0800da21 	.word	0x0800da21
 800d9c4:	0800da21 	.word	0x0800da21
 800d9c8:	0800da21 	.word	0x0800da21
 800d9cc:	0800da09 	.word	0x0800da09
 800d9d0:	0800da21 	.word	0x0800da21
 800d9d4:	0800da21 	.word	0x0800da21
 800d9d8:	0800da21 	.word	0x0800da21
 800d9dc:	0800da19 	.word	0x0800da19
 800d9e0:	0800da21 	.word	0x0800da21
 800d9e4:	0800da21 	.word	0x0800da21
 800d9e8:	0800da01 	.word	0x0800da01
 800d9ec:	0800da01 	.word	0x0800da01
 800d9f0:	0800da01 	.word	0x0800da01
 800d9f4:	0800da11 	.word	0x0800da11
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d9fe:	e013      	b.n	800da28 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800da00:	23fe      	movs	r3, #254	; 0xfe
 800da02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800da06:	e00f      	b.n	800da28 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da08:	23fd      	movs	r3, #253	; 0xfd
 800da0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800da0e:	e00b      	b.n	800da28 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800da10:	23fb      	movs	r3, #251	; 0xfb
 800da12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800da16:	e007      	b.n	800da28 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800da18:	23fa      	movs	r3, #250	; 0xfa
 800da1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800da1e:	e003      	b.n	800da28 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da20:	23ff      	movs	r3, #255	; 0xff
 800da22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800da26:	bf00      	nop
    }

    return lmhStatus;
 800da28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3730      	adds	r7, #48	; 0x30
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	200000a8 	.word	0x200000a8
 800da38:	20002ea4 	.word	0x20002ea4
 800da3c:	20002eb8 	.word	0x20002eb8
 800da40:	20002ef0 	.word	0x20002ef0

0800da44 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800da4a:	230a      	movs	r3, #10
 800da4c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800da4e:	463b      	mov	r3, r7
 800da50:	4618      	mov	r0, r3
 800da52:	f005 f895 	bl	8012b80 <LoRaMacMlmeRequest>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800da60:	2300      	movs	r3, #0
 800da62:	e001      	b.n	800da68 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800da64:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08c      	sub	sp, #48	; 0x30
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800da7a:	2300      	movs	r3, #0
 800da7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800da80:	f001 fdb0 	bl	800f5e4 <LoRaMacIsBusy>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da8a:	f06f 0301 	mvn.w	r3, #1
 800da8e:	e07b      	b.n	800db88 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800da90:	f7ff fee6 	bl	800d860 <LmHandlerJoinStatus>
 800da94:	4603      	mov	r3, r0
 800da96:	2b01      	cmp	r3, #1
 800da98:	d002      	beq.n	800daa0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da9a:	f06f 0302 	mvn.w	r3, #2
 800da9e:	e073      	b.n	800db88 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800daa0:	2300      	movs	r3, #0
 800daa2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4618      	mov	r0, r3
 800daaa:	f004 fbcd 	bl	8012248 <LoRaMacMibGetRequestConfirm>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295
 800dab8:	e066      	b.n	800db88 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800daba:	7b3b      	ldrb	r3, [r7, #12]
 800dabc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800dac0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d055      	beq.n	800db76 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	2b02      	cmp	r3, #2
 800dace:	d02c      	beq.n	800db2a <LmHandlerRequestClass+0xba>
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	dc52      	bgt.n	800db7a <LmHandlerRequestClass+0x10a>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <LmHandlerRequestClass+0x6e>
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d022      	beq.n	800db22 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800dadc:	e04d      	b.n	800db7a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800dade:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d04b      	beq.n	800db7e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	4618      	mov	r0, r3
 800daf0:	f004 fd08 	bl	8012504 <LoRaMacMibSetRequestConfirm>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10f      	bne.n	800db1a <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 fb1f 	bl	800e140 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800db02:	4b23      	ldr	r3, [pc, #140]	; (800db90 <LmHandlerRequestClass+0x120>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d038      	beq.n	800db7e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800db0c:	4b20      	ldr	r3, [pc, #128]	; (800db90 <LmHandlerRequestClass+0x120>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db12:	79fa      	ldrb	r2, [r7, #7]
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
            break;
 800db18:	e031      	b.n	800db7e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800db1a:	23ff      	movs	r3, #255	; 0xff
 800db1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800db20:	e02d      	b.n	800db7e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800db22:	23ff      	movs	r3, #255	; 0xff
 800db24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800db28:	e02c      	b.n	800db84 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800db2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800db32:	23ff      	movs	r3, #255	; 0xff
 800db34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800db38:	e023      	b.n	800db82 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4618      	mov	r0, r3
 800db44:	f004 fcde 	bl	8012504 <LoRaMacMibSetRequestConfirm>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10f      	bne.n	800db6e <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800db4e:	79fb      	ldrb	r3, [r7, #7]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 faf5 	bl	800e140 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800db56:	4b0e      	ldr	r3, [pc, #56]	; (800db90 <LmHandlerRequestClass+0x120>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d010      	beq.n	800db82 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800db60:	4b0b      	ldr	r3, [pc, #44]	; (800db90 <LmHandlerRequestClass+0x120>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db66:	79fa      	ldrb	r2, [r7, #7]
 800db68:	4610      	mov	r0, r2
 800db6a:	4798      	blx	r3
            break;
 800db6c:	e009      	b.n	800db82 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800db6e:	23ff      	movs	r3, #255	; 0xff
 800db70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800db74:	e005      	b.n	800db82 <LmHandlerRequestClass+0x112>
        }
    }
 800db76:	bf00      	nop
 800db78:	e004      	b.n	800db84 <LmHandlerRequestClass+0x114>
            break;
 800db7a:	bf00      	nop
 800db7c:	e002      	b.n	800db84 <LmHandlerRequestClass+0x114>
            break;
 800db7e:	bf00      	nop
 800db80:	e000      	b.n	800db84 <LmHandlerRequestClass+0x114>
            break;
 800db82:	bf00      	nop
    return errorStatus;
 800db84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3730      	adds	r7, #48	; 0x30
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20002ec8 	.word	0x20002ec8

0800db94 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08c      	sub	sp, #48	; 0x30
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dba2:	f04f 33ff 	mov.w	r3, #4294967295
 800dba6:	e010      	b.n	800dbca <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800dbac:	f107 030c 	add.w	r3, r7, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f004 fb49 	bl	8012248 <LoRaMacMibGetRequestConfirm>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc0:	e003      	b.n	800dbca <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dbc2:	7c3a      	ldrb	r2, [r7, #16]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3730      	adds	r7, #48	; 0x30
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08c      	sub	sp, #48	; 0x30
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe6:	e016      	b.n	800dc16 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800dbe8:	231f      	movs	r3, #31
 800dbea:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800dbec:	f107 030c 	add.w	r3, r7, #12
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f004 fb29 	bl	8012248 <LoRaMacMibGetRequestConfirm>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800dc00:	e009      	b.n	800dc16 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800dc02:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f993 2000 	ldrsb.w	r2, [r3]
 800dc10:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <LmHandlerGetTxDatarate+0x4c>)
 800dc12:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3730      	adds	r7, #48	; 0x30
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	20002eb8 	.word	0x20002eb8

0800dc24 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08c      	sub	sp, #48	; 0x30
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dc2c:	2322      	movs	r3, #34	; 0x22
 800dc2e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc34:	f107 030c 	add.w	r3, r7, #12
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f004 fc63 	bl	8012504 <LoRaMacMibSetRequestConfirm>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc44:	f04f 33ff 	mov.w	r3, #4294967295
 800dc48:	e000      	b.n	800dc4c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3730      	adds	r7, #48	; 0x30
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800dc5c:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <McpsConfirm+0x60>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	785a      	ldrb	r2, [r3, #1]
 800dc66:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <McpsConfirm+0x60>)
 800dc68:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	789b      	ldrb	r3, [r3, #2]
 800dc6e:	b25a      	sxtb	r2, r3
 800dc70:	4b10      	ldr	r3, [pc, #64]	; (800dcb4 <McpsConfirm+0x60>)
 800dc72:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	4a0e      	ldr	r2, [pc, #56]	; (800dcb4 <McpsConfirm+0x60>)
 800dc7a:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800dc82:	4b0c      	ldr	r3, [pc, #48]	; (800dcb4 <McpsConfirm+0x60>)
 800dc84:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	4b09      	ldr	r3, [pc, #36]	; (800dcb4 <McpsConfirm+0x60>)
 800dc8e:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	791b      	ldrb	r3, [r3, #4]
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <McpsConfirm+0x60>)
 800dc98:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <McpsConfirm+0x64>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6a1b      	ldr	r3, [r3, #32]
 800dca0:	4804      	ldr	r0, [pc, #16]	; (800dcb4 <McpsConfirm+0x60>)
 800dca2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	2000      	movs	r0, #0
 800dca8:	f000 f99a 	bl	800dfe0 <LmHandlerPackagesNotify>
}
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20002ef0 	.word	0x20002ef0
 800dcb8:	20002ec8 	.word	0x20002ec8

0800dcbc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800dcca:	4b32      	ldr	r3, [pc, #200]	; (800dd94 <McpsIndication+0xd8>)
 800dccc:	2201      	movs	r2, #1
 800dcce:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	785a      	ldrb	r2, [r3, #1]
 800dcd4:	4b2f      	ldr	r3, [pc, #188]	; (800dd94 <McpsIndication+0xd8>)
 800dcd6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dcd8:	4b2e      	ldr	r3, [pc, #184]	; (800dd94 <McpsIndication+0xd8>)
 800dcda:	785b      	ldrb	r3, [r3, #1]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d154      	bne.n	800dd8a <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	791b      	ldrb	r3, [r3, #4]
 800dce4:	b25a      	sxtb	r2, r3
 800dce6:	4b2b      	ldr	r3, [pc, #172]	; (800dd94 <McpsIndication+0xd8>)
 800dce8:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcf0:	b25a      	sxtb	r2, r3
 800dcf2:	4b28      	ldr	r3, [pc, #160]	; (800dd94 <McpsIndication+0xd8>)
 800dcf4:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dcfc:	4b25      	ldr	r3, [pc, #148]	; (800dd94 <McpsIndication+0xd8>)
 800dcfe:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	78db      	ldrb	r3, [r3, #3]
 800dd04:	b25a      	sxtb	r2, r3
 800dd06:	4b23      	ldr	r3, [pc, #140]	; (800dd94 <McpsIndication+0xd8>)
 800dd08:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	4a21      	ldr	r2, [pc, #132]	; (800dd94 <McpsIndication+0xd8>)
 800dd10:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	78db      	ldrb	r3, [r3, #3]
 800dd16:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	7b1b      	ldrb	r3, [r3, #12]
 800dd1c:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800dd24:	4b1c      	ldr	r3, [pc, #112]	; (800dd98 <McpsIndication+0xdc>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2a:	f107 0218 	add.w	r2, r7, #24
 800dd2e:	4919      	ldr	r1, [pc, #100]	; (800dd94 <McpsIndication+0xd8>)
 800dd30:	4610      	mov	r0, r2
 800dd32:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dd34:	4b18      	ldr	r3, [pc, #96]	; (800dd98 <McpsIndication+0xdc>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <McpsIndication+0x92>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7e1b      	ldrb	r3, [r3, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800dd46:	4b14      	ldr	r3, [pc, #80]	; (800dd98 <McpsIndication+0xdc>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4c:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	2001      	movs	r0, #1
 800dd52:	f000 f945 	bl	800dfe0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800dd56:	f107 0317 	add.w	r3, r7, #23
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff ff1a 	bl	800db94 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	795b      	ldrb	r3, [r3, #5]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d111      	bne.n	800dd8c <McpsIndication+0xd0>
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10e      	bne.n	800dd8c <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800dd6e:	2300      	movs	r3, #0
 800dd70:	733b      	strb	r3, [r7, #12]
 800dd72:	2300      	movs	r3, #0
 800dd74:	737b      	strb	r3, [r7, #13]
 800dd76:	2300      	movs	r3, #0
 800dd78:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800dd7a:	f107 000c 	add.w	r0, r7, #12
 800dd7e:	2301      	movs	r3, #1
 800dd80:	2200      	movs	r2, #0
 800dd82:	2100      	movs	r1, #0
 800dd84:	f7ff fd88 	bl	800d898 <LmHandlerSend>
 800dd88:	e000      	b.n	800dd8c <McpsIndication+0xd0>
        return;
 800dd8a:	bf00      	nop
    }
}
 800dd8c:	3720      	adds	r7, #32
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	200000ac 	.word	0x200000ac
 800dd98:	20002ec8 	.word	0x20002ec8

0800dd9c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08c      	sub	sp, #48	; 0x30
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800dda4:	4b28      	ldr	r3, [pc, #160]	; (800de48 <MlmeConfirm+0xac>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	785a      	ldrb	r2, [r3, #1]
 800ddae:	4b26      	ldr	r3, [pc, #152]	; (800de48 <MlmeConfirm+0xac>)
 800ddb0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800ddb2:	4b26      	ldr	r3, [pc, #152]	; (800de4c <MlmeConfirm+0xb0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6a1b      	ldr	r3, [r3, #32]
 800ddb8:	4823      	ldr	r0, [pc, #140]	; (800de48 <MlmeConfirm+0xac>)
 800ddba:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	2002      	movs	r0, #2
 800ddc0:	f000 f90e 	bl	800dfe0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b0a      	cmp	r3, #10
 800ddca:	d035      	beq.n	800de38 <MlmeConfirm+0x9c>
 800ddcc:	2b0a      	cmp	r3, #10
 800ddce:	dc35      	bgt.n	800de3c <MlmeConfirm+0xa0>
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d002      	beq.n	800ddda <MlmeConfirm+0x3e>
 800ddd4:	2b04      	cmp	r3, #4
 800ddd6:	d023      	beq.n	800de20 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800ddd8:	e030      	b.n	800de3c <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800ddda:	2306      	movs	r3, #6
 800dddc:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ddde:	f107 030c 	add.w	r3, r7, #12
 800dde2:	4618      	mov	r0, r3
 800dde4:	f004 fa30 	bl	8012248 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4a19      	ldr	r2, [pc, #100]	; (800de50 <MlmeConfirm+0xb4>)
 800ddec:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ddee:	4819      	ldr	r0, [pc, #100]	; (800de54 <MlmeConfirm+0xb8>)
 800ddf0:	f7ff fef0 	bl	800dbd4 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	785b      	ldrb	r3, [r3, #1]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d108      	bne.n	800de0e <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ddfc:	4b15      	ldr	r3, [pc, #84]	; (800de54 <MlmeConfirm+0xb8>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800de02:	4b15      	ldr	r3, [pc, #84]	; (800de58 <MlmeConfirm+0xbc>)
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff fe32 	bl	800da70 <LmHandlerRequestClass>
 800de0c:	e002      	b.n	800de14 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800de0e:	4b11      	ldr	r3, [pc, #68]	; (800de54 <MlmeConfirm+0xb8>)
 800de10:	22ff      	movs	r2, #255	; 0xff
 800de12:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800de14:	4b0d      	ldr	r3, [pc, #52]	; (800de4c <MlmeConfirm+0xb0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	480e      	ldr	r0, [pc, #56]	; (800de54 <MlmeConfirm+0xb8>)
 800de1c:	4798      	blx	r3
        break;
 800de1e:	e00e      	b.n	800de3e <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800de20:	4b0e      	ldr	r3, [pc, #56]	; (800de5c <MlmeConfirm+0xc0>)
 800de22:	2201      	movs	r2, #1
 800de24:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7a1a      	ldrb	r2, [r3, #8]
 800de2a:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <MlmeConfirm+0xc0>)
 800de2c:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7a5a      	ldrb	r2, [r3, #9]
 800de32:	4b0a      	ldr	r3, [pc, #40]	; (800de5c <MlmeConfirm+0xc0>)
 800de34:	73da      	strb	r2, [r3, #15]
        break;
 800de36:	e002      	b.n	800de3e <MlmeConfirm+0xa2>
        break;
 800de38:	bf00      	nop
 800de3a:	e000      	b.n	800de3e <MlmeConfirm+0xa2>
        break;
 800de3c:	bf00      	nop
    }
}
 800de3e:	bf00      	nop
 800de40:	3730      	adds	r7, #48	; 0x30
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	20002ef0 	.word	0x20002ef0
 800de4c:	20002ec8 	.word	0x20002ec8
 800de50:	20000084 	.word	0x20000084
 800de54:	200000a8 	.word	0x200000a8
 800de58:	20002eb8 	.word	0x20002eb8
 800de5c:	200000ac 	.word	0x200000ac

0800de60 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800de6a:	4b22      	ldr	r3, [pc, #136]	; (800def4 <MlmeIndication+0x94>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	785a      	ldrb	r2, [r3, #1]
 800de74:	4b1f      	ldr	r3, [pc, #124]	; (800def4 <MlmeIndication+0x94>)
 800de76:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de7e:	b25a      	sxtb	r2, r3
 800de80:	4b1c      	ldr	r3, [pc, #112]	; (800def4 <MlmeIndication+0x94>)
 800de82:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800de8a:	4b1a      	ldr	r3, [pc, #104]	; (800def4 <MlmeIndication+0x94>)
 800de8c:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	78db      	ldrb	r3, [r3, #3]
 800de92:	b25a      	sxtb	r2, r3
 800de94:	4b17      	ldr	r3, [pc, #92]	; (800def4 <MlmeIndication+0x94>)
 800de96:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800de98:	4b16      	ldr	r3, [pc, #88]	; (800def4 <MlmeIndication+0x94>)
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b0e      	cmp	r3, #14
 800de9e:	d005      	beq.n	800deac <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800dea0:	4b15      	ldr	r3, [pc, #84]	; (800def8 <MlmeIndication+0x98>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	4913      	ldr	r1, [pc, #76]	; (800def4 <MlmeIndication+0x94>)
 800dea8:	2000      	movs	r0, #0
 800deaa:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2b07      	cmp	r3, #7
 800deb2:	d117      	bne.n	800dee4 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800deb4:	2300      	movs	r3, #0
 800deb6:	723b      	strb	r3, [r7, #8]
 800deb8:	2300      	movs	r3, #0
 800deba:	727b      	strb	r3, [r7, #9]
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800dec0:	4b0e      	ldr	r3, [pc, #56]	; (800defc <MlmeIndication+0x9c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	4798      	blx	r3
 800dec8:	4603      	mov	r3, r0
 800deca:	f083 0301 	eor.w	r3, r3, #1
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d009      	beq.n	800dee8 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800ded4:	f107 0008 	add.w	r0, r7, #8
 800ded8:	2301      	movs	r3, #1
 800deda:	2200      	movs	r2, #0
 800dedc:	2100      	movs	r1, #0
 800dede:	f7ff fcdb 	bl	800d898 <LmHandlerSend>
            }
        }
        break;
 800dee2:	e001      	b.n	800dee8 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800dee4:	bf00      	nop
 800dee6:	e000      	b.n	800deea <MlmeIndication+0x8a>
        break;
 800dee8:	bf00      	nop
    }
}
 800deea:	bf00      	nop
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	200000ac 	.word	0x200000ac
 800def8:	20002ec8 	.word	0x20002ec8
 800defc:	20002ea4 	.word	0x20002ea4

0800df00 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d103      	bne.n	800df1e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800df16:	f000 f943 	bl	800e1a0 <LmhpCompliancePackageFactory>
 800df1a:	60f8      	str	r0, [r7, #12]
            break;
 800df1c:	e000      	b.n	800df20 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800df1e:	bf00      	nop
        }
    }
    if( package != NULL )
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d02b      	beq.n	800df7e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	4918      	ldr	r1, [pc, #96]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800df30:	79fb      	ldrb	r3, [r7, #7]
 800df32:	4a16      	ldr	r2, [pc, #88]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df38:	4a15      	ldr	r2, [pc, #84]	; (800df90 <LmHandlerPackageRegister+0x90>)
 800df3a:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	4a13      	ldr	r2, [pc, #76]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df44:	4a13      	ldr	r2, [pc, #76]	; (800df94 <LmHandlerPackageRegister+0x94>)
 800df46:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	4a10      	ldr	r2, [pc, #64]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df50:	4a11      	ldr	r2, [pc, #68]	; (800df98 <LmHandlerPackageRegister+0x98>)
 800df52:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800df54:	4b11      	ldr	r3, [pc, #68]	; (800df9c <LmHandlerPackageRegister+0x9c>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	490c      	ldr	r1, [pc, #48]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800df60:	6912      	ldr	r2, [r2, #16]
 800df62:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4a09      	ldr	r2, [pc, #36]	; (800df8c <LmHandlerPackageRegister+0x8c>)
 800df68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	4a0c      	ldr	r2, [pc, #48]	; (800dfa0 <LmHandlerPackageRegister+0xa0>)
 800df70:	6851      	ldr	r1, [r2, #4]
 800df72:	4a0b      	ldr	r2, [pc, #44]	; (800dfa0 <LmHandlerPackageRegister+0xa0>)
 800df74:	7852      	ldrb	r2, [r2, #1]
 800df76:	6838      	ldr	r0, [r7, #0]
 800df78:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e001      	b.n	800df82 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800df7e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20002ea4 	.word	0x20002ea4
 800df90:	0800d7ad 	.word	0x0800d7ad
 800df94:	0800d899 	.word	0x0800d899
 800df98:	0800da45 	.word	0x0800da45
 800df9c:	20002ec8 	.word	0x20002ec8
 800dfa0:	200000bc 	.word	0x200000bc

0800dfa4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b04      	cmp	r3, #4
 800dfb2:	d80e      	bhi.n	800dfd2 <LmHandlerPackageIsInitialized+0x2e>
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	4a09      	ldr	r2, [pc, #36]	; (800dfdc <LmHandlerPackageIsInitialized+0x38>)
 800dfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d007      	beq.n	800dfd2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	4a05      	ldr	r2, [pc, #20]	; (800dfdc <LmHandlerPackageIsInitialized+0x38>)
 800dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	4798      	blx	r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	e000      	b.n	800dfd4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800dfd2:	2300      	movs	r3, #0
    }
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20002ea4 	.word	0x20002ea4

0800dfe0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dfec:	2300      	movs	r3, #0
 800dfee:	73fb      	strb	r3, [r7, #15]
 800dff0:	e067      	b.n	800e0c2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800dff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dff6:	4a37      	ldr	r2, [pc, #220]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d051      	beq.n	800e0a4 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	2b02      	cmp	r3, #2
 800e004:	d03d      	beq.n	800e082 <LmHandlerPackagesNotify+0xa2>
 800e006:	2b02      	cmp	r3, #2
 800e008:	dc4e      	bgt.n	800e0a8 <LmHandlerPackagesNotify+0xc8>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <LmHandlerPackagesNotify+0x34>
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d011      	beq.n	800e036 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800e012:	e049      	b.n	800e0a8 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e018:	4a2e      	ldr	r2, [pc, #184]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d043      	beq.n	800e0ac <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e028:	4a2a      	ldr	r2, [pc, #168]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	6838      	ldr	r0, [r7, #0]
 800e032:	4798      	blx	r3
                    break;
 800e034:	e03a      	b.n	800e0ac <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e03a:	4a26      	ldr	r2, [pc, #152]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e040:	69db      	ldr	r3, [r3, #28]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d034      	beq.n	800e0b0 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e04a:	4a22      	ldr	r2, [pc, #136]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e050:	781a      	ldrb	r2, [r3, #0]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e056:	429a      	cmp	r2, r3
 800e058:	d00a      	beq.n	800e070 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d126      	bne.n	800e0b0 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800e062:	4b1c      	ldr	r3, [pc, #112]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	4798      	blx	r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d01f      	beq.n	800e0b0 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e074:	4a17      	ldr	r2, [pc, #92]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e07a:	69db      	ldr	r3, [r3, #28]
 800e07c:	6838      	ldr	r0, [r7, #0]
 800e07e:	4798      	blx	r3
                    break;
 800e080:	e016      	b.n	800e0b0 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e086:	4a13      	ldr	r2, [pc, #76]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d010      	beq.n	800e0b4 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e096:	4a0f      	ldr	r2, [pc, #60]	; (800e0d4 <LmHandlerPackagesNotify+0xf4>)
 800e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	6838      	ldr	r0, [r7, #0]
 800e0a0:	4798      	blx	r3
                    break;
 800e0a2:	e007      	b.n	800e0b4 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800e0a4:	bf00      	nop
 800e0a6:	e006      	b.n	800e0b6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e0a8:	bf00      	nop
 800e0aa:	e004      	b.n	800e0b6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e0ac:	bf00      	nop
 800e0ae:	e002      	b.n	800e0b6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e0b0:	bf00      	nop
 800e0b2:	e000      	b.n	800e0b6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e0b4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	3301      	adds	r3, #1
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	dd93      	ble.n	800dff2 <LmHandlerPackagesNotify+0x12>
    }
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	20002ea4 	.word	0x20002ea4

0800e0d8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0de:	2300      	movs	r3, #0
 800e0e0:	71fb      	strb	r3, [r7, #7]
 800e0e2:	e022      	b.n	800e12a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0e8:	4a14      	ldr	r2, [pc, #80]	; (800e13c <LmHandlerPackagesProcess+0x64>)
 800e0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d015      	beq.n	800e11e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0f6:	4a11      	ldr	r2, [pc, #68]	; (800e13c <LmHandlerPackagesProcess+0x64>)
 800e0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0fc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00d      	beq.n	800e11e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff ff4d 	bl	800dfa4 <LmHandlerPackageIsInitialized>
 800e10a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d006      	beq.n	800e11e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e114:	4a09      	ldr	r2, [pc, #36]	; (800e13c <LmHandlerPackagesProcess+0x64>)
 800e116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e11e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e122:	b2db      	uxtb	r3, r3
 800e124:	3301      	adds	r3, #1
 800e126:	b2db      	uxtb	r3, r3
 800e128:	71fb      	strb	r3, [r7, #7]
 800e12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e12e:	2b04      	cmp	r3, #4
 800e130:	ddd8      	ble.n	800e0e4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e132:	bf00      	nop
 800e134:	bf00      	nop
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	20002ea4 	.word	0x20002ea4

0800e140 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af02      	add	r7, sp, #8
 800e146:	4603      	mov	r3, r0
 800e148:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e14a:	79fb      	ldrb	r3, [r7, #7]
 800e14c:	4a06      	ldr	r2, [pc, #24]	; (800e168 <DisplayClassUpdate+0x28>)
 800e14e:	5cd3      	ldrb	r3, [r2, r3]
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	4b06      	ldr	r3, [pc, #24]	; (800e16c <DisplayClassUpdate+0x2c>)
 800e154:	2200      	movs	r2, #0
 800e156:	2100      	movs	r1, #0
 800e158:	2002      	movs	r0, #2
 800e15a:	f00d fff7 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	0801df28 	.word	0x0801df28
 800e16c:	0801df0c 	.word	0x0801df0c

0800e170 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e17a:	bf00      	nop
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	bc80      	pop	{r7}
 800e182:	4770      	bx	lr

0800e184 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800e188:	2300      	movs	r3, #0
#endif
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bc80      	pop	{r7}
 800e190:	4770      	bx	lr

0800e192 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800e192:	b480      	push	{r7}
 800e194:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bc80      	pop	{r7}
 800e19e:	4770      	bx	lr

0800e1a0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800e1a4:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <LmhpCompliancePackageFactory+0x10>)
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bc80      	pop	{r7}
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	200000c4 	.word	0x200000c4

0800e1b4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00f      	beq.n	800e1e8 <LmhpComplianceInit+0x34>
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00c      	beq.n	800e1e8 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800e1ce:	4a0c      	ldr	r2, [pc, #48]	; (800e200 <LmhpComplianceInit+0x4c>)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800e1d4:	4a0b      	ldr	r2, [pc, #44]	; (800e204 <LmhpComplianceInit+0x50>)
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e1da:	4a0a      	ldr	r2, [pc, #40]	; (800e204 <LmhpComplianceInit+0x50>)
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800e1e0:	4b08      	ldr	r3, [pc, #32]	; (800e204 <LmhpComplianceInit+0x50>)
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	701a      	strb	r2, [r3, #0]
 800e1e6:	e006      	b.n	800e1f6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800e1e8:	4b05      	ldr	r3, [pc, #20]	; (800e200 <LmhpComplianceInit+0x4c>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e1ee:	4b05      	ldr	r3, [pc, #20]	; (800e204 <LmhpComplianceInit+0x50>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	701a      	strb	r2, [r3, #0]
    }
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bc80      	pop	{r7}
 800e1fe:	4770      	bx	lr
 800e200:	20003028 	.word	0x20003028
 800e204:	20003014 	.word	0x20003014

0800e208 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e208:	b480      	push	{r7}
 800e20a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e20c:	4b02      	ldr	r3, [pc, #8]	; (800e218 <LmhpComplianceIsInitialized+0x10>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
}
 800e210:	4618      	mov	r0, r3
 800e212:	46bd      	mov	sp, r7
 800e214:	bc80      	pop	{r7}
 800e216:	4770      	bx	lr
 800e218:	20003014 	.word	0x20003014

0800e21c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800e21c:	b480      	push	{r7}
 800e21e:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <LmhpComplianceIsRunning+0x24>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	f083 0301 	eor.w	r3, r3, #1
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800e22e:	2300      	movs	r3, #0
 800e230:	e001      	b.n	800e236 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800e232:	4b03      	ldr	r3, [pc, #12]	; (800e240 <LmhpComplianceIsRunning+0x24>)
 800e234:	785b      	ldrb	r3, [r3, #1]
}
 800e236:	4618      	mov	r0, r3
 800e238:	46bd      	mov	sp, r7
 800e23a:	bc80      	pop	{r7}
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	20003014 	.word	0x20003014

0800e244 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800e24c:	4b0f      	ldr	r3, [pc, #60]	; (800e28c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	f083 0301 	eor.w	r3, r3, #1
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	d112      	bne.n	800e280 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e25a:	4b0c      	ldr	r3, [pc, #48]	; (800e28c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e25c:	785b      	ldrb	r3, [r3, #1]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00f      	beq.n	800e282 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800e266:	2b01      	cmp	r3, #1
 800e268:	d10b      	bne.n	800e282 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d007      	beq.n	800e282 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e272:	4b06      	ldr	r3, [pc, #24]	; (800e28c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e274:	899b      	ldrh	r3, [r3, #12]
 800e276:	3301      	adds	r3, #1
 800e278:	b29a      	uxth	r2, r3
 800e27a:	4b04      	ldr	r3, [pc, #16]	; (800e28c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e27c:	819a      	strh	r2, [r3, #12]
 800e27e:	e000      	b.n	800e282 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800e280:	bf00      	nop
    }
}
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	bc80      	pop	{r7}
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	20003014 	.word	0x20003014

0800e290 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e298:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f083 0301 	eor.w	r3, r3, #1
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d116      	bne.n	800e2d4 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e2a8:	785b      	ldrb	r3, [r3, #1]
 800e2aa:	f083 0301 	eor.w	r3, r3, #1
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d111      	bne.n	800e2d8 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d10e      	bne.n	800e2da <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7a1a      	ldrb	r2, [r3, #8]
 800e2c6:	4b07      	ldr	r3, [pc, #28]	; (800e2e4 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e2c8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	7a5a      	ldrb	r2, [r3, #9]
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e2d0:	741a      	strb	r2, [r3, #16]
 800e2d2:	e002      	b.n	800e2da <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e2d4:	bf00      	nop
 800e2d6:	e000      	b.n	800e2da <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e2d8:	bf00      	nop
    }
}
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20003014 	.word	0x20003014

0800e2e8 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e2ee:	4b33      	ldr	r3, [pc, #204]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	f083 0301 	eor.w	r3, r3, #1
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e300:	e058      	b.n	800e3b4 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800e302:	4b2e      	ldr	r3, [pc, #184]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e304:	785b      	ldrb	r3, [r3, #1]
 800e306:	f083 0301 	eor.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e310:	2300      	movs	r3, #0
 800e312:	e04f      	b.n	800e3b4 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800e314:	4b29      	ldr	r3, [pc, #164]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e316:	7b9b      	ldrb	r3, [r3, #14]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d019      	beq.n	800e350 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800e31c:	4b27      	ldr	r3, [pc, #156]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e31e:	2200      	movs	r2, #0
 800e320:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800e322:	4b26      	ldr	r3, [pc, #152]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e324:	2203      	movs	r2, #3
 800e326:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800e328:	4b24      	ldr	r3, [pc, #144]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	2205      	movs	r2, #5
 800e32e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e330:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	3301      	adds	r3, #1
 800e336:	4a21      	ldr	r2, [pc, #132]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e338:	7bd2      	ldrb	r2, [r2, #15]
 800e33a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e33c:	4b1f      	ldr	r3, [pc, #124]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	3302      	adds	r3, #2
 800e342:	4a1e      	ldr	r2, [pc, #120]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e344:	7c12      	ldrb	r2, [r2, #16]
 800e346:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800e348:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	709a      	strb	r2, [r3, #2]
 800e34e:	e01c      	b.n	800e38a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800e350:	4b1a      	ldr	r3, [pc, #104]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e352:	789b      	ldrb	r3, [r3, #2]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d005      	beq.n	800e364 <LmhpComplianceTxProcess+0x7c>
 800e358:	2b04      	cmp	r3, #4
 800e35a:	d116      	bne.n	800e38a <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800e35c:	4b17      	ldr	r3, [pc, #92]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e35e:	2201      	movs	r2, #1
 800e360:	709a      	strb	r2, [r3, #2]
            break;
 800e362:	e012      	b.n	800e38a <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800e364:	4b15      	ldr	r3, [pc, #84]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e366:	2202      	movs	r2, #2
 800e368:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e36a:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	0a1b      	lsrs	r3, r3, #8
 800e370:	b29a      	uxth	r2, r3
 800e372:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	b2d2      	uxtb	r2, r2
 800e378:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e37a:	4b10      	ldr	r3, [pc, #64]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e37c:	899a      	ldrh	r2, [r3, #12]
 800e37e:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	3301      	adds	r3, #1
 800e384:	b2d2      	uxtb	r2, r2
 800e386:	701a      	strb	r2, [r3, #0]
            break;
 800e388:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800e38a:	23e0      	movs	r3, #224	; 0xe0
 800e38c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800e38e:	4b0b      	ldr	r3, [pc, #44]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e390:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800e392:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800e394:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e396:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800e398:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800e39a:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <LmhpComplianceTxProcess+0xd8>)
 800e39c:	f00e fd48 	bl	801ce30 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800e3a0:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <LmhpComplianceTxProcess+0xdc>)
 800e3a2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800e3a4:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <LmhpComplianceTxProcess+0xd4>)
 800e3a6:	78db      	ldrb	r3, [r3, #3]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	47a0      	blx	r4
 800e3b2:	4603      	mov	r3, r0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd90      	pop	{r4, r7, pc}
 800e3bc:	20003014 	.word	0x20003014
 800e3c0:	20002ffc 	.word	0x20002ffc
 800e3c4:	200000c4 	.word	0x200000c4

0800e3c8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b0a2      	sub	sp, #136	; 0x88
 800e3cc:	af02      	add	r7, sp, #8
 800e3ce:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e3d0:	4ba2      	ldr	r3, [pc, #648]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	f083 0301 	eor.w	r3, r3, #1
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f040 81c0 	bne.w	800e760 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7b5b      	ldrb	r3, [r3, #13]
 800e3e4:	f083 0301 	eor.w	r3, r3, #1
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f040 81ba 	bne.w	800e764 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e3f0:	4b9a      	ldr	r3, [pc, #616]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e3f2:	785b      	ldrb	r3, [r3, #1]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00c      	beq.n	800e412 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	7b9b      	ldrb	r3, [r3, #14]
 800e3fc:	f083 0301 	eor.w	r3, r3, #1
 800e400:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800e402:	2b00      	cmp	r3, #0
 800e404:	d005      	beq.n	800e412 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e406:	4b95      	ldr	r3, [pc, #596]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e408:	899b      	ldrh	r3, [r3, #12]
 800e40a:	3301      	adds	r3, #1
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	4b93      	ldr	r3, [pc, #588]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e410:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	78db      	ldrb	r3, [r3, #3]
 800e416:	2be0      	cmp	r3, #224	; 0xe0
 800e418:	f040 81a6 	bne.w	800e768 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e41c:	4b8f      	ldr	r3, [pc, #572]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e41e:	785b      	ldrb	r3, [r3, #1]
 800e420:	f083 0301 	eor.w	r3, r3, #1
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	d060      	beq.n	800e4ec <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7b1b      	ldrb	r3, [r3, #12]
 800e42e:	2b04      	cmp	r3, #4
 800e430:	f040 819f 	bne.w	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	f040 8199 	bne.w	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	3301      	adds	r3, #1
 800e446:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e448:	2b01      	cmp	r3, #1
 800e44a:	f040 8192 	bne.w	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	3302      	adds	r3, #2
 800e454:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e456:	2b01      	cmp	r3, #1
 800e458:	f040 818b 	bne.w	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	3303      	adds	r3, #3
 800e462:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e464:	2b01      	cmp	r3, #1
 800e466:	f040 8184 	bne.w	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800e46a:	4b7c      	ldr	r3, [pc, #496]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800e470:	4b7a      	ldr	r3, [pc, #488]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e472:	22e0      	movs	r2, #224	; 0xe0
 800e474:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800e476:	4b79      	ldr	r3, [pc, #484]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e478:	2202      	movs	r2, #2
 800e47a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800e47c:	4b77      	ldr	r3, [pc, #476]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e47e:	2200      	movs	r2, #0
 800e480:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800e482:	4b76      	ldr	r3, [pc, #472]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e484:	2200      	movs	r2, #0
 800e486:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800e488:	4b74      	ldr	r3, [pc, #464]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800e48e:	4b73      	ldr	r3, [pc, #460]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e490:	2200      	movs	r2, #0
 800e492:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800e494:	4b71      	ldr	r3, [pc, #452]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e496:	2201      	movs	r2, #1
 800e498:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800e49a:	4b70      	ldr	r3, [pc, #448]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e49c:	2201      	movs	r2, #1
 800e49e:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800e4a0:	2304      	movs	r3, #4
 800e4a2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e4a8:	f107 0308 	add.w	r3, r7, #8
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f004 f829 	bl	8012504 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	f004 fd9a 	bl	8012fec <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800e4b8:	4b69      	ldr	r3, [pc, #420]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d003      	beq.n	800e4ca <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800e4c2:	4b67      	ldr	r3, [pc, #412]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	4b65      	ldr	r3, [pc, #404]	; (800e664 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f04f 31ff 	mov.w	r1, #4294967295
 800e4d6:	4864      	ldr	r0, [pc, #400]	; (800e668 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e4d8:	f00e fc74 	bl	801cdc4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800e4dc:	f241 3188 	movw	r1, #5000	; 0x1388
 800e4e0:	4861      	ldr	r0, [pc, #388]	; (800e668 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e4e2:	f00e fd83 	bl	801cfec <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800e4e6:	f7ff feff 	bl	800e2e8 <LmhpComplianceTxProcess>
 800e4ea:	e142      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	781a      	ldrb	r2, [r3, #0]
 800e4f2:	4b5a      	ldr	r3, [pc, #360]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e4f4:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800e4f6:	4b59      	ldr	r3, [pc, #356]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e4f8:	789b      	ldrb	r3, [r3, #2]
 800e4fa:	2b0a      	cmp	r3, #10
 800e4fc:	f200 8136 	bhi.w	800e76c <LmhpComplianceOnMcpsIndication+0x3a4>
 800e500:	a201      	add	r2, pc, #4	; (adr r2, 800e508 <LmhpComplianceOnMcpsIndication+0x140>)
 800e502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e506:	bf00      	nop
 800e508:	0800e535 	.word	0x0800e535
 800e50c:	0800e57f 	.word	0x0800e57f
 800e510:	0800e587 	.word	0x0800e587
 800e514:	0800e595 	.word	0x0800e595
 800e518:	0800e5a3 	.word	0x0800e5a3
 800e51c:	0800e5fb 	.word	0x0800e5fb
 800e520:	0800e60d 	.word	0x0800e60d
 800e524:	0800e671 	.word	0x0800e671
 800e528:	0800e719 	.word	0x0800e719
 800e52c:	0800e72b 	.word	0x0800e72b
 800e530:	0800e745 	.word	0x0800e745
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800e534:	484c      	ldr	r0, [pc, #304]	; (800e668 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e536:	f00e fce9 	bl	801cf0c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e53a:	4b48      	ldr	r3, [pc, #288]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e540:	4b46      	ldr	r3, [pc, #280]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e542:	2200      	movs	r2, #0
 800e544:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e546:	2304      	movs	r3, #4
 800e548:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e54a:	4b45      	ldr	r3, [pc, #276]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e552:	f107 0308 	add.w	r3, r7, #8
 800e556:	4618      	mov	r0, r3
 800e558:	f003 ffd4 	bl	8012504 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e55c:	4b40      	ldr	r3, [pc, #256]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	785b      	ldrb	r3, [r3, #1]
 800e562:	4618      	mov	r0, r3
 800e564:	f004 fd42 	bl	8012fec <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e568:	4b3d      	ldr	r3, [pc, #244]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80fe 	beq.w	800e770 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e574:	4b3a      	ldr	r3, [pc, #232]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	4798      	blx	r3
                }
            }
            break;
 800e57c:	e0f8      	b.n	800e770 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800e57e:	4b37      	ldr	r3, [pc, #220]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e580:	2202      	movs	r2, #2
 800e582:	719a      	strb	r2, [r3, #6]
            break;
 800e584:	e0f5      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800e586:	4b35      	ldr	r3, [pc, #212]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e588:	2201      	movs	r2, #1
 800e58a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e58c:	4b33      	ldr	r3, [pc, #204]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e58e:	2201      	movs	r2, #1
 800e590:	709a      	strb	r2, [r3, #2]
            break;
 800e592:	e0ee      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800e594:	4b31      	ldr	r3, [pc, #196]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e596:	2200      	movs	r2, #0
 800e598:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e59a:	4b30      	ldr	r3, [pc, #192]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e59c:	2201      	movs	r2, #1
 800e59e:	709a      	strb	r2, [r3, #2]
            break;
 800e5a0:	e0e7      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7b1a      	ldrb	r2, [r3, #12]
 800e5a6:	4b2d      	ldr	r3, [pc, #180]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e5a8:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800e5aa:	4b2c      	ldr	r3, [pc, #176]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	2204      	movs	r2, #4
 800e5b0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e5b8:	e012      	b.n	800e5e0 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689a      	ldr	r2, [r3, #8]
 800e5be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e5c2:	4413      	add	r3, r2
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	4b25      	ldr	r3, [pc, #148]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e5c8:	6899      	ldr	r1, [r3, #8]
 800e5ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e5ce:	440b      	add	r3, r1
 800e5d0:	3201      	adds	r2, #1
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e5d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e5da:	3301      	adds	r3, #1
 800e5dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e5e0:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e5e2:	795a      	ldrb	r2, [r3, #5]
 800e5e4:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e5e6:	799b      	ldrb	r3, [r3, #6]
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	bf28      	it	cs
 800e5ec:	4613      	movcs	r3, r2
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d3e0      	bcc.n	800e5ba <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800e5f8:	e0bb      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800e5fa:	2304      	movs	r3, #4
 800e5fc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800e600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e604:	4618      	mov	r0, r3
 800e606:	f004 fabb 	bl	8012b80 <LoRaMacMlmeRequest>
            }
            break;
 800e60a:	e0b2      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800e60c:	4816      	ldr	r0, [pc, #88]	; (800e668 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e60e:	f00e fc7d 	bl	801cf0c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e612:	4b12      	ldr	r3, [pc, #72]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e614:	2200      	movs	r2, #0
 800e616:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e618:	4b10      	ldr	r3, [pc, #64]	; (800e65c <LmhpComplianceOnMcpsIndication+0x294>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e61e:	2304      	movs	r3, #4
 800e620:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e622:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e62a:	f107 0308 	add.w	r3, r7, #8
 800e62e:	4618      	mov	r0, r3
 800e630:	f003 ff68 	bl	8012504 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e634:	4b0a      	ldr	r3, [pc, #40]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	785b      	ldrb	r3, [r3, #1]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f004 fcd6 	bl	8012fec <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e64a:	4b05      	ldr	r3, [pc, #20]	; (800e660 <LmhpComplianceOnMcpsIndication+0x298>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800e652:	4b06      	ldr	r3, [pc, #24]	; (800e66c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e656:	2002      	movs	r0, #2
 800e658:	4798      	blx	r3
            }
            break;
 800e65a:	e08a      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
 800e65c:	20003014 	.word	0x20003014
 800e660:	20003028 	.word	0x20003028
 800e664:	0800e789 	.word	0x0800e789
 800e668:	20002ffc 	.word	0x20002ffc
 800e66c:	200000c4 	.word	0x200000c4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7b1b      	ldrb	r3, [r3, #12]
 800e674:	2b03      	cmp	r3, #3
 800e676:	d113      	bne.n	800e6a0 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e678:	2305      	movs	r3, #5
 800e67a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	3301      	adds	r3, #1
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	021b      	lsls	r3, r3, #8
 800e688:	b21a      	sxth	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	3302      	adds	r3, #2
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	b21b      	sxth	r3, r3
 800e694:	4313      	orrs	r3, r2
 800e696:	b21b      	sxth	r3, r3
 800e698:	b29b      	uxth	r3, r3
 800e69a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800e69e:	e032      	b.n	800e706 <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7b1b      	ldrb	r3, [r3, #12]
 800e6a4:	2b07      	cmp	r3, #7
 800e6a6:	d12e      	bne.n	800e706 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800e6a8:	2306      	movs	r3, #6
 800e6aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	021b      	lsls	r3, r3, #8
 800e6b8:	b21a      	sxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	3302      	adds	r3, #2
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	b21b      	sxth	r3, r3
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	3303      	adds	r3, #3
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	041a      	lsls	r2, r3, #16
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	6892      	ldr	r2, [r2, #8]
 800e6e8:	3205      	adds	r2, #5
 800e6ea:	7812      	ldrb	r2, [r2, #0]
 800e6ec:	4313      	orrs	r3, r2
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	2364      	movs	r3, #100	; 0x64
 800e6f2:	fb02 f303 	mul.w	r3, r2, r3
 800e6f6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	3306      	adds	r3, #6
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	b25b      	sxtb	r3, r3
 800e702:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800e706:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e70a:	4618      	mov	r0, r3
 800e70c:	f004 fa38 	bl	8012b80 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800e710:	4b19      	ldr	r3, [pc, #100]	; (800e778 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800e712:	2201      	movs	r2, #1
 800e714:	709a      	strb	r2, [r3, #2]
            }
            break;
 800e716:	e02c      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800e718:	230a      	movs	r3, #10
 800e71a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800e71e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e722:	4618      	mov	r0, r3
 800e724:	f004 fa2c 	bl	8012b80 <LoRaMacMlmeRequest>
            }
            break;
 800e728:	e023      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800e72a:	2300      	movs	r3, #0
 800e72c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	3301      	adds	r3, #1
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e738:	f107 0308 	add.w	r3, r7, #8
 800e73c:	4618      	mov	r0, r3
 800e73e:	f003 fee1 	bl	8012504 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800e742:	e016      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e744:	230d      	movs	r3, #13
 800e746:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	785b      	ldrb	r3, [r3, #1]
 800e750:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800e754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e758:	4618      	mov	r0, r3
 800e75a:	f004 fa11 	bl	8012b80 <LoRaMacMlmeRequest>
            }
            break;
 800e75e:	e008      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e760:	bf00      	nop
 800e762:	e006      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e764:	bf00      	nop
 800e766:	e004      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e768:	bf00      	nop
 800e76a:	e002      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800e76c:	bf00      	nop
 800e76e:	e000      	b.n	800e772 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800e770:	bf00      	nop
        }
    }
}
 800e772:	3780      	adds	r7, #128	; 0x80
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20003014 	.word	0x20003014

0800e77c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e780:	bf00      	nop
 800e782:	46bd      	mov	sp, r7
 800e784:	bc80      	pop	{r7}
 800e786:	4770      	bx	lr

0800e788 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e790:	f7ff fdaa 	bl	800e2e8 <LmhpComplianceTxProcess>
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e79c:	b590      	push	{r4, r7, lr}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e7a2:	f00e fccd 	bl	801d140 <UTIL_TIMER_GetCurrentTime>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	4a16      	ldr	r2, [pc, #88]	; (800e804 <OnRadioTxDone+0x68>)
 800e7aa:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e7ac:	4c16      	ldr	r4, [pc, #88]	; (800e808 <OnRadioTxDone+0x6c>)
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f00e fa39 	bl	801cc28 <SysTimeGet>
 800e7b6:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e7ba:	463a      	mov	r2, r7
 800e7bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7c0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e7c4:	4a11      	ldr	r2, [pc, #68]	; (800e80c <OnRadioTxDone+0x70>)
 800e7c6:	7813      	ldrb	r3, [r2, #0]
 800e7c8:	f043 0310 	orr.w	r3, r3, #16
 800e7cc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e7ce:	4b0e      	ldr	r3, [pc, #56]	; (800e808 <OnRadioTxDone+0x6c>)
 800e7d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00a      	beq.n	800e7ee <OnRadioTxDone+0x52>
 800e7d8:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <OnRadioTxDone+0x6c>)
 800e7da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d004      	beq.n	800e7ee <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e7e4:	4b08      	ldr	r3, [pc, #32]	; (800e808 <OnRadioTxDone+0x6c>)
 800e7e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e7ee:	4b08      	ldr	r3, [pc, #32]	; (800e810 <OnRadioTxDone+0x74>)
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	2002      	movs	r0, #2
 800e7f6:	f00d fca9 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800e7fa:	bf00      	nop
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd90      	pop	{r4, r7, pc}
 800e802:	bf00      	nop
 800e804:	20003b48 	.word	0x20003b48
 800e808:	2000302c 	.word	0x2000302c
 800e80c:	20003b44 	.word	0x20003b44
 800e810:	0801df2c 	.word	0x0801df2c

0800e814 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	4608      	mov	r0, r1
 800e81e:	4611      	mov	r1, r2
 800e820:	461a      	mov	r2, r3
 800e822:	4603      	mov	r3, r0
 800e824:	817b      	strh	r3, [r7, #10]
 800e826:	460b      	mov	r3, r1
 800e828:	813b      	strh	r3, [r7, #8]
 800e82a:	4613      	mov	r3, r2
 800e82c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e82e:	f00e fc87 	bl	801d140 <UTIL_TIMER_GetCurrentTime>
 800e832:	4603      	mov	r3, r0
 800e834:	4a16      	ldr	r2, [pc, #88]	; (800e890 <OnRadioRxDone+0x7c>)
 800e836:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e838:	4a15      	ldr	r2, [pc, #84]	; (800e890 <OnRadioRxDone+0x7c>)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e83e:	4a14      	ldr	r2, [pc, #80]	; (800e890 <OnRadioRxDone+0x7c>)
 800e840:	897b      	ldrh	r3, [r7, #10]
 800e842:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e844:	4a12      	ldr	r2, [pc, #72]	; (800e890 <OnRadioRxDone+0x7c>)
 800e846:	893b      	ldrh	r3, [r7, #8]
 800e848:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e84a:	4a11      	ldr	r2, [pc, #68]	; (800e890 <OnRadioRxDone+0x7c>)
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e850:	4a10      	ldr	r2, [pc, #64]	; (800e894 <OnRadioRxDone+0x80>)
 800e852:	7813      	ldrb	r3, [r2, #0]
 800e854:	f043 0308 	orr.w	r3, r3, #8
 800e858:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e85a:	4b0f      	ldr	r3, [pc, #60]	; (800e898 <OnRadioRxDone+0x84>)
 800e85c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00a      	beq.n	800e87a <OnRadioRxDone+0x66>
 800e864:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <OnRadioRxDone+0x84>)
 800e866:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d004      	beq.n	800e87a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e870:	4b09      	ldr	r3, [pc, #36]	; (800e898 <OnRadioRxDone+0x84>)
 800e872:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e87a:	4b08      	ldr	r3, [pc, #32]	; (800e89c <OnRadioRxDone+0x88>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	2100      	movs	r1, #0
 800e880:	2002      	movs	r0, #2
 800e882:	f00d fc63 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800e886:	bf00      	nop
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20003b4c 	.word	0x20003b4c
 800e894:	20003b44 	.word	0x20003b44
 800e898:	2000302c 	.word	0x2000302c
 800e89c:	0801df3c 	.word	0x0801df3c

0800e8a0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e8a4:	4a0e      	ldr	r2, [pc, #56]	; (800e8e0 <OnRadioTxTimeout+0x40>)
 800e8a6:	7813      	ldrb	r3, [r2, #0]
 800e8a8:	f043 0304 	orr.w	r3, r3, #4
 800e8ac:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e8ae:	4b0d      	ldr	r3, [pc, #52]	; (800e8e4 <OnRadioTxTimeout+0x44>)
 800e8b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00a      	beq.n	800e8ce <OnRadioTxTimeout+0x2e>
 800e8b8:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <OnRadioTxTimeout+0x44>)
 800e8ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e8c4:	4b07      	ldr	r3, [pc, #28]	; (800e8e4 <OnRadioTxTimeout+0x44>)
 800e8c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e8ce:	4b06      	ldr	r3, [pc, #24]	; (800e8e8 <OnRadioTxTimeout+0x48>)
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	2002      	movs	r0, #2
 800e8d6:	f00d fc39 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800e8da:	bf00      	nop
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20003b44 	.word	0x20003b44
 800e8e4:	2000302c 	.word	0x2000302c
 800e8e8:	0801df4c 	.word	0x0801df4c

0800e8ec <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e8f0:	4a0b      	ldr	r2, [pc, #44]	; (800e920 <OnRadioRxError+0x34>)
 800e8f2:	7813      	ldrb	r3, [r2, #0]
 800e8f4:	f043 0302 	orr.w	r3, r3, #2
 800e8f8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <OnRadioRxError+0x38>)
 800e8fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00a      	beq.n	800e91a <OnRadioRxError+0x2e>
 800e904:	4b07      	ldr	r3, [pc, #28]	; (800e924 <OnRadioRxError+0x38>)
 800e906:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d004      	beq.n	800e91a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e910:	4b04      	ldr	r3, [pc, #16]	; (800e924 <OnRadioRxError+0x38>)
 800e912:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	4798      	blx	r3
    }
}
 800e91a:	bf00      	nop
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20003b44 	.word	0x20003b44
 800e924:	2000302c 	.word	0x2000302c

0800e928 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e92c:	4a0e      	ldr	r2, [pc, #56]	; (800e968 <OnRadioRxTimeout+0x40>)
 800e92e:	7813      	ldrb	r3, [r2, #0]
 800e930:	f043 0301 	orr.w	r3, r3, #1
 800e934:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e936:	4b0d      	ldr	r3, [pc, #52]	; (800e96c <OnRadioRxTimeout+0x44>)
 800e938:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00a      	beq.n	800e956 <OnRadioRxTimeout+0x2e>
 800e940:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <OnRadioRxTimeout+0x44>)
 800e942:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <OnRadioRxTimeout+0x44>)
 800e94e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e956:	4b06      	ldr	r3, [pc, #24]	; (800e970 <OnRadioRxTimeout+0x48>)
 800e958:	2201      	movs	r2, #1
 800e95a:	2100      	movs	r1, #0
 800e95c:	2002      	movs	r0, #2
 800e95e:	f00d fbf5 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 800e962:	bf00      	nop
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20003b44 	.word	0x20003b44
 800e96c:	2000302c 	.word	0x2000302c
 800e970:	0801df5c 	.word	0x0801df5c

0800e974 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e974:	b480      	push	{r7}
 800e976:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e978:	4b08      	ldr	r3, [pc, #32]	; (800e99c <UpdateRxSlotIdleState+0x28>)
 800e97a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d004      	beq.n	800e98c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <UpdateRxSlotIdleState+0x2c>)
 800e984:	2206      	movs	r2, #6
 800e986:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e98a:	e003      	b.n	800e994 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e98c:	4b04      	ldr	r3, [pc, #16]	; (800e9a0 <UpdateRxSlotIdleState+0x2c>)
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	bc80      	pop	{r7}
 800e99a:	4770      	bx	lr
 800e99c:	20003534 	.word	0x20003534
 800e9a0:	2000302c 	.word	0x2000302c

0800e9a4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08e      	sub	sp, #56	; 0x38
 800e9a8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e9aa:	4b44      	ldr	r3, [pc, #272]	; (800eabc <ProcessRadioTxDone+0x118>)
 800e9ac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d002      	beq.n	800e9ba <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e9b4:	4b42      	ldr	r3, [pc, #264]	; (800eac0 <ProcessRadioTxDone+0x11c>)
 800e9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b8:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e9ba:	4b42      	ldr	r3, [pc, #264]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800e9bc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4841      	ldr	r0, [pc, #260]	; (800eac8 <ProcessRadioTxDone+0x124>)
 800e9c4:	f00e fb12 	bl	801cfec <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e9c8:	483f      	ldr	r0, [pc, #252]	; (800eac8 <ProcessRadioTxDone+0x124>)
 800e9ca:	f00e fa31 	bl	801ce30 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e9ce:	4b3d      	ldr	r3, [pc, #244]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800e9d0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	483d      	ldr	r0, [pc, #244]	; (800eacc <ProcessRadioTxDone+0x128>)
 800e9d8:	f00e fb08 	bl	801cfec <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e9dc:	483b      	ldr	r0, [pc, #236]	; (800eacc <ProcessRadioTxDone+0x128>)
 800e9de:	f00e fa27 	bl	801ce30 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e9e2:	4b36      	ldr	r3, [pc, #216]	; (800eabc <ProcessRadioTxDone+0x118>)
 800e9e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d004      	beq.n	800e9f6 <ProcessRadioTxDone+0x52>
 800e9ec:	4b35      	ldr	r3, [pc, #212]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800e9ee:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d019      	beq.n	800ea2a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e9f6:	2316      	movs	r3, #22
 800e9f8:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9fc:	4b2f      	ldr	r3, [pc, #188]	; (800eabc <ProcessRadioTxDone+0x118>)
 800e9fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea02:	f107 0220 	add.w	r2, r7, #32
 800ea06:	4611      	mov	r1, r2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f006 fb8c 	bl	8015126 <RegionGetPhyParam>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ea12:	4b2c      	ldr	r3, [pc, #176]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800ea14:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	482c      	ldr	r0, [pc, #176]	; (800ead0 <ProcessRadioTxDone+0x12c>)
 800ea20:	f00e fae4 	bl	801cfec <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800ea24:	482a      	ldr	r0, [pc, #168]	; (800ead0 <ProcessRadioTxDone+0x12c>)
 800ea26:	f00e fa03 	bl	801ce30 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ea2a:	4b2a      	ldr	r3, [pc, #168]	; (800ead4 <ProcessRadioTxDone+0x130>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a23      	ldr	r2, [pc, #140]	; (800eabc <ProcessRadioTxDone+0x118>)
 800ea30:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ea32:	4b24      	ldr	r3, [pc, #144]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800ea34:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800ea38:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ea3a:	4b26      	ldr	r3, [pc, #152]	; (800ead4 <ProcessRadioTxDone+0x130>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ea40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea44:	4618      	mov	r0, r3
 800ea46:	f00e f927 	bl	801cc98 <SysTimeGetMcuTime>
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	4b1b      	ldr	r3, [pc, #108]	; (800eabc <ProcessRadioTxDone+0x118>)
 800ea4e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800ea52:	9200      	str	r2, [sp, #0]
 800ea54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ea58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ea5c:	ca06      	ldmia	r2, {r1, r2}
 800ea5e:	f00e f87c 	bl	801cb5a <SysTimeSub>
 800ea62:	f107 0314 	add.w	r3, r7, #20
 800ea66:	463a      	mov	r2, r7
 800ea68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea6c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ea70:	4b14      	ldr	r3, [pc, #80]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800ea72:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ea76:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ea7c:	4b0f      	ldr	r3, [pc, #60]	; (800eabc <ProcessRadioTxDone+0x118>)
 800ea7e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ea86:	2300      	movs	r3, #0
 800ea88:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ea8a:	4b0c      	ldr	r3, [pc, #48]	; (800eabc <ProcessRadioTxDone+0x118>)
 800ea8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea90:	f107 0208 	add.w	r2, r7, #8
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f006 fb66 	bl	8015168 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800ea9c:	4b09      	ldr	r3, [pc, #36]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800ea9e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800eaa2:	f083 0301 	eor.w	r3, r3, #1
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eaac:	4b05      	ldr	r3, [pc, #20]	; (800eac4 <ProcessRadioTxDone+0x120>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800eab4:	bf00      	nop
 800eab6:	3730      	adds	r7, #48	; 0x30
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	20003534 	.word	0x20003534
 800eac0:	0801e6b8 	.word	0x0801e6b8
 800eac4:	2000302c 	.word	0x2000302c
 800eac8:	200033ac 	.word	0x200033ac
 800eacc:	200033c4 	.word	0x200033c4
 800ead0:	20003424 	.word	0x20003424
 800ead4:	20003b48 	.word	0x20003b48

0800ead8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800eadc:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <PrepareRxDoneAbort+0x48>)
 800eade:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae6:	4a0e      	ldr	r2, [pc, #56]	; (800eb20 <PrepareRxDoneAbort+0x48>)
 800eae8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800eaec:	4b0c      	ldr	r3, [pc, #48]	; (800eb20 <PrepareRxDoneAbort+0x48>)
 800eaee:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	f001 f8f8 	bl	800fcec <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800eafc:	4a08      	ldr	r2, [pc, #32]	; (800eb20 <PrepareRxDoneAbort+0x48>)
 800eafe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800eb02:	f043 0302 	orr.w	r3, r3, #2
 800eb06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800eb0a:	4a05      	ldr	r2, [pc, #20]	; (800eb20 <PrepareRxDoneAbort+0x48>)
 800eb0c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800eb10:	f043 0320 	orr.w	r3, r3, #32
 800eb14:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800eb18:	f7ff ff2c 	bl	800e974 <UpdateRxSlotIdleState>
}
 800eb1c:	bf00      	nop
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	2000302c 	.word	0x2000302c

0800eb24 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800eb24:	b5b0      	push	{r4, r5, r7, lr}
 800eb26:	b0a6      	sub	sp, #152	; 0x98
 800eb28:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800eb2a:	2313      	movs	r3, #19
 800eb2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800eb30:	4bb9      	ldr	r3, [pc, #740]	; (800ee18 <ProcessRadioRxDone+0x2f4>)
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800eb36:	4bb8      	ldr	r3, [pc, #736]	; (800ee18 <ProcessRadioRxDone+0x2f4>)
 800eb38:	891b      	ldrh	r3, [r3, #8]
 800eb3a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800eb3e:	4bb6      	ldr	r3, [pc, #728]	; (800ee18 <ProcessRadioRxDone+0x2f4>)
 800eb40:	895b      	ldrh	r3, [r3, #10]
 800eb42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800eb46:	4bb4      	ldr	r3, [pc, #720]	; (800ee18 <ProcessRadioRxDone+0x2f4>)
 800eb48:	7b1b      	ldrb	r3, [r3, #12]
 800eb4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800eb58:	4bb0      	ldr	r3, [pc, #704]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800eb5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800eb5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800eb6e:	4bac      	ldr	r3, [pc, #688]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800eb76:	4aaa      	ldr	r2, [pc, #680]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800eb7c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800eb80:	4aa7      	ldr	r2, [pc, #668]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eb86:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800eb8a:	4ba5      	ldr	r3, [pc, #660]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb8c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800eb90:	4ba3      	ldr	r3, [pc, #652]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb92:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800eb96:	4ba2      	ldr	r3, [pc, #648]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800eb9e:	4ba0      	ldr	r3, [pc, #640]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800eba6:	4b9e      	ldr	r3, [pc, #632]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ebae:	4b9c      	ldr	r3, [pc, #624]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ebb6:	4b9a      	ldr	r3, [pc, #616]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ebbe:	4b98      	ldr	r3, [pc, #608]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ebc6:	4b96      	ldr	r3, [pc, #600]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ebce:	4b94      	ldr	r3, [pc, #592]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ebd6:	4b92      	ldr	r3, [pc, #584]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800ebde:	4b90      	ldr	r3, [pc, #576]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ebe6:	4b8e      	ldr	r3, [pc, #568]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800ebee:	4b8d      	ldr	r3, [pc, #564]	; (800ee24 <ProcessRadioRxDone+0x300>)
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ebf4:	488c      	ldr	r0, [pc, #560]	; (800ee28 <ProcessRadioRxDone+0x304>)
 800ebf6:	f00e f989 	bl	801cf0c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ebfa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ec02:	f004 fb28 	bl	8013256 <LoRaMacClassBRxBeacon>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ec0c:	4a84      	ldr	r2, [pc, #528]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ec0e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ec12:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ec16:	4a82      	ldr	r2, [pc, #520]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ec18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ec1c:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800ec20:	e3bf      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec22:	4b7e      	ldr	r3, [pc, #504]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ec24:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d11e      	bne.n	800ec6a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec2c:	f004 fb26 	bl	801327c <LoRaMacClassBIsPingExpected>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00a      	beq.n	800ec4c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec36:	2000      	movs	r0, #0
 800ec38:	f004 fad7 	bl	80131ea <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	f004 faf8 	bl	8013232 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ec42:	4b77      	ldr	r3, [pc, #476]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ec44:	2204      	movs	r2, #4
 800ec46:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800ec4a:	e00e      	b.n	800ec6a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec4c:	f004 fb1d 	bl	801328a <LoRaMacClassBIsMulticastExpected>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d009      	beq.n	800ec6a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec56:	2000      	movs	r0, #0
 800ec58:	f004 fad1 	bl	80131fe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	f004 faf1 	bl	8013244 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ec62:	4b6f      	ldr	r3, [pc, #444]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ec64:	2205      	movs	r2, #5
 800ec66:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ec6a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800ec6e:	1c5a      	adds	r2, r3, #1
 800ec70:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800ec74:	461a      	mov	r2, r3
 800ec76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec78:	4413      	add	r3, r2
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800ec80:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ec84:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	2b06      	cmp	r3, #6
 800ec8e:	f200 8362 	bhi.w	800f356 <ProcessRadioRxDone+0x832>
 800ec92:	a201      	add	r2, pc, #4	; (adr r2, 800ec98 <ProcessRadioRxDone+0x174>)
 800ec94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec98:	0800ecb5 	.word	0x0800ecb5
 800ec9c:	0800f357 	.word	0x0800f357
 800eca0:	0800ee35 	.word	0x0800ee35
 800eca4:	0800f357 	.word	0x0800f357
 800eca8:	0800ee2d 	.word	0x0800ee2d
 800ecac:	0800f357 	.word	0x0800f357
 800ecb0:	0800f2fd 	.word	0x0800f2fd
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ecb4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ecb8:	2b10      	cmp	r3, #16
 800ecba:	d806      	bhi.n	800ecca <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecbc:	4b58      	ldr	r3, [pc, #352]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ecc4:	f7ff ff08 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ecc8:	e36b      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800ecca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eccc:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800ecce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ecd6:	4b51      	ldr	r3, [pc, #324]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ecd8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d006      	beq.n	800ecee <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ece0:	4b4f      	ldr	r3, [pc, #316]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ece8:	f7ff fef6 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ecec:	e359      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ecee:	f7fe fbcf 	bl	800d490 <SecureElementGetJoinEui>
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	f107 0308 	add.w	r3, r7, #8
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	20ff      	movs	r0, #255	; 0xff
 800ecfc:	f005 fc92 	bl	8014624 <LoRaMacCryptoHandleJoinAccept>
 800ed00:	4603      	mov	r3, r0
 800ed02:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ed06:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d172      	bne.n	800edf4 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ed0e:	7c7b      	ldrb	r3, [r7, #17]
 800ed10:	461a      	mov	r2, r3
 800ed12:	4b42      	ldr	r3, [pc, #264]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ed18:	4b40      	ldr	r3, [pc, #256]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed1a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ed1e:	7cbb      	ldrb	r3, [r7, #18]
 800ed20:	021b      	lsls	r3, r3, #8
 800ed22:	4313      	orrs	r3, r2
 800ed24:	4a3d      	ldr	r2, [pc, #244]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed26:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ed2a:	4b3c      	ldr	r3, [pc, #240]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ed30:	7cfb      	ldrb	r3, [r7, #19]
 800ed32:	041b      	lsls	r3, r3, #16
 800ed34:	4313      	orrs	r3, r2
 800ed36:	4a39      	ldr	r2, [pc, #228]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed38:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	4a37      	ldr	r2, [pc, #220]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed40:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ed44:	7e3b      	ldrb	r3, [r7, #24]
 800ed46:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4b33      	ldr	r3, [pc, #204]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ed54:	7e3b      	ldrb	r3, [r7, #24]
 800ed56:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4b2f      	ldr	r3, [pc, #188]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ed64:	7e3b      	ldrb	r3, [r7, #24]
 800ed66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4b2b      	ldr	r3, [pc, #172]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ed74:	7e7b      	ldrb	r3, [r7, #25]
 800ed76:	461a      	mov	r2, r3
 800ed78:	4b28      	ldr	r3, [pc, #160]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed7a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ed7c:	4b27      	ldr	r3, [pc, #156]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800ed84:	4b25      	ldr	r3, [pc, #148]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed86:	2201      	movs	r2, #1
 800ed88:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ed8a:	4b24      	ldr	r3, [pc, #144]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed92:	fb02 f303 	mul.w	r3, r2, r3
 800ed96:	4a21      	ldr	r2, [pc, #132]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed98:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ed9a:	4b20      	ldr	r3, [pc, #128]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800ed9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed9e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800eda2:	4a1e      	ldr	r2, [pc, #120]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800eda4:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800eda6:	4b1d      	ldr	r3, [pc, #116]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800edae:	f107 0308 	add.w	r3, r7, #8
 800edb2:	3312      	adds	r3, #18
 800edb4:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800edb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	3b11      	subs	r3, #17
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800edc4:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800edc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edca:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800edce:	4611      	mov	r1, r2
 800edd0:	4618      	mov	r0, r3
 800edd2:	f006 fa19 	bl	8015208 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800edd6:	4b11      	ldr	r3, [pc, #68]	; (800ee1c <ProcessRadioRxDone+0x2f8>)
 800edd8:	2202      	movs	r2, #2
 800edda:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800edde:	2001      	movs	r0, #1
 800ede0:	f004 ff18 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00e      	beq.n	800ee08 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800edea:	2101      	movs	r1, #1
 800edec:	2000      	movs	r0, #0
 800edee:	f004 fe85 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
 800edf2:	e009      	b.n	800ee08 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800edf4:	2001      	movs	r0, #1
 800edf6:	f004 ff0d 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d003      	beq.n	800ee08 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ee00:	2101      	movs	r1, #1
 800ee02:	2007      	movs	r0, #7
 800ee04:	f004 fe7a 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ee08:	4a05      	ldr	r2, [pc, #20]	; (800ee20 <ProcessRadioRxDone+0x2fc>)
 800ee0a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ee0e:	f043 0308 	orr.w	r3, r3, #8
 800ee12:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800ee16:	e2a5      	b.n	800f364 <ProcessRadioRxDone+0x840>
 800ee18:	20003b4c 	.word	0x20003b4c
 800ee1c:	20003534 	.word	0x20003534
 800ee20:	2000302c 	.word	0x2000302c
 800ee24:	0801e6b8 	.word	0x0801e6b8
 800ee28:	200033c4 	.word	0x200033c4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ee2c:	4bae      	ldr	r3, [pc, #696]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee34:	4bad      	ldr	r3, [pc, #692]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ee36:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800ee3a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ee3e:	4baa      	ldr	r3, [pc, #680]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800ee40:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800ee44:	b25b      	sxtb	r3, r3
 800ee46:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ee4a:	230d      	movs	r3, #13
 800ee4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ee50:	4ba6      	ldr	r3, [pc, #664]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ee52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d002      	beq.n	800ee60 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ee5a:	230e      	movs	r3, #14
 800ee5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee60:	4ba2      	ldr	r3, [pc, #648]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ee62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f006 f95a 	bl	8015126 <RegionGetPhyParam>
 800ee72:	4603      	mov	r3, r0
 800ee74:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ee76:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee7a:	3b0d      	subs	r3, #13
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	b21b      	sxth	r3, r3
 800ee80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee84:	b21a      	sxth	r2, r3
 800ee86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee88:	b21b      	sxth	r3, r3
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	dc03      	bgt.n	800ee96 <ProcessRadioRxDone+0x372>
 800ee8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee92:	2b0b      	cmp	r3, #11
 800ee94:	d806      	bhi.n	800eea4 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee96:	4b94      	ldr	r3, [pc, #592]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee9e:	f7ff fe1b 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800eea2:	e27e      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800eea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eea6:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800eea8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800eeb2:	4b8f      	ldr	r3, [pc, #572]	; (800f0f0 <ProcessRadioRxDone+0x5cc>)
 800eeb4:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800eeb6:	23ff      	movs	r3, #255	; 0xff
 800eeb8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800eebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eec0:	4618      	mov	r0, r3
 800eec2:	f005 feae 	bl	8014c22 <LoRaMacParserData>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d006      	beq.n	800eeda <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eecc:	4b86      	ldr	r3, [pc, #536]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800eed4:	f7ff fe00 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800eed8:	e263      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	4a82      	ldr	r2, [pc, #520]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800eede:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800eee2:	1cba      	adds	r2, r7, #2
 800eee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f002 fcde 	bl	80118ac <DetermineFrameType>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d006      	beq.n	800ef04 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eef6:	4b7c      	ldr	r3, [pc, #496]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800eefe:	f7ff fdeb 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ef02:	e24e      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ef14:	e049      	b.n	800efaa <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ef16:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef1a:	4a74      	ldr	r2, [pc, #464]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef1c:	212c      	movs	r1, #44	; 0x2c
 800ef1e:	fb01 f303 	mul.w	r3, r1, r3
 800ef22:	4413      	add	r3, r2
 800ef24:	33d4      	adds	r3, #212	; 0xd4
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d138      	bne.n	800efa0 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ef2e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef32:	4a6e      	ldr	r2, [pc, #440]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef34:	212c      	movs	r1, #44	; 0x2c
 800ef36:	fb01 f303 	mul.w	r3, r1, r3
 800ef3a:	4413      	add	r3, r2
 800ef3c:	33d2      	adds	r3, #210	; 0xd2
 800ef3e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d02d      	beq.n	800efa0 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800ef44:	2301      	movs	r3, #1
 800ef46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ef4a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef4e:	4a67      	ldr	r2, [pc, #412]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef50:	212c      	movs	r1, #44	; 0x2c
 800ef52:	fb01 f303 	mul.w	r3, r1, r3
 800ef56:	4413      	add	r3, r2
 800ef58:	33d3      	adds	r3, #211	; 0xd3
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ef60:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef64:	4a61      	ldr	r2, [pc, #388]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef66:	212c      	movs	r1, #44	; 0x2c
 800ef68:	fb01 f303 	mul.w	r3, r1, r3
 800ef6c:	4413      	add	r3, r2
 800ef6e:	33f0      	adds	r3, #240	; 0xf0
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ef76:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef7a:	4a5c      	ldr	r2, [pc, #368]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef7c:	212c      	movs	r1, #44	; 0x2c
 800ef7e:	fb01 f303 	mul.w	r3, r1, r3
 800ef82:	4413      	add	r3, r2
 800ef84:	33d4      	adds	r3, #212	; 0xd4
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ef8c:	4b57      	ldr	r3, [pc, #348]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800ef8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	d10e      	bne.n	800efb4 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ef96:	4b54      	ldr	r3, [pc, #336]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800ef98:	2203      	movs	r2, #3
 800ef9a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800ef9e:	e009      	b.n	800efb4 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800efa0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800efa4:	3301      	adds	r3, #1
 800efa6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800efaa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0b1      	beq.n	800ef16 <ProcessRadioRxDone+0x3f2>
 800efb2:	e000      	b.n	800efb6 <ProcessRadioRxDone+0x492>
                    break;
 800efb4:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800efb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d117      	bne.n	800efee <ProcessRadioRxDone+0x4ca>
 800efbe:	78bb      	ldrb	r3, [r7, #2]
 800efc0:	2b03      	cmp	r3, #3
 800efc2:	d10d      	bne.n	800efe0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800efc4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800efc8:	f003 0320 	and.w	r3, r3, #32
 800efcc:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d106      	bne.n	800efe0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800efd2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800efd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efda:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d006      	beq.n	800efee <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efe0:	4b41      	ldr	r3, [pc, #260]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800efe2:	2201      	movs	r2, #1
 800efe4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800efe8:	f7ff fd76 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800efec:	e1d9      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800efee:	2315      	movs	r3, #21
 800eff0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eff4:	4b3d      	ldr	r3, [pc, #244]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800eff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800effa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f006 f890 	bl	8015126 <RegionGetPhyParam>
 800f006:	4603      	mov	r3, r0
 800f008:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f00a:	78b9      	ldrb	r1, [r7, #2]
 800f00c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4d36      	ldr	r5, [pc, #216]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800f012:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f016:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f01a:	1d3a      	adds	r2, r7, #4
 800f01c:	9202      	str	r2, [sp, #8]
 800f01e:	1cfa      	adds	r2, r7, #3
 800f020:	9201      	str	r2, [sp, #4]
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800f028:	4622      	mov	r2, r4
 800f02a:	f000 fe95 	bl	800fd58 <GetFCntDown>
 800f02e:	4603      	mov	r3, r0
 800f030:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f034:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d031      	beq.n	800f0a0 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f03c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f040:	2b07      	cmp	r3, #7
 800f042:	d119      	bne.n	800f078 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f044:	4b28      	ldr	r3, [pc, #160]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f046:	2208      	movs	r2, #8
 800f048:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800f04c:	4b27      	ldr	r3, [pc, #156]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800f04e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f052:	2b00      	cmp	r3, #0
 800f054:	d11d      	bne.n	800f092 <ProcessRadioRxDone+0x56e>
 800f056:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f05a:	f023 031f 	bic.w	r3, r3, #31
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2ba0      	cmp	r3, #160	; 0xa0
 800f062:	d116      	bne.n	800f092 <ProcessRadioRxDone+0x56e>
 800f064:	4b21      	ldr	r3, [pc, #132]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800f066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d111      	bne.n	800f092 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800f06e:	4b1f      	ldr	r3, [pc, #124]	; (800f0ec <ProcessRadioRxDone+0x5c8>)
 800f070:	2201      	movs	r2, #1
 800f072:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f076:	e00c      	b.n	800f092 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f078:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f07c:	2b08      	cmp	r3, #8
 800f07e:	d104      	bne.n	800f08a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f080:	4b19      	ldr	r3, [pc, #100]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f082:	220a      	movs	r2, #10
 800f084:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f088:	e003      	b.n	800f092 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f08a:	4b17      	ldr	r3, [pc, #92]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a14      	ldr	r2, [pc, #80]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f096:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800f09a:	f7ff fd1d 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800f09e:	e180      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f0a0:	78fa      	ldrb	r2, [r7, #3]
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f0a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f0b4:	f005 fc02 	bl	80148bc <LoRaMacCryptoUnsecureMessage>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f0be:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d016      	beq.n	800f0f4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f0c6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d104      	bne.n	800f0d8 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f0ce:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f0d0:	220b      	movs	r2, #11
 800f0d2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f0d6:	e003      	b.n	800f0e0 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f0d8:	4b03      	ldr	r3, [pc, #12]	; (800f0e8 <ProcessRadioRxDone+0x5c4>)
 800f0da:	220c      	movs	r2, #12
 800f0dc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800f0e0:	f7ff fcfa 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800f0e4:	e15d      	b.n	800f3a2 <ProcessRadioRxDone+0x87e>
 800f0e6:	bf00      	nop
 800f0e8:	2000302c 	.word	0x2000302c
 800f0ec:	20003534 	.word	0x20003534
 800f0f0:	20003264 	.word	0x20003264
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f0f4:	4bac      	ldr	r3, [pc, #688]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800f0fc:	4aaa      	ldr	r2, [pc, #680]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f0fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f102:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f106:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f10a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	461a      	mov	r2, r3
 800f112:	4ba5      	ldr	r3, [pc, #660]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f114:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800f118:	4ba3      	ldr	r3, [pc, #652]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800f120:	4ba1      	ldr	r3, [pc, #644]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4a9f      	ldr	r2, [pc, #636]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f12c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f130:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f134:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	bf14      	ite	ne
 800f13e:	2301      	movne	r3, #1
 800f140:	2300      	moveq	r3, #0
 800f142:	b2da      	uxtb	r2, r3
 800f144:	4b98      	ldr	r3, [pc, #608]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f146:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f14a:	4b97      	ldr	r3, [pc, #604]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f152:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f156:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	bf14      	ite	ne
 800f160:	2301      	movne	r3, #1
 800f162:	2300      	moveq	r3, #0
 800f164:	b2da      	uxtb	r2, r3
 800f166:	4b90      	ldr	r3, [pc, #576]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f168:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f16c:	4b8e      	ldr	r3, [pc, #568]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f16e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f172:	2b00      	cmp	r3, #0
 800f174:	d004      	beq.n	800f180 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f176:	4b8c      	ldr	r3, [pc, #560]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f178:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d102      	bne.n	800f186 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f180:	4b8a      	ldr	r3, [pc, #552]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f182:	2200      	movs	r2, #0
 800f184:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f186:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d104      	bne.n	800f198 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f18e:	4b86      	ldr	r3, [pc, #536]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f190:	2202      	movs	r2, #2
 800f192:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f196:	e01f      	b.n	800f1d8 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f198:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f19c:	f023 031f 	bic.w	r3, r3, #31
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2ba0      	cmp	r3, #160	; 0xa0
 800f1a4:	d110      	bne.n	800f1c8 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f1a6:	4b81      	ldr	r3, [pc, #516]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f1ae:	4b7f      	ldr	r3, [pc, #508]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f1b0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d102      	bne.n	800f1be <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1ba:	4a7c      	ldr	r2, [pc, #496]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f1bc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f1be:	4b7a      	ldr	r3, [pc, #488]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f1c6:	e007      	b.n	800f1d8 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f1c8:	4b78      	ldr	r3, [pc, #480]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f1d0:	4b75      	ldr	r3, [pc, #468]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f1d8:	4b73      	ldr	r3, [pc, #460]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f1da:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f1de:	4a72      	ldr	r2, [pc, #456]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f1e0:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800f1e4:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 ff0d 	bl	8011008 <RemoveMacCommands>

            switch( fType )
 800f1ee:	78bb      	ldrb	r3, [r7, #2]
 800f1f0:	2b03      	cmp	r3, #3
 800f1f2:	d874      	bhi.n	800f2de <ProcessRadioRxDone+0x7ba>
 800f1f4:	a201      	add	r2, pc, #4	; (adr r2, 800f1fc <ProcessRadioRxDone+0x6d8>)
 800f1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fa:	bf00      	nop
 800f1fc:	0800f20d 	.word	0x0800f20d
 800f200:	0800f25d 	.word	0x0800f25d
 800f204:	0800f293 	.word	0x0800f293
 800f208:	0800f2b9 	.word	0x0800f2b9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f20c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f210:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f214:	b2db      	uxtb	r3, r3
 800f216:	461c      	mov	r4, r3
 800f218:	4b63      	ldr	r3, [pc, #396]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f21a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f21e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f222:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f226:	f102 0010 	add.w	r0, r2, #16
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	460b      	mov	r3, r1
 800f22e:	4622      	mov	r2, r4
 800f230:	2100      	movs	r1, #0
 800f232:	f000 ff03 	bl	801003c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f236:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f23a:	4b5b      	ldr	r3, [pc, #364]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f23c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f242:	4a59      	ldr	r2, [pc, #356]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f244:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f248:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f24c:	4b56      	ldr	r3, [pc, #344]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f24e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f252:	4b55      	ldr	r3, [pc, #340]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f254:	2201      	movs	r2, #1
 800f256:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f25a:	e047      	b.n	800f2ec <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f25c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f260:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f264:	b2db      	uxtb	r3, r3
 800f266:	461c      	mov	r4, r3
 800f268:	4b4f      	ldr	r3, [pc, #316]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f26a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f26e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f272:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f276:	f102 0010 	add.w	r0, r2, #16
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	460b      	mov	r3, r1
 800f27e:	4622      	mov	r2, r4
 800f280:	2100      	movs	r1, #0
 800f282:	f000 fedb 	bl	801003c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f286:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f28a:	4b47      	ldr	r3, [pc, #284]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f28c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f290:	e02c      	b.n	800f2ec <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f292:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f294:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f298:	4b43      	ldr	r3, [pc, #268]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f29a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f29e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	f000 fec8 	bl	801003c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f2ac:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f2b0:	4b3d      	ldr	r3, [pc, #244]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2b2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f2b6:	e019      	b.n	800f2ec <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f2b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f2bc:	4b3a      	ldr	r3, [pc, #232]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2be:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2c4:	4a38      	ldr	r2, [pc, #224]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2c6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f2ca:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f2ce:	4b36      	ldr	r3, [pc, #216]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2d0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f2d4:	4b34      	ldr	r3, [pc, #208]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f2dc:	e006      	b.n	800f2ec <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f2de:	4b32      	ldr	r3, [pc, #200]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800f2e6:	f7ff fbf7 	bl	800ead8 <PrepareRxDoneAbort>
                    break;
 800f2ea:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f2ec:	4a2e      	ldr	r2, [pc, #184]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f2ee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f2f2:	f043 0302 	orr.w	r3, r3, #2
 800f2f6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800f2fa:	e033      	b.n	800f364 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f2fc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f300:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f302:	18d1      	adds	r1, r2, r3
 800f304:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f308:	b29b      	uxth	r3, r3
 800f30a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	b29b      	uxth	r3, r3
 800f312:	461a      	mov	r2, r3
 800f314:	4826      	ldr	r0, [pc, #152]	; (800f3b0 <ProcessRadioRxDone+0x88c>)
 800f316:	f009 fdc6 	bl	8018ea6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f31a:	4b23      	ldr	r3, [pc, #140]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f31c:	2203      	movs	r2, #3
 800f31e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f322:	4b21      	ldr	r3, [pc, #132]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f324:	2200      	movs	r2, #0
 800f326:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f32a:	4b1f      	ldr	r3, [pc, #124]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f32c:	4a20      	ldr	r2, [pc, #128]	; (800f3b0 <ProcessRadioRxDone+0x88c>)
 800f32e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f332:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f336:	b2da      	uxtb	r2, r3
 800f338:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	4b19      	ldr	r3, [pc, #100]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f342:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f346:	4a18      	ldr	r2, [pc, #96]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f348:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f34c:	f043 0302 	orr.w	r3, r3, #2
 800f350:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800f354:	e006      	b.n	800f364 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f356:	4b14      	ldr	r3, [pc, #80]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800f35e:	f7ff fbbb 	bl	800ead8 <PrepareRxDoneAbort>
            break;
 800f362:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f364:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f366:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d008      	beq.n	800f380 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f36e:	4b0e      	ldr	r3, [pc, #56]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f370:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00b      	beq.n	800f390 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f378:	2000      	movs	r0, #0
 800f37a:	f000 fcb7 	bl	800fcec <OnAckTimeoutTimerEvent>
 800f37e:	e007      	b.n	800f390 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f380:	4b0a      	ldr	r3, [pc, #40]	; (800f3ac <ProcessRadioRxDone+0x888>)
 800f382:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f386:	2b02      	cmp	r3, #2
 800f388:	d102      	bne.n	800f390 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f38a:	2000      	movs	r0, #0
 800f38c:	f000 fcae 	bl	800fcec <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f390:	4a05      	ldr	r2, [pc, #20]	; (800f3a8 <ProcessRadioRxDone+0x884>)
 800f392:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f396:	f043 0320 	orr.w	r3, r3, #32
 800f39a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800f39e:	f7ff fae9 	bl	800e974 <UpdateRxSlotIdleState>
}
 800f3a2:	3788      	adds	r7, #136	; 0x88
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f3a8:	2000302c 	.word	0x2000302c
 800f3ac:	20003534 	.word	0x20003534
 800f3b0:	20003264 	.word	0x20003264

0800f3b4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f3b8:	4b11      	ldr	r3, [pc, #68]	; (800f400 <ProcessRadioTxTimeout+0x4c>)
 800f3ba:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d002      	beq.n	800f3c8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f3c2:	4b10      	ldr	r3, [pc, #64]	; (800f404 <ProcessRadioTxTimeout+0x50>)
 800f3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f3c8:	f7ff fad4 	bl	800e974 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <ProcessRadioTxTimeout+0x54>)
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f3d4:	2002      	movs	r0, #2
 800f3d6:	f004 fbe9 	bl	8013bac <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f3da:	4b0b      	ldr	r3, [pc, #44]	; (800f408 <ProcessRadioTxTimeout+0x54>)
 800f3dc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800f3e4:	4b08      	ldr	r3, [pc, #32]	; (800f408 <ProcessRadioTxTimeout+0x54>)
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f3ec:	4a06      	ldr	r2, [pc, #24]	; (800f408 <ProcessRadioTxTimeout+0x54>)
 800f3ee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f3f2:	f043 0320 	orr.w	r3, r3, #32
 800f3f6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f3fa:	bf00      	nop
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	20003534 	.word	0x20003534
 800f404:	0801e6b8 	.word	0x0801e6b8
 800f408:	2000302c 	.word	0x2000302c

0800f40c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	460a      	mov	r2, r1
 800f416:	71fb      	strb	r3, [r7, #7]
 800f418:	4613      	mov	r3, r2
 800f41a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f41c:	2300      	movs	r3, #0
 800f41e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f420:	4b40      	ldr	r3, [pc, #256]	; (800f524 <HandleRadioRxErrorTimeout+0x118>)
 800f422:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f426:	2b02      	cmp	r3, #2
 800f428:	d002      	beq.n	800f430 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f42a:	4b3f      	ldr	r3, [pc, #252]	; (800f528 <HandleRadioRxErrorTimeout+0x11c>)
 800f42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f42e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f430:	f003 ff1d 	bl	801326e <LoRaMacClassBIsBeaconExpected>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d007      	beq.n	800f44a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f43a:	2002      	movs	r0, #2
 800f43c:	f003 fecb 	bl	80131d6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f440:	2000      	movs	r0, #0
 800f442:	f003 feed 	bl	8013220 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f446:	2301      	movs	r3, #1
 800f448:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f44a:	4b36      	ldr	r3, [pc, #216]	; (800f524 <HandleRadioRxErrorTimeout+0x118>)
 800f44c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f450:	2b01      	cmp	r3, #1
 800f452:	d119      	bne.n	800f488 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f454:	f003 ff12 	bl	801327c <LoRaMacClassBIsPingExpected>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d007      	beq.n	800f46e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f45e:	2000      	movs	r0, #0
 800f460:	f003 fec3 	bl	80131ea <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f464:	2000      	movs	r0, #0
 800f466:	f003 fee4 	bl	8013232 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f46a:	2301      	movs	r3, #1
 800f46c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f46e:	f003 ff0c 	bl	801328a <LoRaMacClassBIsMulticastExpected>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d007      	beq.n	800f488 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f478:	2000      	movs	r0, #0
 800f47a:	f003 fec0 	bl	80131fe <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f47e:	2000      	movs	r0, #0
 800f480:	f003 fee0 	bl	8013244 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f484:	2301      	movs	r3, #1
 800f486:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	f083 0301 	eor.w	r3, r3, #1
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d040      	beq.n	800f516 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f494:	4b25      	ldr	r3, [pc, #148]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f496:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d122      	bne.n	800f4e4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f49e:	4b23      	ldr	r3, [pc, #140]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4a0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d003      	beq.n	800f4b0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f4a8:	4a20      	ldr	r2, [pc, #128]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4aa:	79fb      	ldrb	r3, [r7, #7]
 800f4ac:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f4b0:	79fb      	ldrb	r3, [r7, #7]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f004 fb7a 	bl	8013bac <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f4b8:	4b1a      	ldr	r3, [pc, #104]	; (800f524 <HandleRadioRxErrorTimeout+0x118>)
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f00d fe51 	bl	801d164 <UTIL_TIMER_GetElapsedTime>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	4b19      	ldr	r3, [pc, #100]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4c6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d323      	bcc.n	800f516 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f4ce:	4818      	ldr	r0, [pc, #96]	; (800f530 <HandleRadioRxErrorTimeout+0x124>)
 800f4d0:	f00d fd1c 	bl	801cf0c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f4d4:	4a15      	ldr	r2, [pc, #84]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f4da:	f043 0320 	orr.w	r3, r3, #32
 800f4de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800f4e2:	e018      	b.n	800f516 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f4e4:	4b11      	ldr	r3, [pc, #68]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d003      	beq.n	800f4f6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f4ee:	4a0f      	ldr	r2, [pc, #60]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f4f0:	79bb      	ldrb	r3, [r7, #6]
 800f4f2:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f4f6:	79bb      	ldrb	r3, [r7, #6]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f004 fb57 	bl	8013bac <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f4fe:	4b09      	ldr	r3, [pc, #36]	; (800f524 <HandleRadioRxErrorTimeout+0x118>)
 800f500:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f504:	2b02      	cmp	r3, #2
 800f506:	d006      	beq.n	800f516 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f508:	4a08      	ldr	r2, [pc, #32]	; (800f52c <HandleRadioRxErrorTimeout+0x120>)
 800f50a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f50e:	f043 0320 	orr.w	r3, r3, #32
 800f512:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f516:	f7ff fa2d 	bl	800e974 <UpdateRxSlotIdleState>
}
 800f51a:	bf00      	nop
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	20003534 	.word	0x20003534
 800f528:	0801e6b8 	.word	0x0801e6b8
 800f52c:	2000302c 	.word	0x2000302c
 800f530:	200033c4 	.word	0x200033c4

0800f534 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f538:	2106      	movs	r1, #6
 800f53a:	2005      	movs	r0, #5
 800f53c:	f7ff ff66 	bl	800f40c <HandleRadioRxErrorTimeout>
}
 800f540:	bf00      	nop
 800f542:	bd80      	pop	{r7, pc}

0800f544 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f548:	2104      	movs	r1, #4
 800f54a:	2003      	movs	r0, #3
 800f54c:	f7ff ff5e 	bl	800f40c <HandleRadioRxErrorTimeout>
}
 800f550:	bf00      	nop
 800f552:	bd80      	pop	{r7, pc}

0800f554 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f55a:	f3ef 8310 	mrs	r3, PRIMASK
 800f55e:	607b      	str	r3, [r7, #4]
  return(result);
 800f560:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f564:	b672      	cpsid	i
}
 800f566:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f568:	4b1d      	ldr	r3, [pc, #116]	; (800f5e0 <LoRaMacHandleIrqEvents+0x8c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f56e:	4b1c      	ldr	r3, [pc, #112]	; (800f5e0 <LoRaMacHandleIrqEvents+0x8c>)
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	f383 8810 	msr	PRIMASK, r3
}
 800f57e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d027      	beq.n	800f5d6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f586:	783b      	ldrb	r3, [r7, #0]
 800f588:	f003 0310 	and.w	r3, r3, #16
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f592:	f7ff fa07 	bl	800e9a4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f596:	783b      	ldrb	r3, [r7, #0]
 800f598:	f003 0308 	and.w	r3, r3, #8
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f5a2:	f7ff fabf 	bl	800eb24 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f5a6:	783b      	ldrb	r3, [r7, #0]
 800f5a8:	f003 0304 	and.w	r3, r3, #4
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f5b2:	f7ff feff 	bl	800f3b4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f5b6:	783b      	ldrb	r3, [r7, #0]
 800f5b8:	f003 0302 	and.w	r3, r3, #2
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d001      	beq.n	800f5c6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f5c2:	f7ff ffb7 	bl	800f534 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f5c6:	783b      	ldrb	r3, [r7, #0]
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f5d2:	f7ff ffb7 	bl	800f544 <ProcessRadioRxTimeout>
        }
    }
}
 800f5d6:	bf00      	nop
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	20003b44 	.word	0x20003b44

0800f5e4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f5e8:	4b08      	ldr	r3, [pc, #32]	; (800f60c <LoRaMacIsBusy+0x28>)
 800f5ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f5f2:	4b06      	ldr	r3, [pc, #24]	; (800f60c <LoRaMacIsBusy+0x28>)
 800f5f4:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d101      	bne.n	800f600 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	e000      	b.n	800f602 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800f600:	2301      	movs	r3, #1
}
 800f602:	4618      	mov	r0, r3
 800f604:	46bd      	mov	sp, r7
 800f606:	bc80      	pop	{r7}
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	2000302c 	.word	0x2000302c

0800f610 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	4603      	mov	r3, r0
 800f618:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f61a:	4a04      	ldr	r2, [pc, #16]	; (800f62c <LoRaMacEnableRequests+0x1c>)
 800f61c:	79fb      	ldrb	r3, [r7, #7]
 800f61e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800f622:	bf00      	nop
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	bc80      	pop	{r7}
 800f62a:	4770      	bx	lr
 800f62c:	2000302c 	.word	0x2000302c

0800f630 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f636:	4b2c      	ldr	r3, [pc, #176]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f638:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f63c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f63e:	4b2a      	ldr	r3, [pc, #168]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f640:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f644:	2b00      	cmp	r3, #0
 800f646:	d14a      	bne.n	800f6de <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f648:	4b27      	ldr	r3, [pc, #156]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f64a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f64e:	f003 0301 	and.w	r3, r3, #1
 800f652:	b2db      	uxtb	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d006      	beq.n	800f666 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f658:	4a23      	ldr	r2, [pc, #140]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f65a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f65e:	f36f 0300 	bfc	r3, #0, #1
 800f662:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f666:	4b20      	ldr	r3, [pc, #128]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f668:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f66c:	f003 0304 	and.w	r3, r3, #4
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d006      	beq.n	800f684 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f676:	4a1c      	ldr	r2, [pc, #112]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f678:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f67c:	f36f 0382 	bfc	r3, #2, #1
 800f680:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f684:	2001      	movs	r0, #1
 800f686:	f7ff ffc3 	bl	800f610 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f68a:	793b      	ldrb	r3, [r7, #4]
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d005      	beq.n	800f6a2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f696:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f698:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4813      	ldr	r0, [pc, #76]	; (800f6ec <LoRaMacHandleRequestEvents+0xbc>)
 800f6a0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f6a2:	793b      	ldrb	r3, [r7, #4]
 800f6a4:	f003 0304 	and.w	r3, r3, #4
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00e      	beq.n	800f6cc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f6ae:	4810      	ldr	r0, [pc, #64]	; (800f6f0 <LoRaMacHandleRequestEvents+0xc0>)
 800f6b0:	f004 faca 	bl	8013c48 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f6b4:	f004 fb14 	bl	8013ce0 <LoRaMacConfirmQueueGetCnt>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f6be:	4a0a      	ldr	r2, [pc, #40]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f6c0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f6c4:	f043 0304 	orr.w	r3, r3, #4
 800f6c8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f6cc:	f003 fdfb 	bl	80132c6 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f6d0:	4a05      	ldr	r2, [pc, #20]	; (800f6e8 <LoRaMacHandleRequestEvents+0xb8>)
 800f6d2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f6d6:	f36f 1345 	bfc	r3, #5, #1
 800f6da:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800f6de:	bf00      	nop
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000302c 	.word	0x2000302c
 800f6ec:	20003464 	.word	0x20003464
 800f6f0:	20003478 	.word	0x20003478

0800f6f4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800f6fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f700:	2b00      	cmp	r3, #0
 800f702:	d10a      	bne.n	800f71a <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f704:	2300      	movs	r3, #0
 800f706:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f708:	1dfb      	adds	r3, r7, #7
 800f70a:	4618      	mov	r0, r3
 800f70c:	f004 f882 	bl	8013814 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f716:	f000 fc81 	bl	801001c <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f71a:	bf00      	nop
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	2000302c 	.word	0x2000302c

0800f728 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b088      	sub	sp, #32
 800f72c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f72e:	4b25      	ldr	r3, [pc, #148]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f730:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f734:	f003 0308 	and.w	r3, r3, #8
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00d      	beq.n	800f75a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f73e:	4a21      	ldr	r2, [pc, #132]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f740:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f744:	f36f 03c3 	bfc	r3, #3, #1
 800f748:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f74c:	4b1d      	ldr	r3, [pc, #116]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f74e:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	491c      	ldr	r1, [pc, #112]	; (800f7c8 <LoRaMacHandleIndicationEvents+0xa0>)
 800f756:	481d      	ldr	r0, [pc, #116]	; (800f7cc <LoRaMacHandleIndicationEvents+0xa4>)
 800f758:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f75a:	4b1a      	ldr	r3, [pc, #104]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f75c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f760:	f003 0310 	and.w	r3, r3, #16
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	d012      	beq.n	800f790 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f76a:	2307      	movs	r3, #7
 800f76c:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800f772:	4b14      	ldr	r3, [pc, #80]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f774:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	1d3a      	adds	r2, r7, #4
 800f77c:	4912      	ldr	r1, [pc, #72]	; (800f7c8 <LoRaMacHandleIndicationEvents+0xa0>)
 800f77e:	4610      	mov	r0, r2
 800f780:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f782:	4a10      	ldr	r2, [pc, #64]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f784:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f788:	f36f 1304 	bfc	r3, #4, #1
 800f78c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f790:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f792:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f796:	f003 0302 	and.w	r3, r3, #2
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00d      	beq.n	800f7bc <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f7a0:	4a08      	ldr	r2, [pc, #32]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f7a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f7a6:	f36f 0341 	bfc	r3, #1, #1
 800f7aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f7ae:	4b05      	ldr	r3, [pc, #20]	; (800f7c4 <LoRaMacHandleIndicationEvents+0x9c>)
 800f7b0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	4904      	ldr	r1, [pc, #16]	; (800f7c8 <LoRaMacHandleIndicationEvents+0xa0>)
 800f7b8:	4805      	ldr	r0, [pc, #20]	; (800f7d0 <LoRaMacHandleIndicationEvents+0xa8>)
 800f7ba:	4798      	blx	r3
    }
}
 800f7bc:	bf00      	nop
 800f7be:	3720      	adds	r7, #32
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	2000302c 	.word	0x2000302c
 800f7c8:	200034a8 	.word	0x200034a8
 800f7cc:	2000348c 	.word	0x2000348c
 800f7d0:	20003448 	.word	0x20003448

0800f7d4 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f7da:	4b32      	ldr	r3, [pc, #200]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7dc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f7e0:	f003 0301 	and.w	r3, r3, #1
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d058      	beq.n	800f89c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f7f2:	4b2c      	ldr	r3, [pc, #176]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7f4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d004      	beq.n	800f806 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f7fc:	4b29      	ldr	r3, [pc, #164]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7fe:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f802:	2b03      	cmp	r3, #3
 800f804:	d104      	bne.n	800f810 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f806:	f002 f89f 	bl	8011948 <CheckRetransUnconfirmedUplink>
 800f80a:	4603      	mov	r3, r0
 800f80c:	71fb      	strb	r3, [r7, #7]
 800f80e:	e020      	b.n	800f852 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f810:	4b24      	ldr	r3, [pc, #144]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f812:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f816:	2b01      	cmp	r3, #1
 800f818:	d11b      	bne.n	800f852 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f81a:	4b22      	ldr	r3, [pc, #136]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f81c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800f820:	2b00      	cmp	r3, #0
 800f822:	d014      	beq.n	800f84e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f824:	f002 f8bc 	bl	80119a0 <CheckRetransConfirmedUplink>
 800f828:	4603      	mov	r3, r0
 800f82a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f82c:	4b1e      	ldr	r3, [pc, #120]	; (800f8a8 <LoRaMacHandleMcpsRequest+0xd4>)
 800f82e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10d      	bne.n	800f852 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f836:	79fb      	ldrb	r3, [r7, #7]
 800f838:	f083 0301 	eor.w	r3, r3, #1
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f842:	f002 f929 	bl	8011a98 <AckTimeoutRetriesProcess>
 800f846:	e004      	b.n	800f852 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f848:	f002 f964 	bl	8011b14 <AckTimeoutRetriesFinalize>
 800f84c:	e001      	b.n	800f852 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f84e:	2301      	movs	r3, #1
 800f850:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800f852:	79fb      	ldrb	r3, [r7, #7]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00d      	beq.n	800f874 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f858:	4814      	ldr	r0, [pc, #80]	; (800f8ac <LoRaMacHandleMcpsRequest+0xd8>)
 800f85a:	f00d fb57 	bl	801cf0c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f85e:	4b11      	ldr	r3, [pc, #68]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f860:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f864:	f023 0320 	bic.w	r3, r3, #32
 800f868:	4a0e      	ldr	r2, [pc, #56]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f86a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f86e:	f002 f8b9 	bl	80119e4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f872:	e013      	b.n	800f89c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800f874:	79bb      	ldrb	r3, [r7, #6]
 800f876:	f083 0301 	eor.w	r3, r3, #1
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00d      	beq.n	800f89c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f880:	4a08      	ldr	r2, [pc, #32]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f882:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f886:	f36f 1345 	bfc	r3, #5, #1
 800f88a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800f88e:	4b05      	ldr	r3, [pc, #20]	; (800f8a4 <LoRaMacHandleMcpsRequest+0xd0>)
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800f896:	2000      	movs	r0, #0
 800f898:	f000 f97e 	bl	800fb98 <OnTxDelayedTimerEvent>
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	2000302c 	.word	0x2000302c
 800f8a8:	20003534 	.word	0x20003534
 800f8ac:	20003394 	.word	0x20003394

0800f8b0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f8b4:	4b1b      	ldr	r3, [pc, #108]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f8b6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f8ba:	f003 0304 	and.w	r3, r3, #4
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d02c      	beq.n	800f91e <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f8c4:	2001      	movs	r0, #1
 800f8c6:	f004 f9a5 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d012      	beq.n	800f8f6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f8d0:	2001      	movs	r0, #1
 800f8d2:	f004 f941 	bl	8013b58 <LoRaMacConfirmQueueGetStatus>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d103      	bne.n	800f8e4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f8dc:	4b11      	ldr	r3, [pc, #68]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8e4:	4b0f      	ldr	r3, [pc, #60]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f8e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8ea:	f023 0302 	bic.w	r3, r3, #2
 800f8ee:	4a0d      	ldr	r2, [pc, #52]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f8f0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f8f4:	e013      	b.n	800f91e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f8f6:	2005      	movs	r0, #5
 800f8f8:	f004 f98c 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d105      	bne.n	800f90e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f902:	2006      	movs	r0, #6
 800f904:	f004 f986 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800f908:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d007      	beq.n	800f91e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f910:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f914:	f023 0302 	bic.w	r3, r3, #2
 800f918:	4a02      	ldr	r2, [pc, #8]	; (800f924 <LoRaMacHandleMlmeRequest+0x74>)
 800f91a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f91e:	bf00      	nop
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2000302c 	.word	0x2000302c

0800f928 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f92c:	200c      	movs	r0, #12
 800f92e:	f004 f971 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d019      	beq.n	800f96c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f938:	4b0e      	ldr	r3, [pc, #56]	; (800f974 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f93a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f944:	2b00      	cmp	r3, #0
 800f946:	d111      	bne.n	800f96c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f948:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f94a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f94e:	f003 0304 	and.w	r3, r3, #4
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d009      	beq.n	800f96c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f958:	4b06      	ldr	r3, [pc, #24]	; (800f974 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f95a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f95e:	f023 0302 	bic.w	r3, r3, #2
 800f962:	4a04      	ldr	r2, [pc, #16]	; (800f974 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f964:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	2000302c 	.word	0x2000302c

0800f978 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f978:	b480      	push	{r7}
 800f97a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f97c:	4b0d      	ldr	r3, [pc, #52]	; (800f9b4 <LoRaMacCheckForRxAbort+0x3c>)
 800f97e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00f      	beq.n	800f9aa <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f98a:	4b0a      	ldr	r3, [pc, #40]	; (800f9b4 <LoRaMacCheckForRxAbort+0x3c>)
 800f98c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f994:	4a07      	ldr	r2, [pc, #28]	; (800f9b4 <LoRaMacCheckForRxAbort+0x3c>)
 800f996:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f99a:	4b06      	ldr	r3, [pc, #24]	; (800f9b4 <LoRaMacCheckForRxAbort+0x3c>)
 800f99c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9a0:	f023 0302 	bic.w	r3, r3, #2
 800f9a4:	4a03      	ldr	r2, [pc, #12]	; (800f9b4 <LoRaMacCheckForRxAbort+0x3c>)
 800f9a6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f9aa:	bf00      	nop
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bc80      	pop	{r7}
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	2000302c 	.word	0x2000302c

0800f9b8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f9c8:	4b50      	ldr	r3, [pc, #320]	; (800fb0c <LoRaMacHandleNvm+0x154>)
 800f9ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f040 8098 	bne.w	800fb04 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2124      	movs	r1, #36	; 0x24
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f009 fab9 	bl	8018f50 <Crc32>
 800f9de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d006      	beq.n	800f9f8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f9f0:	89fb      	ldrh	r3, [r7, #14]
 800f9f2:	f043 0301 	orr.w	r3, r3, #1
 800f9f6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3328      	adds	r3, #40	; 0x28
 800f9fc:	2114      	movs	r1, #20
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f009 faa6 	bl	8018f50 <Crc32>
 800fa04:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d006      	beq.n	800fa1e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fa16:	89fb      	ldrh	r3, [r7, #14]
 800fa18:	f043 0302 	orr.w	r3, r3, #2
 800fa1c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	3340      	adds	r3, #64	; 0x40
 800fa22:	21d4      	movs	r1, #212	; 0xd4
 800fa24:	4618      	mov	r0, r3
 800fa26:	f009 fa93 	bl	8018f50 <Crc32>
 800fa2a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d007      	beq.n	800fa48 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800fa40:	89fb      	ldrh	r3, [r7, #14]
 800fa42:	f043 0304 	orr.w	r3, r3, #4
 800fa46:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fa4e:	21bc      	movs	r1, #188	; 0xbc
 800fa50:	4618      	mov	r0, r3
 800fa52:	f009 fa7d 	bl	8018f50 <Crc32>
 800fa56:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800fa5e:	68ba      	ldr	r2, [r7, #8]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d007      	beq.n	800fa74 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fa6c:	89fb      	ldrh	r3, [r7, #14]
 800fa6e:	f043 0308 	orr.w	r3, r3, #8
 800fa72:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800fa7a:	21a0      	movs	r1, #160	; 0xa0
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f009 fa67 	bl	8018f50 <Crc32>
 800fa82:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d007      	beq.n	800faa0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fa98:	89fb      	ldrh	r3, [r7, #14]
 800fa9a:	f043 0310 	orr.w	r3, r3, #16
 800fa9e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800faa6:	f44f 715e 	mov.w	r1, #888	; 0x378
 800faaa:	4618      	mov	r0, r3
 800faac:	f009 fa50 	bl	8018f50 <Crc32>
 800fab0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d007      	beq.n	800face <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fac6:	89fb      	ldrh	r3, [r7, #14]
 800fac8:	f043 0320 	orr.w	r3, r3, #32
 800facc:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800fad4:	2114      	movs	r1, #20
 800fad6:	4618      	mov	r0, r3
 800fad8:	f009 fa3a 	bl	8018f50 <Crc32>
 800fadc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d007      	beq.n	800fafa <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800faf2:	89fb      	ldrh	r3, [r7, #14]
 800faf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fafa:	89fb      	ldrh	r3, [r7, #14]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f001 ffad 	bl	8011a5c <CallNvmDataChangeCallback>
 800fb02:	e000      	b.n	800fb06 <LoRaMacHandleNvm+0x14e>
        return;
 800fb04:	bf00      	nop
}
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	2000302c 	.word	0x2000302c

0800fb10 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fb16:	2300      	movs	r3, #0
 800fb18:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fb1a:	f7ff fd1b 	bl	800f554 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fb1e:	f003 fc36 	bl	801338e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fb22:	4b1b      	ldr	r3, [pc, #108]	; (800fb90 <LoRaMacProcess+0x80>)
 800fb24:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fb28:	f003 0320 	and.w	r3, r3, #32
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d021      	beq.n	800fb76 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fb32:	2000      	movs	r0, #0
 800fb34:	f7ff fd6c 	bl	800f610 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fb38:	f7ff ff1e 	bl	800f978 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fb3c:	f002 f81e 	bl	8011b7c <IsRequestPending>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d006      	beq.n	800fb54 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fb46:	f7ff feef 	bl	800f928 <LoRaMacCheckForBeaconAcquisition>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d103      	bne.n	800fb62 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fb5a:	f7ff fea9 	bl	800f8b0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fb5e:	f7ff fe39 	bl	800f7d4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fb62:	f7ff fd65 	bl	800f630 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800fb66:	f7ff fdc5 	bl	800f6f4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800fb6a:	480a      	ldr	r0, [pc, #40]	; (800fb94 <LoRaMacProcess+0x84>)
 800fb6c:	f7ff ff24 	bl	800f9b8 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fb70:	2001      	movs	r0, #1
 800fb72:	f7ff fd4d 	bl	800f610 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800fb76:	f7ff fdd7 	bl	800f728 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fb7a:	4b05      	ldr	r3, [pc, #20]	; (800fb90 <LoRaMacProcess+0x80>)
 800fb7c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	d101      	bne.n	800fb88 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800fb84:	f001 fb7c 	bl	8011280 <OpenContinuousRxCWindow>
    }
}
 800fb88:	bf00      	nop
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	2000302c 	.word	0x2000302c
 800fb94:	20003534 	.word	0x20003534

0800fb98 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fba0:	4817      	ldr	r0, [pc, #92]	; (800fc00 <OnTxDelayedTimerEvent+0x68>)
 800fba2:	f00d f9b3 	bl	801cf0c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fba6:	4b17      	ldr	r3, [pc, #92]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fba8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fbac:	f023 0320 	bic.w	r3, r3, #32
 800fbb0:	4a14      	ldr	r2, [pc, #80]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fbb2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	f001 f8fc 	bl	8010db4 <ScheduleTx>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d018      	beq.n	800fbf4 <OnTxDelayedTimerEvent+0x5c>
 800fbc2:	2b0b      	cmp	r3, #11
 800fbc4:	d016      	beq.n	800fbf4 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbc6:	4b10      	ldr	r3, [pc, #64]	; (800fc08 <OnTxDelayedTimerEvent+0x70>)
 800fbc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b0d      	ldr	r3, [pc, #52]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fbd0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fbd4:	4b0b      	ldr	r3, [pc, #44]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fbd6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fbda:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fbdc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fbe0:	4b08      	ldr	r3, [pc, #32]	; (800fc04 <OnTxDelayedTimerEvent+0x6c>)
 800fbe2:	2209      	movs	r2, #9
 800fbe4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fbe8:	2009      	movs	r0, #9
 800fbea:	f003 ffdf 	bl	8013bac <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fbee:	f001 fef9 	bl	80119e4 <StopRetransmission>
            break;
 800fbf2:	e000      	b.n	800fbf6 <OnTxDelayedTimerEvent+0x5e>
            break;
 800fbf4:	bf00      	nop
        }
    }
}
 800fbf6:	bf00      	nop
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	20003394 	.word	0x20003394
 800fc04:	2000302c 	.word	0x2000302c
 800fc08:	20003534 	.word	0x20003534

0800fc0c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fc14:	4b14      	ldr	r3, [pc, #80]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc16:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fc1a:	4b13      	ldr	r3, [pc, #76]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc1c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fc20:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <OnRxWindow1TimerEvent+0x60>)
 800fc22:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fc26:	b25a      	sxtb	r2, r3
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc2a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc2e:	4b0f      	ldr	r3, [pc, #60]	; (800fc6c <OnRxWindow1TimerEvent+0x60>)
 800fc30:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fc34:	4b0c      	ldr	r3, [pc, #48]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc36:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fc3a:	4b0c      	ldr	r3, [pc, #48]	; (800fc6c <OnRxWindow1TimerEvent+0x60>)
 800fc3c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fc40:	4b09      	ldr	r3, [pc, #36]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc42:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fc46:	4b08      	ldr	r3, [pc, #32]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fc4e:	4b06      	ldr	r3, [pc, #24]	; (800fc68 <OnRxWindow1TimerEvent+0x5c>)
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fc56:	4906      	ldr	r1, [pc, #24]	; (800fc70 <OnRxWindow1TimerEvent+0x64>)
 800fc58:	4806      	ldr	r0, [pc, #24]	; (800fc74 <OnRxWindow1TimerEvent+0x68>)
 800fc5a:	f001 fae3 	bl	8011224 <RxWindowSetup>
}
 800fc5e:	bf00      	nop
 800fc60:	3708      	adds	r7, #8
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	2000302c 	.word	0x2000302c
 800fc6c:	20003534 	.word	0x20003534
 800fc70:	200033e4 	.word	0x200033e4
 800fc74:	200033ac 	.word	0x200033ac

0800fc78 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fc80:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fc82:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d023      	beq.n	800fcd2 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fc8a:	4b14      	ldr	r3, [pc, #80]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fc8c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fc90:	4b12      	ldr	r3, [pc, #72]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fc92:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fc96:	4b12      	ldr	r3, [pc, #72]	; (800fce0 <OnRxWindow2TimerEvent+0x68>)
 800fc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc9a:	4a10      	ldr	r2, [pc, #64]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fc9c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fca0:	4b0f      	ldr	r3, [pc, #60]	; (800fce0 <OnRxWindow2TimerEvent+0x68>)
 800fca2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fca6:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fca8:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fcac:	4b0c      	ldr	r3, [pc, #48]	; (800fce0 <OnRxWindow2TimerEvent+0x68>)
 800fcae:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fcb2:	4b0a      	ldr	r3, [pc, #40]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fcb4:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fcb8:	4b08      	ldr	r3, [pc, #32]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fcc0:	4b06      	ldr	r3, [pc, #24]	; (800fcdc <OnRxWindow2TimerEvent+0x64>)
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fcc8:	4906      	ldr	r1, [pc, #24]	; (800fce4 <OnRxWindow2TimerEvent+0x6c>)
 800fcca:	4807      	ldr	r0, [pc, #28]	; (800fce8 <OnRxWindow2TimerEvent+0x70>)
 800fccc:	f001 faaa 	bl	8011224 <RxWindowSetup>
 800fcd0:	e000      	b.n	800fcd4 <OnRxWindow2TimerEvent+0x5c>
        return;
 800fcd2:	bf00      	nop
}
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	2000302c 	.word	0x2000302c
 800fce0:	20003534 	.word	0x20003534
 800fce4:	200033f8 	.word	0x200033f8
 800fce8:	200033c4 	.word	0x200033c4

0800fcec <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fcf4:	4815      	ldr	r0, [pc, #84]	; (800fd4c <OnAckTimeoutTimerEvent+0x60>)
 800fcf6:	f00d f909 	bl	801cf0c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fcfa:	4b15      	ldr	r3, [pc, #84]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fcfc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d003      	beq.n	800fd0c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800fd04:	4b12      	ldr	r3, [pc, #72]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fd0c:	4b11      	ldr	r3, [pc, #68]	; (800fd54 <OnAckTimeoutTimerEvent+0x68>)
 800fd0e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d106      	bne.n	800fd24 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fd16:	4a0e      	ldr	r2, [pc, #56]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fd18:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fd1c:	f043 0320 	orr.w	r3, r3, #32
 800fd20:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fd24:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fd26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00a      	beq.n	800fd44 <OnAckTimeoutTimerEvent+0x58>
 800fd2e:	4b08      	ldr	r3, [pc, #32]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fd30:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d004      	beq.n	800fd44 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fd3a:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <OnAckTimeoutTimerEvent+0x64>)
 800fd3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fd40:	691b      	ldr	r3, [r3, #16]
 800fd42:	4798      	blx	r3
    }
}
 800fd44:	bf00      	nop
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	20003424 	.word	0x20003424
 800fd50:	2000302c 	.word	0x2000302c
 800fd54:	20003534 	.word	0x20003534

0800fd58 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60ba      	str	r2, [r7, #8]
 800fd60:	607b      	str	r3, [r7, #4]
 800fd62:	4603      	mov	r3, r0
 800fd64:	73fb      	strb	r3, [r7, #15]
 800fd66:	460b      	mov	r3, r1
 800fd68:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d005      	beq.n	800fd7c <GetFCntDown+0x24>
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d002      	beq.n	800fd7c <GetFCntDown+0x24>
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d101      	bne.n	800fd80 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fd7c:	230a      	movs	r3, #10
 800fd7e:	e029      	b.n	800fdd4 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fd80:	7bfb      	ldrb	r3, [r7, #15]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d016      	beq.n	800fdb4 <GetFCntDown+0x5c>
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d118      	bne.n	800fdbc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fd8a:	79bb      	ldrb	r3, [r7, #6]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d10d      	bne.n	800fdac <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fd90:	7bbb      	ldrb	r3, [r7, #14]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <GetFCntDown+0x44>
 800fd96:	7bbb      	ldrb	r3, [r7, #14]
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d103      	bne.n	800fda4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	2202      	movs	r2, #2
 800fda0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fda2:	e00d      	b.n	800fdc0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	2201      	movs	r2, #1
 800fda8:	701a      	strb	r2, [r3, #0]
            break;
 800fdaa:	e009      	b.n	800fdc0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	2203      	movs	r2, #3
 800fdb0:	701a      	strb	r2, [r3, #0]
            break;
 800fdb2:	e005      	b.n	800fdc0 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2204      	movs	r2, #4
 800fdb8:	701a      	strb	r2, [r3, #0]
            break;
 800fdba:	e001      	b.n	800fdc0 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fdbc:	2305      	movs	r3, #5
 800fdbe:	e009      	b.n	800fdd4 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	7818      	ldrb	r0, [r3, #0]
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	89db      	ldrh	r3, [r3, #14]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	8b39      	ldrh	r1, [r7, #24]
 800fdcc:	6a3b      	ldr	r3, [r7, #32]
 800fdce:	f004 fb17 	bl	8014400 <LoRaMacCryptoGetFCntDown>
 800fdd2:	4603      	mov	r3, r0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fddc:	b5b0      	push	{r4, r5, r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4603      	mov	r3, r0
 800fde4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fde6:	2303      	movs	r3, #3
 800fde8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fdea:	4b61      	ldr	r3, [pc, #388]	; (800ff70 <SwitchClass+0x194>)
 800fdec:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	f000 80a5 	beq.w	800ff40 <SwitchClass+0x164>
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	f300 80b4 	bgt.w	800ff64 <SwitchClass+0x188>
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d003      	beq.n	800fe08 <SwitchClass+0x2c>
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	f000 808f 	beq.w	800ff24 <SwitchClass+0x148>
 800fe06:	e0ad      	b.n	800ff64 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d107      	bne.n	800fe1e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fe0e:	4b58      	ldr	r3, [pc, #352]	; (800ff70 <SwitchClass+0x194>)
 800fe10:	4a57      	ldr	r2, [pc, #348]	; (800ff70 <SwitchClass+0x194>)
 800fe12:	336c      	adds	r3, #108	; 0x6c
 800fe14:	3264      	adds	r2, #100	; 0x64
 800fe16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe1a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d10c      	bne.n	800fe3e <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f003 fa53 	bl	80132d2 <LoRaMacClassBSwitchClass>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d103      	bne.n	800fe3e <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fe36:	4a4e      	ldr	r2, [pc, #312]	; (800ff70 <SwitchClass+0x194>)
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	f040 808a 	bne.w	800ff5a <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fe46:	4a4a      	ldr	r2, [pc, #296]	; (800ff70 <SwitchClass+0x194>)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fe4e:	4a49      	ldr	r2, [pc, #292]	; (800ff74 <SwitchClass+0x198>)
 800fe50:	4b48      	ldr	r3, [pc, #288]	; (800ff74 <SwitchClass+0x198>)
 800fe52:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fe56:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fe5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe5e:	682b      	ldr	r3, [r5, #0]
 800fe60:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe62:	4b44      	ldr	r3, [pc, #272]	; (800ff74 <SwitchClass+0x198>)
 800fe64:	2202      	movs	r2, #2
 800fe66:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	73bb      	strb	r3, [r7, #14]
 800fe6e:	e049      	b.n	800ff04 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fe70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe74:	4a3e      	ldr	r2, [pc, #248]	; (800ff70 <SwitchClass+0x194>)
 800fe76:	212c      	movs	r1, #44	; 0x2c
 800fe78:	fb01 f303 	mul.w	r3, r1, r3
 800fe7c:	4413      	add	r3, r2
 800fe7e:	33d2      	adds	r3, #210	; 0xd2
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d038      	beq.n	800fef8 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fe86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe8a:	4a39      	ldr	r2, [pc, #228]	; (800ff70 <SwitchClass+0x194>)
 800fe8c:	212c      	movs	r1, #44	; 0x2c
 800fe8e:	fb01 f303 	mul.w	r3, r1, r3
 800fe92:	4413      	add	r3, r2
 800fe94:	33e8      	adds	r3, #232	; 0xe8
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a35      	ldr	r2, [pc, #212]	; (800ff70 <SwitchClass+0x194>)
 800fe9a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fe9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fea0:	4a33      	ldr	r2, [pc, #204]	; (800ff70 <SwitchClass+0x194>)
 800fea2:	212c      	movs	r1, #44	; 0x2c
 800fea4:	fb01 f303 	mul.w	r3, r1, r3
 800fea8:	4413      	add	r3, r2
 800feaa:	33ec      	adds	r3, #236	; 0xec
 800feac:	f993 3000 	ldrsb.w	r3, [r3]
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	4b2f      	ldr	r3, [pc, #188]	; (800ff70 <SwitchClass+0x194>)
 800feb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800feb8:	4b2e      	ldr	r3, [pc, #184]	; (800ff74 <SwitchClass+0x198>)
 800feba:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800febe:	4b2d      	ldr	r3, [pc, #180]	; (800ff74 <SwitchClass+0x198>)
 800fec0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fec4:	4b2a      	ldr	r3, [pc, #168]	; (800ff70 <SwitchClass+0x194>)
 800fec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fec8:	4a2a      	ldr	r2, [pc, #168]	; (800ff74 <SwitchClass+0x198>)
 800feca:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fece:	4b28      	ldr	r3, [pc, #160]	; (800ff70 <SwitchClass+0x194>)
 800fed0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fed4:	4b27      	ldr	r3, [pc, #156]	; (800ff74 <SwitchClass+0x198>)
 800fed6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800feda:	4b25      	ldr	r3, [pc, #148]	; (800ff70 <SwitchClass+0x194>)
 800fedc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fee0:	4b24      	ldr	r3, [pc, #144]	; (800ff74 <SwitchClass+0x198>)
 800fee2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fee6:	4b23      	ldr	r3, [pc, #140]	; (800ff74 <SwitchClass+0x198>)
 800fee8:	2203      	movs	r2, #3
 800feea:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800feee:	4b21      	ldr	r3, [pc, #132]	; (800ff74 <SwitchClass+0x198>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800fef6:	e009      	b.n	800ff0c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	3301      	adds	r3, #1
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	73bb      	strb	r3, [r7, #14]
 800ff04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	ddb1      	ble.n	800fe70 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ff0c:	4b19      	ldr	r3, [pc, #100]	; (800ff74 <SwitchClass+0x198>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ff14:	4b18      	ldr	r3, [pc, #96]	; (800ff78 <SwitchClass+0x19c>)
 800ff16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff18:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ff1a:	f001 f9b1 	bl	8011280 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ff22:	e01a      	b.n	800ff5a <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ff24:	79fb      	ldrb	r3, [r7, #7]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f003 f9d3 	bl	80132d2 <LoRaMacClassBSwitchClass>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d113      	bne.n	800ff5e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff36:	4a0e      	ldr	r2, [pc, #56]	; (800ff70 <SwitchClass+0x194>)
 800ff38:	79fb      	ldrb	r3, [r7, #7]
 800ff3a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ff3e:	e00e      	b.n	800ff5e <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d10d      	bne.n	800ff62 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff46:	4a0a      	ldr	r2, [pc, #40]	; (800ff70 <SwitchClass+0x194>)
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ff4e:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <SwitchClass+0x19c>)
 800ff50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff52:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ff58:	e003      	b.n	800ff62 <SwitchClass+0x186>
            break;
 800ff5a:	bf00      	nop
 800ff5c:	e002      	b.n	800ff64 <SwitchClass+0x188>
            break;
 800ff5e:	bf00      	nop
 800ff60:	e000      	b.n	800ff64 <SwitchClass+0x188>
            break;
 800ff62:	bf00      	nop
        }
    }

    return status;
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20003534 	.word	0x20003534
 800ff74:	2000302c 	.word	0x2000302c
 800ff78:	0801e6b8 	.word	0x0801e6b8

0800ff7c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff86:	4b10      	ldr	r3, [pc, #64]	; (800ffc8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ff88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ff8c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ff8e:	79fb      	ldrb	r3, [r7, #7]
 800ff90:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ff92:	230d      	movs	r3, #13
 800ff94:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ff96:	4b0c      	ldr	r3, [pc, #48]	; (800ffc8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ff98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ffa0:	230e      	movs	r3, #14
 800ffa2:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffa4:	4b08      	ldr	r3, [pc, #32]	; (800ffc8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ffa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffaa:	f107 0210 	add.w	r2, r7, #16
 800ffae:	4611      	mov	r1, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f005 f8b8 	bl	8015126 <RegionGetPhyParam>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	b2db      	uxtb	r3, r3
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20003534 	.word	0x20003534

0800ffcc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	71fb      	strb	r3, [r7, #7]
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	71bb      	strb	r3, [r7, #6]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ffe6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff ffc6 	bl	800ff7c <GetMaxAppPayloadWithoutFOptsLength>
 800fff0:	4603      	mov	r3, r0
 800fff2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	797b      	ldrb	r3, [r7, #5]
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	4413      	add	r3, r2
 800fffe:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010000:	89ba      	ldrh	r2, [r7, #12]
 8010002:	89fb      	ldrh	r3, [r7, #14]
 8010004:	429a      	cmp	r2, r3
 8010006:	d804      	bhi.n	8010012 <ValidatePayloadLength+0x46>
 8010008:	89bb      	ldrh	r3, [r7, #12]
 801000a:	2bff      	cmp	r3, #255	; 0xff
 801000c:	d801      	bhi.n	8010012 <ValidatePayloadLength+0x46>
    {
        return true;
 801000e:	2301      	movs	r3, #1
 8010010:	e000      	b.n	8010014 <ValidatePayloadLength+0x48>
    }
    return false;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 801001c:	b480      	push	{r7}
 801001e:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010020:	4a05      	ldr	r2, [pc, #20]	; (8010038 <SetMlmeScheduleUplinkIndication+0x1c>)
 8010022:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010026:	f043 0310 	orr.w	r3, r3, #16
 801002a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 801002e:	bf00      	nop
 8010030:	46bd      	mov	sp, r7
 8010032:	bc80      	pop	{r7}
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	2000302c 	.word	0x2000302c

0801003c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 801003c:	b590      	push	{r4, r7, lr}
 801003e:	b0a5      	sub	sp, #148	; 0x94
 8010040:	af02      	add	r7, sp, #8
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	4608      	mov	r0, r1
 8010046:	4611      	mov	r1, r2
 8010048:	461a      	mov	r2, r3
 801004a:	4603      	mov	r3, r0
 801004c:	70fb      	strb	r3, [r7, #3]
 801004e:	460b      	mov	r3, r1
 8010050:	70bb      	strb	r3, [r7, #2]
 8010052:	4613      	mov	r3, r2
 8010054:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010056:	2300      	movs	r3, #0
 8010058:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 801005c:	2300      	movs	r3, #0
 801005e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010062:	2300      	movs	r3, #0
 8010064:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 8010068:	f000 bc73 	b.w	8010952 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801006c:	78fb      	ldrb	r3, [r7, #3]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	4413      	add	r3, r2
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	4618      	mov	r0, r3
 8010076:	f003 fbf5 	bl	8013864 <LoRaMacCommandsGetCmdSize>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	78fb      	ldrb	r3, [r7, #3]
 8010080:	441a      	add	r2, r3
 8010082:	78bb      	ldrb	r3, [r7, #2]
 8010084:	429a      	cmp	r2, r3
 8010086:	f300 846a 	bgt.w	801095e <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801008a:	78fb      	ldrb	r3, [r7, #3]
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	70fa      	strb	r2, [r7, #3]
 8010090:	461a      	mov	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4413      	add	r3, r2
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	3b02      	subs	r3, #2
 801009a:	2b11      	cmp	r3, #17
 801009c:	f200 8461 	bhi.w	8010962 <ProcessMacCommands+0x926>
 80100a0:	a201      	add	r2, pc, #4	; (adr r2, 80100a8 <ProcessMacCommands+0x6c>)
 80100a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a6:	bf00      	nop
 80100a8:	080100f1 	.word	0x080100f1
 80100ac:	08010133 	.word	0x08010133
 80100b0:	0801024f 	.word	0x0801024f
 80100b4:	0801028d 	.word	0x0801028d
 80100b8:	0801037d 	.word	0x0801037d
 80100bc:	080103d9 	.word	0x080103d9
 80100c0:	08010495 	.word	0x08010495
 80100c4:	080104ef 	.word	0x080104ef
 80100c8:	080105d3 	.word	0x080105d3
 80100cc:	08010963 	.word	0x08010963
 80100d0:	08010963 	.word	0x08010963
 80100d4:	0801067d 	.word	0x0801067d
 80100d8:	08010963 	.word	0x08010963
 80100dc:	08010963 	.word	0x08010963
 80100e0:	08010793 	.word	0x08010793
 80100e4:	080107c7 	.word	0x080107c7
 80100e8:	08010857 	.word	0x08010857
 80100ec:	080108cd 	.word	0x080108cd
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80100f0:	2004      	movs	r0, #4
 80100f2:	f003 fd8f 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 842a 	beq.w	8010952 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80100fe:	2104      	movs	r1, #4
 8010100:	2000      	movs	r0, #0
 8010102:	f003 fcfb 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010106:	78fb      	ldrb	r3, [r7, #3]
 8010108:	1c5a      	adds	r2, r3, #1
 801010a:	70fa      	strb	r2, [r7, #3]
 801010c:	461a      	mov	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4413      	add	r3, r2
 8010112:	781a      	ldrb	r2, [r3, #0]
 8010114:	4bad      	ldr	r3, [pc, #692]	; (80103cc <ProcessMacCommands+0x390>)
 8010116:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801011a:	78fb      	ldrb	r3, [r7, #3]
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	70fa      	strb	r2, [r7, #3]
 8010120:	461a      	mov	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4413      	add	r3, r2
 8010126:	781a      	ldrb	r2, [r3, #0]
 8010128:	4ba8      	ldr	r3, [pc, #672]	; (80103cc <ProcessMacCommands+0x390>)
 801012a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 801012e:	f000 bc10 	b.w	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010132:	2300      	movs	r3, #0
 8010134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010138:	2300      	movs	r3, #0
 801013a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010144:	2300      	movs	r3, #0
 8010146:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 801014a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801014e:	f083 0301 	eor.w	r3, r3, #1
 8010152:	b2db      	uxtb	r3, r3
 8010154:	2b00      	cmp	r3, #0
 8010156:	d078      	beq.n	801024a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8010158:	2301      	movs	r3, #1
 801015a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801015e:	78fb      	ldrb	r3, [r7, #3]
 8010160:	3b01      	subs	r3, #1
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	4413      	add	r3, r2
 8010166:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010168:	78ba      	ldrb	r2, [r7, #2]
 801016a:	78fb      	ldrb	r3, [r7, #3]
 801016c:	1ad3      	subs	r3, r2, r3
 801016e:	b2db      	uxtb	r3, r3
 8010170:	3301      	adds	r3, #1
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010178:	4b95      	ldr	r3, [pc, #596]	; (80103d0 <ProcessMacCommands+0x394>)
 801017a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801017e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010182:	4b93      	ldr	r3, [pc, #588]	; (80103d0 <ProcessMacCommands+0x394>)
 8010184:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010188:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801018c:	4b90      	ldr	r3, [pc, #576]	; (80103d0 <ProcessMacCommands+0x394>)
 801018e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010192:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010196:	4b8e      	ldr	r3, [pc, #568]	; (80103d0 <ProcessMacCommands+0x394>)
 8010198:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801019c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80101a0:	4b8b      	ldr	r3, [pc, #556]	; (80103d0 <ProcessMacCommands+0x394>)
 80101a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80101a6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80101aa:	4b89      	ldr	r3, [pc, #548]	; (80103d0 <ProcessMacCommands+0x394>)
 80101ac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80101b0:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80101b2:	4b87      	ldr	r3, [pc, #540]	; (80103d0 <ProcessMacCommands+0x394>)
 80101b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80101b8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80101bc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80101c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80101c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4623      	mov	r3, r4
 80101d2:	f005 f8af 	bl	8015334 <RegionLinkAdrReq>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80101dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101e0:	f003 0307 	and.w	r3, r3, #7
 80101e4:	2b07      	cmp	r3, #7
 80101e6:	d10e      	bne.n	8010206 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80101e8:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80101ec:	4b78      	ldr	r3, [pc, #480]	; (80103d0 <ProcessMacCommands+0x394>)
 80101ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80101f2:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80101f6:	4b76      	ldr	r3, [pc, #472]	; (80103d0 <ProcessMacCommands+0x394>)
 80101f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80101fc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010200:	4b73      	ldr	r3, [pc, #460]	; (80103d0 <ProcessMacCommands+0x394>)
 8010202:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010206:	2300      	movs	r3, #0
 8010208:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801020c:	e00b      	b.n	8010226 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801020e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010212:	2201      	movs	r2, #1
 8010214:	4619      	mov	r1, r3
 8010216:	2003      	movs	r0, #3
 8010218:	f003 f9d4 	bl	80135c4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801021c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010220:	3301      	adds	r3, #1
 8010222:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010226:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801022a:	4a6a      	ldr	r2, [pc, #424]	; (80103d4 <ProcessMacCommands+0x398>)
 801022c:	fba2 2303 	umull	r2, r3, r2, r3
 8010230:	089b      	lsrs	r3, r3, #2
 8010232:	b2db      	uxtb	r3, r3
 8010234:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010238:	429a      	cmp	r2, r3
 801023a:	d3e8      	bcc.n	801020e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801023c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	4413      	add	r3, r2
 8010244:	b2db      	uxtb	r3, r3
 8010246:	3b01      	subs	r3, #1
 8010248:	70fb      	strb	r3, [r7, #3]
                }
                break;
 801024a:	bf00      	nop
 801024c:	e381      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801024e:	78fb      	ldrb	r3, [r7, #3]
 8010250:	1c5a      	adds	r2, r3, #1
 8010252:	70fa      	strb	r2, [r7, #3]
 8010254:	461a      	mov	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4413      	add	r3, r2
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f003 030f 	and.w	r3, r3, #15
 8010260:	b2da      	uxtb	r2, r3
 8010262:	4b5b      	ldr	r3, [pc, #364]	; (80103d0 <ProcessMacCommands+0x394>)
 8010264:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010268:	4b59      	ldr	r3, [pc, #356]	; (80103d0 <ProcessMacCommands+0x394>)
 801026a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801026e:	461a      	mov	r2, r3
 8010270:	2301      	movs	r3, #1
 8010272:	4093      	lsls	r3, r2
 8010274:	b29a      	uxth	r2, r3
 8010276:	4b56      	ldr	r3, [pc, #344]	; (80103d0 <ProcessMacCommands+0x394>)
 8010278:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801027c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010280:	2200      	movs	r2, #0
 8010282:	4619      	mov	r1, r3
 8010284:	2004      	movs	r0, #4
 8010286:	f003 f99d 	bl	80135c4 <LoRaMacCommandsAddCmd>
                break;
 801028a:	e362      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801028c:	2307      	movs	r3, #7
 801028e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010292:	78fb      	ldrb	r3, [r7, #3]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	4413      	add	r3, r2
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	091b      	lsrs	r3, r3, #4
 801029c:	b2db      	uxtb	r3, r3
 801029e:	b25b      	sxtb	r3, r3
 80102a0:	f003 0307 	and.w	r3, r3, #7
 80102a4:	b25b      	sxtb	r3, r3
 80102a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	4413      	add	r3, r2
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	b25b      	sxtb	r3, r3
 80102b4:	f003 030f 	and.w	r3, r3, #15
 80102b8:	b25b      	sxtb	r3, r3
 80102ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	3301      	adds	r3, #1
 80102c2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80102c4:	78fb      	ldrb	r3, [r7, #3]
 80102c6:	1c5a      	adds	r2, r3, #1
 80102c8:	70fa      	strb	r2, [r7, #3]
 80102ca:	461a      	mov	r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4413      	add	r3, r2
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80102d4:	78fb      	ldrb	r3, [r7, #3]
 80102d6:	1c5a      	adds	r2, r3, #1
 80102d8:	70fa      	strb	r2, [r7, #3]
 80102da:	461a      	mov	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4413      	add	r3, r2
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	021a      	lsls	r2, r3, #8
 80102e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e6:	4313      	orrs	r3, r2
 80102e8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80102ea:	78fb      	ldrb	r3, [r7, #3]
 80102ec:	1c5a      	adds	r2, r3, #1
 80102ee:	70fa      	strb	r2, [r7, #3]
 80102f0:	461a      	mov	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4413      	add	r3, r2
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	041a      	lsls	r2, r3, #16
 80102fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102fc:	4313      	orrs	r3, r2
 80102fe:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010302:	2264      	movs	r2, #100	; 0x64
 8010304:	fb02 f303 	mul.w	r3, r2, r3
 8010308:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801030a:	4b31      	ldr	r3, [pc, #196]	; (80103d0 <ProcessMacCommands+0x394>)
 801030c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010310:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010314:	4611      	mov	r1, r2
 8010316:	4618      	mov	r0, r3
 8010318:	f005 f833 	bl	8015382 <RegionRxParamSetupReq>
 801031c:	4603      	mov	r3, r0
 801031e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010322:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010326:	f003 0307 	and.w	r3, r3, #7
 801032a:	2b07      	cmp	r3, #7
 801032c:	d117      	bne.n	801035e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801032e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010332:	b2da      	uxtb	r2, r3
 8010334:	4b26      	ldr	r3, [pc, #152]	; (80103d0 <ProcessMacCommands+0x394>)
 8010336:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801033a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801033e:	b2da      	uxtb	r2, r3
 8010340:	4b23      	ldr	r3, [pc, #140]	; (80103d0 <ProcessMacCommands+0x394>)
 8010342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010348:	4a21      	ldr	r2, [pc, #132]	; (80103d0 <ProcessMacCommands+0x394>)
 801034a:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801034c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034e:	4a20      	ldr	r2, [pc, #128]	; (80103d0 <ProcessMacCommands+0x394>)
 8010350:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010352:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8010356:	b2da      	uxtb	r2, r3
 8010358:	4b1d      	ldr	r3, [pc, #116]	; (80103d0 <ProcessMacCommands+0x394>)
 801035a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 801035e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010362:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010366:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801036a:	2201      	movs	r2, #1
 801036c:	4619      	mov	r1, r3
 801036e:	2005      	movs	r0, #5
 8010370:	f003 f928 	bl	80135c4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010374:	f7ff fe52 	bl	801001c <SetMlmeScheduleUplinkIndication>
                break;
 8010378:	bf00      	nop
 801037a:	e2ea      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801037c:	23ff      	movs	r3, #255	; 0xff
 801037e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010382:	4b12      	ldr	r3, [pc, #72]	; (80103cc <ProcessMacCommands+0x390>)
 8010384:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00d      	beq.n	80103a8 <ProcessMacCommands+0x36c>
 801038c:	4b0f      	ldr	r3, [pc, #60]	; (80103cc <ProcessMacCommands+0x390>)
 801038e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010398:	4b0c      	ldr	r3, [pc, #48]	; (80103cc <ProcessMacCommands+0x390>)
 801039a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4798      	blx	r3
 80103a2:	4603      	mov	r3, r0
 80103a4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80103a8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80103ac:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80103b0:	787b      	ldrb	r3, [r7, #1]
 80103b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80103bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80103c0:	2202      	movs	r2, #2
 80103c2:	4619      	mov	r1, r3
 80103c4:	2006      	movs	r0, #6
 80103c6:	f003 f8fd 	bl	80135c4 <LoRaMacCommandsAddCmd>
                break;
 80103ca:	e2c2      	b.n	8010952 <ProcessMacCommands+0x916>
 80103cc:	2000302c 	.word	0x2000302c
 80103d0:	20003534 	.word	0x20003534
 80103d4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80103d8:	2303      	movs	r3, #3
 80103da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80103de:	78fb      	ldrb	r3, [r7, #3]
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	70fa      	strb	r2, [r7, #3]
 80103e4:	461a      	mov	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4413      	add	r3, r2
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	b25b      	sxtb	r3, r3
 80103ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80103f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80103f8:	78fb      	ldrb	r3, [r7, #3]
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	70fa      	strb	r2, [r7, #3]
 80103fe:	461a      	mov	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4413      	add	r3, r2
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	1c5a      	adds	r2, r3, #1
 801040c:	70fa      	strb	r2, [r7, #3]
 801040e:	461a      	mov	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4413      	add	r3, r2
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	021a      	lsls	r2, r3, #8
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	4313      	orrs	r3, r2
 801041c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801041e:	78fb      	ldrb	r3, [r7, #3]
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	70fa      	strb	r2, [r7, #3]
 8010424:	461a      	mov	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4413      	add	r3, r2
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	041a      	lsls	r2, r3, #16
 801042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010430:	4313      	orrs	r3, r2
 8010432:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010436:	2264      	movs	r2, #100	; 0x64
 8010438:	fb02 f303 	mul.w	r3, r2, r3
 801043c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010442:	78fb      	ldrb	r3, [r7, #3]
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	70fa      	strb	r2, [r7, #3]
 8010448:	461a      	mov	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4413      	add	r3, r2
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	b25b      	sxtb	r3, r3
 8010452:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010456:	4b87      	ldr	r3, [pc, #540]	; (8010674 <ProcessMacCommands+0x638>)
 8010458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801045c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010460:	4611      	mov	r1, r2
 8010462:	4618      	mov	r0, r3
 8010464:	f004 ffa8 	bl	80153b8 <RegionNewChannelReq>
 8010468:	4603      	mov	r3, r0
 801046a:	b2db      	uxtb	r3, r3
 801046c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010470:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010474:	b25b      	sxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	db0a      	blt.n	8010490 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 801047a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801047e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010482:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010486:	2201      	movs	r2, #1
 8010488:	4619      	mov	r1, r3
 801048a:	2007      	movs	r0, #7
 801048c:	f003 f89a 	bl	80135c4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010490:	bf00      	nop
 8010492:	e25e      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010494:	78fb      	ldrb	r3, [r7, #3]
 8010496:	1c5a      	adds	r2, r3, #1
 8010498:	70fa      	strb	r2, [r7, #3]
 801049a:	461a      	mov	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4413      	add	r3, r2
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	f003 030f 	and.w	r3, r3, #15
 80104a6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80104aa:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d104      	bne.n	80104bc <ProcessMacCommands+0x480>
                {
                    delay++;
 80104b2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80104b6:	3301      	adds	r3, #1
 80104b8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80104bc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80104c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80104c4:	fb02 f303 	mul.w	r3, r2, r3
 80104c8:	461a      	mov	r2, r3
 80104ca:	4b6a      	ldr	r3, [pc, #424]	; (8010674 <ProcessMacCommands+0x638>)
 80104cc:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80104ce:	4b69      	ldr	r3, [pc, #420]	; (8010674 <ProcessMacCommands+0x638>)
 80104d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80104d6:	4a67      	ldr	r2, [pc, #412]	; (8010674 <ProcessMacCommands+0x638>)
 80104d8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80104da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104de:	2200      	movs	r2, #0
 80104e0:	4619      	mov	r1, r3
 80104e2:	2008      	movs	r0, #8
 80104e4:	f003 f86e 	bl	80135c4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80104e8:	f7ff fd98 	bl	801001c <SetMlmeScheduleUplinkIndication>
                break;
 80104ec:	e231      	b.n	8010952 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80104ee:	78fb      	ldrb	r3, [r7, #3]
 80104f0:	1c5a      	adds	r2, r3, #1
 80104f2:	70fa      	strb	r2, [r7, #3]
 80104f4:	461a      	mov	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4413      	add	r3, r2
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010500:	2300      	movs	r3, #0
 8010502:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801050c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010510:	f003 0320 	and.w	r3, r3, #32
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010518:	2301      	movs	r3, #1
 801051a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801051e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801052a:	2301      	movs	r3, #1
 801052c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010530:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010534:	f003 030f 	and.w	r3, r3, #15
 8010538:	b2db      	uxtb	r3, r3
 801053a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801053e:	4b4d      	ldr	r3, [pc, #308]	; (8010674 <ProcessMacCommands+0x638>)
 8010540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010544:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f004 ff4f 	bl	80153ee <RegionTxParamSetupReq>
 8010550:	4603      	mov	r3, r0
 8010552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010556:	d03a      	beq.n	80105ce <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010558:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801055c:	4b45      	ldr	r3, [pc, #276]	; (8010674 <ProcessMacCommands+0x638>)
 801055e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010562:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010566:	4b43      	ldr	r3, [pc, #268]	; (8010674 <ProcessMacCommands+0x638>)
 8010568:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801056c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010570:	461a      	mov	r2, r3
 8010572:	4b41      	ldr	r3, [pc, #260]	; (8010678 <ProcessMacCommands+0x63c>)
 8010574:	5c9b      	ldrb	r3, [r3, r2]
 8010576:	4618      	mov	r0, r3
 8010578:	f7f0 f92c 	bl	80007d4 <__aeabi_ui2f>
 801057c:	4603      	mov	r3, r0
 801057e:	4a3d      	ldr	r2, [pc, #244]	; (8010674 <ProcessMacCommands+0x638>)
 8010580:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010582:	2302      	movs	r3, #2
 8010584:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010588:	4b3a      	ldr	r3, [pc, #232]	; (8010674 <ProcessMacCommands+0x638>)
 801058a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801058e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010592:	4b38      	ldr	r3, [pc, #224]	; (8010674 <ProcessMacCommands+0x638>)
 8010594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010598:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801059c:	4611      	mov	r1, r2
 801059e:	4618      	mov	r0, r3
 80105a0:	f004 fdc1 	bl	8015126 <RegionGetPhyParam>
 80105a4:	4603      	mov	r3, r0
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80105a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105aa:	b25a      	sxtb	r2, r3
 80105ac:	4b31      	ldr	r3, [pc, #196]	; (8010674 <ProcessMacCommands+0x638>)
 80105ae:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105b2:	4293      	cmp	r3, r2
 80105b4:	bfb8      	it	lt
 80105b6:	4613      	movlt	r3, r2
 80105b8:	b25a      	sxtb	r2, r3
 80105ba:	4b2e      	ldr	r3, [pc, #184]	; (8010674 <ProcessMacCommands+0x638>)
 80105bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80105c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105c4:	2200      	movs	r2, #0
 80105c6:	4619      	mov	r1, r3
 80105c8:	2009      	movs	r0, #9
 80105ca:	f002 fffb 	bl	80135c4 <LoRaMacCommandsAddCmd>
                }
                break;
 80105ce:	bf00      	nop
 80105d0:	e1bf      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80105d2:	2303      	movs	r3, #3
 80105d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80105d8:	78fb      	ldrb	r3, [r7, #3]
 80105da:	1c5a      	adds	r2, r3, #1
 80105dc:	70fa      	strb	r2, [r7, #3]
 80105de:	461a      	mov	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4413      	add	r3, r2
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80105ea:	78fb      	ldrb	r3, [r7, #3]
 80105ec:	1c5a      	adds	r2, r3, #1
 80105ee:	70fa      	strb	r2, [r7, #3]
 80105f0:	461a      	mov	r2, r3
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80105fa:	78fb      	ldrb	r3, [r7, #3]
 80105fc:	1c5a      	adds	r2, r3, #1
 80105fe:	70fa      	strb	r2, [r7, #3]
 8010600:	461a      	mov	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4413      	add	r3, r2
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	021a      	lsls	r2, r3, #8
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	4313      	orrs	r3, r2
 801060e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010610:	78fb      	ldrb	r3, [r7, #3]
 8010612:	1c5a      	adds	r2, r3, #1
 8010614:	70fa      	strb	r2, [r7, #3]
 8010616:	461a      	mov	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4413      	add	r3, r2
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	041a      	lsls	r2, r3, #16
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	4313      	orrs	r3, r2
 8010624:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	2264      	movs	r2, #100	; 0x64
 801062a:	fb02 f303 	mul.w	r3, r2, r3
 801062e:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010630:	4b10      	ldr	r3, [pc, #64]	; (8010674 <ProcessMacCommands+0x638>)
 8010632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010636:	f107 0220 	add.w	r2, r7, #32
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f004 fef1 	bl	8015424 <RegionDlChannelReq>
 8010642:	4603      	mov	r3, r0
 8010644:	b2db      	uxtb	r3, r3
 8010646:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801064a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801064e:	b25b      	sxtb	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	db0c      	blt.n	801066e <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 8010654:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010658:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801065c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010660:	2201      	movs	r2, #1
 8010662:	4619      	mov	r1, r3
 8010664:	200a      	movs	r0, #10
 8010666:	f002 ffad 	bl	80135c4 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 801066a:	f7ff fcd7 	bl	801001c <SetMlmeScheduleUplinkIndication>
                }
                break;
 801066e:	bf00      	nop
 8010670:	e16f      	b.n	8010952 <ProcessMacCommands+0x916>
 8010672:	bf00      	nop
 8010674:	20003534 	.word	0x20003534
 8010678:	0801e5ec 	.word	0x0801e5ec
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801067c:	200a      	movs	r0, #10
 801067e:	f003 fac9 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 8164 	beq.w	8010952 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801068a:	210a      	movs	r1, #10
 801068c:	2000      	movs	r0, #0
 801068e:	f003 fa35 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010692:	f107 0318 	add.w	r3, r7, #24
 8010696:	2200      	movs	r2, #0
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 801069c:	f107 0310 	add.w	r3, r7, #16
 80106a0:	2200      	movs	r2, #0
 80106a2:	601a      	str	r2, [r3, #0]
 80106a4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80106b0:	78fb      	ldrb	r3, [r7, #3]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	70fa      	strb	r2, [r7, #3]
 80106b6:	461a      	mov	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4413      	add	r3, r2
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80106c0:	78fb      	ldrb	r3, [r7, #3]
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	70fa      	strb	r2, [r7, #3]
 80106c6:	461a      	mov	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	4413      	add	r3, r2
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	021a      	lsls	r2, r3, #8
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	1c5a      	adds	r2, r3, #1
 80106da:	70fa      	strb	r2, [r7, #3]
 80106dc:	461a      	mov	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4413      	add	r3, r2
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	041a      	lsls	r2, r3, #16
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	4313      	orrs	r3, r2
 80106ea:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80106ec:	78fb      	ldrb	r3, [r7, #3]
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	70fa      	strb	r2, [r7, #3]
 80106f2:	461a      	mov	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4413      	add	r3, r2
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	061a      	lsls	r2, r3, #24
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	4313      	orrs	r3, r2
 8010700:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010702:	78fb      	ldrb	r3, [r7, #3]
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	70fa      	strb	r2, [r7, #3]
 8010708:	461a      	mov	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4413      	add	r3, r2
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	b21b      	sxth	r3, r3
 8010712:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010714:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010718:	461a      	mov	r2, r3
 801071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801071e:	fb02 f303 	mul.w	r3, r2, r3
 8010722:	121b      	asrs	r3, r3, #8
 8010724:	b21b      	sxth	r3, r3
 8010726:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010728:	f107 0310 	add.w	r3, r7, #16
 801072c:	f107 0218 	add.w	r2, r7, #24
 8010730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010734:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	4b8c      	ldr	r3, [pc, #560]	; (801096c <ProcessMacCommands+0x930>)
 801073c:	4413      	add	r3, r2
 801073e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010740:	f107 0308 	add.w	r3, r7, #8
 8010744:	4618      	mov	r0, r3
 8010746:	f00c fa6f 	bl	801cc28 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801074a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801074e:	4b88      	ldr	r3, [pc, #544]	; (8010970 <ProcessMacCommands+0x934>)
 8010750:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010754:	9200      	str	r2, [sp, #0]
 8010756:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801075a:	f107 0210 	add.w	r2, r7, #16
 801075e:	ca06      	ldmia	r2, {r1, r2}
 8010760:	f00c f9fb 	bl	801cb5a <SysTimeSub>
 8010764:	f107 0010 	add.w	r0, r7, #16
 8010768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801076e:	f107 0208 	add.w	r2, r7, #8
 8010772:	ca06      	ldmia	r2, {r1, r2}
 8010774:	f00c f9b8 	bl	801cae8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010778:	f107 0310 	add.w	r3, r7, #16
 801077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010780:	f00c fa24 	bl	801cbcc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010784:	f002 fde3 	bl	801334e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010788:	4b79      	ldr	r3, [pc, #484]	; (8010970 <ProcessMacCommands+0x934>)
 801078a:	2201      	movs	r2, #1
 801078c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 8010790:	e0df      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010792:	200d      	movs	r0, #13
 8010794:	f003 fa3e 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	f000 80d9 	beq.w	8010952 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80107a0:	210d      	movs	r1, #13
 80107a2:	2000      	movs	r0, #0
 80107a4:	f003 f9aa 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80107a8:	4b71      	ldr	r3, [pc, #452]	; (8010970 <ProcessMacCommands+0x934>)
 80107aa:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	f000 80cf 	beq.w	8010952 <ProcessMacCommands+0x916>
 80107b4:	4b6e      	ldr	r3, [pc, #440]	; (8010970 <ProcessMacCommands+0x934>)
 80107b6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80107ba:	2b05      	cmp	r3, #5
 80107bc:	f000 80c9 	beq.w	8010952 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80107c0:	f002 fda6 	bl	8013310 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80107c4:	e0c5      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80107c6:	2303      	movs	r3, #3
 80107c8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80107d0:	78fb      	ldrb	r3, [r7, #3]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	70fa      	strb	r2, [r7, #3]
 80107d6:	461a      	mov	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4413      	add	r3, r2
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80107e0:	78fb      	ldrb	r3, [r7, #3]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	70fa      	strb	r2, [r7, #3]
 80107e6:	461a      	mov	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4413      	add	r3, r2
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	021b      	lsls	r3, r3, #8
 80107f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80107f2:	4313      	orrs	r3, r2
 80107f4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80107f6:	78fb      	ldrb	r3, [r7, #3]
 80107f8:	1c5a      	adds	r2, r3, #1
 80107fa:	70fa      	strb	r2, [r7, #3]
 80107fc:	461a      	mov	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4413      	add	r3, r2
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	041b      	lsls	r3, r3, #16
 8010806:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010808:	4313      	orrs	r3, r2
 801080a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801080c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801080e:	2264      	movs	r2, #100	; 0x64
 8010810:	fb02 f303 	mul.w	r3, r2, r3
 8010814:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010816:	78fb      	ldrb	r3, [r7, #3]
 8010818:	1c5a      	adds	r2, r3, #1
 801081a:	70fa      	strb	r2, [r7, #3]
 801081c:	461a      	mov	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4413      	add	r3, r2
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	f003 030f 	and.w	r3, r3, #15
 8010828:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801082c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010830:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010832:	4618      	mov	r0, r3
 8010834:	f002 fd72 	bl	801331c <LoRaMacClassBPingSlotChannelReq>
 8010838:	4603      	mov	r3, r0
 801083a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801083e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8010842:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8010846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801084a:	2201      	movs	r2, #1
 801084c:	4619      	mov	r1, r3
 801084e:	2011      	movs	r0, #17
 8010850:	f002 feb8 	bl	80135c4 <LoRaMacCommandsAddCmd>
                break;
 8010854:	e07d      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010856:	200e      	movs	r0, #14
 8010858:	f003 f9dc 	bl	8013c14 <LoRaMacConfirmQueueIsCmdActive>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d077      	beq.n	8010952 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010862:	210e      	movs	r1, #14
 8010864:	2000      	movs	r0, #0
 8010866:	f003 f949 	bl	8013afc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801086a:	2300      	movs	r3, #0
 801086c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010870:	2300      	movs	r3, #0
 8010872:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010876:	78fb      	ldrb	r3, [r7, #3]
 8010878:	1c5a      	adds	r2, r3, #1
 801087a:	70fa      	strb	r2, [r7, #3]
 801087c:	461a      	mov	r2, r3
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4413      	add	r3, r2
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010888:	78fb      	ldrb	r3, [r7, #3]
 801088a:	1c5a      	adds	r2, r3, #1
 801088c:	70fa      	strb	r2, [r7, #3]
 801088e:	461a      	mov	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4413      	add	r3, r2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	021b      	lsls	r3, r3, #8
 8010898:	b21a      	sxth	r2, r3
 801089a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801089e:	4313      	orrs	r3, r2
 80108a0:	b21b      	sxth	r3, r3
 80108a2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80108a6:	78fb      	ldrb	r3, [r7, #3]
 80108a8:	1c5a      	adds	r2, r3, #1
 80108aa:	70fa      	strb	r2, [r7, #3]
 80108ac:	461a      	mov	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	4413      	add	r3, r2
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80108b8:	4b2e      	ldr	r3, [pc, #184]	; (8010974 <ProcessMacCommands+0x938>)
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80108c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80108c4:	4618      	mov	r0, r3
 80108c6:	f002 fd35 	bl	8013334 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80108ca:	e042      	b.n	8010952 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80108d2:	78fb      	ldrb	r3, [r7, #3]
 80108d4:	1c5a      	adds	r2, r3, #1
 80108d6:	70fa      	strb	r2, [r7, #3]
 80108d8:	461a      	mov	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4413      	add	r3, r2
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80108e4:	78fb      	ldrb	r3, [r7, #3]
 80108e6:	1c5a      	adds	r2, r3, #1
 80108e8:	70fa      	strb	r2, [r7, #3]
 80108ea:	461a      	mov	r2, r3
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4413      	add	r3, r2
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	021b      	lsls	r3, r3, #8
 80108f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80108f8:	4313      	orrs	r3, r2
 80108fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80108fe:	78fb      	ldrb	r3, [r7, #3]
 8010900:	1c5a      	adds	r2, r3, #1
 8010902:	70fa      	strb	r2, [r7, #3]
 8010904:	461a      	mov	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4413      	add	r3, r2
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	041b      	lsls	r3, r3, #16
 801090e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010912:	4313      	orrs	r3, r2
 8010914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801091c:	2264      	movs	r2, #100	; 0x64
 801091e:	fb02 f303 	mul.w	r3, r2, r3
 8010922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010926:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801092a:	f002 fd16 	bl	801335a <LoRaMacClassBBeaconFreqReq>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d003      	beq.n	801093c <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 8010934:	2301      	movs	r3, #1
 8010936:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801093a:	e002      	b.n	8010942 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801093c:	2300      	movs	r3, #0
 801093e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010946:	2201      	movs	r2, #1
 8010948:	4619      	mov	r1, r3
 801094a:	2013      	movs	r0, #19
 801094c:	f002 fe3a 	bl	80135c4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010950:	bf00      	nop
    while( macIndex < commandsSize )
 8010952:	78fa      	ldrb	r2, [r7, #3]
 8010954:	78bb      	ldrb	r3, [r7, #2]
 8010956:	429a      	cmp	r2, r3
 8010958:	f4ff ab88 	bcc.w	801006c <ProcessMacCommands+0x30>
 801095c:	e002      	b.n	8010964 <ProcessMacCommands+0x928>
            return;
 801095e:	bf00      	nop
 8010960:	e000      	b.n	8010964 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010962:	bf00      	nop
        }
    }
}
 8010964:	378c      	adds	r7, #140	; 0x8c
 8010966:	46bd      	mov	sp, r7
 8010968:	bd90      	pop	{r4, r7, pc}
 801096a:	bf00      	nop
 801096c:	12d53d80 	.word	0x12d53d80
 8010970:	2000302c 	.word	0x2000302c
 8010974:	20003b4c 	.word	0x20003b4c

08010978 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b08e      	sub	sp, #56	; 0x38
 801097c:	af02      	add	r7, sp, #8
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	607a      	str	r2, [r7, #4]
 8010982:	461a      	mov	r2, r3
 8010984:	460b      	mov	r3, r1
 8010986:	72fb      	strb	r3, [r7, #11]
 8010988:	4613      	mov	r3, r2
 801098a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801098c:	2303      	movs	r3, #3
 801098e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010992:	4b65      	ldr	r3, [pc, #404]	; (8010b28 <Send+0x1b0>)
 8010994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010998:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801099c:	4b62      	ldr	r3, [pc, #392]	; (8010b28 <Send+0x1b0>)
 801099e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80109a6:	4b60      	ldr	r3, [pc, #384]	; (8010b28 <Send+0x1b0>)
 80109a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109aa:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80109ac:	4b5e      	ldr	r3, [pc, #376]	; (8010b28 <Send+0x1b0>)
 80109ae:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d101      	bne.n	80109ba <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80109b6:	2307      	movs	r3, #7
 80109b8:	e0b1      	b.n	8010b1e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80109ba:	4b5b      	ldr	r3, [pc, #364]	; (8010b28 <Send+0x1b0>)
 80109bc:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80109c4:	4b58      	ldr	r3, [pc, #352]	; (8010b28 <Send+0x1b0>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80109d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109d4:	f36f 0303 	bfc	r3, #0, #4
 80109d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80109dc:	4b52      	ldr	r3, [pc, #328]	; (8010b28 <Send+0x1b0>)
 80109de:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80109e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109e6:	f362 13c7 	bfi	r3, r2, #7, #1
 80109ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80109ee:	4b4e      	ldr	r3, [pc, #312]	; (8010b28 <Send+0x1b0>)
 80109f0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d106      	bne.n	8010a06 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80109f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109fc:	f043 0310 	orr.w	r3, r3, #16
 8010a00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010a04:	e005      	b.n	8010a12 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010a0a:	f36f 1304 	bfc	r3, #4, #1
 8010a0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010a12:	4b45      	ldr	r3, [pc, #276]	; (8010b28 <Send+0x1b0>)
 8010a14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d005      	beq.n	8010a28 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010a20:	f043 0320 	orr.w	r3, r3, #32
 8010a24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010a28:	4b3f      	ldr	r3, [pc, #252]	; (8010b28 <Send+0x1b0>)
 8010a2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010a2e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8010a30:	2301      	movs	r3, #1
 8010a32:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010a34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010a38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	bf14      	ite	ne
 8010a42:	2301      	movne	r3, #1
 8010a44:	2300      	moveq	r3, #0
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010a4a:	4b37      	ldr	r3, [pc, #220]	; (8010b28 <Send+0x1b0>)
 8010a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010a50:	4b36      	ldr	r3, [pc, #216]	; (8010b2c <Send+0x1b4>)
 8010a52:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010a56:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010a58:	4b34      	ldr	r3, [pc, #208]	; (8010b2c <Send+0x1b4>)
 8010a5a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010a5e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a60:	4b31      	ldr	r3, [pc, #196]	; (8010b28 <Send+0x1b0>)
 8010a62:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010a66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010a6a:	4b2f      	ldr	r3, [pc, #188]	; (8010b28 <Send+0x1b0>)
 8010a6c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010a70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a74:	4b2c      	ldr	r3, [pc, #176]	; (8010b28 <Send+0x1b0>)
 8010a76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010a7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010a7e:	4b2a      	ldr	r3, [pc, #168]	; (8010b28 <Send+0x1b0>)
 8010a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a8c:	f107 0014 	add.w	r0, r7, #20
 8010a90:	4a27      	ldr	r2, [pc, #156]	; (8010b30 <Send+0x1b8>)
 8010a92:	4928      	ldr	r1, [pc, #160]	; (8010b34 <Send+0x1bc>)
 8010a94:	f002 fb7c 	bl	8013190 <LoRaMacAdrCalcNext>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010aa0:	f362 1386 	bfi	r3, r2, #6, #1
 8010aa4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010aa8:	7afa      	ldrb	r2, [r7, #11]
 8010aaa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010aae:	893b      	ldrh	r3, [r7, #8]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f000 fc21 	bl	80112fc <PrepareFrame>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <Send+0x158>
 8010ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010acc:	2b0a      	cmp	r3, #10
 8010ace:	d107      	bne.n	8010ae0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010ad0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f000 f96d 	bl	8010db4 <ScheduleTx>
 8010ada:	4603      	mov	r3, r0
 8010adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d00a      	beq.n	8010afe <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010ae8:	4a0f      	ldr	r2, [pc, #60]	; (8010b28 <Send+0x1b0>)
 8010aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010aee:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010af2:	4a0d      	ldr	r2, [pc, #52]	; (8010b28 <Send+0x1b0>)
 8010af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010af8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010afc:	e00d      	b.n	8010b1a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010afe:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <Send+0x1b0>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b08:	4a07      	ldr	r2, [pc, #28]	; (8010b28 <Send+0x1b0>)
 8010b0a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010b0c:	f002 fdd2 	bl	80136b4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b16:	2313      	movs	r3, #19
 8010b18:	e001      	b.n	8010b1e <Send+0x1a6>
        }
    }
    return status;
 8010b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3730      	adds	r7, #48	; 0x30
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20003534 	.word	0x20003534
 8010b2c:	2000302c 	.word	0x2000302c
 8010b30:	2000356c 	.word	0x2000356c
 8010b34:	2000356d 	.word	0x2000356d

08010b38 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010b46:	2300      	movs	r3, #0
 8010b48:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010b4e:	79fb      	ldrb	r3, [r7, #7]
 8010b50:	2bff      	cmp	r3, #255	; 0xff
 8010b52:	d129      	bne.n	8010ba8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010b54:	2000      	movs	r0, #0
 8010b56:	f7ff f941 	bl	800fddc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010b5a:	4b1a      	ldr	r3, [pc, #104]	; (8010bc4 <SendReJoinReq+0x8c>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010b62:	4b18      	ldr	r3, [pc, #96]	; (8010bc4 <SendReJoinReq+0x8c>)
 8010b64:	4a18      	ldr	r2, [pc, #96]	; (8010bc8 <SendReJoinReq+0x90>)
 8010b66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010b6a:	4b16      	ldr	r3, [pc, #88]	; (8010bc4 <SendReJoinReq+0x8c>)
 8010b6c:	22ff      	movs	r2, #255	; 0xff
 8010b6e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010b72:	7b3b      	ldrb	r3, [r7, #12]
 8010b74:	f36f 1347 	bfc	r3, #5, #3
 8010b78:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010b7a:	7b3a      	ldrb	r2, [r7, #12]
 8010b7c:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <SendReJoinReq+0x8c>)
 8010b7e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010b82:	f7fc fc85 	bl	800d490 <SecureElementGetJoinEui>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2208      	movs	r2, #8
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	480f      	ldr	r0, [pc, #60]	; (8010bcc <SendReJoinReq+0x94>)
 8010b8e:	f008 f98a 	bl	8018ea6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010b92:	f7fc fc5b 	bl	800d44c <SecureElementGetDevEui>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2208      	movs	r2, #8
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	480c      	ldr	r0, [pc, #48]	; (8010bd0 <SendReJoinReq+0x98>)
 8010b9e:	f008 f982 	bl	8018ea6 <memcpy1>

            allowDelayedTx = false;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	73fb      	strb	r3, [r7, #15]

            break;
 8010ba6:	e002      	b.n	8010bae <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010ba8:	2302      	movs	r3, #2
 8010baa:	73bb      	strb	r3, [r7, #14]
            break;
 8010bac:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f000 f8ff 	bl	8010db4 <ScheduleTx>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	73bb      	strb	r3, [r7, #14]
    return status;
 8010bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	2000302c 	.word	0x2000302c
 8010bc8:	2000302e 	.word	0x2000302e
 8010bcc:	2000313a 	.word	0x2000313a
 8010bd0:	20003142 	.word	0x20003142

08010bd4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010bd8:	f002 fb49 	bl	801326e <LoRaMacClassBIsBeaconExpected>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d001      	beq.n	8010be6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010be2:	230e      	movs	r3, #14
 8010be4:	e013      	b.n	8010c0e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010be6:	4b0b      	ldr	r3, [pc, #44]	; (8010c14 <CheckForClassBCollision+0x40>)
 8010be8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d10d      	bne.n	8010c0c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010bf0:	f002 fb44 	bl	801327c <LoRaMacClassBIsPingExpected>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010bfa:	230f      	movs	r3, #15
 8010bfc:	e007      	b.n	8010c0e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010bfe:	f002 fb44 	bl	801328a <LoRaMacClassBIsMulticastExpected>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d001      	beq.n	8010c0c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010c08:	230f      	movs	r3, #15
 8010c0a:	e000      	b.n	8010c0e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	20003534 	.word	0x20003534

08010c18 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c1e:	4b2d      	ldr	r3, [pc, #180]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c20:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010c24:	4b2b      	ldr	r3, [pc, #172]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c26:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010c2a:	4b2a      	ldr	r3, [pc, #168]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c2c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010c30:	4b28      	ldr	r3, [pc, #160]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c32:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010c36:	4b27      	ldr	r3, [pc, #156]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	f004 fc6d 	bl	801551c <RegionApplyDrOffset>
 8010c42:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c44:	b259      	sxtb	r1, r3
 8010c46:	4b23      	ldr	r3, [pc, #140]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c48:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010c4c:	4b21      	ldr	r3, [pc, #132]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c50:	4821      	ldr	r0, [pc, #132]	; (8010cd8 <ComputeRxWindowParameters+0xc0>)
 8010c52:	9000      	str	r0, [sp, #0]
 8010c54:	4620      	mov	r0, r4
 8010c56:	f004 fb0a 	bl	801526e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c5a:	4b1e      	ldr	r3, [pc, #120]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c5c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010c60:	4b1c      	ldr	r3, [pc, #112]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c62:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c66:	b259      	sxtb	r1, r3
 8010c68:	4b1a      	ldr	r3, [pc, #104]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c6a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010c6e:	4b19      	ldr	r3, [pc, #100]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c72:	4c1a      	ldr	r4, [pc, #104]	; (8010cdc <ComputeRxWindowParameters+0xc4>)
 8010c74:	9400      	str	r4, [sp, #0]
 8010c76:	f004 fafa 	bl	801526e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010c7a:	4b16      	ldr	r3, [pc, #88]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c7e:	4a18      	ldr	r2, [pc, #96]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010c80:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010c84:	4413      	add	r3, r2
 8010c86:	4a16      	ldr	r2, [pc, #88]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010c88:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010c8c:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c90:	4a13      	ldr	r2, [pc, #76]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010c92:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010c96:	4413      	add	r3, r2
 8010c98:	4a11      	ldr	r2, [pc, #68]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010c9a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010c9e:	4b0d      	ldr	r3, [pc, #52]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010ca0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d111      	bne.n	8010ccc <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010ca8:	4b0a      	ldr	r3, [pc, #40]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cac:	4a0c      	ldr	r2, [pc, #48]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010cae:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010cb2:	4413      	add	r3, r2
 8010cb4:	4a0a      	ldr	r2, [pc, #40]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010cb6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010cba:	4b06      	ldr	r3, [pc, #24]	; (8010cd4 <ComputeRxWindowParameters+0xbc>)
 8010cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cbe:	4a08      	ldr	r2, [pc, #32]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010cc0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010cc4:	4413      	add	r3, r2
 8010cc6:	4a06      	ldr	r2, [pc, #24]	; (8010ce0 <ComputeRxWindowParameters+0xc8>)
 8010cc8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010ccc:	bf00      	nop
 8010cce:	3704      	adds	r7, #4
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd90      	pop	{r4, r7, pc}
 8010cd4:	20003534 	.word	0x20003534
 8010cd8:	200033e4 	.word	0x200033e4
 8010cdc:	200033f8 	.word	0x200033f8
 8010ce0:	2000302c 	.word	0x2000302c

08010ce4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010cee:	4b13      	ldr	r3, [pc, #76]	; (8010d3c <VerifyTxFrame+0x58>)
 8010cf0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d01b      	beq.n	8010d30 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010cf8:	1d3b      	adds	r3, r7, #4
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f002 fd20 	bl	8013740 <LoRaMacCommandsGetSizeSerializedCmds>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d06:	2313      	movs	r3, #19
 8010d08:	e013      	b.n	8010d32 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010d0a:	4b0d      	ldr	r3, [pc, #52]	; (8010d40 <VerifyTxFrame+0x5c>)
 8010d0c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010d10:	4a0a      	ldr	r2, [pc, #40]	; (8010d3c <VerifyTxFrame+0x58>)
 8010d12:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	b2d2      	uxtb	r2, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff f956 	bl	800ffcc <ValidatePayloadLength>
 8010d20:	4603      	mov	r3, r0
 8010d22:	f083 0301 	eor.w	r3, r3, #1
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010d2c:	2308      	movs	r3, #8
 8010d2e:	e000      	b.n	8010d32 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	20003534 	.word	0x20003534
 8010d40:	2000302c 	.word	0x2000302c

08010d44 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010d4a:	4b18      	ldr	r3, [pc, #96]	; (8010dac <SerializeTxFrame+0x68>)
 8010d4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d002      	beq.n	8010d5a <SerializeTxFrame+0x16>
 8010d54:	2b04      	cmp	r3, #4
 8010d56:	d011      	beq.n	8010d7c <SerializeTxFrame+0x38>
 8010d58:	e021      	b.n	8010d9e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010d5a:	4815      	ldr	r0, [pc, #84]	; (8010db0 <SerializeTxFrame+0x6c>)
 8010d5c:	f004 f855 	bl	8014e0a <LoRaMacSerializerJoinRequest>
 8010d60:	4603      	mov	r3, r0
 8010d62:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d6a:	2311      	movs	r3, #17
 8010d6c:	e01a      	b.n	8010da4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010d6e:	4b0f      	ldr	r3, [pc, #60]	; (8010dac <SerializeTxFrame+0x68>)
 8010d70:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <SerializeTxFrame+0x68>)
 8010d78:	801a      	strh	r2, [r3, #0]
            break;
 8010d7a:	e012      	b.n	8010da2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010d7c:	480c      	ldr	r0, [pc, #48]	; (8010db0 <SerializeTxFrame+0x6c>)
 8010d7e:	f004 f8c6 	bl	8014f0e <LoRaMacSerializerData>
 8010d82:	4603      	mov	r3, r0
 8010d84:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d8c:	2311      	movs	r3, #17
 8010d8e:	e009      	b.n	8010da4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010d90:	4b06      	ldr	r3, [pc, #24]	; (8010dac <SerializeTxFrame+0x68>)
 8010d92:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	4b04      	ldr	r3, [pc, #16]	; (8010dac <SerializeTxFrame+0x68>)
 8010d9a:	801a      	strh	r2, [r3, #0]
            break;
 8010d9c:	e001      	b.n	8010da2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e000      	b.n	8010da4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	2000302c 	.word	0x2000302c
 8010db0:	20003134 	.word	0x20003134

08010db4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b090      	sub	sp, #64	; 0x40
 8010db8:	af02      	add	r7, sp, #8
 8010dba:	4603      	mov	r3, r0
 8010dbc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dbe:	2303      	movs	r3, #3
 8010dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010dc4:	f7ff ff06 	bl	8010bd4 <CheckForClassBCollision>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d002      	beq.n	8010ddc <ScheduleTx+0x28>
    {
        return status;
 8010dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dda:	e08f      	b.n	8010efc <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010ddc:	f000 f8fa 	bl	8010fd4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010de0:	f7ff ffb0 	bl	8010d44 <SerializeTxFrame>
 8010de4:	4603      	mov	r3, r0
 8010de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d002      	beq.n	8010df8 <ScheduleTx+0x44>
    {
        return status;
 8010df2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010df6:	e081      	b.n	8010efc <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010df8:	4b42      	ldr	r3, [pc, #264]	; (8010f04 <ScheduleTx+0x150>)
 8010dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dfc:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010dfe:	4b41      	ldr	r3, [pc, #260]	; (8010f04 <ScheduleTx+0x150>)
 8010e00:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010e04:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010e06:	4b3f      	ldr	r3, [pc, #252]	; (8010f04 <ScheduleTx+0x150>)
 8010e08:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010e0c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e12:	4618      	mov	r0, r3
 8010e14:	f00b ff40 	bl	801cc98 <SysTimeGetMcuTime>
 8010e18:	4638      	mov	r0, r7
 8010e1a:	4b3a      	ldr	r3, [pc, #232]	; (8010f04 <ScheduleTx+0x150>)
 8010e1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8010e20:	9200      	str	r2, [sp, #0]
 8010e22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8010e26:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010e2a:	ca06      	ldmia	r2, {r1, r2}
 8010e2c:	f00b fe95 	bl	801cb5a <SysTimeSub>
 8010e30:	f107 0320 	add.w	r3, r7, #32
 8010e34:	463a      	mov	r2, r7
 8010e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e3a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010e3e:	4b31      	ldr	r3, [pc, #196]	; (8010f04 <ScheduleTx+0x150>)
 8010e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e42:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010e44:	2300      	movs	r3, #0
 8010e46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010e4e:	4b2e      	ldr	r3, [pc, #184]	; (8010f08 <ScheduleTx+0x154>)
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e54:	4b2b      	ldr	r3, [pc, #172]	; (8010f04 <ScheduleTx+0x150>)
 8010e56:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d104      	bne.n	8010e68 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010e64:	2300      	movs	r3, #0
 8010e66:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010e68:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <ScheduleTx+0x150>)
 8010e6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010e6e:	f107 0114 	add.w	r1, r7, #20
 8010e72:	4b26      	ldr	r3, [pc, #152]	; (8010f0c <ScheduleTx+0x158>)
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	4b26      	ldr	r3, [pc, #152]	; (8010f10 <ScheduleTx+0x15c>)
 8010e78:	4a26      	ldr	r2, [pc, #152]	; (8010f14 <ScheduleTx+0x160>)
 8010e7a:	f004 fb14 	bl	80154a6 <RegionNextChannel>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d022      	beq.n	8010ed2 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e90:	2b0b      	cmp	r3, #11
 8010e92:	d11b      	bne.n	8010ecc <ScheduleTx+0x118>
 8010e94:	7bfb      	ldrb	r3, [r7, #15]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d018      	beq.n	8010ecc <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010e9a:	4b1b      	ldr	r3, [pc, #108]	; (8010f08 <ScheduleTx+0x154>)
 8010e9c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d011      	beq.n	8010ec8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010ea4:	4b18      	ldr	r3, [pc, #96]	; (8010f08 <ScheduleTx+0x154>)
 8010ea6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010eaa:	f043 0320 	orr.w	r3, r3, #32
 8010eae:	4a16      	ldr	r2, [pc, #88]	; (8010f08 <ScheduleTx+0x154>)
 8010eb0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010eb4:	4b14      	ldr	r3, [pc, #80]	; (8010f08 <ScheduleTx+0x154>)
 8010eb6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4816      	ldr	r0, [pc, #88]	; (8010f18 <ScheduleTx+0x164>)
 8010ebe:	f00c f895 	bl	801cfec <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010ec2:	4815      	ldr	r0, [pc, #84]	; (8010f18 <ScheduleTx+0x164>)
 8010ec4:	f00b ffb4 	bl	801ce30 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e017      	b.n	8010efc <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ed0:	e014      	b.n	8010efc <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010ed2:	f7ff fea1 	bl	8010c18 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010ed6:	f7ff ff05 	bl	8010ce4 <VerifyTxFrame>
 8010eda:	4603      	mov	r3, r0
 8010edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d002      	beq.n	8010eee <ScheduleTx+0x13a>
    {
        return status;
 8010ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eec:	e006      	b.n	8010efc <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010eee:	4b06      	ldr	r3, [pc, #24]	; (8010f08 <ScheduleTx+0x154>)
 8010ef0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f000 fb1d 	bl	8011534 <SendFrameOnChannel>
 8010efa:	4603      	mov	r3, r0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3738      	adds	r7, #56	; 0x38
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	20003534 	.word	0x20003534
 8010f08:	2000302c 	.word	0x2000302c
 8010f0c:	20003564 	.word	0x20003564
 8010f10:	200034b0 	.word	0x200034b0
 8010f14:	20003441 	.word	0x20003441
 8010f18:	20003394 	.word	0x20003394

08010f1c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	460a      	mov	r2, r1
 8010f26:	71fb      	strb	r3, [r7, #7]
 8010f28:	4613      	mov	r3, r2
 8010f2a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f2c:	2313      	movs	r3, #19
 8010f2e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010f30:	2300      	movs	r3, #0
 8010f32:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010f34:	4b25      	ldr	r3, [pc, #148]	; (8010fcc <SecureFrame+0xb0>)
 8010f36:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d002      	beq.n	8010f44 <SecureFrame+0x28>
 8010f3e:	2b04      	cmp	r3, #4
 8010f40:	d011      	beq.n	8010f66 <SecureFrame+0x4a>
 8010f42:	e03b      	b.n	8010fbc <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010f44:	4822      	ldr	r0, [pc, #136]	; (8010fd0 <SecureFrame+0xb4>)
 8010f46:	f003 fb29 	bl	801459c <LoRaMacCryptoPrepareJoinRequest>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f54:	2311      	movs	r3, #17
 8010f56:	e034      	b.n	8010fc2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010f58:	4b1c      	ldr	r3, [pc, #112]	; (8010fcc <SecureFrame+0xb0>)
 8010f5a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	4b1a      	ldr	r3, [pc, #104]	; (8010fcc <SecureFrame+0xb0>)
 8010f62:	801a      	strh	r2, [r3, #0]
            break;
 8010f64:	e02c      	b.n	8010fc0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010f66:	f107 0308 	add.w	r3, r7, #8
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f003 fa30 	bl	80143d0 <LoRaMacCryptoGetFCntUp>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d001      	beq.n	8010f7a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010f76:	2312      	movs	r3, #18
 8010f78:	e023      	b.n	8010fc2 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8010f7a:	4b14      	ldr	r3, [pc, #80]	; (8010fcc <SecureFrame+0xb0>)
 8010f7c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d104      	bne.n	8010f8e <SecureFrame+0x72>
 8010f84:	4b11      	ldr	r3, [pc, #68]	; (8010fcc <SecureFrame+0xb0>)
 8010f86:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d902      	bls.n	8010f94 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010f94:	68b8      	ldr	r0, [r7, #8]
 8010f96:	79ba      	ldrb	r2, [r7, #6]
 8010f98:	79f9      	ldrb	r1, [r7, #7]
 8010f9a:	4b0d      	ldr	r3, [pc, #52]	; (8010fd0 <SecureFrame+0xb4>)
 8010f9c:	f003 fc16 	bl	80147cc <LoRaMacCryptoSecureMessage>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d001      	beq.n	8010fae <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010faa:	2311      	movs	r3, #17
 8010fac:	e009      	b.n	8010fc2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010fae:	4b07      	ldr	r3, [pc, #28]	; (8010fcc <SecureFrame+0xb0>)
 8010fb0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <SecureFrame+0xb0>)
 8010fb8:	801a      	strh	r2, [r3, #0]
            break;
 8010fba:	e001      	b.n	8010fc0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	e000      	b.n	8010fc2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	2000302c 	.word	0x2000302c
 8010fd0:	20003134 	.word	0x20003134

08010fd4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010fd8:	4b09      	ldr	r3, [pc, #36]	; (8011000 <CalculateBackOff+0x2c>)
 8010fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d10a      	bne.n	8010ff6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010fe0:	4b07      	ldr	r3, [pc, #28]	; (8011000 <CalculateBackOff+0x2c>)
 8010fe2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	4a06      	ldr	r2, [pc, #24]	; (8011004 <CalculateBackOff+0x30>)
 8010fea:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8010fee:	fb02 f303 	mul.w	r3, r2, r3
 8010ff2:	4a03      	ldr	r2, [pc, #12]	; (8011000 <CalculateBackOff+0x2c>)
 8010ff4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010ff6:	bf00      	nop
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bc80      	pop	{r7}
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	20003534 	.word	0x20003534
 8011004:	2000302c 	.word	0x2000302c

08011008 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	7139      	strb	r1, [r7, #4]
 8011012:	71fb      	strb	r3, [r7, #7]
 8011014:	4613      	mov	r3, r2
 8011016:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011018:	79fb      	ldrb	r3, [r7, #7]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d002      	beq.n	8011024 <RemoveMacCommands+0x1c>
 801101e:	79fb      	ldrb	r3, [r7, #7]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d10d      	bne.n	8011040 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011024:	79bb      	ldrb	r3, [r7, #6]
 8011026:	2b01      	cmp	r3, #1
 8011028:	d108      	bne.n	801103c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801102a:	793b      	ldrb	r3, [r7, #4]
 801102c:	f003 0320 	and.w	r3, r3, #32
 8011030:	b2db      	uxtb	r3, r3
 8011032:	2b00      	cmp	r3, #0
 8011034:	d004      	beq.n	8011040 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011036:	f002 fb61 	bl	80136fc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801103a:	e001      	b.n	8011040 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801103c:	f002 fb5e 	bl	80136fc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011040:	bf00      	nop
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8011048:	b5b0      	push	{r4, r5, r7, lr}
 801104a:	b08e      	sub	sp, #56	; 0x38
 801104c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801104e:	4b68      	ldr	r3, [pc, #416]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011056:	4b66      	ldr	r3, [pc, #408]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011058:	2200      	movs	r2, #0
 801105a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801105c:	4b65      	ldr	r3, [pc, #404]	; (80111f4 <ResetMacParameters+0x1ac>)
 801105e:	2200      	movs	r2, #0
 8011060:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8011064:	4b63      	ldr	r3, [pc, #396]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011066:	2201      	movs	r2, #1
 8011068:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 801106c:	4b61      	ldr	r3, [pc, #388]	; (80111f4 <ResetMacParameters+0x1ac>)
 801106e:	2201      	movs	r2, #1
 8011070:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011074:	4b5f      	ldr	r3, [pc, #380]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 801107c:	4b5c      	ldr	r3, [pc, #368]	; (80111f0 <ResetMacParameters+0x1a8>)
 801107e:	2200      	movs	r2, #0
 8011080:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011084:	4b5a      	ldr	r3, [pc, #360]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011086:	2201      	movs	r2, #1
 8011088:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801108c:	4b58      	ldr	r3, [pc, #352]	; (80111f0 <ResetMacParameters+0x1a8>)
 801108e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8011092:	4b57      	ldr	r3, [pc, #348]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011098:	4b55      	ldr	r3, [pc, #340]	; (80111f0 <ResetMacParameters+0x1a8>)
 801109a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801109e:	4b54      	ldr	r3, [pc, #336]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80110a4:	4b52      	ldr	r3, [pc, #328]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110a6:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80110aa:	4b51      	ldr	r3, [pc, #324]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80110b0:	4b4f      	ldr	r3, [pc, #316]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110b2:	4a4f      	ldr	r2, [pc, #316]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110b4:	3364      	adds	r3, #100	; 0x64
 80110b6:	32a4      	adds	r2, #164	; 0xa4
 80110b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110bc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80110c0:	4b4b      	ldr	r3, [pc, #300]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110c2:	4a4b      	ldr	r2, [pc, #300]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110c4:	336c      	adds	r3, #108	; 0x6c
 80110c6:	32ac      	adds	r2, #172	; 0xac
 80110c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110cc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80110d0:	4b47      	ldr	r3, [pc, #284]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110d2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80110d6:	4b46      	ldr	r3, [pc, #280]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80110dc:	4b44      	ldr	r3, [pc, #272]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110de:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 80110e2:	4b43      	ldr	r3, [pc, #268]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110e4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80110e8:	4b41      	ldr	r3, [pc, #260]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80110ee:	4a40      	ldr	r2, [pc, #256]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110f0:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80110f2:	4b3f      	ldr	r3, [pc, #252]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80110f8:	4a3d      	ldr	r2, [pc, #244]	; (80111f0 <ResetMacParameters+0x1a8>)
 80110fa:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80110fc:	4b3d      	ldr	r3, [pc, #244]	; (80111f4 <ResetMacParameters+0x1ac>)
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8011104:	4b3a      	ldr	r3, [pc, #232]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011106:	2200      	movs	r2, #0
 8011108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801110c:	2301      	movs	r3, #1
 801110e:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011110:	4b39      	ldr	r3, [pc, #228]	; (80111f8 <ResetMacParameters+0x1b0>)
 8011112:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011114:	4b39      	ldr	r3, [pc, #228]	; (80111fc <ResetMacParameters+0x1b4>)
 8011116:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011118:	4b35      	ldr	r3, [pc, #212]	; (80111f0 <ResetMacParameters+0x1a8>)
 801111a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801111e:	1d3a      	adds	r2, r7, #4
 8011120:	4611      	mov	r1, r2
 8011122:	4618      	mov	r0, r3
 8011124:	f004 f837 	bl	8015196 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011128:	4b32      	ldr	r3, [pc, #200]	; (80111f4 <ResetMacParameters+0x1ac>)
 801112a:	2200      	movs	r2, #0
 801112c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011130:	4b30      	ldr	r3, [pc, #192]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011132:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011136:	4b2f      	ldr	r3, [pc, #188]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011138:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801113c:	4b2c      	ldr	r3, [pc, #176]	; (80111f0 <ResetMacParameters+0x1a8>)
 801113e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011140:	4a2c      	ldr	r2, [pc, #176]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011142:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011146:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011148:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801114c:	4b29      	ldr	r3, [pc, #164]	; (80111f4 <ResetMacParameters+0x1ac>)
 801114e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011152:	4b27      	ldr	r3, [pc, #156]	; (80111f0 <ResetMacParameters+0x1a8>)
 8011154:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011158:	4b26      	ldr	r3, [pc, #152]	; (80111f4 <ResetMacParameters+0x1ac>)
 801115a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801115e:	4b25      	ldr	r3, [pc, #148]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011160:	2200      	movs	r2, #0
 8011162:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011166:	4b23      	ldr	r3, [pc, #140]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011168:	2201      	movs	r2, #1
 801116a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801116e:	4a21      	ldr	r2, [pc, #132]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011170:	4b20      	ldr	r3, [pc, #128]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011172:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011176:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801117a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801117c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011182:	4b1c      	ldr	r3, [pc, #112]	; (80111f4 <ResetMacParameters+0x1ac>)
 8011184:	2201      	movs	r2, #1
 8011186:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801118a:	4b1a      	ldr	r3, [pc, #104]	; (80111f4 <ResetMacParameters+0x1ac>)
 801118c:	2202      	movs	r2, #2
 801118e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011196:	2300      	movs	r3, #0
 8011198:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801119a:	4b16      	ldr	r3, [pc, #88]	; (80111f4 <ResetMacParameters+0x1ac>)
 801119c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d009      	beq.n	80111b8 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80111a4:	4b13      	ldr	r3, [pc, #76]	; (80111f4 <ResetMacParameters+0x1ac>)
 80111a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80111ae:	4b11      	ldr	r3, [pc, #68]	; (80111f4 <ResetMacParameters+0x1ac>)
 80111b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80111b8:	4b11      	ldr	r3, [pc, #68]	; (8011200 <ResetMacParameters+0x1b8>)
 80111ba:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80111bc:	4b11      	ldr	r3, [pc, #68]	; (8011204 <ResetMacParameters+0x1bc>)
 80111be:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80111c0:	4b11      	ldr	r3, [pc, #68]	; (8011208 <ResetMacParameters+0x1c0>)
 80111c2:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80111c4:	4b11      	ldr	r3, [pc, #68]	; (801120c <ResetMacParameters+0x1c4>)
 80111c6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80111c8:	4b11      	ldr	r3, [pc, #68]	; (8011210 <ResetMacParameters+0x1c8>)
 80111ca:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80111cc:	4b11      	ldr	r3, [pc, #68]	; (8011214 <ResetMacParameters+0x1cc>)
 80111ce:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80111d0:	4b11      	ldr	r3, [pc, #68]	; (8011218 <ResetMacParameters+0x1d0>)
 80111d2:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80111d4:	4b11      	ldr	r3, [pc, #68]	; (801121c <ResetMacParameters+0x1d4>)
 80111d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80111d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80111dc:	f107 0310 	add.w	r3, r7, #16
 80111e0:	4a0f      	ldr	r2, [pc, #60]	; (8011220 <ResetMacParameters+0x1d8>)
 80111e2:	4618      	mov	r0, r3
 80111e4:	f001 ffec 	bl	80131c0 <LoRaMacClassBInit>
}
 80111e8:	bf00      	nop
 80111ea:	3738      	adds	r7, #56	; 0x38
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bdb0      	pop	{r4, r5, r7, pc}
 80111f0:	20003534 	.word	0x20003534
 80111f4:	2000302c 	.word	0x2000302c
 80111f8:	2000370c 	.word	0x2000370c
 80111fc:	200037b0 	.word	0x200037b0
 8011200:	2000348c 	.word	0x2000348c
 8011204:	20003448 	.word	0x20003448
 8011208:	20003478 	.word	0x20003478
 801120c:	200034ad 	.word	0x200034ad
 8011210:	20003600 	.word	0x20003600
 8011214:	20003574 	.word	0x20003574
 8011218:	20003578 	.word	0x20003578
 801121c:	20003604 	.word	0x20003604
 8011220:	20003b2c 	.word	0x20003b2c

08011224 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f00b fe6c 	bl	801cf0c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011234:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <RxWindowSetup+0x4c>)
 8011236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011238:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801123a:	4b0e      	ldr	r3, [pc, #56]	; (8011274 <RxWindowSetup+0x50>)
 801123c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011240:	4a0d      	ldr	r2, [pc, #52]	; (8011278 <RxWindowSetup+0x54>)
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	4618      	mov	r0, r3
 8011246:	f004 f836 	bl	80152b6 <RegionRxConfig>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00a      	beq.n	8011266 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011250:	4b07      	ldr	r3, [pc, #28]	; (8011270 <RxWindowSetup+0x4c>)
 8011252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011254:	4a07      	ldr	r2, [pc, #28]	; (8011274 <RxWindowSetup+0x50>)
 8011256:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011258:	4610      	mov	r0, r2
 801125a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	7cda      	ldrb	r2, [r3, #19]
 8011260:	4b06      	ldr	r3, [pc, #24]	; (801127c <RxWindowSetup+0x58>)
 8011262:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8011266:	bf00      	nop
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	0801e6b8 	.word	0x0801e6b8
 8011274:	20003534 	.word	0x20003534
 8011278:	2000344c 	.word	0x2000344c
 801127c:	2000302c 	.word	0x2000302c

08011280 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011280:	b590      	push	{r4, r7, lr}
 8011282:	b083      	sub	sp, #12
 8011284:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011286:	4b18      	ldr	r3, [pc, #96]	; (80112e8 <OpenContinuousRxCWindow+0x68>)
 8011288:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801128c:	4b16      	ldr	r3, [pc, #88]	; (80112e8 <OpenContinuousRxCWindow+0x68>)
 801128e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011292:	b259      	sxtb	r1, r3
 8011294:	4b14      	ldr	r3, [pc, #80]	; (80112e8 <OpenContinuousRxCWindow+0x68>)
 8011296:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801129a:	4b13      	ldr	r3, [pc, #76]	; (80112e8 <OpenContinuousRxCWindow+0x68>)
 801129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801129e:	4c13      	ldr	r4, [pc, #76]	; (80112ec <OpenContinuousRxCWindow+0x6c>)
 80112a0:	9400      	str	r4, [sp, #0]
 80112a2:	f003 ffe4 	bl	801526e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80112a6:	4b12      	ldr	r3, [pc, #72]	; (80112f0 <OpenContinuousRxCWindow+0x70>)
 80112a8:	2202      	movs	r2, #2
 80112aa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80112ae:	4b10      	ldr	r3, [pc, #64]	; (80112f0 <OpenContinuousRxCWindow+0x70>)
 80112b0:	2201      	movs	r2, #1
 80112b2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80112b6:	4b0c      	ldr	r3, [pc, #48]	; (80112e8 <OpenContinuousRxCWindow+0x68>)
 80112b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112bc:	4a0d      	ldr	r2, [pc, #52]	; (80112f4 <OpenContinuousRxCWindow+0x74>)
 80112be:	490b      	ldr	r1, [pc, #44]	; (80112ec <OpenContinuousRxCWindow+0x6c>)
 80112c0:	4618      	mov	r0, r3
 80112c2:	f003 fff8 	bl	80152b6 <RegionRxConfig>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d009      	beq.n	80112e0 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80112cc:	4b0a      	ldr	r3, [pc, #40]	; (80112f8 <OpenContinuousRxCWindow+0x78>)
 80112ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d0:	2000      	movs	r0, #0
 80112d2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80112d4:	4b06      	ldr	r3, [pc, #24]	; (80112f0 <OpenContinuousRxCWindow+0x70>)
 80112d6:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80112da:	4b05      	ldr	r3, [pc, #20]	; (80112f0 <OpenContinuousRxCWindow+0x70>)
 80112dc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80112e0:	bf00      	nop
 80112e2:	3704      	adds	r7, #4
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd90      	pop	{r4, r7, pc}
 80112e8:	20003534 	.word	0x20003534
 80112ec:	2000340c 	.word	0x2000340c
 80112f0:	2000302c 	.word	0x2000302c
 80112f4:	2000344c 	.word	0x2000344c
 80112f8:	0801e6b8 	.word	0x0801e6b8

080112fc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b088      	sub	sp, #32
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	603b      	str	r3, [r7, #0]
 8011308:	4613      	mov	r3, r2
 801130a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801130c:	4b82      	ldr	r3, [pc, #520]	; (8011518 <PrepareFrame+0x21c>)
 801130e:	2200      	movs	r2, #0
 8011310:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011312:	4b81      	ldr	r3, [pc, #516]	; (8011518 <PrepareFrame+0x21c>)
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801131a:	2300      	movs	r3, #0
 801131c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801131e:	2300      	movs	r3, #0
 8011320:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011322:	2300      	movs	r3, #0
 8011324:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d101      	bne.n	8011330 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801132c:	2300      	movs	r3, #0
 801132e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011330:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011332:	461a      	mov	r2, r3
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	4879      	ldr	r0, [pc, #484]	; (801151c <PrepareFrame+0x220>)
 8011338:	f007 fdb5 	bl	8018ea6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801133c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801133e:	b2da      	uxtb	r2, r3
 8011340:	4b75      	ldr	r3, [pc, #468]	; (8011518 <PrepareFrame+0x21c>)
 8011342:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	781a      	ldrb	r2, [r3, #0]
 801134a:	4b73      	ldr	r3, [pc, #460]	; (8011518 <PrepareFrame+0x21c>)
 801134c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b07      	cmp	r3, #7
 801135a:	f000 80b9 	beq.w	80114d0 <PrepareFrame+0x1d4>
 801135e:	2b07      	cmp	r3, #7
 8011360:	f300 80d0 	bgt.w	8011504 <PrepareFrame+0x208>
 8011364:	2b02      	cmp	r3, #2
 8011366:	d006      	beq.n	8011376 <PrepareFrame+0x7a>
 8011368:	2b04      	cmp	r3, #4
 801136a:	f040 80cb 	bne.w	8011504 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801136e:	4b6a      	ldr	r3, [pc, #424]	; (8011518 <PrepareFrame+0x21c>)
 8011370:	2201      	movs	r2, #1
 8011372:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011376:	4b68      	ldr	r3, [pc, #416]	; (8011518 <PrepareFrame+0x21c>)
 8011378:	2204      	movs	r2, #4
 801137a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801137e:	4b66      	ldr	r3, [pc, #408]	; (8011518 <PrepareFrame+0x21c>)
 8011380:	4a67      	ldr	r2, [pc, #412]	; (8011520 <PrepareFrame+0x224>)
 8011382:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011386:	4b64      	ldr	r3, [pc, #400]	; (8011518 <PrepareFrame+0x21c>)
 8011388:	22ff      	movs	r2, #255	; 0xff
 801138a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	781a      	ldrb	r2, [r3, #0]
 8011392:	4b61      	ldr	r3, [pc, #388]	; (8011518 <PrepareFrame+0x21c>)
 8011394:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011398:	4a5f      	ldr	r2, [pc, #380]	; (8011518 <PrepareFrame+0x21c>)
 801139a:	79fb      	ldrb	r3, [r7, #7]
 801139c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80113a0:	4b60      	ldr	r3, [pc, #384]	; (8011524 <PrepareFrame+0x228>)
 80113a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80113a6:	4a5c      	ldr	r2, [pc, #368]	; (8011518 <PrepareFrame+0x21c>)
 80113a8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	781a      	ldrb	r2, [r3, #0]
 80113b0:	4b59      	ldr	r3, [pc, #356]	; (8011518 <PrepareFrame+0x21c>)
 80113b2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80113b6:	4b58      	ldr	r3, [pc, #352]	; (8011518 <PrepareFrame+0x21c>)
 80113b8:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80113bc:	4b56      	ldr	r3, [pc, #344]	; (8011518 <PrepareFrame+0x21c>)
 80113be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80113c2:	4b55      	ldr	r3, [pc, #340]	; (8011518 <PrepareFrame+0x21c>)
 80113c4:	4a55      	ldr	r2, [pc, #340]	; (801151c <PrepareFrame+0x220>)
 80113c6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80113ca:	f107 0318 	add.w	r3, r7, #24
 80113ce:	4618      	mov	r0, r3
 80113d0:	f002 fffe 	bl	80143d0 <LoRaMacCryptoGetFCntUp>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d001      	beq.n	80113de <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80113da:	2312      	movs	r3, #18
 80113dc:	e098      	b.n	8011510 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	4b4d      	ldr	r3, [pc, #308]	; (8011518 <PrepareFrame+0x21c>)
 80113e4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80113e8:	4b4b      	ldr	r3, [pc, #300]	; (8011518 <PrepareFrame+0x21c>)
 80113ea:	2200      	movs	r2, #0
 80113ec:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80113f0:	4b49      	ldr	r3, [pc, #292]	; (8011518 <PrepareFrame+0x21c>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	4a47      	ldr	r2, [pc, #284]	; (8011518 <PrepareFrame+0x21c>)
 80113fc:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011400:	f107 0314 	add.w	r3, r7, #20
 8011404:	4618      	mov	r0, r3
 8011406:	f002 f99b 	bl	8013740 <LoRaMacCommandsGetSizeSerializedCmds>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011410:	2313      	movs	r3, #19
 8011412:	e07d      	b.n	8011510 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d076      	beq.n	8011508 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801141a:	4b42      	ldr	r3, [pc, #264]	; (8011524 <PrepareFrame+0x228>)
 801141c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011420:	4618      	mov	r0, r3
 8011422:	f7fe fdab 	bl	800ff7c <GetMaxAppPayloadWithoutFOptsLength>
 8011426:	4603      	mov	r3, r0
 8011428:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801142a:	4b3b      	ldr	r3, [pc, #236]	; (8011518 <PrepareFrame+0x21c>)
 801142c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011430:	2b00      	cmp	r3, #0
 8011432:	d01d      	beq.n	8011470 <PrepareFrame+0x174>
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	2b0f      	cmp	r3, #15
 8011438:	d81a      	bhi.n	8011470 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801143a:	f107 0314 	add.w	r3, r7, #20
 801143e:	4a3a      	ldr	r2, [pc, #232]	; (8011528 <PrepareFrame+0x22c>)
 8011440:	4619      	mov	r1, r3
 8011442:	200f      	movs	r0, #15
 8011444:	f002 f992 	bl	801376c <LoRaMacCommandsSerializeCmds>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801144e:	2313      	movs	r3, #19
 8011450:	e05e      	b.n	8011510 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	f003 030f 	and.w	r3, r3, #15
 8011458:	b2d9      	uxtb	r1, r3
 801145a:	68ba      	ldr	r2, [r7, #8]
 801145c:	7813      	ldrb	r3, [r2, #0]
 801145e:	f361 0303 	bfi	r3, r1, #0, #4
 8011462:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	781a      	ldrb	r2, [r3, #0]
 8011468:	4b2b      	ldr	r3, [pc, #172]	; (8011518 <PrepareFrame+0x21c>)
 801146a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801146e:	e04b      	b.n	8011508 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011470:	4b29      	ldr	r3, [pc, #164]	; (8011518 <PrepareFrame+0x21c>)
 8011472:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011476:	2b00      	cmp	r3, #0
 8011478:	d010      	beq.n	801149c <PrepareFrame+0x1a0>
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	2b0f      	cmp	r3, #15
 801147e:	d90d      	bls.n	801149c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011480:	7ffb      	ldrb	r3, [r7, #31]
 8011482:	f107 0114 	add.w	r1, r7, #20
 8011486:	4a29      	ldr	r2, [pc, #164]	; (801152c <PrepareFrame+0x230>)
 8011488:	4618      	mov	r0, r3
 801148a:	f002 f96f 	bl	801376c <LoRaMacCommandsSerializeCmds>
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d001      	beq.n	8011498 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011494:	2313      	movs	r3, #19
 8011496:	e03b      	b.n	8011510 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011498:	230a      	movs	r3, #10
 801149a:	e039      	b.n	8011510 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801149c:	7ffb      	ldrb	r3, [r7, #31]
 801149e:	f107 0114 	add.w	r1, r7, #20
 80114a2:	4a22      	ldr	r2, [pc, #136]	; (801152c <PrepareFrame+0x230>)
 80114a4:	4618      	mov	r0, r3
 80114a6:	f002 f961 	bl	801376c <LoRaMacCommandsSerializeCmds>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114b0:	2313      	movs	r3, #19
 80114b2:	e02d      	b.n	8011510 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80114b4:	4b18      	ldr	r3, [pc, #96]	; (8011518 <PrepareFrame+0x21c>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80114bc:	4b16      	ldr	r3, [pc, #88]	; (8011518 <PrepareFrame+0x21c>)
 80114be:	4a1b      	ldr	r2, [pc, #108]	; (801152c <PrepareFrame+0x230>)
 80114c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	4b13      	ldr	r3, [pc, #76]	; (8011518 <PrepareFrame+0x21c>)
 80114ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80114ce:	e01b      	b.n	8011508 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d01a      	beq.n	801150c <PrepareFrame+0x210>
 80114d6:	4b10      	ldr	r3, [pc, #64]	; (8011518 <PrepareFrame+0x21c>)
 80114d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d015      	beq.n	801150c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80114e0:	4813      	ldr	r0, [pc, #76]	; (8011530 <PrepareFrame+0x234>)
 80114e2:	4b0d      	ldr	r3, [pc, #52]	; (8011518 <PrepareFrame+0x21c>)
 80114e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	461a      	mov	r2, r3
 80114ec:	6839      	ldr	r1, [r7, #0]
 80114ee:	f007 fcda 	bl	8018ea6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80114f2:	4b09      	ldr	r3, [pc, #36]	; (8011518 <PrepareFrame+0x21c>)
 80114f4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	3301      	adds	r3, #1
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	4b06      	ldr	r3, [pc, #24]	; (8011518 <PrepareFrame+0x21c>)
 8011500:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011502:	e003      	b.n	801150c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011504:	2302      	movs	r3, #2
 8011506:	e003      	b.n	8011510 <PrepareFrame+0x214>
            break;
 8011508:	bf00      	nop
 801150a:	e000      	b.n	801150e <PrepareFrame+0x212>
            break;
 801150c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3720      	adds	r7, #32
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	2000302c 	.word	0x2000302c
 801151c:	20003164 	.word	0x20003164
 8011520:	2000302e 	.word	0x2000302e
 8011524:	20003534 	.word	0x20003534
 8011528:	20003144 	.word	0x20003144
 801152c:	200034b4 	.word	0x200034b4
 8011530:	2000302f 	.word	0x2000302f

08011534 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b08a      	sub	sp, #40	; 0x28
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801153e:	2303      	movs	r3, #3
 8011540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011544:	2300      	movs	r3, #0
 8011546:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011548:	79fb      	ldrb	r3, [r7, #7]
 801154a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801154c:	4b47      	ldr	r3, [pc, #284]	; (801166c <SendFrameOnChannel+0x138>)
 801154e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011552:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011554:	4b45      	ldr	r3, [pc, #276]	; (801166c <SendFrameOnChannel+0x138>)
 8011556:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801155a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801155c:	4b43      	ldr	r3, [pc, #268]	; (801166c <SendFrameOnChannel+0x138>)
 801155e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011560:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011562:	4b42      	ldr	r3, [pc, #264]	; (801166c <SendFrameOnChannel+0x138>)
 8011564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011566:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011568:	4b41      	ldr	r3, [pc, #260]	; (8011670 <SendFrameOnChannel+0x13c>)
 801156a:	881b      	ldrh	r3, [r3, #0]
 801156c:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801156e:	4b3f      	ldr	r3, [pc, #252]	; (801166c <SendFrameOnChannel+0x138>)
 8011570:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011574:	f107 020f 	add.w	r2, r7, #15
 8011578:	f107 0110 	add.w	r1, r7, #16
 801157c:	4b3d      	ldr	r3, [pc, #244]	; (8011674 <SendFrameOnChannel+0x140>)
 801157e:	f003 feb8 	bl	80152f2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011582:	4b3b      	ldr	r3, [pc, #236]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011584:	2201      	movs	r2, #1
 8011586:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801158a:	4b38      	ldr	r3, [pc, #224]	; (801166c <SendFrameOnChannel+0x138>)
 801158c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011590:	b2da      	uxtb	r2, r3
 8011592:	4b37      	ldr	r3, [pc, #220]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011594:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011598:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801159c:	4b34      	ldr	r3, [pc, #208]	; (8011670 <SendFrameOnChannel+0x13c>)
 801159e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80115a2:	79fb      	ldrb	r3, [r7, #7]
 80115a4:	4a32      	ldr	r2, [pc, #200]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115a6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80115aa:	4b31      	ldr	r3, [pc, #196]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115ac:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80115b0:	4a2f      	ldr	r2, [pc, #188]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115b2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80115b6:	4b2e      	ldr	r3, [pc, #184]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115b8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80115bc:	4a2c      	ldr	r2, [pc, #176]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115be:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80115c2:	f001 fe69 	bl	8013298 <LoRaMacClassBIsBeaconModeActive>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00b      	beq.n	80115e4 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80115cc:	4b28      	ldr	r3, [pc, #160]	; (8011670 <SendFrameOnChannel+0x13c>)
 80115ce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80115d2:	4618      	mov	r0, r3
 80115d4:	f001 fecb 	bl	801336e <LoRaMacClassBIsUplinkCollision>
 80115d8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d001      	beq.n	80115e4 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80115e0:	2310      	movs	r3, #16
 80115e2:	e03e      	b.n	8011662 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80115e4:	4b21      	ldr	r3, [pc, #132]	; (801166c <SendFrameOnChannel+0x138>)
 80115e6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d101      	bne.n	80115f2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80115ee:	f001 fec8 	bl	8013382 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80115f2:	f001 fe62 	bl	80132ba <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80115f6:	4b1d      	ldr	r3, [pc, #116]	; (801166c <SendFrameOnChannel+0x138>)
 80115f8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	4a1c      	ldr	r2, [pc, #112]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011600:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f7ff fc88 	bl	8010f1c <SecureFrame>
 801160c:	4603      	mov	r3, r0
 801160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011616:	2b00      	cmp	r3, #0
 8011618:	d002      	beq.n	8011620 <SendFrameOnChannel+0xec>
    {
        return status;
 801161a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801161e:	e020      	b.n	8011662 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011620:	4b13      	ldr	r3, [pc, #76]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011622:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011626:	f043 0302 	orr.w	r3, r3, #2
 801162a:	4a11      	ldr	r2, [pc, #68]	; (8011670 <SendFrameOnChannel+0x13c>)
 801162c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8011630:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011632:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011636:	f083 0301 	eor.w	r3, r3, #1
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d007      	beq.n	8011650 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011640:	4b0b      	ldr	r3, [pc, #44]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011642:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011646:	3301      	adds	r3, #1
 8011648:	b2da      	uxtb	r2, r3
 801164a:	4b09      	ldr	r3, [pc, #36]	; (8011670 <SendFrameOnChannel+0x13c>)
 801164c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011650:	4b09      	ldr	r3, [pc, #36]	; (8011678 <SendFrameOnChannel+0x144>)
 8011652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011654:	4a06      	ldr	r2, [pc, #24]	; (8011670 <SendFrameOnChannel+0x13c>)
 8011656:	8812      	ldrh	r2, [r2, #0]
 8011658:	b2d2      	uxtb	r2, r2
 801165a:	4611      	mov	r1, r2
 801165c:	4807      	ldr	r0, [pc, #28]	; (801167c <SendFrameOnChannel+0x148>)
 801165e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011660:	2300      	movs	r3, #0
}
 8011662:	4618      	mov	r0, r3
 8011664:	3728      	adds	r7, #40	; 0x28
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	20003534 	.word	0x20003534
 8011670:	2000302c 	.word	0x2000302c
 8011674:	20003444 	.word	0x20003444
 8011678:	0801e6b8 	.word	0x0801e6b8
 801167c:	2000302e 	.word	0x2000302e

08011680 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801168a:	4b15      	ldr	r3, [pc, #84]	; (80116e0 <SetTxContinuousWave+0x60>)
 801168c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8011690:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011692:	4b14      	ldr	r3, [pc, #80]	; (80116e4 <SetTxContinuousWave+0x64>)
 8011694:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011698:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801169a:	4b12      	ldr	r3, [pc, #72]	; (80116e4 <SetTxContinuousWave+0x64>)
 801169c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80116a0:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80116a2:	4b10      	ldr	r3, [pc, #64]	; (80116e4 <SetTxContinuousWave+0x64>)
 80116a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116a6:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80116a8:	4b0e      	ldr	r3, [pc, #56]	; (80116e4 <SetTxContinuousWave+0x64>)
 80116aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116ac:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80116ae:	88fb      	ldrh	r3, [r7, #6]
 80116b0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80116b2:	4b0c      	ldr	r3, [pc, #48]	; (80116e4 <SetTxContinuousWave+0x64>)
 80116b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116b8:	f107 0208 	add.w	r2, r7, #8
 80116bc:	4611      	mov	r1, r2
 80116be:	4618      	mov	r0, r3
 80116c0:	f003 ff14 	bl	80154ec <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80116c4:	4b06      	ldr	r3, [pc, #24]	; (80116e0 <SetTxContinuousWave+0x60>)
 80116c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80116ca:	f043 0302 	orr.w	r3, r3, #2
 80116ce:	4a04      	ldr	r2, [pc, #16]	; (80116e0 <SetTxContinuousWave+0x60>)
 80116d0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	2000302c 	.word	0x2000302c
 80116e4:	20003534 	.word	0x20003534

080116e8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	4603      	mov	r3, r0
 80116f0:	6039      	str	r1, [r7, #0]
 80116f2:	80fb      	strh	r3, [r7, #6]
 80116f4:	4613      	mov	r3, r2
 80116f6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80116f8:	4b09      	ldr	r3, [pc, #36]	; (8011720 <SetTxContinuousWave1+0x38>)
 80116fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011700:	88fa      	ldrh	r2, [r7, #6]
 8011702:	6838      	ldr	r0, [r7, #0]
 8011704:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011706:	4b07      	ldr	r3, [pc, #28]	; (8011724 <SetTxContinuousWave1+0x3c>)
 8011708:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801170c:	f043 0302 	orr.w	r3, r3, #2
 8011710:	4a04      	ldr	r2, [pc, #16]	; (8011724 <SetTxContinuousWave1+0x3c>)
 8011712:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	0801e6b8 	.word	0x0801e6b8
 8011724:	2000302c 	.word	0x2000302c

08011728 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8011728:	b480      	push	{r7}
 801172a:	af00      	add	r7, sp, #0
    return &Nvm;
 801172c:	4b02      	ldr	r3, [pc, #8]	; (8011738 <GetNvmData+0x10>)
}
 801172e:	4618      	mov	r0, r3
 8011730:	46bd      	mov	sp, r7
 8011732:	bc80      	pop	{r7}
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	20003534 	.word	0x20003534

0801173c <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011744:	2300      	movs	r3, #0
 8011746:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d101      	bne.n	8011752 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801174e:	2303      	movs	r3, #3
 8011750:	e09a      	b.n	8011888 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011752:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <RestoreNvmData+0x154>)
 8011754:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011758:	2b01      	cmp	r3, #1
 801175a:	d001      	beq.n	8011760 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 801175c:	2301      	movs	r3, #1
 801175e:	e093      	b.n	8011888 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2124      	movs	r1, #36	; 0x24
 8011764:	4618      	mov	r0, r3
 8011766:	f007 fbf3 	bl	8018f50 <Crc32>
 801176a:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	429a      	cmp	r2, r3
 8011774:	d105      	bne.n	8011782 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2228      	movs	r2, #40	; 0x28
 801177a:	4619      	mov	r1, r3
 801177c:	4845      	ldr	r0, [pc, #276]	; (8011894 <RestoreNvmData+0x158>)
 801177e:	f007 fb92 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	3328      	adds	r3, #40	; 0x28
 8011786:	2114      	movs	r1, #20
 8011788:	4618      	mov	r0, r3
 801178a:	f007 fbe1 	bl	8018f50 <Crc32>
 801178e:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	429a      	cmp	r2, r3
 8011798:	d106      	bne.n	80117a8 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	3328      	adds	r3, #40	; 0x28
 801179e:	2218      	movs	r2, #24
 80117a0:	4619      	mov	r1, r3
 80117a2:	483d      	ldr	r0, [pc, #244]	; (8011898 <RestoreNvmData+0x15c>)
 80117a4:	f007 fb7f 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3340      	adds	r3, #64	; 0x40
 80117ac:	21d4      	movs	r1, #212	; 0xd4
 80117ae:	4618      	mov	r0, r3
 80117b0:	f007 fbce 	bl	8018f50 <Crc32>
 80117b4:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80117bc:	68fa      	ldr	r2, [r7, #12]
 80117be:	429a      	cmp	r2, r3
 80117c0:	d11f      	bne.n	8011802 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	3340      	adds	r3, #64	; 0x40
 80117c6:	22d8      	movs	r2, #216	; 0xd8
 80117c8:	4619      	mov	r1, r3
 80117ca:	4834      	ldr	r0, [pc, #208]	; (801189c <RestoreNvmData+0x160>)
 80117cc:	f007 fb6b 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80117d0:	4b2f      	ldr	r3, [pc, #188]	; (8011890 <RestoreNvmData+0x154>)
 80117d2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80117d6:	4b2e      	ldr	r3, [pc, #184]	; (8011890 <RestoreNvmData+0x154>)
 80117d8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80117dc:	4b2d      	ldr	r3, [pc, #180]	; (8011894 <RestoreNvmData+0x158>)
 80117de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e0:	4a2b      	ldr	r2, [pc, #172]	; (8011890 <RestoreNvmData+0x154>)
 80117e2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117e6:	4b2b      	ldr	r3, [pc, #172]	; (8011894 <RestoreNvmData+0x158>)
 80117e8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80117ec:	4b28      	ldr	r3, [pc, #160]	; (8011890 <RestoreNvmData+0x154>)
 80117ee:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80117f2:	4b27      	ldr	r3, [pc, #156]	; (8011890 <RestoreNvmData+0x154>)
 80117f4:	2201      	movs	r2, #1
 80117f6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80117fa:	4b25      	ldr	r3, [pc, #148]	; (8011890 <RestoreNvmData+0x154>)
 80117fc:	2202      	movs	r2, #2
 80117fe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8011808:	21bc      	movs	r1, #188	; 0xbc
 801180a:	4618      	mov	r0, r3
 801180c:	f007 fba0 	bl	8018f50 <Crc32>
 8011810:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	429a      	cmp	r2, r3
 801181c:	d107      	bne.n	801182e <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8011824:	22c0      	movs	r2, #192	; 0xc0
 8011826:	4619      	mov	r1, r3
 8011828:	481d      	ldr	r0, [pc, #116]	; (80118a0 <RestoreNvmData+0x164>)
 801182a:	f007 fb3c 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8011834:	21a0      	movs	r1, #160	; 0xa0
 8011836:	4618      	mov	r0, r3
 8011838:	f007 fb8a 	bl	8018f50 <Crc32>
 801183c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	429a      	cmp	r2, r3
 8011848:	d107      	bne.n	801185a <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8011850:	22a4      	movs	r2, #164	; 0xa4
 8011852:	4619      	mov	r1, r3
 8011854:	4813      	ldr	r0, [pc, #76]	; (80118a4 <RestoreNvmData+0x168>)
 8011856:	f007 fb26 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8011860:	2114      	movs	r1, #20
 8011862:	4618      	mov	r0, r3
 8011864:	f007 fb74 	bl	8018f50 <Crc32>
 8011868:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8011870:	68fa      	ldr	r2, [r7, #12]
 8011872:	429a      	cmp	r2, r3
 8011874:	d107      	bne.n	8011886 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 801187c:	2218      	movs	r2, #24
 801187e:	4619      	mov	r1, r3
 8011880:	4809      	ldr	r0, [pc, #36]	; (80118a8 <RestoreNvmData+0x16c>)
 8011882:	f007 fb10 	bl	8018ea6 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8011886:	2300      	movs	r3, #0
}
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	2000302c 	.word	0x2000302c
 8011894:	20003534 	.word	0x20003534
 8011898:	2000355c 	.word	0x2000355c
 801189c:	20003574 	.word	0x20003574
 80118a0:	2000364c 	.word	0x2000364c
 80118a4:	2000370c 	.word	0x2000370c
 80118a8:	20003b2c 	.word	0x20003b2c

080118ac <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d002      	beq.n	80118c2 <DetermineFrameType+0x16>
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d101      	bne.n	80118c6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118c2:	2303      	movs	r3, #3
 80118c4:	e03b      	b.n	801193e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	7b1b      	ldrb	r3, [r3, #12]
 80118ca:	f003 030f 	and.w	r3, r3, #15
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d008      	beq.n	80118e6 <DetermineFrameType+0x3a>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d003      	beq.n	80118e6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	2200      	movs	r2, #0
 80118e2:	701a      	strb	r2, [r3, #0]
 80118e4:	e02a      	b.n	801193c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d103      	bne.n	80118f8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2201      	movs	r2, #1
 80118f4:	701a      	strb	r2, [r3, #0]
 80118f6:	e021      	b.n	801193c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	7b1b      	ldrb	r3, [r3, #12]
 80118fc:	f003 030f 	and.w	r3, r3, #15
 8011900:	b2db      	uxtb	r3, r3
 8011902:	2b00      	cmp	r3, #0
 8011904:	d108      	bne.n	8011918 <DetermineFrameType+0x6c>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 3020 	ldrb.w	r3, [r3, #32]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d103      	bne.n	8011918 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	2202      	movs	r2, #2
 8011914:	701a      	strb	r2, [r3, #0]
 8011916:	e011      	b.n	801193c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	7b1b      	ldrb	r3, [r3, #12]
 801191c:	f003 030f 	and.w	r3, r3, #15
 8011920:	b2db      	uxtb	r3, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	d108      	bne.n	8011938 <DetermineFrameType+0x8c>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 3020 	ldrb.w	r3, [r3, #32]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d003      	beq.n	8011938 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	2203      	movs	r2, #3
 8011934:	701a      	strb	r2, [r3, #0]
 8011936:	e001      	b.n	801193c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011938:	2317      	movs	r3, #23
 801193a:	e000      	b.n	801193e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	bc80      	pop	{r7}
 8011946:	4770      	bx	lr

08011948 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011948:	b480      	push	{r7}
 801194a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801194c:	4b12      	ldr	r3, [pc, #72]	; (8011998 <CheckRetransUnconfirmedUplink+0x50>)
 801194e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8011952:	4b12      	ldr	r3, [pc, #72]	; (801199c <CheckRetransUnconfirmedUplink+0x54>)
 8011954:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8011958:	429a      	cmp	r2, r3
 801195a:	d301      	bcc.n	8011960 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801195c:	2301      	movs	r3, #1
 801195e:	e016      	b.n	801198e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011960:	4b0d      	ldr	r3, [pc, #52]	; (8011998 <CheckRetransUnconfirmedUplink+0x50>)
 8011962:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011966:	f003 0302 	and.w	r3, r3, #2
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00d      	beq.n	801198c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011970:	4b0a      	ldr	r3, [pc, #40]	; (801199c <CheckRetransUnconfirmedUplink+0x54>)
 8011972:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011976:	2b00      	cmp	r3, #0
 8011978:	d101      	bne.n	801197e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801197a:	2301      	movs	r3, #1
 801197c:	e007      	b.n	801198e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801197e:	4b06      	ldr	r3, [pc, #24]	; (8011998 <CheckRetransUnconfirmedUplink+0x50>)
 8011980:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8011988:	2301      	movs	r3, #1
 801198a:	e000      	b.n	801198e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	46bd      	mov	sp, r7
 8011992:	bc80      	pop	{r7}
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	2000302c 	.word	0x2000302c
 801199c:	20003534 	.word	0x20003534

080119a0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80119a0:	b480      	push	{r7}
 80119a2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80119a4:	4b0e      	ldr	r3, [pc, #56]	; (80119e0 <CheckRetransConfirmedUplink+0x40>)
 80119a6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80119aa:	4b0d      	ldr	r3, [pc, #52]	; (80119e0 <CheckRetransConfirmedUplink+0x40>)
 80119ac:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d301      	bcc.n	80119b8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80119b4:	2301      	movs	r3, #1
 80119b6:	e00f      	b.n	80119d8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80119b8:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <CheckRetransConfirmedUplink+0x40>)
 80119ba:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80119be:	f003 0302 	and.w	r3, r3, #2
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d006      	beq.n	80119d6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80119c8:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <CheckRetransConfirmedUplink+0x40>)
 80119ca:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	46bd      	mov	sp, r7
 80119dc:	bc80      	pop	{r7}
 80119de:	4770      	bx	lr
 80119e0:	2000302c 	.word	0x2000302c

080119e4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80119e4:	b480      	push	{r7}
 80119e6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80119e8:	4b1a      	ldr	r3, [pc, #104]	; (8011a54 <StopRetransmission+0x70>)
 80119ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80119ee:	f003 0302 	and.w	r3, r3, #2
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d009      	beq.n	8011a0c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80119f8:	4b16      	ldr	r3, [pc, #88]	; (8011a54 <StopRetransmission+0x70>)
 80119fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00e      	beq.n	8011a20 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011a02:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <StopRetransmission+0x70>)
 8011a04:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d009      	beq.n	8011a20 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011a0c:	4b12      	ldr	r3, [pc, #72]	; (8011a58 <StopRetransmission+0x74>)
 8011a0e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d004      	beq.n	8011a20 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8011a16:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <StopRetransmission+0x74>)
 8011a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	4a0e      	ldr	r2, [pc, #56]	; (8011a58 <StopRetransmission+0x74>)
 8011a1e:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011a20:	4b0c      	ldr	r3, [pc, #48]	; (8011a54 <StopRetransmission+0x70>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8011a28:	4b0a      	ldr	r3, [pc, #40]	; (8011a54 <StopRetransmission+0x70>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8011a30:	4b08      	ldr	r3, [pc, #32]	; (8011a54 <StopRetransmission+0x70>)
 8011a32:	2200      	movs	r2, #0
 8011a34:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011a38:	4b06      	ldr	r3, [pc, #24]	; (8011a54 <StopRetransmission+0x70>)
 8011a3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a3e:	f023 0302 	bic.w	r3, r3, #2
 8011a42:	4a04      	ldr	r2, [pc, #16]	; (8011a54 <StopRetransmission+0x70>)
 8011a44:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8011a48:	2301      	movs	r3, #1
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bc80      	pop	{r7}
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	2000302c 	.word	0x2000302c
 8011a58:	20003534 	.word	0x20003534

08011a5c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4603      	mov	r3, r0
 8011a64:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011a66:	4b0b      	ldr	r3, [pc, #44]	; (8011a94 <CallNvmDataChangeCallback+0x38>)
 8011a68:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00c      	beq.n	8011a8a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011a70:	4b08      	ldr	r3, [pc, #32]	; (8011a94 <CallNvmDataChangeCallback+0x38>)
 8011a72:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a76:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d006      	beq.n	8011a8a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011a7c:	4b05      	ldr	r3, [pc, #20]	; (8011a94 <CallNvmDataChangeCallback+0x38>)
 8011a7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	88fa      	ldrh	r2, [r7, #6]
 8011a86:	4610      	mov	r0, r2
 8011a88:	4798      	blx	r3
    }
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	2000302c 	.word	0x2000302c

08011a98 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011a9e:	4b1b      	ldr	r3, [pc, #108]	; (8011b0c <AckTimeoutRetriesProcess+0x74>)
 8011aa0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011aa4:	4b19      	ldr	r3, [pc, #100]	; (8011b0c <AckTimeoutRetriesProcess+0x74>)
 8011aa6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d229      	bcs.n	8011b02 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011aae:	4b17      	ldr	r3, [pc, #92]	; (8011b0c <AckTimeoutRetriesProcess+0x74>)
 8011ab0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	4b14      	ldr	r3, [pc, #80]	; (8011b0c <AckTimeoutRetriesProcess+0x74>)
 8011aba:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011abe:	4b13      	ldr	r3, [pc, #76]	; (8011b0c <AckTimeoutRetriesProcess+0x74>)
 8011ac0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011ac4:	f003 0301 	and.w	r3, r3, #1
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d019      	beq.n	8011b02 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011ace:	2322      	movs	r3, #34	; 0x22
 8011ad0:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ad2:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <AckTimeoutRetriesProcess+0x78>)
 8011ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011ad8:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ada:	4b0d      	ldr	r3, [pc, #52]	; (8011b10 <AckTimeoutRetriesProcess+0x78>)
 8011adc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ae0:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ae2:	4b0b      	ldr	r3, [pc, #44]	; (8011b10 <AckTimeoutRetriesProcess+0x78>)
 8011ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ae8:	f107 0208 	add.w	r2, r7, #8
 8011aec:	4611      	mov	r1, r2
 8011aee:	4618      	mov	r0, r3
 8011af0:	f003 fb19 	bl	8015126 <RegionGetPhyParam>
 8011af4:	4603      	mov	r3, r0
 8011af6:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	b25a      	sxtb	r2, r3
 8011afc:	4b04      	ldr	r3, [pc, #16]	; (8011b10 <AckTimeoutRetriesProcess+0x78>)
 8011afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8011b02:	bf00      	nop
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	2000302c 	.word	0x2000302c
 8011b10:	20003534 	.word	0x20003534

08011b14 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011b1a:	4b14      	ldr	r3, [pc, #80]	; (8011b6c <AckTimeoutRetriesFinalize+0x58>)
 8011b1c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011b20:	f083 0301 	eor.w	r3, r3, #1
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d015      	beq.n	8011b56 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011b2a:	2302      	movs	r3, #2
 8011b2c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8011b2e:	4b10      	ldr	r3, [pc, #64]	; (8011b70 <AckTimeoutRetriesFinalize+0x5c>)
 8011b30:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8011b32:	4b10      	ldr	r3, [pc, #64]	; (8011b74 <AckTimeoutRetriesFinalize+0x60>)
 8011b34:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011b36:	4b10      	ldr	r3, [pc, #64]	; (8011b78 <AckTimeoutRetriesFinalize+0x64>)
 8011b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b3c:	1d3a      	adds	r2, r7, #4
 8011b3e:	4611      	mov	r1, r2
 8011b40:	4618      	mov	r0, r3
 8011b42:	f003 fb28 	bl	8015196 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011b46:	4b09      	ldr	r3, [pc, #36]	; (8011b6c <AckTimeoutRetriesFinalize+0x58>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8011b4e:	4b07      	ldr	r3, [pc, #28]	; (8011b6c <AckTimeoutRetriesFinalize+0x58>)
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <AckTimeoutRetriesFinalize+0x58>)
 8011b58:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011b5c:	4b03      	ldr	r3, [pc, #12]	; (8011b6c <AckTimeoutRetriesFinalize+0x58>)
 8011b5e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	2000302c 	.word	0x2000302c
 8011b70:	2000370c 	.word	0x2000370c
 8011b74:	200037b0 	.word	0x200037b0
 8011b78:	20003534 	.word	0x20003534

08011b7c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b80:	4b0b      	ldr	r3, [pc, #44]	; (8011bb0 <IsRequestPending+0x34>)
 8011b82:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b86:	f003 0304 	and.w	r3, r3, #4
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d107      	bne.n	8011ba0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011b90:	4b07      	ldr	r3, [pc, #28]	; (8011bb0 <IsRequestPending+0x34>)
 8011b92:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b96:	f003 0301 	and.w	r3, r3, #1
 8011b9a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <IsRequestPending+0x28>
    {
        return 1;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e000      	b.n	8011ba6 <IsRequestPending+0x2a>
    }
    return 0;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bc80      	pop	{r7}
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	2000302c 	.word	0x2000302c

08011bb4 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011bb4:	b590      	push	{r4, r7, lr}
 8011bb6:	b08f      	sub	sp, #60	; 0x3c
 8011bb8:	af02      	add	r7, sp, #8
 8011bba:	6178      	str	r0, [r7, #20]
 8011bbc:	6139      	str	r1, [r7, #16]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <LoRaMacInitialization+0x1a>
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	e275      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00b      	beq.n	8011bf2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d007      	beq.n	8011bf2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d003      	beq.n	8011bf2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d101      	bne.n	8011bf6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bf2:	2303      	movs	r3, #3
 8011bf4:	e263      	b.n	80120be <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011bf6:	7bfb      	ldrb	r3, [r7, #15]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f003 fa7f 	bl	80150fc <RegionIsActive>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	f083 0301 	eor.w	r3, r3, #1
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d001      	beq.n	8011c0e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011c0a:	2309      	movs	r3, #9
 8011c0c:	e257      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011c0e:	6978      	ldr	r0, [r7, #20]
 8011c10:	f001 fef6 	bl	8013a00 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011c14:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8011c18:	2100      	movs	r1, #0
 8011c1a:	48c7      	ldr	r0, [pc, #796]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c1c:	f007 f97e 	bl	8018f1c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011c20:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8011c24:	2100      	movs	r1, #0
 8011c26:	48c5      	ldr	r0, [pc, #788]	; (8011f3c <LoRaMacInitialization+0x388>)
 8011c28:	f007 f978 	bl	8018f1c <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011c2c:	4bc3      	ldr	r3, [pc, #780]	; (8011f3c <LoRaMacInitialization+0x388>)
 8011c2e:	2201      	movs	r2, #1
 8011c30:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8011c34:	4bc1      	ldr	r3, [pc, #772]	; (8011f3c <LoRaMacInitialization+0x388>)
 8011c36:	2201      	movs	r2, #1
 8011c38:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8011c3c:	4abe      	ldr	r2, [pc, #760]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
 8011c40:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011c44:	4bbc      	ldr	r3, [pc, #752]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c46:	2200      	movs	r2, #0
 8011c48:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011c4c:	4bba      	ldr	r3, [pc, #744]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011c54:	4bb8      	ldr	r3, [pc, #736]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c56:	4aba      	ldr	r2, [pc, #744]	; (8011f40 <LoRaMacInitialization+0x38c>)
 8011c58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011c5c:	230f      	movs	r3, #15
 8011c5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c62:	4bb5      	ldr	r3, [pc, #724]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f003 fa59 	bl	8015126 <RegionGetPhyParam>
 8011c74:	4603      	mov	r3, r0
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	bf14      	ite	ne
 8011c7e:	2301      	movne	r3, #1
 8011c80:	2300      	moveq	r3, #0
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	4bac      	ldr	r3, [pc, #688]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c86:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011c8a:	230a      	movs	r3, #10
 8011c8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c90:	4ba9      	ldr	r3, [pc, #676]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f003 fa42 	bl	8015126 <RegionGetPhyParam>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	b25a      	sxtb	r2, r3
 8011caa:	4ba3      	ldr	r3, [pc, #652]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011cac:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011cb0:	2306      	movs	r3, #6
 8011cb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cb6:	4ba0      	ldr	r3, [pc, #640]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f003 fa2f 	bl	8015126 <RegionGetPhyParam>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	b25a      	sxtb	r2, r3
 8011cd0:	4b99      	ldr	r3, [pc, #612]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011cd2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011cd6:	2310      	movs	r3, #16
 8011cd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cdc:	4b96      	ldr	r3, [pc, #600]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f003 fa1c 	bl	8015126 <RegionGetPhyParam>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf4:	4a90      	ldr	r2, [pc, #576]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011cf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011cfa:	2311      	movs	r3, #17
 8011cfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d00:	4b8d      	ldr	r3, [pc, #564]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f003 fa0a 	bl	8015126 <RegionGetPhyParam>
 8011d12:	4603      	mov	r3, r0
 8011d14:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	4a87      	ldr	r2, [pc, #540]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011d1e:	2312      	movs	r3, #18
 8011d20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d24:	4b84      	ldr	r3, [pc, #528]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d2e:	4611      	mov	r1, r2
 8011d30:	4618      	mov	r0, r3
 8011d32:	f003 f9f8 	bl	8015126 <RegionGetPhyParam>
 8011d36:	4603      	mov	r3, r0
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	4a7e      	ldr	r2, [pc, #504]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011d42:	2313      	movs	r3, #19
 8011d44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d48:	4b7b      	ldr	r3, [pc, #492]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d52:	4611      	mov	r1, r2
 8011d54:	4618      	mov	r0, r3
 8011d56:	f003 f9e6 	bl	8015126 <RegionGetPhyParam>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	4a75      	ldr	r2, [pc, #468]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011d66:	2314      	movs	r3, #20
 8011d68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d6c:	4b72      	ldr	r3, [pc, #456]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d76:	4611      	mov	r1, r2
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f003 f9d4 	bl	8015126 <RegionGetPhyParam>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d84:	4a6c      	ldr	r2, [pc, #432]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011d8a:	2317      	movs	r3, #23
 8011d8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d90:	4b69      	ldr	r3, [pc, #420]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f003 f9c2 	bl	8015126 <RegionGetPhyParam>
 8011da2:	4603      	mov	r3, r0
 8011da4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	4b63      	ldr	r3, [pc, #396]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011dac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011db0:	2318      	movs	r3, #24
 8011db2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011db6:	4b60      	ldr	r3, [pc, #384]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dc0:	4611      	mov	r1, r2
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f003 f9af 	bl	8015126 <RegionGetPhyParam>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	4a5a      	ldr	r2, [pc, #360]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011dd0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd6:	4a58      	ldr	r2, [pc, #352]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011dd8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011ddc:	2319      	movs	r3, #25
 8011dde:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011de2:	4b55      	ldr	r3, [pc, #340]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011de8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dec:	4611      	mov	r1, r2
 8011dee:	4618      	mov	r0, r3
 8011df0:	f003 f999 	bl	8015126 <RegionGetPhyParam>
 8011df4:	4603      	mov	r3, r0
 8011df6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	4b4e      	ldr	r3, [pc, #312]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011dfe:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	4b4c      	ldr	r3, [pc, #304]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011e0c:	231e      	movs	r3, #30
 8011e0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e12:	4b49      	ldr	r3, [pc, #292]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f003 f981 	bl	8015126 <RegionGetPhyParam>
 8011e24:	4603      	mov	r3, r0
 8011e26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	4b42      	ldr	r3, [pc, #264]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e2e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011e32:	231f      	movs	r3, #31
 8011e34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e38:	4b3f      	ldr	r3, [pc, #252]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e42:	4611      	mov	r1, r2
 8011e44:	4618      	mov	r0, r3
 8011e46:	f003 f96e 	bl	8015126 <RegionGetPhyParam>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	4b39      	ldr	r3, [pc, #228]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e54:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011e58:	2320      	movs	r3, #32
 8011e5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e5e:	4b36      	ldr	r3, [pc, #216]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f003 f95b 	bl	8015126 <RegionGetPhyParam>
 8011e70:	4603      	mov	r3, r0
 8011e72:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e76:	4a30      	ldr	r2, [pc, #192]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e78:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011e7c:	2321      	movs	r3, #33	; 0x21
 8011e7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e82:	4b2d      	ldr	r3, [pc, #180]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f003 f949 	bl	8015126 <RegionGetPhyParam>
 8011e94:	4603      	mov	r3, r0
 8011e96:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	4a27      	ldr	r2, [pc, #156]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011e9c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011ea0:	230b      	movs	r3, #11
 8011ea2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ea6:	4b24      	ldr	r3, [pc, #144]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011eac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f003 f937 	bl	8015126 <RegionGetPhyParam>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	4b1e      	ldr	r3, [pc, #120]	; (8011f3c <LoRaMacInitialization+0x388>)
 8011ec2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011ec6:	230c      	movs	r3, #12
 8011ec8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ecc:	4b1a      	ldr	r3, [pc, #104]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f003 f924 	bl	8015126 <RegionGetPhyParam>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	4b15      	ldr	r3, [pc, #84]	; (8011f3c <LoRaMacInitialization+0x388>)
 8011ee8:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011eec:	4b12      	ldr	r3, [pc, #72]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011eee:	2201      	movs	r2, #1
 8011ef0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011ef4:	4b10      	ldr	r3, [pc, #64]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011ef6:	220a      	movs	r2, #10
 8011ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011efc:	4b0e      	ldr	r3, [pc, #56]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011efe:	2206      	movs	r2, #6
 8011f00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011f04:	4b0c      	ldr	r3, [pc, #48]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f0a:	4a0b      	ldr	r2, [pc, #44]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f0c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011f0e:	4b0a      	ldr	r3, [pc, #40]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f10:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011f14:	4b08      	ldr	r3, [pc, #32]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011f1a:	4b07      	ldr	r3, [pc, #28]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f20:	4a05      	ldr	r2, [pc, #20]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f22:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011f24:	4b04      	ldr	r3, [pc, #16]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f2a:	4a03      	ldr	r2, [pc, #12]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f2c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011f2e:	4b02      	ldr	r3, [pc, #8]	; (8011f38 <LoRaMacInitialization+0x384>)
 8011f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f34:	e006      	b.n	8011f44 <LoRaMacInitialization+0x390>
 8011f36:	bf00      	nop
 8011f38:	20003534 	.word	0x20003534
 8011f3c:	2000302c 	.word	0x2000302c
 8011f40:	01000300 	.word	0x01000300
 8011f44:	4a60      	ldr	r2, [pc, #384]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f46:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011f48:	4b5f      	ldr	r3, [pc, #380]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011f4e:	4a5e      	ldr	r2, [pc, #376]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f50:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011f52:	4b5d      	ldr	r3, [pc, #372]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f58:	4a5b      	ldr	r2, [pc, #364]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f5a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011f5c:	4b5a      	ldr	r3, [pc, #360]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f5e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8011f62:	4b59      	ldr	r3, [pc, #356]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011f6e:	4b57      	ldr	r3, [pc, #348]	; (80120cc <LoRaMacInitialization+0x518>)
 8011f70:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011f72:	4b57      	ldr	r3, [pc, #348]	; (80120d0 <LoRaMacInitialization+0x51c>)
 8011f74:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011f76:	4b54      	ldr	r3, [pc, #336]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f7c:	f107 0218 	add.w	r2, r7, #24
 8011f80:	4611      	mov	r1, r2
 8011f82:	4618      	mov	r0, r3
 8011f84:	f003 f907 	bl	8015196 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8011f88:	4a52      	ldr	r2, [pc, #328]	; (80120d4 <LoRaMacInitialization+0x520>)
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8011f90:	f7ff f85a 	bl	8011048 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011f94:	4b4c      	ldr	r3, [pc, #304]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8011f9c:	4a4d      	ldr	r2, [pc, #308]	; (80120d4 <LoRaMacInitialization+0x520>)
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011fa4:	4b4b      	ldr	r3, [pc, #300]	; (80120d4 <LoRaMacInitialization+0x520>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8011fac:	4b49      	ldr	r3, [pc, #292]	; (80120d4 <LoRaMacInitialization+0x520>)
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011fb4:	4b44      	ldr	r3, [pc, #272]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011fba:	4b43      	ldr	r3, [pc, #268]	; (80120c8 <LoRaMacInitialization+0x514>)
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	4b44      	ldr	r3, [pc, #272]	; (80120d8 <LoRaMacInitialization+0x524>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8011fcc:	4843      	ldr	r0, [pc, #268]	; (80120dc <LoRaMacInitialization+0x528>)
 8011fce:	f00a fef9 	bl	801cdc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	4b42      	ldr	r3, [pc, #264]	; (80120e0 <LoRaMacInitialization+0x52c>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f04f 31ff 	mov.w	r1, #4294967295
 8011fde:	4841      	ldr	r0, [pc, #260]	; (80120e4 <LoRaMacInitialization+0x530>)
 8011fe0:	f00a fef0 	bl	801cdc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9300      	str	r3, [sp, #0]
 8011fe8:	4b3f      	ldr	r3, [pc, #252]	; (80120e8 <LoRaMacInitialization+0x534>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	f04f 31ff 	mov.w	r1, #4294967295
 8011ff0:	483e      	ldr	r0, [pc, #248]	; (80120ec <LoRaMacInitialization+0x538>)
 8011ff2:	f00a fee7 	bl	801cdc4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	4b3d      	ldr	r3, [pc, #244]	; (80120f0 <LoRaMacInitialization+0x53c>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8012002:	483c      	ldr	r0, [pc, #240]	; (80120f4 <LoRaMacInitialization+0x540>)
 8012004:	f00a fede 	bl	801cdc4 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012008:	4c2f      	ldr	r4, [pc, #188]	; (80120c8 <LoRaMacInitialization+0x514>)
 801200a:	463b      	mov	r3, r7
 801200c:	4618      	mov	r0, r3
 801200e:	f00a fe43 	bl	801cc98 <SysTimeGetMcuTime>
 8012012:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8012016:	463a      	mov	r2, r7
 8012018:	e892 0003 	ldmia.w	r2, {r0, r1}
 801201c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012020:	4b2c      	ldr	r3, [pc, #176]	; (80120d4 <LoRaMacInitialization+0x520>)
 8012022:	4a35      	ldr	r2, [pc, #212]	; (80120f8 <LoRaMacInitialization+0x544>)
 8012024:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012028:	4b2a      	ldr	r3, [pc, #168]	; (80120d4 <LoRaMacInitialization+0x520>)
 801202a:	4a34      	ldr	r2, [pc, #208]	; (80120fc <LoRaMacInitialization+0x548>)
 801202c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012030:	4b28      	ldr	r3, [pc, #160]	; (80120d4 <LoRaMacInitialization+0x520>)
 8012032:	4a33      	ldr	r2, [pc, #204]	; (8012100 <LoRaMacInitialization+0x54c>)
 8012034:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012038:	4b26      	ldr	r3, [pc, #152]	; (80120d4 <LoRaMacInitialization+0x520>)
 801203a:	4a32      	ldr	r2, [pc, #200]	; (8012104 <LoRaMacInitialization+0x550>)
 801203c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012040:	4b24      	ldr	r3, [pc, #144]	; (80120d4 <LoRaMacInitialization+0x520>)
 8012042:	4a31      	ldr	r2, [pc, #196]	; (8012108 <LoRaMacInitialization+0x554>)
 8012044:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012048:	4b30      	ldr	r3, [pc, #192]	; (801210c <LoRaMacInitialization+0x558>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4830      	ldr	r0, [pc, #192]	; (8012110 <LoRaMacInitialization+0x55c>)
 801204e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	4619      	mov	r1, r3
 8012056:	482f      	ldr	r0, [pc, #188]	; (8012114 <LoRaMacInitialization+0x560>)
 8012058:	f7fa ff3a 	bl	800ced0 <SecureElementInit>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d001      	beq.n	8012066 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012062:	2311      	movs	r3, #17
 8012064:	e02b      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012066:	4818      	ldr	r0, [pc, #96]	; (80120c8 <LoRaMacInitialization+0x514>)
 8012068:	f002 f976 	bl	8014358 <LoRaMacCryptoInit>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012072:	2311      	movs	r3, #17
 8012074:	e023      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012076:	f001 fa95 	bl	80135a4 <LoRaMacCommandsInit>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d001      	beq.n	8012084 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012080:	2313      	movs	r3, #19
 8012082:	e01c      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012084:	4824      	ldr	r0, [pc, #144]	; (8012118 <LoRaMacInitialization+0x564>)
 8012086:	f002 fa31 	bl	80144ec <LoRaMacCryptoSetMulticastReference>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d001      	beq.n	8012094 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012090:	2311      	movs	r3, #17
 8012092:	e014      	b.n	80120be <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012094:	4b1d      	ldr	r3, [pc, #116]	; (801210c <LoRaMacInitialization+0x558>)
 8012096:	695b      	ldr	r3, [r3, #20]
 8012098:	4798      	blx	r3
 801209a:	4603      	mov	r3, r0
 801209c:	4618      	mov	r0, r3
 801209e:	f006 fedd 	bl	8018e5c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80120a2:	4b1a      	ldr	r3, [pc, #104]	; (801210c <LoRaMacInitialization+0x558>)
 80120a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120a6:	4a08      	ldr	r2, [pc, #32]	; (80120c8 <LoRaMacInitialization+0x514>)
 80120a8:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80120ac:	4610      	mov	r0, r2
 80120ae:	4798      	blx	r3
    Radio.Sleep( );
 80120b0:	4b16      	ldr	r3, [pc, #88]	; (801210c <LoRaMacInitialization+0x558>)
 80120b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80120b6:	2001      	movs	r0, #1
 80120b8:	f7fd faaa 	bl	800f610 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80120bc:	2300      	movs	r3, #0
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3734      	adds	r7, #52	; 0x34
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd90      	pop	{r4, r7, pc}
 80120c6:	bf00      	nop
 80120c8:	20003534 	.word	0x20003534
 80120cc:	2000370c 	.word	0x2000370c
 80120d0:	200037b0 	.word	0x200037b0
 80120d4:	2000302c 	.word	0x2000302c
 80120d8:	0800fb99 	.word	0x0800fb99
 80120dc:	20003394 	.word	0x20003394
 80120e0:	0800fc0d 	.word	0x0800fc0d
 80120e4:	200033ac 	.word	0x200033ac
 80120e8:	0800fc79 	.word	0x0800fc79
 80120ec:	200033c4 	.word	0x200033c4
 80120f0:	0800fced 	.word	0x0800fced
 80120f4:	20003424 	.word	0x20003424
 80120f8:	0800e79d 	.word	0x0800e79d
 80120fc:	0800e815 	.word	0x0800e815
 8012100:	0800e8ed 	.word	0x0800e8ed
 8012104:	0800e8a1 	.word	0x0800e8a1
 8012108:	0800e929 	.word	0x0800e929
 801210c:	0801e6b8 	.word	0x0801e6b8
 8012110:	20003378 	.word	0x20003378
 8012114:	2000364c 	.word	0x2000364c
 8012118:	20003604 	.word	0x20003604

0801211c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801211c:	b480      	push	{r7}
 801211e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012120:	4b04      	ldr	r3, [pc, #16]	; (8012134 <LoRaMacStart+0x18>)
 8012122:	2200      	movs	r2, #0
 8012124:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	46bd      	mov	sp, r7
 801212e:	bc80      	pop	{r7}
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	2000302c 	.word	0x2000302c

08012138 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b08a      	sub	sp, #40	; 0x28
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	6039      	str	r1, [r7, #0]
 8012142:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012144:	4b3e      	ldr	r3, [pc, #248]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 8012146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012148:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801214a:	4b3d      	ldr	r3, [pc, #244]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 801214c:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8012150:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012152:	4b3b      	ldr	r3, [pc, #236]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 8012154:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8012158:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 801215a:	2300      	movs	r3, #0
 801215c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d101      	bne.n	8012168 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012164:	2303      	movs	r3, #3
 8012166:	e066      	b.n	8012236 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8012168:	4b35      	ldr	r3, [pc, #212]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 801216a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801216e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8012170:	2300      	movs	r3, #0
 8012172:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012174:	4b32      	ldr	r3, [pc, #200]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 8012176:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801217a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801217c:	4b30      	ldr	r3, [pc, #192]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 801217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012180:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012182:	4b30      	ldr	r3, [pc, #192]	; (8012244 <LoRaMacQueryTxPossible+0x10c>)
 8012184:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012188:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801218a:	4b2e      	ldr	r3, [pc, #184]	; (8012244 <LoRaMacQueryTxPossible+0x10c>)
 801218c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012190:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012192:	4b2b      	ldr	r3, [pc, #172]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 8012194:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012198:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801219c:	4b28      	ldr	r3, [pc, #160]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 801219e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80121a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80121a6:	4b26      	ldr	r3, [pc, #152]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 80121a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80121ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80121b0:	4b23      	ldr	r3, [pc, #140]	; (8012240 <LoRaMacQueryTxPossible+0x108>)
 80121b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80121ba:	f107 0310 	add.w	r3, r7, #16
 80121be:	f107 020e 	add.w	r2, r7, #14
 80121c2:	f107 010f 	add.w	r1, r7, #15
 80121c6:	f107 0014 	add.w	r0, r7, #20
 80121ca:	f000 ffe1 	bl	8013190 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80121ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fd fed2 	bl	800ff7c <GetMaxAppPayloadWithoutFOptsLength>
 80121d8:	4603      	mov	r3, r0
 80121da:	461a      	mov	r2, r3
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80121e0:	f107 0308 	add.w	r3, r7, #8
 80121e4:	4618      	mov	r0, r3
 80121e6:	f001 faab 	bl	8013740 <LoRaMacCommandsGetSizeSerializedCmds>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d001      	beq.n	80121f4 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121f0:	2313      	movs	r3, #19
 80121f2:	e020      	b.n	8012236 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	2b0f      	cmp	r3, #15
 80121f8:	d819      	bhi.n	801222e <LoRaMacQueryTxPossible+0xf6>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	785b      	ldrb	r3, [r3, #1]
 80121fe:	461a      	mov	r2, r3
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	429a      	cmp	r2, r3
 8012204:	d313      	bcc.n	801222e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	785a      	ldrb	r2, [r3, #1]
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	b2db      	uxtb	r3, r3
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	b2da      	uxtb	r2, r3
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	785b      	ldrb	r3, [r3, #1]
 801221a:	4619      	mov	r1, r3
 801221c:	79fa      	ldrb	r2, [r7, #7]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	4413      	add	r3, r2
 8012222:	4299      	cmp	r1, r3
 8012224:	d301      	bcc.n	801222a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	e005      	b.n	8012236 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801222a:	2308      	movs	r3, #8
 801222c:	e003      	b.n	8012236 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	2200      	movs	r2, #0
 8012232:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012234:	2308      	movs	r3, #8
    }
}
 8012236:	4618      	mov	r0, r3
 8012238:	3728      	adds	r7, #40	; 0x28
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	20003534 	.word	0x20003534
 8012244:	2000302c 	.word	0x2000302c

08012248 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012248:	b590      	push	{r4, r7, lr}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012250:	2300      	movs	r3, #0
 8012252:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d101      	bne.n	801225e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801225a:	2303      	movs	r3, #3
 801225c:	e14b      	b.n	80124f6 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	2b28      	cmp	r3, #40	; 0x28
 8012264:	f200 8140 	bhi.w	80124e8 <LoRaMacMibGetRequestConfirm+0x2a0>
 8012268:	a201      	add	r2, pc, #4	; (adr r2, 8012270 <LoRaMacMibGetRequestConfirm+0x28>)
 801226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801226e:	bf00      	nop
 8012270:	08012315 	.word	0x08012315
 8012274:	08012321 	.word	0x08012321
 8012278:	0801232d 	.word	0x0801232d
 801227c:	08012339 	.word	0x08012339
 8012280:	08012345 	.word	0x08012345
 8012284:	08012351 	.word	0x08012351
 8012288:	0801235d 	.word	0x0801235d
 801228c:	080124e9 	.word	0x080124e9
 8012290:	080124e9 	.word	0x080124e9
 8012294:	080124e9 	.word	0x080124e9
 8012298:	080124e9 	.word	0x080124e9
 801229c:	080124e9 	.word	0x080124e9
 80122a0:	080124e9 	.word	0x080124e9
 80122a4:	080124e9 	.word	0x080124e9
 80122a8:	080124e9 	.word	0x080124e9
 80122ac:	08012369 	.word	0x08012369
 80122b0:	08012375 	.word	0x08012375
 80122b4:	08012381 	.word	0x08012381
 80122b8:	080123a3 	.word	0x080123a3
 80122bc:	080123b5 	.word	0x080123b5
 80122c0:	080123c7 	.word	0x080123c7
 80122c4:	080123d9 	.word	0x080123d9
 80122c8:	0801240d 	.word	0x0801240d
 80122cc:	080123eb 	.word	0x080123eb
 80122d0:	0801242f 	.word	0x0801242f
 80122d4:	0801243b 	.word	0x0801243b
 80122d8:	08012445 	.word	0x08012445
 80122dc:	0801244f 	.word	0x0801244f
 80122e0:	08012459 	.word	0x08012459
 80122e4:	08012463 	.word	0x08012463
 80122e8:	0801246d 	.word	0x0801246d
 80122ec:	08012479 	.word	0x08012479
 80122f0:	08012491 	.word	0x08012491
 80122f4:	08012485 	.word	0x08012485
 80122f8:	0801249d 	.word	0x0801249d
 80122fc:	080124a7 	.word	0x080124a7
 8012300:	080124b3 	.word	0x080124b3
 8012304:	080124c9 	.word	0x080124c9
 8012308:	080124bd 	.word	0x080124bd
 801230c:	080124e9 	.word	0x080124e9
 8012310:	080124d5 	.word	0x080124d5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012314:	4b7a      	ldr	r3, [pc, #488]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012316:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	711a      	strb	r2, [r3, #4]
            break;
 801231e:	e0e9      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012320:	4b77      	ldr	r3, [pc, #476]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012322:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	711a      	strb	r2, [r3, #4]
            break;
 801232a:	e0e3      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801232c:	f7fb f88e 	bl	800d44c <SecureElementGetDevEui>
 8012330:	4602      	mov	r2, r0
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	605a      	str	r2, [r3, #4]
            break;
 8012336:	e0dd      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012338:	f7fb f8aa 	bl	800d490 <SecureElementGetJoinEui>
 801233c:	4602      	mov	r2, r0
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	605a      	str	r2, [r3, #4]
            break;
 8012342:	e0d7      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012344:	4b6e      	ldr	r3, [pc, #440]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012346:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	711a      	strb	r2, [r3, #4]
            break;
 801234e:	e0d1      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012350:	4b6b      	ldr	r3, [pc, #428]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012352:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	605a      	str	r2, [r3, #4]
            break;
 801235a:	e0cb      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801235c:	4b68      	ldr	r3, [pc, #416]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801235e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	605a      	str	r2, [r3, #4]
            break;
 8012366:	e0c5      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012368:	4b65      	ldr	r3, [pc, #404]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801236a:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	711a      	strb	r2, [r3, #4]
            break;
 8012372:	e0bf      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012374:	4b62      	ldr	r3, [pc, #392]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012376:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	711a      	strb	r2, [r3, #4]
            break;
 801237e:	e0b9      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012380:	231d      	movs	r3, #29
 8012382:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012384:	4b5e      	ldr	r3, [pc, #376]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801238a:	f107 0210 	add.w	r2, r7, #16
 801238e:	4611      	mov	r1, r2
 8012390:	4618      	mov	r0, r3
 8012392:	f002 fec8 	bl	8015126 <RegionGetPhyParam>
 8012396:	4603      	mov	r3, r0
 8012398:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	605a      	str	r2, [r3, #4]
            break;
 80123a0:	e0a8      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4a56      	ldr	r2, [pc, #344]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123a6:	3304      	adds	r3, #4
 80123a8:	3264      	adds	r2, #100	; 0x64
 80123aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123ae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80123b2:	e09f      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4a52      	ldr	r2, [pc, #328]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123b8:	3304      	adds	r3, #4
 80123ba:	32a4      	adds	r2, #164	; 0xa4
 80123bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123c0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80123c4:	e096      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4a4d      	ldr	r2, [pc, #308]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123ca:	3304      	adds	r3, #4
 80123cc:	326c      	adds	r2, #108	; 0x6c
 80123ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123d2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80123d6:	e08d      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4a49      	ldr	r2, [pc, #292]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123dc:	3304      	adds	r3, #4
 80123de:	32ac      	adds	r2, #172	; 0xac
 80123e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123e4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80123e8:	e084      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80123ea:	231b      	movs	r3, #27
 80123ec:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123ee:	4b44      	ldr	r3, [pc, #272]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80123f4:	f107 0210 	add.w	r2, r7, #16
 80123f8:	4611      	mov	r1, r2
 80123fa:	4618      	mov	r0, r3
 80123fc:	f002 fe93 	bl	8015126 <RegionGetPhyParam>
 8012400:	4603      	mov	r3, r0
 8012402:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	605a      	str	r2, [r3, #4]
            break;
 801240a:	e073      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801240c:	231a      	movs	r3, #26
 801240e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012410:	4b3b      	ldr	r3, [pc, #236]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012416:	f107 0210 	add.w	r2, r7, #16
 801241a:	4611      	mov	r1, r2
 801241c:	4618      	mov	r0, r3
 801241e:	f002 fe82 	bl	8015126 <RegionGetPhyParam>
 8012422:	4603      	mov	r3, r0
 8012424:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	605a      	str	r2, [r3, #4]
            break;
 801242c:	e062      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801242e:	4b34      	ldr	r3, [pc, #208]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012430:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	711a      	strb	r2, [r3, #4]
            break;
 8012438:	e05c      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801243a:	4b31      	ldr	r3, [pc, #196]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801243c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	605a      	str	r2, [r3, #4]
            break;
 8012442:	e057      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012444:	4b2e      	ldr	r3, [pc, #184]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	605a      	str	r2, [r3, #4]
            break;
 801244c:	e052      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801244e:	4b2c      	ldr	r3, [pc, #176]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	605a      	str	r2, [r3, #4]
            break;
 8012456:	e04d      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012458:	4b29      	ldr	r3, [pc, #164]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801245a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	605a      	str	r2, [r3, #4]
            break;
 8012460:	e048      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012462:	4b27      	ldr	r3, [pc, #156]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	605a      	str	r2, [r3, #4]
            break;
 801246a:	e043      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801246c:	4b24      	ldr	r3, [pc, #144]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801246e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	711a      	strb	r2, [r3, #4]
            break;
 8012476:	e03d      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012478:	4b21      	ldr	r3, [pc, #132]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801247a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	711a      	strb	r2, [r3, #4]
            break;
 8012482:	e037      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012484:	4b1e      	ldr	r3, [pc, #120]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012486:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	711a      	strb	r2, [r3, #4]
            break;
 801248e:	e031      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012490:	4b1b      	ldr	r3, [pc, #108]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012492:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	711a      	strb	r2, [r3, #4]
            break;
 801249a:	e02b      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801249c:	4b18      	ldr	r3, [pc, #96]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801249e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	605a      	str	r2, [r3, #4]
            break;
 80124a4:	e026      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80124a6:	4b16      	ldr	r3, [pc, #88]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	711a      	strb	r2, [r3, #4]
            break;
 80124b0:	e020      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80124b2:	4b13      	ldr	r3, [pc, #76]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	605a      	str	r2, [r3, #4]
            break;
 80124ba:	e01b      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80124bc:	f7ff f934 	bl	8011728 <GetNvmData>
 80124c0:	4602      	mov	r2, r0
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	605a      	str	r2, [r3, #4]
            break;
 80124c6:	e015      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80124c8:	4b0d      	ldr	r3, [pc, #52]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124ca:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	605a      	str	r2, [r3, #4]
            break;
 80124d2:	e00f      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4a0a      	ldr	r2, [pc, #40]	; (8012500 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80124d8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80124dc:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80124de:	687c      	ldr	r4, [r7, #4]
 80124e0:	f003 f84a 	bl	8015578 <RegionGetVersion>
 80124e4:	60a0      	str	r0, [r4, #8]
            break;
 80124e6:	e005      	b.n	80124f4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f000 fefd 	bl	80132e8 <LoRaMacClassBMibGetRequestConfirm>
 80124ee:	4603      	mov	r3, r0
 80124f0:	75fb      	strb	r3, [r7, #23]
            break;
 80124f2:	bf00      	nop
        }
    }
    return status;
 80124f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	371c      	adds	r7, #28
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd90      	pop	{r4, r7, pc}
 80124fe:	bf00      	nop
 8012500:	20003534 	.word	0x20003534

08012504 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801250c:	2300      	movs	r3, #0
 801250e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d101      	bne.n	801251a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012516:	2303      	movs	r3, #3
 8012518:	e32b      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801251a:	4bb4      	ldr	r3, [pc, #720]	; (80127ec <LoRaMacMibSetRequestConfirm+0x2e8>)
 801251c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012520:	f003 0302 	and.w	r3, r3, #2
 8012524:	2b00      	cmp	r3, #0
 8012526:	d001      	beq.n	801252c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012528:	2301      	movs	r3, #1
 801252a:	e322      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	2b27      	cmp	r3, #39	; 0x27
 8012532:	f200 82fc 	bhi.w	8012b2e <LoRaMacMibSetRequestConfirm+0x62a>
 8012536:	a201      	add	r2, pc, #4	; (adr r2, 801253c <LoRaMacMibSetRequestConfirm+0x38>)
 8012538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801253c:	080125dd 	.word	0x080125dd
 8012540:	080125ed 	.word	0x080125ed
 8012544:	08012607 	.word	0x08012607
 8012548:	0801261f 	.word	0x0801261f
 801254c:	08012637 	.word	0x08012637
 8012550:	08012643 	.word	0x08012643
 8012554:	0801264f 	.word	0x0801264f
 8012558:	0801265b 	.word	0x0801265b
 801255c:	08012681 	.word	0x08012681
 8012560:	080126a7 	.word	0x080126a7
 8012564:	080126cd 	.word	0x080126cd
 8012568:	080126f3 	.word	0x080126f3
 801256c:	08012719 	.word	0x08012719
 8012570:	0801273f 	.word	0x0801273f
 8012574:	08012765 	.word	0x08012765
 8012578:	0801278b 	.word	0x0801278b
 801257c:	080127ab 	.word	0x080127ab
 8012580:	08012b2f 	.word	0x08012b2f
 8012584:	080127b7 	.word	0x080127b7
 8012588:	08012835 	.word	0x08012835
 801258c:	08012875 	.word	0x08012875
 8012590:	080128d7 	.word	0x080128d7
 8012594:	08012947 	.word	0x08012947
 8012598:	08012917 	.word	0x08012917
 801259c:	08012977 	.word	0x08012977
 80125a0:	08012999 	.word	0x08012999
 80125a4:	080129a3 	.word	0x080129a3
 80125a8:	080129ad 	.word	0x080129ad
 80125ac:	080129b7 	.word	0x080129b7
 80125b0:	080129c1 	.word	0x080129c1
 80125b4:	080129cb 	.word	0x080129cb
 80125b8:	080129fd 	.word	0x080129fd
 80125bc:	08012a69 	.word	0x08012a69
 80125c0:	08012a37 	.word	0x08012a37
 80125c4:	08012a9b 	.word	0x08012a9b
 80125c8:	08012ab1 	.word	0x08012ab1
 80125cc:	08012ad1 	.word	0x08012ad1
 80125d0:	08012adb 	.word	0x08012adb
 80125d4:	08012ae7 	.word	0x08012ae7
 80125d8:	08012b05 	.word	0x08012b05
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	791b      	ldrb	r3, [r3, #4]
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fd fbfb 	bl	800fddc <SwitchClass>
 80125e6:	4603      	mov	r3, r0
 80125e8:	75fb      	strb	r3, [r7, #23]
            break;
 80125ea:	e2c1      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	791b      	ldrb	r3, [r3, #4]
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	d005      	beq.n	8012600 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	791a      	ldrb	r2, [r3, #4]
 80125f8:	4b7d      	ldr	r3, [pc, #500]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80125fa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80125fe:	e2b7      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012600:	2303      	movs	r3, #3
 8012602:	75fb      	strb	r3, [r7, #23]
            break;
 8012604:	e2b4      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	4618      	mov	r0, r3
 801260c:	f7fa ff06 	bl	800d41c <SecureElementSetDevEui>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	f000 8291 	beq.w	8012b3a <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012618:	2303      	movs	r3, #3
 801261a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801261c:	e28d      	b.n	8012b3a <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	4618      	mov	r0, r3
 8012624:	f7fa ff1c 	bl	800d460 <SecureElementSetJoinEui>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	f000 8287 	beq.w	8012b3e <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012630:	2303      	movs	r3, #3
 8012632:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012634:	e283      	b.n	8012b3e <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	791a      	ldrb	r2, [r3, #4]
 801263a:	4b6d      	ldr	r3, [pc, #436]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801263c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8012640:	e296      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	4a6a      	ldr	r2, [pc, #424]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012648:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 801264c:	e290      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	4a67      	ldr	r2, [pc, #412]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012654:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012658:	e28a      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00b      	beq.n	801267a <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	4619      	mov	r1, r3
 8012668:	2000      	movs	r0, #0
 801266a:	f001 ff67 	bl	801453c <LoRaMacCryptoSetKey>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	f000 8266 	beq.w	8012b42 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012676:	2311      	movs	r3, #17
 8012678:	e27b      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801267a:	2303      	movs	r3, #3
 801267c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801267e:	e260      	b.n	8012b42 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00b      	beq.n	80126a0 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	4619      	mov	r1, r3
 801268e:	2001      	movs	r0, #1
 8012690:	f001 ff54 	bl	801453c <LoRaMacCryptoSetKey>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	f000 8255 	beq.w	8012b46 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801269c:	2311      	movs	r3, #17
 801269e:	e268      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126a0:	2303      	movs	r3, #3
 80126a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126a4:	e24f      	b.n	8012b46 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00b      	beq.n	80126c6 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	4619      	mov	r1, r3
 80126b4:	2002      	movs	r0, #2
 80126b6:	f001 ff41 	bl	801453c <LoRaMacCryptoSetKey>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f000 8244 	beq.w	8012b4a <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126c2:	2311      	movs	r3, #17
 80126c4:	e255      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126c6:	2303      	movs	r3, #3
 80126c8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126ca:	e23e      	b.n	8012b4a <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00b      	beq.n	80126ec <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	4619      	mov	r1, r3
 80126da:	2003      	movs	r0, #3
 80126dc:	f001 ff2e 	bl	801453c <LoRaMacCryptoSetKey>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 8233 	beq.w	8012b4e <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126e8:	2311      	movs	r3, #17
 80126ea:	e242      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126ec:	2303      	movs	r3, #3
 80126ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126f0:	e22d      	b.n	8012b4e <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00b      	beq.n	8012712 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	4619      	mov	r1, r3
 8012700:	207f      	movs	r0, #127	; 0x7f
 8012702:	f001 ff1b 	bl	801453c <LoRaMacCryptoSetKey>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	f000 8222 	beq.w	8012b52 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801270e:	2311      	movs	r3, #17
 8012710:	e22f      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012712:	2303      	movs	r3, #3
 8012714:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012716:	e21c      	b.n	8012b52 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00b      	beq.n	8012738 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	4619      	mov	r1, r3
 8012726:	2080      	movs	r0, #128	; 0x80
 8012728:	f001 ff08 	bl	801453c <LoRaMacCryptoSetKey>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 8211 	beq.w	8012b56 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012734:	2311      	movs	r3, #17
 8012736:	e21c      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012738:	2303      	movs	r3, #3
 801273a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801273c:	e20b      	b.n	8012b56 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d00b      	beq.n	801275e <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4619      	mov	r1, r3
 801274c:	2081      	movs	r0, #129	; 0x81
 801274e:	f001 fef5 	bl	801453c <LoRaMacCryptoSetKey>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 8200 	beq.w	8012b5a <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801275a:	2311      	movs	r3, #17
 801275c:	e209      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801275e:	2303      	movs	r3, #3
 8012760:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012762:	e1fa      	b.n	8012b5a <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4619      	mov	r1, r3
 8012772:	2082      	movs	r0, #130	; 0x82
 8012774:	f001 fee2 	bl	801453c <LoRaMacCryptoSetKey>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	f000 81ef 	beq.w	8012b5e <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012780:	2311      	movs	r3, #17
 8012782:	e1f6      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012784:	2303      	movs	r3, #3
 8012786:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012788:	e1e9      	b.n	8012b5e <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	791a      	ldrb	r2, [r3, #4]
 801278e:	4b18      	ldr	r3, [pc, #96]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012790:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012794:	4b17      	ldr	r3, [pc, #92]	; (80127f4 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012798:	4a15      	ldr	r2, [pc, #84]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801279a:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801279e:	4610      	mov	r0, r2
 80127a0:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80127a2:	4b14      	ldr	r3, [pc, #80]	; (80127f4 <LoRaMacMibSetRequestConfirm+0x2f0>)
 80127a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a6:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80127a8:	e1e2      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	791a      	ldrb	r2, [r3, #4]
 80127ae:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80127b4:	e1dc      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	7a1b      	ldrb	r3, [r3, #8]
 80127ba:	b25b      	sxtb	r3, r3
 80127bc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127be:	4b0c      	ldr	r3, [pc, #48]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127c0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80127c4:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80127c6:	4b0a      	ldr	r3, [pc, #40]	; (80127f0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80127c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127cc:	f107 0108 	add.w	r1, r7, #8
 80127d0:	2207      	movs	r2, #7
 80127d2:	4618      	mov	r0, r3
 80127d4:	f002 fcf7 	bl	80151c6 <RegionVerify>
 80127d8:	4603      	mov	r3, r0
 80127da:	f083 0301 	eor.w	r3, r3, #1
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d009      	beq.n	80127f8 <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127e4:	2303      	movs	r3, #3
 80127e6:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80127e8:	e1c2      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
 80127ea:	bf00      	nop
 80127ec:	2000302c 	.word	0x2000302c
 80127f0:	20003534 	.word	0x20003534
 80127f4:	0801e6b8 	.word	0x0801e6b8
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80127fe:	4bb2      	ldr	r3, [pc, #712]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012804:	f107 0108 	add.w	r1, r7, #8
 8012808:	2200      	movs	r2, #0
 801280a:	4618      	mov	r0, r3
 801280c:	f002 fcdb 	bl	80151c6 <RegionVerify>
 8012810:	4603      	mov	r3, r0
 8012812:	f083 0301 	eor.w	r3, r3, #1
 8012816:	b2db      	uxtb	r3, r3
 8012818:	2b00      	cmp	r3, #0
 801281a:	d002      	beq.n	8012822 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801281c:	2303      	movs	r3, #3
 801281e:	75fb      	strb	r3, [r7, #23]
            break;
 8012820:	e1a6      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012822:	4ba9      	ldr	r3, [pc, #676]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	3364      	adds	r3, #100	; 0x64
 8012828:	3204      	adds	r2, #4
 801282a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801282e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012832:	e19d      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	7a1b      	ldrb	r3, [r3, #8]
 8012838:	b25b      	sxtb	r3, r3
 801283a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801283c:	4ba2      	ldr	r3, [pc, #648]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801283e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012842:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012844:	4ba0      	ldr	r3, [pc, #640]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801284a:	f107 0108 	add.w	r1, r7, #8
 801284e:	2207      	movs	r2, #7
 8012850:	4618      	mov	r0, r3
 8012852:	f002 fcb8 	bl	80151c6 <RegionVerify>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d008      	beq.n	801286e <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801285c:	4b9a      	ldr	r3, [pc, #616]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	33a4      	adds	r3, #164	; 0xa4
 8012862:	3204      	adds	r2, #4
 8012864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012868:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801286c:	e180      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801286e:	2303      	movs	r3, #3
 8012870:	75fb      	strb	r3, [r7, #23]
            break;
 8012872:	e17d      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	7a1b      	ldrb	r3, [r3, #8]
 8012878:	b25b      	sxtb	r3, r3
 801287a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801287c:	4b92      	ldr	r3, [pc, #584]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801287e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012882:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012884:	4b90      	ldr	r3, [pc, #576]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801288a:	f107 0108 	add.w	r1, r7, #8
 801288e:	2207      	movs	r2, #7
 8012890:	4618      	mov	r0, r3
 8012892:	f002 fc98 	bl	80151c6 <RegionVerify>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d019      	beq.n	80128d0 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801289c:	4b8a      	ldr	r3, [pc, #552]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	336c      	adds	r3, #108	; 0x6c
 80128a2:	3204      	adds	r2, #4
 80128a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128a8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80128ac:	4b86      	ldr	r3, [pc, #536]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128ae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	f040 8155 	bne.w	8012b62 <LoRaMacMibSetRequestConfirm+0x65e>
 80128b8:	4b83      	ldr	r3, [pc, #524]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128ba:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f000 814f 	beq.w	8012b62 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80128c4:	4b81      	ldr	r3, [pc, #516]	; (8012acc <LoRaMacMibSetRequestConfirm+0x5c8>)
 80128c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80128ca:	f7fe fcd9 	bl	8011280 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128ce:	e148      	b.n	8012b62 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128d0:	2303      	movs	r3, #3
 80128d2:	75fb      	strb	r3, [r7, #23]
            break;
 80128d4:	e145      	b.n	8012b62 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	7a1b      	ldrb	r3, [r3, #8]
 80128da:	b25b      	sxtb	r3, r3
 80128dc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80128de:	4b7a      	ldr	r3, [pc, #488]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128e0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80128e4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80128e6:	4b78      	ldr	r3, [pc, #480]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128ec:	f107 0108 	add.w	r1, r7, #8
 80128f0:	2207      	movs	r2, #7
 80128f2:	4618      	mov	r0, r3
 80128f4:	f002 fc67 	bl	80151c6 <RegionVerify>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d008      	beq.n	8012910 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80128fe:	4b72      	ldr	r3, [pc, #456]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	33ac      	adds	r3, #172	; 0xac
 8012904:	3204      	adds	r2, #4
 8012906:	e892 0003 	ldmia.w	r2, {r0, r1}
 801290a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801290e:	e12f      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012910:	2303      	movs	r3, #3
 8012912:	75fb      	strb	r3, [r7, #23]
            break;
 8012914:	e12c      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801291c:	2301      	movs	r3, #1
 801291e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012920:	4b69      	ldr	r3, [pc, #420]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012926:	f107 020c 	add.w	r2, r7, #12
 801292a:	4611      	mov	r1, r2
 801292c:	4618      	mov	r0, r3
 801292e:	f002 fc83 	bl	8015238 <RegionChanMaskSet>
 8012932:	4603      	mov	r3, r0
 8012934:	f083 0301 	eor.w	r3, r3, #1
 8012938:	b2db      	uxtb	r3, r3
 801293a:	2b00      	cmp	r3, #0
 801293c:	f000 8113 	beq.w	8012b66 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012940:	2303      	movs	r3, #3
 8012942:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012944:	e10f      	b.n	8012b66 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801294c:	2300      	movs	r3, #0
 801294e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012950:	4b5d      	ldr	r3, [pc, #372]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012956:	f107 020c 	add.w	r2, r7, #12
 801295a:	4611      	mov	r1, r2
 801295c:	4618      	mov	r0, r3
 801295e:	f002 fc6b 	bl	8015238 <RegionChanMaskSet>
 8012962:	4603      	mov	r3, r0
 8012964:	f083 0301 	eor.w	r3, r3, #1
 8012968:	b2db      	uxtb	r3, r3
 801296a:	2b00      	cmp	r3, #0
 801296c:	f000 80fd 	beq.w	8012b6a <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012970:	2303      	movs	r3, #3
 8012972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012974:	e0f9      	b.n	8012b6a <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	791b      	ldrb	r3, [r3, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d009      	beq.n	8012992 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012982:	2b0f      	cmp	r3, #15
 8012984:	d805      	bhi.n	8012992 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	791a      	ldrb	r2, [r3, #4]
 801298a:	4b4f      	ldr	r3, [pc, #316]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801298c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012990:	e0ee      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012992:	2303      	movs	r3, #3
 8012994:	75fb      	strb	r3, [r7, #23]
            break;
 8012996:	e0eb      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	4a4a      	ldr	r2, [pc, #296]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801299e:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80129a0:	e0e6      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	4a48      	ldr	r2, [pc, #288]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129a8:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80129aa:	e0e1      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	4a45      	ldr	r2, [pc, #276]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129b2:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80129b4:	e0dc      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	4a43      	ldr	r2, [pc, #268]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129bc:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80129be:	e0d7      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	4a40      	ldr	r2, [pc, #256]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129c6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80129c8:	e0d2      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129d0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80129d2:	4b3d      	ldr	r3, [pc, #244]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129d8:	f107 0108 	add.w	r1, r7, #8
 80129dc:	2206      	movs	r2, #6
 80129de:	4618      	mov	r0, r3
 80129e0:	f002 fbf1 	bl	80151c6 <RegionVerify>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d005      	beq.n	80129f6 <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80129ea:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129ee:	4b36      	ldr	r3, [pc, #216]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129f0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129f4:	e0bc      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129f6:	2303      	movs	r3, #3
 80129f8:	75fb      	strb	r3, [r7, #23]
            break;
 80129fa:	e0b9      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a04:	4b30      	ldr	r3, [pc, #192]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a06:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012a0a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012a0c:	4b2e      	ldr	r3, [pc, #184]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a12:	f107 0108 	add.w	r1, r7, #8
 8012a16:	2205      	movs	r2, #5
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f002 fbd4 	bl	80151c6 <RegionVerify>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d005      	beq.n	8012a30 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012a24:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a28:	4b27      	ldr	r3, [pc, #156]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a2e:	e09f      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a30:	2303      	movs	r3, #3
 8012a32:	75fb      	strb	r3, [r7, #23]
            break;
 8012a34:	e09c      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a3c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012a3e:	4b22      	ldr	r3, [pc, #136]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a44:	f107 0108 	add.w	r1, r7, #8
 8012a48:	220a      	movs	r2, #10
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f002 fbbb 	bl	80151c6 <RegionVerify>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d005      	beq.n	8012a62 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012a56:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a5a:	4b1b      	ldr	r3, [pc, #108]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a5c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a60:	e086      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a62:	2303      	movs	r3, #3
 8012a64:	75fb      	strb	r3, [r7, #23]
            break;
 8012a66:	e083      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a6e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012a70:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a76:	f107 0108 	add.w	r1, r7, #8
 8012a7a:	2209      	movs	r2, #9
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f002 fba2 	bl	80151c6 <RegionVerify>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d005      	beq.n	8012a94 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012a88:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a8c:	4b0e      	ldr	r3, [pc, #56]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a92:	e06d      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a94:	2303      	movs	r3, #3
 8012a96:	75fb      	strb	r3, [r7, #23]
            break;
 8012a98:	e06a      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	4a0a      	ldr	r2, [pc, #40]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8012aa4:	4b08      	ldr	r3, [pc, #32]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aaa:	4a07      	ldr	r2, [pc, #28]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012aac:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8012aae:	e05f      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	791a      	ldrb	r2, [r3, #4]
 8012ab4:	4b04      	ldr	r3, [pc, #16]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012ab6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8012aba:	4b03      	ldr	r3, [pc, #12]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012abc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012ac0:	4b01      	ldr	r3, [pc, #4]	; (8012ac8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012ac2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012ac6:	e053      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
 8012ac8:	20003534 	.word	0x20003534
 8012acc:	0801e6b8 	.word	0x0801e6b8
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	4a29      	ldr	r2, [pc, #164]	; (8012b7c <LoRaMacMibSetRequestConfirm+0x678>)
 8012ad6:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8012ad8:	e04a      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4a27      	ldr	r2, [pc, #156]	; (8012b7c <LoRaMacMibSetRequestConfirm+0x678>)
 8012ae0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8012ae4:	e044      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d007      	beq.n	8012afe <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe fe22 	bl	801173c <RestoreNvmData>
 8012af8:	4603      	mov	r3, r0
 8012afa:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012afc:	e038      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012afe:	2303      	movs	r3, #3
 8012b00:	75fb      	strb	r3, [r7, #23]
            break;
 8012b02:	e035      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	799b      	ldrb	r3, [r3, #6]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d80d      	bhi.n	8012b28 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012b0c:	4a1b      	ldr	r2, [pc, #108]	; (8012b7c <LoRaMacMibSetRequestConfirm+0x678>)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6858      	ldr	r0, [r3, #4]
 8012b1a:	f001 fc49 	bl	80143b0 <LoRaMacCryptoSetLrWanVersion>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d024      	beq.n	8012b6e <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b24:	2311      	movs	r3, #17
 8012b26:	e024      	b.n	8012b72 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b28:	2303      	movs	r3, #3
 8012b2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b2c:	e01f      	b.n	8012b6e <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f000 fbe4 	bl	80132fc <LoRaMacMibClassBSetRequestConfirm>
 8012b34:	4603      	mov	r3, r0
 8012b36:	75fb      	strb	r3, [r7, #23]
            break;
 8012b38:	e01a      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b3a:	bf00      	nop
 8012b3c:	e018      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b3e:	bf00      	nop
 8012b40:	e016      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b42:	bf00      	nop
 8012b44:	e014      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b46:	bf00      	nop
 8012b48:	e012      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b4a:	bf00      	nop
 8012b4c:	e010      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b4e:	bf00      	nop
 8012b50:	e00e      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b52:	bf00      	nop
 8012b54:	e00c      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b56:	bf00      	nop
 8012b58:	e00a      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b5a:	bf00      	nop
 8012b5c:	e008      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b5e:	bf00      	nop
 8012b60:	e006      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b62:	bf00      	nop
 8012b64:	e004      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b66:	bf00      	nop
 8012b68:	e002      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b6a:	bf00      	nop
 8012b6c:	e000      	b.n	8012b70 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012b6e:	bf00      	nop
        }
    }
    return status;
 8012b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3718      	adds	r7, #24
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20003534 	.word	0x20003534

08012b80 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b086      	sub	sp, #24
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b88:	2302      	movs	r3, #2
 8012b8a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d101      	bne.n	8012b9a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b96:	2303      	movs	r3, #3
 8012b98:	e127      	b.n	8012dea <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8012b9a:	f7fc fd23 	bl	800f5e4 <LoRaMacIsBusy>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e120      	b.n	8012dea <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012ba8:	f001 f8a6 	bl	8013cf8 <LoRaMacConfirmQueueIsFull>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e119      	b.n	8012dea <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012bb6:	f001 f893 	bl	8013ce0 <LoRaMacConfirmQueueGetCnt>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d104      	bne.n	8012bca <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012bc0:	2214      	movs	r2, #20
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	488b      	ldr	r0, [pc, #556]	; (8012df4 <LoRaMacMlmeRequest+0x274>)
 8012bc6:	f006 f9a9 	bl	8018f1c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bca:	4b8b      	ldr	r3, [pc, #556]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012bd2:	4a89      	ldr	r2, [pc, #548]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012bd4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012bd8:	f043 0304 	orr.w	r3, r3, #4
 8012bdc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012be6:	2301      	movs	r3, #1
 8012be8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8012bea:	2300      	movs	r3, #0
 8012bec:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	2b0d      	cmp	r3, #13
 8012bf6:	f200 80ce 	bhi.w	8012d96 <LoRaMacMlmeRequest+0x216>
 8012bfa:	a201      	add	r2, pc, #4	; (adr r2, 8012c00 <LoRaMacMlmeRequest+0x80>)
 8012bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c00:	08012c39 	.word	0x08012c39
 8012c04:	08012d97 	.word	0x08012d97
 8012c08:	08012d97 	.word	0x08012d97
 8012c0c:	08012ca3 	.word	0x08012ca3
 8012c10:	08012cc1 	.word	0x08012cc1
 8012c14:	08012cd1 	.word	0x08012cd1
 8012c18:	08012d97 	.word	0x08012d97
 8012c1c:	08012d97 	.word	0x08012d97
 8012c20:	08012d97 	.word	0x08012d97
 8012c24:	08012ced 	.word	0x08012ced
 8012c28:	08012d97 	.word	0x08012d97
 8012c2c:	08012d6b 	.word	0x08012d6b
 8012c30:	08012d0b 	.word	0x08012d0b
 8012c34:	08012d4d 	.word	0x08012d4d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012c38:	4b6f      	ldr	r3, [pc, #444]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012c3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012c3e:	f003 0320 	and.w	r3, r3, #32
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d001      	beq.n	8012c4a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012c46:	2301      	movs	r3, #1
 8012c48:	e0cf      	b.n	8012dea <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8012c4a:	f7fe f9fd 	bl	8011048 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012c4e:	4b6b      	ldr	r3, [pc, #428]	; (8012dfc <LoRaMacMlmeRequest+0x27c>)
 8012c50:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	791b      	ldrb	r3, [r3, #4]
 8012c58:	b25b      	sxtb	r3, r3
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	f002 fbfc 	bl	801545a <RegionAlternateDr>
 8012c62:	4603      	mov	r3, r0
 8012c64:	461a      	mov	r2, r3
 8012c66:	4b65      	ldr	r3, [pc, #404]	; (8012dfc <LoRaMacMlmeRequest+0x27c>)
 8012c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012c6c:	2307      	movs	r3, #7
 8012c6e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8012c70:	20ff      	movs	r0, #255	; 0xff
 8012c72:	f7fd ff61 	bl	8010b38 <SendReJoinReq>
 8012c76:	4603      	mov	r3, r0
 8012c78:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8012c7a:	7dfb      	ldrb	r3, [r7, #23]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 808c 	beq.w	8012d9a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012c82:	4b5e      	ldr	r3, [pc, #376]	; (8012dfc <LoRaMacMlmeRequest+0x27c>)
 8012c84:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	791b      	ldrb	r3, [r3, #4]
 8012c8c:	b25b      	sxtb	r3, r3
 8012c8e:	2201      	movs	r2, #1
 8012c90:	4619      	mov	r1, r3
 8012c92:	f002 fbe2 	bl	801545a <RegionAlternateDr>
 8012c96:	4603      	mov	r3, r0
 8012c98:	461a      	mov	r2, r3
 8012c9a:	4b58      	ldr	r3, [pc, #352]	; (8012dfc <LoRaMacMlmeRequest+0x27c>)
 8012c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8012ca0:	e07b      	b.n	8012d9a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ca6:	f107 030c 	add.w	r3, r7, #12
 8012caa:	2200      	movs	r2, #0
 8012cac:	4619      	mov	r1, r3
 8012cae:	2002      	movs	r0, #2
 8012cb0:	f000 fc88 	bl	80135c4 <LoRaMacCommandsAddCmd>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d071      	beq.n	8012d9e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cba:	2313      	movs	r3, #19
 8012cbc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012cbe:	e06e      	b.n	8012d9e <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	889b      	ldrh	r3, [r3, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fe fcdb 	bl	8011680 <SetTxContinuousWave>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	75fb      	strb	r3, [r7, #23]
            break;
 8012cce:	e06d      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	8898      	ldrh	r0, [r3, #4]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6899      	ldr	r1, [r3, #8]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	f7fe fd01 	bl	80116e8 <SetTxContinuousWave1>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	75fb      	strb	r3, [r7, #23]
            break;
 8012cea:	e05f      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012cf0:	f107 030c 	add.w	r3, r7, #12
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	200d      	movs	r0, #13
 8012cfa:	f000 fc63 	bl	80135c4 <LoRaMacCommandsAddCmd>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d04e      	beq.n	8012da2 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d04:	2313      	movs	r3, #19
 8012d06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d08:	e04b      	b.n	8012da2 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012d0a:	4b3c      	ldr	r3, [pc, #240]	; (8012dfc <LoRaMacMlmeRequest+0x27c>)
 8012d0c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d148      	bne.n	8012da6 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	791b      	ldrb	r3, [r3, #4]
 8012d18:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	791b      	ldrb	r3, [r3, #4]
 8012d1e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	4618      	mov	r0, r3
 8012d26:	f000 fabe 	bl	80132a6 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012d2a:	7dbb      	ldrb	r3, [r7, #22]
 8012d2c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d32:	f107 030c 	add.w	r3, r7, #12
 8012d36:	2201      	movs	r2, #1
 8012d38:	4619      	mov	r1, r3
 8012d3a:	2010      	movs	r0, #16
 8012d3c:	f000 fc42 	bl	80135c4 <LoRaMacCommandsAddCmd>
 8012d40:	4603      	mov	r3, r0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d02f      	beq.n	8012da6 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d46:	2313      	movs	r3, #19
 8012d48:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012d4a:	e02c      	b.n	8012da6 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d50:	f107 030c 	add.w	r3, r7, #12
 8012d54:	2200      	movs	r2, #0
 8012d56:	4619      	mov	r1, r3
 8012d58:	2012      	movs	r0, #18
 8012d5a:	f000 fc33 	bl	80135c4 <LoRaMacCommandsAddCmd>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d022      	beq.n	8012daa <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d64:	2313      	movs	r3, #19
 8012d66:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d68:	e01f      	b.n	8012daa <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012d6e:	f000 fa50 	bl	8013212 <LoRaMacClassBIsAcquisitionInProgress>
 8012d72:	4603      	mov	r3, r0
 8012d74:	f083 0301 	eor.w	r3, r3, #1
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d008      	beq.n	8012d90 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012d7e:	2000      	movs	r0, #0
 8012d80:	f000 fa29 	bl	80131d6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012d84:	2000      	movs	r0, #0
 8012d86:	f000 fa4b 	bl	8013220 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012d8e:	e00d      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8012d90:	2301      	movs	r3, #1
 8012d92:	75fb      	strb	r3, [r7, #23]
            break;
 8012d94:	e00a      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012d96:	bf00      	nop
 8012d98:	e008      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
            break;
 8012d9a:	bf00      	nop
 8012d9c:	e006      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
            break;
 8012d9e:	bf00      	nop
 8012da0:	e004      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
            break;
 8012da2:	bf00      	nop
 8012da4:	e002      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
            break;
 8012da6:	bf00      	nop
 8012da8:	e000      	b.n	8012dac <LoRaMacMlmeRequest+0x22c>
            break;
 8012daa:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012dac:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012dae:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012db6:	7dfb      	ldrb	r3, [r7, #23]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d010      	beq.n	8012dde <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012dbc:	f000 ff90 	bl	8013ce0 <LoRaMacConfirmQueueGetCnt>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d110      	bne.n	8012de8 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012dc6:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012dce:	4a0a      	ldr	r2, [pc, #40]	; (8012df8 <LoRaMacMlmeRequest+0x278>)
 8012dd0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012dd4:	f36f 0382 	bfc	r3, #2, #1
 8012dd8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8012ddc:	e004      	b.n	8012de8 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012dde:	f107 0310 	add.w	r3, r7, #16
 8012de2:	4618      	mov	r0, r3
 8012de4:	f000 fe2e 	bl	8013a44 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3718      	adds	r7, #24
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	20003478 	.word	0x20003478
 8012df8:	2000302c 	.word	0x2000302c
 8012dfc:	20003534 	.word	0x20003534

08012e00 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b08c      	sub	sp, #48	; 0x30
 8012e04:	af02      	add	r7, sp, #8
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	460b      	mov	r3, r1
 8012e0a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e0c:	2302      	movs	r3, #2
 8012e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012e12:	2300      	movs	r3, #0
 8012e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8012e20:	2300      	movs	r3, #0
 8012e22:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d101      	bne.n	8012e2e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	e0d4      	b.n	8012fd8 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8012e2e:	f7fc fbd9 	bl	800f5e4 <LoRaMacIsBusy>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d001      	beq.n	8012e3c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e0cd      	b.n	8012fd8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012e40:	2214      	movs	r2, #20
 8012e42:	2100      	movs	r1, #0
 8012e44:	4866      	ldr	r0, [pc, #408]	; (8012fe0 <LoRaMacMcpsRequest+0x1e0>)
 8012e46:	f006 f869 	bl	8018f1c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e4a:	4b66      	ldr	r3, [pc, #408]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012e52:	4b64      	ldr	r3, [pc, #400]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012e54:	2201      	movs	r2, #1
 8012e56:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	2b03      	cmp	r3, #3
 8012e60:	d03d      	beq.n	8012ede <LoRaMacMcpsRequest+0xde>
 8012e62:	2b03      	cmp	r3, #3
 8012e64:	dc4f      	bgt.n	8012f06 <LoRaMacMcpsRequest+0x106>
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <LoRaMacMcpsRequest+0x70>
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d019      	beq.n	8012ea2 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012e6e:	e04a      	b.n	8012f06 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8012e70:	2301      	movs	r3, #1
 8012e72:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012e74:	4b5b      	ldr	r3, [pc, #364]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012e76:	2201      	movs	r2, #1
 8012e78:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012e7c:	7b3b      	ldrb	r3, [r7, #12]
 8012e7e:	2202      	movs	r2, #2
 8012e80:	f362 1347 	bfi	r3, r2, #5, #3
 8012e84:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	791b      	ldrb	r3, [r3, #4]
 8012e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	899b      	ldrh	r3, [r3, #12]
 8012e98:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	7b9b      	ldrb	r3, [r3, #14]
 8012e9e:	777b      	strb	r3, [r7, #29]
            break;
 8012ea0:	e032      	b.n	8012f08 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	7bdb      	ldrb	r3, [r3, #15]
 8012eaa:	2b08      	cmp	r3, #8
 8012eac:	bf28      	it	cs
 8012eae:	2308      	movcs	r3, #8
 8012eb0:	b2da      	uxtb	r2, r3
 8012eb2:	4b4c      	ldr	r3, [pc, #304]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012eb4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012eb8:	7b3b      	ldrb	r3, [r7, #12]
 8012eba:	2204      	movs	r2, #4
 8012ebc:	f362 1347 	bfi	r3, r2, #5, #3
 8012ec0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	791b      	ldrb	r3, [r3, #4]
 8012ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689b      	ldr	r3, [r3, #8]
 8012ece:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	899b      	ldrh	r3, [r3, #12]
 8012ed4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	7b9b      	ldrb	r3, [r3, #14]
 8012eda:	777b      	strb	r3, [r7, #29]
            break;
 8012edc:	e014      	b.n	8012f08 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012ee2:	4b40      	ldr	r3, [pc, #256]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012eea:	7b3b      	ldrb	r3, [r7, #12]
 8012eec:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012ef0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	891b      	ldrh	r3, [r3, #8]
 8012efc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	7a9b      	ldrb	r3, [r3, #10]
 8012f02:	777b      	strb	r3, [r7, #29]
            break;
 8012f04:	e000      	b.n	8012f08 <LoRaMacMcpsRequest+0x108>
            break;
 8012f06:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012f08:	2302      	movs	r3, #2
 8012f0a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f0c:	4b36      	ldr	r3, [pc, #216]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f0e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012f12:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f14:	4b34      	ldr	r3, [pc, #208]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f1a:	f107 0214 	add.w	r2, r7, #20
 8012f1e:	4611      	mov	r1, r2
 8012f20:	4618      	mov	r0, r3
 8012f22:	f002 f900 	bl	8015126 <RegionGetPhyParam>
 8012f26:	4603      	mov	r3, r0
 8012f28:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	b25b      	sxtb	r3, r3
 8012f2e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8012f32:	4293      	cmp	r3, r2
 8012f34:	bfb8      	it	lt
 8012f36:	4613      	movlt	r3, r2
 8012f38:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8012f3a:	7f3b      	ldrb	r3, [r7, #28]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d044      	beq.n	8012fca <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8012f40:	4b29      	ldr	r3, [pc, #164]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f42:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8012f46:	f083 0301 	eor.w	r3, r3, #1
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d019      	beq.n	8012f84 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8012f50:	7f7b      	ldrb	r3, [r7, #29]
 8012f52:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f54:	4b24      	ldr	r3, [pc, #144]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f56:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012f5a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012f5c:	4b22      	ldr	r3, [pc, #136]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f62:	f107 0108 	add.w	r1, r7, #8
 8012f66:	2205      	movs	r2, #5
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f002 f92c 	bl	80151c6 <RegionVerify>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d005      	beq.n	8012f80 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012f74:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012f78:	4b1b      	ldr	r3, [pc, #108]	; (8012fe8 <LoRaMacMcpsRequest+0x1e8>)
 8012f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012f7e:	e001      	b.n	8012f84 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f80:	2303      	movs	r3, #3
 8012f82:	e029      	b.n	8012fd8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012f84:	8bfa      	ldrh	r2, [r7, #30]
 8012f86:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8012f8a:	f107 000c 	add.w	r0, r7, #12
 8012f8e:	78fb      	ldrb	r3, [r7, #3]
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	4613      	mov	r3, r2
 8012f94:	6a3a      	ldr	r2, [r7, #32]
 8012f96:	f7fd fcef 	bl	8010978 <Send>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8012fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10c      	bne.n	8012fc2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	781a      	ldrb	r2, [r3, #0]
 8012fac:	4b0d      	ldr	r3, [pc, #52]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012fae:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012fb2:	4a0c      	ldr	r2, [pc, #48]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012fb4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012fb8:	f043 0301 	orr.w	r3, r3, #1
 8012fbc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8012fc0:	e003      	b.n	8012fca <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012fc2:	4b08      	ldr	r3, [pc, #32]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012fca:	4b06      	ldr	r3, [pc, #24]	; (8012fe4 <LoRaMacMcpsRequest+0x1e4>)
 8012fcc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	611a      	str	r2, [r3, #16]

    return status;
 8012fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3728      	adds	r7, #40	; 0x28
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	20003464 	.word	0x20003464
 8012fe4:	2000302c 	.word	0x2000302c
 8012fe8:	20003534 	.word	0x20003534

08012fec <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012ff6:	79fb      	ldrb	r3, [r7, #7]
 8012ff8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012ffa:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013000:	f107 010c 	add.w	r1, r7, #12
 8013004:	220f      	movs	r2, #15
 8013006:	4618      	mov	r0, r3
 8013008:	f002 f8dd 	bl	80151c6 <RegionVerify>
 801300c:	4603      	mov	r3, r0
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013012:	4a04      	ldr	r2, [pc, #16]	; (8013024 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013014:	79fb      	ldrb	r3, [r7, #7]
 8013016:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 801301a:	bf00      	nop
 801301c:	3710      	adds	r7, #16
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	20003534 	.word	0x20003534

08013028 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b08c      	sub	sp, #48	; 0x30
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013036:	2300      	movs	r3, #0
 8013038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	7c1b      	ldrb	r3, [r3, #16]
 8013040:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	7c5b      	ldrb	r3, [r3, #17]
 8013048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	689a      	ldr	r2, [r3, #8]
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	795b      	ldrb	r3, [r3, #5]
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 808b 	beq.w	8013174 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801305e:	2302      	movs	r3, #2
 8013060:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	7c9b      	ldrb	r3, [r3, #18]
 8013068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	7cdb      	ldrb	r3, [r3, #19]
 8013070:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f002 f855 	bl	8015126 <RegionGetPhyParam>
 801307c:	4603      	mov	r3, r0
 801307e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013080:	6a3b      	ldr	r3, [r7, #32]
 8013082:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013086:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801308a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801308e:	4293      	cmp	r3, r2
 8013090:	bfb8      	it	lt
 8013092:	4613      	movlt	r3, r2
 8013094:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8013098:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801309c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d106      	bne.n	80130b2 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	2200      	movs	r2, #0
 80130a8:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80130aa:	2300      	movs	r3, #0
 80130ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80130b0:	e060      	b.n	8013174 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	8992      	ldrh	r2, [r2, #12]
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d303      	bcc.n	80130c6 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80130be:	2301      	movs	r3, #1
 80130c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80130c4:	e002      	b.n	80130cc <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80130c6:	2300      	movs	r3, #0
 80130c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	689b      	ldr	r3, [r3, #8]
 80130d0:	68fa      	ldr	r2, [r7, #12]
 80130d2:	8992      	ldrh	r2, [r2, #12]
 80130d4:	4611      	mov	r1, r2
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	89d2      	ldrh	r2, [r2, #14]
 80130da:	440a      	add	r2, r1
 80130dc:	4293      	cmp	r3, r2
 80130de:	d349      	bcc.n	8013174 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80130e0:	2308      	movs	r3, #8
 80130e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	7cdb      	ldrb	r3, [r3, #19]
 80130ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80130ee:	4611      	mov	r1, r2
 80130f0:	4618      	mov	r0, r3
 80130f2:	f002 f818 	bl	8015126 <RegionGetPhyParam>
 80130f6:	4603      	mov	r3, r0
 80130f8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80130fa:	6a3b      	ldr	r3, [r7, #32]
 80130fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	68fa      	ldr	r2, [r7, #12]
 8013106:	89d2      	ldrh	r2, [r2, #14]
 8013108:	fbb3 f1f2 	udiv	r1, r3, r2
 801310c:	fb01 f202 	mul.w	r2, r1, r2
 8013110:	1a9b      	subs	r3, r3, r2
 8013112:	2b01      	cmp	r3, #1
 8013114:	d12e      	bne.n	8013174 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013116:	2322      	movs	r3, #34	; 0x22
 8013118:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 801311c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013120:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	7c9b      	ldrb	r3, [r3, #18]
 8013128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	7cdb      	ldrb	r3, [r3, #19]
 8013130:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013134:	4611      	mov	r1, r2
 8013136:	4618      	mov	r0, r3
 8013138:	f001 fff5 	bl	8015126 <RegionGetPhyParam>
 801313c:	4603      	mov	r3, r0
 801313e:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8013140:	6a3b      	ldr	r3, [r7, #32]
 8013142:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8013146:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801314a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801314e:	429a      	cmp	r2, r3
 8013150:	d110      	bne.n	8013174 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013152:	2300      	movs	r3, #0
 8013154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	791b      	ldrb	r3, [r3, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d009      	beq.n	8013174 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013160:	2302      	movs	r3, #2
 8013162:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	7cdb      	ldrb	r3, [r3, #19]
 8013168:	f107 0214 	add.w	r2, r7, #20
 801316c:	4611      	mov	r1, r2
 801316e:	4618      	mov	r0, r3
 8013170:	f002 f811 	bl	8015196 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801317a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013182:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013188:	4618      	mov	r0, r3
 801318a:	3730      	adds	r7, #48	; 0x30
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	607a      	str	r2, [r7, #4]
 801319c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	789b      	ldrb	r3, [r3, #2]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d107      	bne.n	80131b6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	68b9      	ldr	r1, [r7, #8]
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff ff3b 	bl	8013028 <CalcNextV10X>
 80131b2:	4603      	mov	r3, r0
 80131b4:	e000      	b.n	80131b8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131cc:	bf00      	nop
 80131ce:	3714      	adds	r7, #20
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bc80      	pop	{r7}
 80131d4:	4770      	bx	lr

080131d6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80131d6:	b480      	push	{r7}
 80131d8:	b083      	sub	sp, #12
 80131da:	af00      	add	r7, sp, #0
 80131dc:	4603      	mov	r3, r0
 80131de:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131e0:	bf00      	nop
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bc80      	pop	{r7}
 80131e8:	4770      	bx	lr

080131ea <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80131ea:	b480      	push	{r7}
 80131ec:	b083      	sub	sp, #12
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	4603      	mov	r3, r0
 80131f2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131f4:	bf00      	nop
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bc80      	pop	{r7}
 80131fc:	4770      	bx	lr

080131fe <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80131fe:	b480      	push	{r7}
 8013200:	b083      	sub	sp, #12
 8013202:	af00      	add	r7, sp, #0
 8013204:	4603      	mov	r3, r0
 8013206:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013208:	bf00      	nop
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	bc80      	pop	{r7}
 8013210:	4770      	bx	lr

08013212 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013212:	b480      	push	{r7}
 8013214:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013216:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013218:	4618      	mov	r0, r3
 801321a:	46bd      	mov	sp, r7
 801321c:	bc80      	pop	{r7}
 801321e:	4770      	bx	lr

08013220 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013228:	bf00      	nop
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	bc80      	pop	{r7}
 8013230:	4770      	bx	lr

08013232 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013232:	b480      	push	{r7}
 8013234:	b083      	sub	sp, #12
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801323a:	bf00      	nop
 801323c:	370c      	adds	r7, #12
 801323e:	46bd      	mov	sp, r7
 8013240:	bc80      	pop	{r7}
 8013242:	4770      	bx	lr

08013244 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801324c:	bf00      	nop
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	bc80      	pop	{r7}
 8013254:	4770      	bx	lr

08013256 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013256:	b480      	push	{r7}
 8013258:	b083      	sub	sp, #12
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
 801325e:	460b      	mov	r3, r1
 8013260:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013262:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013264:	4618      	mov	r0, r3
 8013266:	370c      	adds	r7, #12
 8013268:	46bd      	mov	sp, r7
 801326a:	bc80      	pop	{r7}
 801326c:	4770      	bx	lr

0801326e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801326e:	b480      	push	{r7}
 8013270:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013272:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013274:	4618      	mov	r0, r3
 8013276:	46bd      	mov	sp, r7
 8013278:	bc80      	pop	{r7}
 801327a:	4770      	bx	lr

0801327c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801327c:	b480      	push	{r7}
 801327e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013280:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013282:	4618      	mov	r0, r3
 8013284:	46bd      	mov	sp, r7
 8013286:	bc80      	pop	{r7}
 8013288:	4770      	bx	lr

0801328a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801328a:	b480      	push	{r7}
 801328c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801328e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013290:	4618      	mov	r0, r3
 8013292:	46bd      	mov	sp, r7
 8013294:	bc80      	pop	{r7}
 8013296:	4770      	bx	lr

08013298 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013298:	b480      	push	{r7}
 801329a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801329c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801329e:	4618      	mov	r0, r3
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bc80      	pop	{r7}
 80132a4:	4770      	bx	lr

080132a6 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80132a6:	b480      	push	{r7}
 80132a8:	b083      	sub	sp, #12
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	4603      	mov	r3, r0
 80132ae:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132b0:	bf00      	nop
 80132b2:	370c      	adds	r7, #12
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bc80      	pop	{r7}
 80132b8:	4770      	bx	lr

080132ba <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80132ba:	b480      	push	{r7}
 80132bc:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132be:	bf00      	nop
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bc80      	pop	{r7}
 80132c4:	4770      	bx	lr

080132c6 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80132c6:	b480      	push	{r7}
 80132c8:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132ca:	bf00      	nop
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bc80      	pop	{r7}
 80132d0:	4770      	bx	lr

080132d2 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80132d2:	b480      	push	{r7}
 80132d4:	b083      	sub	sp, #12
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	4603      	mov	r3, r0
 80132da:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80132dc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132de:	4618      	mov	r0, r3
 80132e0:	370c      	adds	r7, #12
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bc80      	pop	{r7}
 80132e6:	4770      	bx	lr

080132e8 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80132e8:	b480      	push	{r7}
 80132ea:	b083      	sub	sp, #12
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80132f0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bc80      	pop	{r7}
 80132fa:	4770      	bx	lr

080132fc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013304:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	bc80      	pop	{r7}
 801330e:	4770      	bx	lr

08013310 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013310:	b480      	push	{r7}
 8013312:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013314:	bf00      	nop
 8013316:	46bd      	mov	sp, r7
 8013318:	bc80      	pop	{r7}
 801331a:	4770      	bx	lr

0801331c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	6039      	str	r1, [r7, #0]
 8013326:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013328:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801332a:	4618      	mov	r0, r3
 801332c:	370c      	adds	r7, #12
 801332e:	46bd      	mov	sp, r7
 8013330:	bc80      	pop	{r7}
 8013332:	4770      	bx	lr

08013334 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	4603      	mov	r3, r0
 801333c:	603a      	str	r2, [r7, #0]
 801333e:	80fb      	strh	r3, [r7, #6]
 8013340:	460b      	mov	r3, r1
 8013342:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013344:	bf00      	nop
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	bc80      	pop	{r7}
 801334c:	4770      	bx	lr

0801334e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801334e:	b480      	push	{r7}
 8013350:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013352:	bf00      	nop
 8013354:	46bd      	mov	sp, r7
 8013356:	bc80      	pop	{r7}
 8013358:	4770      	bx	lr

0801335a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801335a:	b480      	push	{r7}
 801335c:	b083      	sub	sp, #12
 801335e:	af00      	add	r7, sp, #0
 8013360:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013362:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013364:	4618      	mov	r0, r3
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	bc80      	pop	{r7}
 801336c:	4770      	bx	lr

0801336e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801336e:	b480      	push	{r7}
 8013370:	b083      	sub	sp, #12
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013376:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013378:	4618      	mov	r0, r3
 801337a:	370c      	adds	r7, #12
 801337c:	46bd      	mov	sp, r7
 801337e:	bc80      	pop	{r7}
 8013380:	4770      	bx	lr

08013382 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013382:	b480      	push	{r7}
 8013384:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013386:	bf00      	nop
 8013388:	46bd      	mov	sp, r7
 801338a:	bc80      	pop	{r7}
 801338c:	4770      	bx	lr

0801338e <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801338e:	b480      	push	{r7}
 8013390:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013392:	bf00      	nop
 8013394:	46bd      	mov	sp, r7
 8013396:	bc80      	pop	{r7}
 8013398:	4770      	bx	lr

0801339a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801339a:	b480      	push	{r7}
 801339c:	b085      	sub	sp, #20
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80133a6:	2300      	movs	r3, #0
 80133a8:	81fb      	strh	r3, [r7, #14]
 80133aa:	e00a      	b.n	80133c2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80133ac:	89fb      	ldrh	r3, [r7, #14]
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	4413      	add	r3, r2
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d001      	beq.n	80133bc <IsSlotFree+0x22>
        {
            return false;
 80133b8:	2300      	movs	r3, #0
 80133ba:	e006      	b.n	80133ca <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80133bc:	89fb      	ldrh	r3, [r7, #14]
 80133be:	3301      	adds	r3, #1
 80133c0:	81fb      	strh	r3, [r7, #14]
 80133c2:	89fb      	ldrh	r3, [r7, #14]
 80133c4:	2b0f      	cmp	r3, #15
 80133c6:	d9f1      	bls.n	80133ac <IsSlotFree+0x12>
        }
    }
    return true;
 80133c8:	2301      	movs	r3, #1
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3714      	adds	r7, #20
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bc80      	pop	{r7}
 80133d2:	4770      	bx	lr

080133d4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80133da:	2300      	movs	r3, #0
 80133dc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80133de:	e007      	b.n	80133f0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80133e0:	79fb      	ldrb	r3, [r7, #7]
 80133e2:	3301      	adds	r3, #1
 80133e4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80133e6:	79fb      	ldrb	r3, [r7, #7]
 80133e8:	2b0f      	cmp	r3, #15
 80133ea:	d101      	bne.n	80133f0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80133ec:	2300      	movs	r3, #0
 80133ee:	e012      	b.n	8013416 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80133f0:	79fb      	ldrb	r3, [r7, #7]
 80133f2:	011b      	lsls	r3, r3, #4
 80133f4:	3308      	adds	r3, #8
 80133f6:	4a0a      	ldr	r2, [pc, #40]	; (8013420 <MallocNewMacCommandSlot+0x4c>)
 80133f8:	4413      	add	r3, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff ffcd 	bl	801339a <IsSlotFree>
 8013400:	4603      	mov	r3, r0
 8013402:	f083 0301 	eor.w	r3, r3, #1
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1e9      	bne.n	80133e0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801340c:	79fb      	ldrb	r3, [r7, #7]
 801340e:	011b      	lsls	r3, r3, #4
 8013410:	3308      	adds	r3, #8
 8013412:	4a03      	ldr	r2, [pc, #12]	; (8013420 <MallocNewMacCommandSlot+0x4c>)
 8013414:	4413      	add	r3, r2
}
 8013416:	4618      	mov	r0, r3
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	20003b5c 	.word	0x20003b5c

08013424 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d101      	bne.n	8013436 <FreeMacCommandSlot+0x12>
    {
        return false;
 8013432:	2300      	movs	r3, #0
 8013434:	e005      	b.n	8013442 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013436:	2210      	movs	r2, #16
 8013438:	2100      	movs	r1, #0
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f005 fd6e 	bl	8018f1c <memset1>

    return true;
 8013440:	2301      	movs	r3, #1
}
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801344a:	b480      	push	{r7}
 801344c:	b083      	sub	sp, #12
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <LinkedListInit+0x12>
    {
        return false;
 8013458:	2300      	movs	r3, #0
 801345a:	e006      	b.n	801346a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2200      	movs	r2, #0
 8013466:	605a      	str	r2, [r3, #4]

    return true;
 8013468:	2301      	movs	r3, #1
}
 801346a:	4618      	mov	r0, r3
 801346c:	370c      	adds	r7, #12
 801346e:	46bd      	mov	sp, r7
 8013470:	bc80      	pop	{r7}
 8013472:	4770      	bx	lr

08013474 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <LinkedListAdd+0x16>
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <LinkedListAdd+0x1a>
    {
        return false;
 801348a:	2300      	movs	r3, #0
 801348c:	e015      	b.n	80134ba <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d102      	bne.n	801349c <LinkedListAdd+0x28>
    {
        list->First = element;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	683a      	ldr	r2, [r7, #0]
 801349a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d003      	beq.n	80134ac <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	2200      	movs	r2, #0
 80134b0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	605a      	str	r2, [r3, #4]

    return true;
 80134b8:	2301      	movs	r3, #1
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	370c      	adds	r7, #12
 80134be:	46bd      	mov	sp, r7
 80134c0:	bc80      	pop	{r7}
 80134c2:	4770      	bx	lr

080134c4 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80134c4:	b480      	push	{r7}
 80134c6:	b085      	sub	sp, #20
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <LinkedListGetPrevious+0x16>
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d101      	bne.n	80134de <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80134da:	2300      	movs	r3, #0
 80134dc:	e016      	b.n	801350c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80134e4:	683a      	ldr	r2, [r7, #0]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d00c      	beq.n	8013506 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80134ec:	e002      	b.n	80134f4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d007      	beq.n	801350a <LinkedListGetPrevious+0x46>
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	683a      	ldr	r2, [r7, #0]
 8013500:	429a      	cmp	r2, r3
 8013502:	d1f4      	bne.n	80134ee <LinkedListGetPrevious+0x2a>
 8013504:	e001      	b.n	801350a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013506:	2300      	movs	r3, #0
 8013508:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801350a:	68fb      	ldr	r3, [r7, #12]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3714      	adds	r7, #20
 8013510:	46bd      	mov	sp, r7
 8013512:	bc80      	pop	{r7}
 8013514:	4770      	bx	lr

08013516 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013516:	b580      	push	{r7, lr}
 8013518:	b084      	sub	sp, #16
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
 801351e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d002      	beq.n	801352c <LinkedListRemove+0x16>
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d101      	bne.n	8013530 <LinkedListRemove+0x1a>
    {
        return false;
 801352c:	2300      	movs	r3, #0
 801352e:	e020      	b.n	8013572 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013530:	6839      	ldr	r1, [r7, #0]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7ff ffc6 	bl	80134c4 <LinkedListGetPrevious>
 8013538:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	683a      	ldr	r2, [r7, #0]
 8013540:	429a      	cmp	r2, r3
 8013542:	d103      	bne.n	801354c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	683a      	ldr	r2, [r7, #0]
 8013552:	429a      	cmp	r2, r3
 8013554:	d102      	bne.n	801355c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d003      	beq.n	801356a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2200      	movs	r2, #0
 801356e:	601a      	str	r2, [r3, #0]

    return true;
 8013570:	2301      	movs	r3, #1
}
 8013572:	4618      	mov	r0, r3
 8013574:	3710      	adds	r7, #16
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801357a:	b480      	push	{r7}
 801357c:	b083      	sub	sp, #12
 801357e:	af00      	add	r7, sp, #0
 8013580:	4603      	mov	r3, r0
 8013582:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013584:	79fb      	ldrb	r3, [r7, #7]
 8013586:	2b05      	cmp	r3, #5
 8013588:	d004      	beq.n	8013594 <IsSticky+0x1a>
 801358a:	2b05      	cmp	r3, #5
 801358c:	db04      	blt.n	8013598 <IsSticky+0x1e>
 801358e:	3b08      	subs	r3, #8
 8013590:	2b02      	cmp	r3, #2
 8013592:	d801      	bhi.n	8013598 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8013594:	2301      	movs	r3, #1
 8013596:	e000      	b.n	801359a <IsSticky+0x20>
        default:
            return false;
 8013598:	2300      	movs	r3, #0
    }
}
 801359a:	4618      	mov	r0, r3
 801359c:	370c      	adds	r7, #12
 801359e:	46bd      	mov	sp, r7
 80135a0:	bc80      	pop	{r7}
 80135a2:	4770      	bx	lr

080135a4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80135a8:	22fc      	movs	r2, #252	; 0xfc
 80135aa:	2100      	movs	r1, #0
 80135ac:	4804      	ldr	r0, [pc, #16]	; (80135c0 <LoRaMacCommandsInit+0x1c>)
 80135ae:	f005 fcb5 	bl	8018f1c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80135b2:	4803      	ldr	r0, [pc, #12]	; (80135c0 <LoRaMacCommandsInit+0x1c>)
 80135b4:	f7ff ff49 	bl	801344a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80135b8:	2300      	movs	r3, #0
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20003b5c 	.word	0x20003b5c

080135c4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	4603      	mov	r3, r0
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d101      	bne.n	80135dc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80135d8:	2301      	movs	r3, #1
 80135da:	e033      	b.n	8013644 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80135dc:	f7ff fefa 	bl	80133d4 <MallocNewMacCommandSlot>
 80135e0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d101      	bne.n	80135ec <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80135e8:	2302      	movs	r3, #2
 80135ea:	e02b      	b.n	8013644 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80135ec:	6979      	ldr	r1, [r7, #20]
 80135ee:	4817      	ldr	r0, [pc, #92]	; (801364c <LoRaMacCommandsAddCmd+0x88>)
 80135f0:	f7ff ff40 	bl	8013474 <LinkedListAdd>
 80135f4:	4603      	mov	r3, r0
 80135f6:	f083 0301 	eor.w	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013600:	2305      	movs	r3, #5
 8013602:	e01f      	b.n	8013644 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	7bfa      	ldrb	r2, [r7, #15]
 8013608:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	3305      	adds	r3, #5
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	b292      	uxth	r2, r2
 8013618:	68b9      	ldr	r1, [r7, #8]
 801361a:	4618      	mov	r0, r3
 801361c:	f005 fc43 	bl	8018ea6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013620:	7bfb      	ldrb	r3, [r7, #15]
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff ffa9 	bl	801357a <IsSticky>
 8013628:	4603      	mov	r3, r0
 801362a:	461a      	mov	r2, r3
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013630:	4b06      	ldr	r3, [pc, #24]	; (801364c <LoRaMacCommandsAddCmd+0x88>)
 8013632:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4413      	add	r3, r2
 801363a:	3301      	adds	r3, #1
 801363c:	4a03      	ldr	r2, [pc, #12]	; (801364c <LoRaMacCommandsAddCmd+0x88>)
 801363e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3718      	adds	r7, #24
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	20003b5c 	.word	0x20003b5c

08013650 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d101      	bne.n	8013662 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801365e:	2301      	movs	r3, #1
 8013660:	e021      	b.n	80136a6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013662:	6879      	ldr	r1, [r7, #4]
 8013664:	4812      	ldr	r0, [pc, #72]	; (80136b0 <LoRaMacCommandsRemoveCmd+0x60>)
 8013666:	f7ff ff56 	bl	8013516 <LinkedListRemove>
 801366a:	4603      	mov	r3, r0
 801366c:	f083 0301 	eor.w	r3, r3, #1
 8013670:	b2db      	uxtb	r3, r3
 8013672:	2b00      	cmp	r3, #0
 8013674:	d001      	beq.n	801367a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013676:	2303      	movs	r3, #3
 8013678:	e015      	b.n	80136a6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801367a:	4b0d      	ldr	r3, [pc, #52]	; (80136b0 <LoRaMacCommandsRemoveCmd+0x60>)
 801367c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	689b      	ldr	r3, [r3, #8]
 8013684:	1ad3      	subs	r3, r2, r3
 8013686:	3b01      	subs	r3, #1
 8013688:	4a09      	ldr	r2, [pc, #36]	; (80136b0 <LoRaMacCommandsRemoveCmd+0x60>)
 801368a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7ff fec8 	bl	8013424 <FreeMacCommandSlot>
 8013694:	4603      	mov	r3, r0
 8013696:	f083 0301 	eor.w	r3, r3, #1
 801369a:	b2db      	uxtb	r3, r3
 801369c:	2b00      	cmp	r3, #0
 801369e:	d001      	beq.n	80136a4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80136a0:	2305      	movs	r3, #5
 80136a2:	e000      	b.n	80136a6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3708      	adds	r7, #8
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	20003b5c 	.word	0x20003b5c

080136b4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80136ba:	4b0f      	ldr	r3, [pc, #60]	; (80136f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80136c0:	e012      	b.n	80136e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	7b1b      	ldrb	r3, [r3, #12]
 80136c6:	f083 0301 	eor.w	r3, r3, #1
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d008      	beq.n	80136e2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ff ffba 	bl	8013650 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	607b      	str	r3, [r7, #4]
 80136e0:	e002      	b.n	80136e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1e9      	bne.n	80136c2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	20003b5c 	.word	0x20003b5c

080136fc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013702:	4b0e      	ldr	r3, [pc, #56]	; (801373c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013708:	e00f      	b.n	801372a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	791b      	ldrb	r3, [r3, #4]
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff ff30 	bl	801357a <IsSticky>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ff95 	bl	8013650 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d1ec      	bne.n	801370a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013730:	2300      	movs	r3, #0
}
 8013732:	4618      	mov	r0, r3
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
 801373a:	bf00      	nop
 801373c:	20003b5c 	.word	0x20003b5c

08013740 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d101      	bne.n	8013752 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801374e:	2301      	movs	r3, #1
 8013750:	e005      	b.n	801375e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013752:	4b05      	ldr	r3, [pc, #20]	; (8013768 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013754:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	370c      	adds	r7, #12
 8013762:	46bd      	mov	sp, r7
 8013764:	bc80      	pop	{r7}
 8013766:	4770      	bx	lr
 8013768:	20003b5c 	.word	0x20003b5c

0801376c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b088      	sub	sp, #32
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013778:	4b25      	ldr	r3, [pc, #148]	; (8013810 <LoRaMacCommandsSerializeCmds+0xa4>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801377e:	2300      	movs	r3, #0
 8013780:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d002      	beq.n	801378e <LoRaMacCommandsSerializeCmds+0x22>
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d126      	bne.n	80137dc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801378e:	2301      	movs	r3, #1
 8013790:	e039      	b.n	8013806 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013792:	7efb      	ldrb	r3, [r7, #27]
 8013794:	68fa      	ldr	r2, [r7, #12]
 8013796:	1ad2      	subs	r2, r2, r3
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	3301      	adds	r3, #1
 801379e:	429a      	cmp	r2, r3
 80137a0:	d320      	bcc.n	80137e4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80137a2:	7efb      	ldrb	r3, [r7, #27]
 80137a4:	1c5a      	adds	r2, r3, #1
 80137a6:	76fa      	strb	r2, [r7, #27]
 80137a8:	461a      	mov	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4413      	add	r3, r2
 80137ae:	69fa      	ldr	r2, [r7, #28]
 80137b0:	7912      	ldrb	r2, [r2, #4]
 80137b2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80137b4:	7efb      	ldrb	r3, [r7, #27]
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	18d0      	adds	r0, r2, r3
 80137ba:	69fb      	ldr	r3, [r7, #28]
 80137bc:	1d59      	adds	r1, r3, #5
 80137be:	69fb      	ldr	r3, [r7, #28]
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	461a      	mov	r2, r3
 80137c6:	f005 fb6e 	bl	8018ea6 <memcpy1>
            itr += curElement->PayloadSize;
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	689b      	ldr	r3, [r3, #8]
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	7efb      	ldrb	r3, [r7, #27]
 80137d2:	4413      	add	r3, r2
 80137d4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1d7      	bne.n	8013792 <LoRaMacCommandsSerializeCmds+0x26>
 80137e2:	e009      	b.n	80137f8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80137e4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80137e6:	e007      	b.n	80137f8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80137ee:	69f8      	ldr	r0, [r7, #28]
 80137f0:	f7ff ff2e 	bl	8013650 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d1f4      	bne.n	80137e8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80137fe:	68b8      	ldr	r0, [r7, #8]
 8013800:	f7ff ff9e 	bl	8013740 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3720      	adds	r7, #32
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	20003b5c 	.word	0x20003b5c

08013814 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013822:	2301      	movs	r3, #1
 8013824:	e016      	b.n	8013854 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013826:	4b0e      	ldr	r3, [pc, #56]	; (8013860 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2200      	movs	r2, #0
 8013830:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013832:	e00b      	b.n	801384c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	7b1b      	ldrb	r3, [r3, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d004      	beq.n	8013846 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2201      	movs	r2, #1
 8013840:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013842:	2300      	movs	r3, #0
 8013844:	e006      	b.n	8013854 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1f0      	bne.n	8013834 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3714      	adds	r7, #20
 8013858:	46bd      	mov	sp, r7
 801385a:	bc80      	pop	{r7}
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop
 8013860:	20003b5c 	.word	0x20003b5c

08013864 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013864:	b480      	push	{r7}
 8013866:	b085      	sub	sp, #20
 8013868:	af00      	add	r7, sp, #0
 801386a:	4603      	mov	r3, r0
 801386c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013872:	79fb      	ldrb	r3, [r7, #7]
 8013874:	3b02      	subs	r3, #2
 8013876:	2b11      	cmp	r3, #17
 8013878:	d850      	bhi.n	801391c <LoRaMacCommandsGetCmdSize+0xb8>
 801387a:	a201      	add	r2, pc, #4	; (adr r2, 8013880 <LoRaMacCommandsGetCmdSize+0x1c>)
 801387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013880:	080138c9 	.word	0x080138c9
 8013884:	080138cf 	.word	0x080138cf
 8013888:	080138d5 	.word	0x080138d5
 801388c:	080138db 	.word	0x080138db
 8013890:	080138e1 	.word	0x080138e1
 8013894:	080138e7 	.word	0x080138e7
 8013898:	080138ed 	.word	0x080138ed
 801389c:	080138f3 	.word	0x080138f3
 80138a0:	080138f9 	.word	0x080138f9
 80138a4:	0801391d 	.word	0x0801391d
 80138a8:	0801391d 	.word	0x0801391d
 80138ac:	080138ff 	.word	0x080138ff
 80138b0:	0801391d 	.word	0x0801391d
 80138b4:	0801391d 	.word	0x0801391d
 80138b8:	08013905 	.word	0x08013905
 80138bc:	0801390b 	.word	0x0801390b
 80138c0:	08013911 	.word	0x08013911
 80138c4:	08013917 	.word	0x08013917
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80138c8:	2303      	movs	r3, #3
 80138ca:	73fb      	strb	r3, [r7, #15]
            break;
 80138cc:	e027      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80138ce:	2305      	movs	r3, #5
 80138d0:	73fb      	strb	r3, [r7, #15]
            break;
 80138d2:	e024      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80138d4:	2302      	movs	r3, #2
 80138d6:	73fb      	strb	r3, [r7, #15]
            break;
 80138d8:	e021      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80138da:	2305      	movs	r3, #5
 80138dc:	73fb      	strb	r3, [r7, #15]
            break;
 80138de:	e01e      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80138e0:	2301      	movs	r3, #1
 80138e2:	73fb      	strb	r3, [r7, #15]
            break;
 80138e4:	e01b      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80138e6:	2306      	movs	r3, #6
 80138e8:	73fb      	strb	r3, [r7, #15]
            break;
 80138ea:	e018      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80138ec:	2302      	movs	r3, #2
 80138ee:	73fb      	strb	r3, [r7, #15]
            break;
 80138f0:	e015      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80138f2:	2302      	movs	r3, #2
 80138f4:	73fb      	strb	r3, [r7, #15]
            break;
 80138f6:	e012      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80138f8:	2305      	movs	r3, #5
 80138fa:	73fb      	strb	r3, [r7, #15]
            break;
 80138fc:	e00f      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80138fe:	2306      	movs	r3, #6
 8013900:	73fb      	strb	r3, [r7, #15]
            break;
 8013902:	e00c      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013904:	2301      	movs	r3, #1
 8013906:	73fb      	strb	r3, [r7, #15]
            break;
 8013908:	e009      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801390a:	2305      	movs	r3, #5
 801390c:	73fb      	strb	r3, [r7, #15]
            break;
 801390e:	e006      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013910:	2304      	movs	r3, #4
 8013912:	73fb      	strb	r3, [r7, #15]
            break;
 8013914:	e003      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013916:	2304      	movs	r3, #4
 8013918:	73fb      	strb	r3, [r7, #15]
            break;
 801391a:	e000      	b.n	801391e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801391c:	bf00      	nop
        }
    }
    return cidSize;
 801391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013920:	4618      	mov	r0, r3
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	bc80      	pop	{r7}
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop

0801392c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801392c:	b480      	push	{r7}
 801392e:	b083      	sub	sp, #12
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4a07      	ldr	r2, [pc, #28]	; (8013954 <IncreaseBufferPointer+0x28>)
 8013938:	4293      	cmp	r3, r2
 801393a:	d102      	bne.n	8013942 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801393c:	4b06      	ldr	r3, [pc, #24]	; (8013958 <IncreaseBufferPointer+0x2c>)
 801393e:	607b      	str	r3, [r7, #4]
 8013940:	e002      	b.n	8013948 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	3304      	adds	r3, #4
 8013946:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013948:	687b      	ldr	r3, [r7, #4]
}
 801394a:	4618      	mov	r0, r3
 801394c:	370c      	adds	r7, #12
 801394e:	46bd      	mov	sp, r7
 8013950:	bc80      	pop	{r7}
 8013952:	4770      	bx	lr
 8013954:	20003c74 	.word	0x20003c74
 8013958:	20003c64 	.word	0x20003c64

0801395c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	4603      	mov	r3, r0
 8013964:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013966:	79fb      	ldrb	r3, [r7, #7]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d101      	bne.n	8013970 <IsListEmpty+0x14>
    {
        return true;
 801396c:	2301      	movs	r3, #1
 801396e:	e000      	b.n	8013972 <IsListEmpty+0x16>
    }
    return false;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	bc80      	pop	{r7}
 801397a:	4770      	bx	lr

0801397c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	4603      	mov	r3, r0
 8013984:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	2b04      	cmp	r3, #4
 801398a:	d901      	bls.n	8013990 <IsListFull+0x14>
    {
        return true;
 801398c:	2301      	movs	r3, #1
 801398e:	e000      	b.n	8013992 <IsListFull+0x16>
    }
    return false;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	370c      	adds	r7, #12
 8013996:	46bd      	mov	sp, r7
 8013998:	bc80      	pop	{r7}
 801399a:	4770      	bx	lr

0801399c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b086      	sub	sp, #24
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	4603      	mov	r3, r0
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
 80139a8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80139ae:	4b13      	ldr	r3, [pc, #76]	; (80139fc <GetElement+0x60>)
 80139b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff ffd1 	bl	801395c <IsListEmpty>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <GetElement+0x28>
    {
        return NULL;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e017      	b.n	80139f4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80139c4:	2300      	movs	r3, #0
 80139c6:	74fb      	strb	r3, [r7, #19]
 80139c8:	e00d      	b.n	80139e6 <GetElement+0x4a>
    {
        if( element->Request == request )
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	7bfa      	ldrb	r2, [r7, #15]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d101      	bne.n	80139d8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	e00d      	b.n	80139f4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80139d8:	6978      	ldr	r0, [r7, #20]
 80139da:	f7ff ffa7 	bl	801392c <IncreaseBufferPointer>
 80139de:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80139e0:	7cfb      	ldrb	r3, [r7, #19]
 80139e2:	3301      	adds	r3, #1
 80139e4:	74fb      	strb	r3, [r7, #19]
 80139e6:	4b05      	ldr	r3, [pc, #20]	; (80139fc <GetElement+0x60>)
 80139e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139ec:	7cfa      	ldrb	r2, [r7, #19]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d3eb      	bcc.n	80139ca <GetElement+0x2e>
    }

    return NULL;
 80139f2:	2300      	movs	r3, #0
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3718      	adds	r7, #24
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	20003c58 	.word	0x20003c58

08013a00 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013a08:	4a0c      	ldr	r2, [pc, #48]	; (8013a3c <LoRaMacConfirmQueueInit+0x3c>)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013a0e:	4b0b      	ldr	r3, [pc, #44]	; (8013a3c <LoRaMacConfirmQueueInit+0x3c>)
 8013a10:	2200      	movs	r2, #0
 8013a12:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013a16:	4b09      	ldr	r3, [pc, #36]	; (8013a3c <LoRaMacConfirmQueueInit+0x3c>)
 8013a18:	4a09      	ldr	r2, [pc, #36]	; (8013a40 <LoRaMacConfirmQueueInit+0x40>)
 8013a1a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013a1c:	4b07      	ldr	r3, [pc, #28]	; (8013a3c <LoRaMacConfirmQueueInit+0x3c>)
 8013a1e:	4a08      	ldr	r2, [pc, #32]	; (8013a40 <LoRaMacConfirmQueueInit+0x40>)
 8013a20:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013a22:	2214      	movs	r2, #20
 8013a24:	21ff      	movs	r1, #255	; 0xff
 8013a26:	4806      	ldr	r0, [pc, #24]	; (8013a40 <LoRaMacConfirmQueueInit+0x40>)
 8013a28:	f005 fa78 	bl	8018f1c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a2c:	4b03      	ldr	r3, [pc, #12]	; (8013a3c <LoRaMacConfirmQueueInit+0x3c>)
 8013a2e:	2201      	movs	r2, #1
 8013a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013a34:	bf00      	nop
 8013a36:	3708      	adds	r7, #8
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	20003c58 	.word	0x20003c58
 8013a40:	20003c64 	.word	0x20003c64

08013a44 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013a4c:	4b19      	ldr	r3, [pc, #100]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff ff92 	bl	801397c <IsListFull>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	e023      	b.n	8013aaa <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013a62:	4b14      	ldr	r3, [pc, #80]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a64:	689b      	ldr	r3, [r3, #8]
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	7812      	ldrb	r2, [r2, #0]
 8013a6a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013a6c:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	7852      	ldrb	r2, [r2, #1]
 8013a74:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013a76:	4b0f      	ldr	r3, [pc, #60]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	78d2      	ldrb	r2, [r2, #3]
 8013a7e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013a80:	4b0c      	ldr	r3, [pc, #48]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	2200      	movs	r2, #0
 8013a86:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013a88:	4b0a      	ldr	r3, [pc, #40]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	4b08      	ldr	r3, [pc, #32]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a94:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013a98:	4b06      	ldr	r3, [pc, #24]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7ff ff45 	bl	801392c <IncreaseBufferPointer>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	4a03      	ldr	r2, [pc, #12]	; (8013ab4 <LoRaMacConfirmQueueAdd+0x70>)
 8013aa6:	6093      	str	r3, [r2, #8]

    return true;
 8013aa8:	2301      	movs	r3, #1
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	20003c58 	.word	0x20003c58

08013ab8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013abc:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff ff4a 	bl	801395c <IsListEmpty>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d001      	beq.n	8013ad2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e010      	b.n	8013af4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013ad2:	4b09      	ldr	r3, [pc, #36]	; (8013af8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ad8:	3b01      	subs	r3, #1
 8013ada:	b2da      	uxtb	r2, r3
 8013adc:	4b06      	ldr	r3, [pc, #24]	; (8013af8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013ade:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013ae2:	4b05      	ldr	r3, [pc, #20]	; (8013af8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff ff20 	bl	801392c <IncreaseBufferPointer>
 8013aec:	4603      	mov	r3, r0
 8013aee:	4a02      	ldr	r2, [pc, #8]	; (8013af8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013af0:	6053      	str	r3, [r2, #4]

    return true;
 8013af2:	2301      	movs	r3, #1
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	20003c58 	.word	0x20003c58

08013afc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	4603      	mov	r3, r0
 8013b04:	460a      	mov	r2, r1
 8013b06:	71fb      	strb	r3, [r7, #7]
 8013b08:	4613      	mov	r3, r2
 8013b0a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013b10:	4b10      	ldr	r3, [pc, #64]	; (8013b54 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff ff20 	bl	801395c <IsListEmpty>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	f083 0301 	eor.w	r3, r3, #1
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d011      	beq.n	8013b4c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013b28:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013b2a:	6859      	ldr	r1, [r3, #4]
 8013b2c:	4b09      	ldr	r3, [pc, #36]	; (8013b54 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013b2e:	689a      	ldr	r2, [r3, #8]
 8013b30:	79bb      	ldrb	r3, [r7, #6]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7ff ff32 	bl	801399c <GetElement>
 8013b38:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d005      	beq.n	8013b4c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	79fa      	ldrb	r2, [r7, #7]
 8013b44:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013b4c:	bf00      	nop
 8013b4e:	3710      	adds	r7, #16
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20003c58 	.word	0x20003c58

08013b58 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	4603      	mov	r3, r0
 8013b60:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013b66:	4b10      	ldr	r3, [pc, #64]	; (8013ba8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff fef5 	bl	801395c <IsListEmpty>
 8013b72:	4603      	mov	r3, r0
 8013b74:	f083 0301 	eor.w	r3, r3, #1
 8013b78:	b2db      	uxtb	r3, r3
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00e      	beq.n	8013b9c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013b7e:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013b80:	6859      	ldr	r1, [r3, #4]
 8013b82:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013b84:	689a      	ldr	r2, [r3, #8]
 8013b86:	79fb      	ldrb	r3, [r7, #7]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7ff ff07 	bl	801399c <GetElement>
 8013b8e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d002      	beq.n	8013b9c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	785b      	ldrb	r3, [r3, #1]
 8013b9a:	e000      	b.n	8013b9e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013b9c:	2301      	movs	r3, #1
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3710      	adds	r7, #16
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	20003c58 	.word	0x20003c58

08013bac <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013bb6:	4b16      	ldr	r3, [pc, #88]	; (8013c10 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013bbc:	4a14      	ldr	r2, [pc, #80]	; (8013c10 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013bbe:	79fb      	ldrb	r3, [r7, #7]
 8013bc0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013bc4:	4b12      	ldr	r3, [pc, #72]	; (8013c10 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7ff fec6 	bl	801395c <IsListEmpty>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	f083 0301 	eor.w	r3, r3, #1
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d015      	beq.n	8013c08 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	79fa      	ldrb	r2, [r7, #7]
 8013be0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	78db      	ldrb	r3, [r3, #3]
 8013be6:	f083 0301 	eor.w	r3, r3, #1
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f7ff fe98 	bl	801392c <IncreaseBufferPointer>
 8013bfc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013bfe:	4b04      	ldr	r3, [pc, #16]	; (8013c10 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013c00:	689b      	ldr	r3, [r3, #8]
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d1e9      	bne.n	8013bdc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013c08:	bf00      	nop
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	20003c58 	.word	0x20003c58

08013c14 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013c1e:	4b09      	ldr	r3, [pc, #36]	; (8013c44 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013c20:	6859      	ldr	r1, [r3, #4]
 8013c22:	4b08      	ldr	r3, [pc, #32]	; (8013c44 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013c24:	689a      	ldr	r2, [r3, #8]
 8013c26:	79fb      	ldrb	r3, [r7, #7]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ff feb7 	bl	801399c <GetElement>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013c34:	2301      	movs	r3, #1
 8013c36:	e000      	b.n	8013c3a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013c38:	2300      	movs	r3, #0
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	20003c58 	.word	0x20003c58

08013c48 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013c50:	4b22      	ldr	r3, [pc, #136]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c56:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	73fb      	strb	r3, [r7, #15]
 8013c60:	e032      	b.n	8013cc8 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013c62:	4b1e      	ldr	r3, [pc, #120]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	781a      	ldrb	r2, [r3, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013c6c:	4b1b      	ldr	r3, [pc, #108]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	785a      	ldrb	r2, [r3, #1]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013c76:	4b19      	ldr	r3, [pc, #100]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	789b      	ldrb	r3, [r3, #2]
 8013c7c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013c7e:	7b7b      	ldrb	r3, [r7, #13]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d005      	beq.n	8013c90 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	689b      	ldr	r3, [r3, #8]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	4798      	blx	r3
 8013c8e:	e00b      	b.n	8013ca8 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013c90:	4b12      	ldr	r3, [pc, #72]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013c98:	4b10      	ldr	r3, [pc, #64]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	785b      	ldrb	r3, [r3, #1]
 8013c9e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013ca0:	4b0e      	ldr	r3, [pc, #56]	; (8013cdc <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	78db      	ldrb	r3, [r3, #3]
 8013ca6:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013ca8:	f7ff ff06 	bl	8013ab8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013cac:	7b7b      	ldrb	r3, [r7, #13]
 8013cae:	f083 0301 	eor.w	r3, r3, #1
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d004      	beq.n	8013cc2 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013cb8:	f107 0308 	add.w	r3, r7, #8
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7ff fec1 	bl	8013a44 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013cc2:	7bfb      	ldrb	r3, [r7, #15]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	73fb      	strb	r3, [r7, #15]
 8013cc8:	7bfa      	ldrb	r2, [r7, #15]
 8013cca:	7bbb      	ldrb	r3, [r7, #14]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d3c8      	bcc.n	8013c62 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013cd0:	bf00      	nop
 8013cd2:	bf00      	nop
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20003c58 	.word	0x20003c58

08013ce0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013ce4:	4b03      	ldr	r3, [pc, #12]	; (8013cf4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bc80      	pop	{r7}
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	20003c58 	.word	0x20003c58

08013cf8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013cfc:	4b06      	ldr	r3, [pc, #24]	; (8013d18 <LoRaMacConfirmQueueIsFull+0x20>)
 8013cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff fe3a 	bl	801397c <IsListFull>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d001      	beq.n	8013d12 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e000      	b.n	8013d14 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013d12:	2300      	movs	r3, #0
    }
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	20003c58 	.word	0x20003c58

08013d1c <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b08e      	sub	sp, #56	; 0x38
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	607b      	str	r3, [r7, #4]
 8013d26:	460b      	mov	r3, r1
 8013d28:	817b      	strh	r3, [r7, #10]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d34:	230a      	movs	r3, #10
 8013d36:	e086      	b.n	8013e46 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013d42:	2300      	movs	r3, #0
 8013d44:	623b      	str	r3, [r7, #32]
 8013d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	605a      	str	r2, [r3, #4]
 8013d50:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013d52:	2300      	movs	r3, #0
 8013d54:	613b      	str	r3, [r7, #16]
 8013d56:	f107 0314 	add.w	r3, r7, #20
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	601a      	str	r2, [r3, #0]
 8013d5e:	605a      	str	r2, [r3, #4]
 8013d60:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013d62:	2301      	movs	r3, #1
 8013d64:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013d66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013d6a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	0a1b      	lsrs	r3, r3, #8
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	0c1b      	lsrs	r3, r3, #16
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	0e1b      	lsrs	r3, r3, #24
 8013d86:	b2db      	uxtb	r3, r3
 8013d88:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d92:	0a1b      	lsrs	r3, r3, #8
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d9a:	0c1b      	lsrs	r3, r3, #16
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013da2:	0e1b      	lsrs	r3, r3, #24
 8013da4:	b2db      	uxtb	r3, r3
 8013da6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013da8:	e048      	b.n	8013e3c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013daa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013db0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013db2:	3301      	adds	r3, #1
 8013db4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013db6:	f107 0320 	add.w	r3, r7, #32
 8013dba:	7a7a      	ldrb	r2, [r7, #9]
 8013dbc:	f107 0010 	add.w	r0, r7, #16
 8013dc0:	2110      	movs	r1, #16
 8013dc2:	f7f9 f9f0 	bl	800d1a6 <SecureElementAesEncrypt>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d001      	beq.n	8013dd0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013dcc:	230f      	movs	r3, #15
 8013dce:	e03a      	b.n	8013e46 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013dd6:	e01e      	b.n	8013e16 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013dd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013de0:	4413      	add	r3, r2
 8013de2:	461a      	mov	r2, r3
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	4413      	add	r3, r2
 8013de8:	7819      	ldrb	r1, [r3, #0]
 8013dea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013dee:	3338      	adds	r3, #56	; 0x38
 8013df0:	443b      	add	r3, r7
 8013df2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013df6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013dfe:	4403      	add	r3, r0
 8013e00:	4618      	mov	r0, r3
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	4403      	add	r3, r0
 8013e06:	404a      	eors	r2, r1
 8013e08:	b2d2      	uxtb	r2, r2
 8013e0a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e10:	3301      	adds	r3, #1
 8013e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e1a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013e1e:	2a10      	cmp	r2, #16
 8013e20:	bfa8      	it	ge
 8013e22:	2210      	movge	r2, #16
 8013e24:	b212      	sxth	r2, r2
 8013e26:	4293      	cmp	r3, r2
 8013e28:	dbd6      	blt.n	8013dd8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013e2a:	897b      	ldrh	r3, [r7, #10]
 8013e2c:	3b10      	subs	r3, #16
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e36:	3310      	adds	r3, #16
 8013e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013e3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dcb2      	bgt.n	8013daa <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3738      	adds	r7, #56	; 0x38
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013e4e:	b490      	push	{r4, r7}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	4604      	mov	r4, r0
 8013e56:	4608      	mov	r0, r1
 8013e58:	4611      	mov	r1, r2
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	4623      	mov	r3, r4
 8013e5e:	80fb      	strh	r3, [r7, #6]
 8013e60:	4603      	mov	r3, r0
 8013e62:	717b      	strb	r3, [r7, #5]
 8013e64:	460b      	mov	r3, r1
 8013e66:	713b      	strb	r3, [r7, #4]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013e6c:	69bb      	ldr	r3, [r7, #24]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d101      	bne.n	8013e76 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e72:	230a      	movs	r3, #10
 8013e74:	e04e      	b.n	8013f14 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013e76:	69bb      	ldr	r3, [r7, #24]
 8013e78:	2249      	movs	r2, #73	; 0x49
 8013e7a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	2200      	movs	r2, #0
 8013e82:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013e84:	69bb      	ldr	r3, [r7, #24]
 8013e86:	3302      	adds	r3, #2
 8013e88:	2200      	movs	r2, #0
 8013e8a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	3303      	adds	r3, #3
 8013e90:	2200      	movs	r2, #0
 8013e92:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	3304      	adds	r3, #4
 8013e98:	2200      	movs	r2, #0
 8013e9a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	3305      	adds	r3, #5
 8013ea0:	78fa      	ldrb	r2, [r7, #3]
 8013ea2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	3306      	adds	r3, #6
 8013ea8:	693a      	ldr	r2, [r7, #16]
 8013eaa:	b2d2      	uxtb	r2, r2
 8013eac:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	0a1a      	lsrs	r2, r3, #8
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	3307      	adds	r3, #7
 8013eb6:	b2d2      	uxtb	r2, r2
 8013eb8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	0c1a      	lsrs	r2, r3, #16
 8013ebe:	69bb      	ldr	r3, [r7, #24]
 8013ec0:	3308      	adds	r3, #8
 8013ec2:	b2d2      	uxtb	r2, r2
 8013ec4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	0e1a      	lsrs	r2, r3, #24
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	3309      	adds	r3, #9
 8013ece:	b2d2      	uxtb	r2, r2
 8013ed0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	330a      	adds	r3, #10
 8013ed6:	697a      	ldr	r2, [r7, #20]
 8013ed8:	b2d2      	uxtb	r2, r2
 8013eda:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	0a1a      	lsrs	r2, r3, #8
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	330b      	adds	r3, #11
 8013ee4:	b2d2      	uxtb	r2, r2
 8013ee6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	0c1a      	lsrs	r2, r3, #16
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	330c      	adds	r3, #12
 8013ef0:	b2d2      	uxtb	r2, r2
 8013ef2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	0e1a      	lsrs	r2, r3, #24
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	330d      	adds	r3, #13
 8013efc:	b2d2      	uxtb	r2, r2
 8013efe:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013f00:	69bb      	ldr	r3, [r7, #24]
 8013f02:	330e      	adds	r3, #14
 8013f04:	2200      	movs	r2, #0
 8013f06:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	330f      	adds	r3, #15
 8013f0c:	88fa      	ldrh	r2, [r7, #6]
 8013f0e:	b2d2      	uxtb	r2, r2
 8013f10:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013f12:	2300      	movs	r3, #0
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bc90      	pop	{r4, r7}
 8013f1c:	4770      	bx	lr

08013f1e <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013f1e:	b590      	push	{r4, r7, lr}
 8013f20:	b08b      	sub	sp, #44	; 0x2c
 8013f22:	af04      	add	r7, sp, #16
 8013f24:	6078      	str	r0, [r7, #4]
 8013f26:	4608      	mov	r0, r1
 8013f28:	4611      	mov	r1, r2
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	807b      	strh	r3, [r7, #2]
 8013f30:	460b      	mov	r3, r1
 8013f32:	707b      	strb	r3, [r7, #1]
 8013f34:	4613      	mov	r3, r2
 8013f36:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d002      	beq.n	8013f44 <ComputeCmacB0+0x26>
 8013f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d101      	bne.n	8013f48 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f44:	230a      	movs	r3, #10
 8013f46:	e024      	b.n	8013f92 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013f48:	887b      	ldrh	r3, [r7, #2]
 8013f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f4e:	d901      	bls.n	8013f54 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013f50:	230e      	movs	r3, #14
 8013f52:	e01e      	b.n	8013f92 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013f54:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8013f58:	783a      	ldrb	r2, [r7, #0]
 8013f5a:	7879      	ldrb	r1, [r7, #1]
 8013f5c:	8878      	ldrh	r0, [r7, #2]
 8013f5e:	f107 0308 	add.w	r3, r7, #8
 8013f62:	9302      	str	r3, [sp, #8]
 8013f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f66:	9301      	str	r3, [sp, #4]
 8013f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	4623      	mov	r3, r4
 8013f6e:	f7ff ff6e 	bl	8013e4e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013f72:	7879      	ldrb	r1, [r7, #1]
 8013f74:	887a      	ldrh	r2, [r7, #2]
 8013f76:	f107 0008 	add.w	r0, r7, #8
 8013f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	460b      	mov	r3, r1
 8013f80:	6879      	ldr	r1, [r7, #4]
 8013f82:	f7f9 f8c3 	bl	800d10c <SecureElementComputeAesCmac>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d001      	beq.n	8013f90 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f8c:	230f      	movs	r3, #15
 8013f8e:	e000      	b.n	8013f92 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013f90:	2300      	movs	r3, #0
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	371c      	adds	r7, #28
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd90      	pop	{r4, r7, pc}

08013f9a <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013f9a:	b590      	push	{r4, r7, lr}
 8013f9c:	b0cd      	sub	sp, #308	; 0x134
 8013f9e:	af04      	add	r7, sp, #16
 8013fa0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013fa4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8013fa8:	6020      	str	r0, [r4, #0]
 8013faa:	460c      	mov	r4, r1
 8013fac:	4610      	mov	r0, r2
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fb4:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013fb8:	4622      	mov	r2, r4
 8013fba:	801a      	strh	r2, [r3, #0]
 8013fbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fc0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	701a      	strb	r2, [r3, #0]
 8013fc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013fd0:	460a      	mov	r2, r1
 8013fd2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013fd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013fe2:	230a      	movs	r3, #10
 8013fe4:	e063      	b.n	80140ae <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013fe6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fea:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013fee:	881b      	ldrh	r3, [r3, #0]
 8013ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ff4:	d901      	bls.n	8013ffa <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013ff6:	230e      	movs	r3, #14
 8013ff8:	e059      	b.n	80140ae <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013ffa:	f107 030c 	add.w	r3, r7, #12
 8013ffe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014002:	2100      	movs	r1, #0
 8014004:	4618      	mov	r0, r3
 8014006:	f004 ff89 	bl	8018f1c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801400a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801400e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014012:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014016:	781a      	ldrb	r2, [r3, #0]
 8014018:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801401c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014020:	7819      	ldrb	r1, [r3, #0]
 8014022:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014026:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801402a:	8818      	ldrh	r0, [r3, #0]
 801402c:	f107 030c 	add.w	r3, r7, #12
 8014030:	9302      	str	r3, [sp, #8]
 8014032:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014036:	9301      	str	r3, [sp, #4]
 8014038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	4623      	mov	r3, r4
 8014040:	f7ff ff05 	bl	8013e4e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014044:	f107 030c 	add.w	r3, r7, #12
 8014048:	3310      	adds	r3, #16
 801404a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801404e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8014052:	8812      	ldrh	r2, [r2, #0]
 8014054:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014058:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801405c:	6809      	ldr	r1, [r1, #0]
 801405e:	4618      	mov	r0, r3
 8014060:	f004 ff21 	bl	8018ea6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014064:	2306      	movs	r3, #6
 8014066:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801406a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801406e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014072:	881b      	ldrh	r3, [r3, #0]
 8014074:	3310      	adds	r3, #16
 8014076:	b299      	uxth	r1, r3
 8014078:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801407c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	f107 000c 	add.w	r0, r7, #12
 8014086:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801408a:	f7f9 f85d 	bl	800d148 <SecureElementVerifyAesCmac>
 801408e:	4603      	mov	r3, r0
 8014090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014094:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014098:	2b00      	cmp	r3, #0
 801409a:	d101      	bne.n	80140a0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801409c:	2300      	movs	r3, #0
 801409e:	e006      	b.n	80140ae <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80140a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d101      	bne.n	80140ac <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140ac:	230f      	movs	r3, #15
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd90      	pop	{r4, r7, pc}

080140b8 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80140b8:	b480      	push	{r7}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
 80140be:	4603      	mov	r3, r0
 80140c0:	6039      	str	r1, [r7, #0]
 80140c2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80140c4:	2300      	movs	r3, #0
 80140c6:	73fb      	strb	r3, [r7, #15]
 80140c8:	e011      	b.n	80140ee <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80140ca:	7bfb      	ldrb	r3, [r7, #15]
 80140cc:	4a0c      	ldr	r2, [pc, #48]	; (8014100 <GetKeyAddrItem+0x48>)
 80140ce:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80140d2:	79fa      	ldrb	r2, [r7, #7]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d107      	bne.n	80140e8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80140d8:	7bfb      	ldrb	r3, [r7, #15]
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	4a08      	ldr	r2, [pc, #32]	; (8014100 <GetKeyAddrItem+0x48>)
 80140de:	441a      	add	r2, r3
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80140e4:	2300      	movs	r3, #0
 80140e6:	e006      	b.n	80140f6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80140e8:	7bfb      	ldrb	r3, [r7, #15]
 80140ea:	3301      	adds	r3, #1
 80140ec:	73fb      	strb	r3, [r7, #15]
 80140ee:	7bfb      	ldrb	r3, [r7, #15]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d9ea      	bls.n	80140ca <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80140f4:	230c      	movs	r3, #12
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3714      	adds	r7, #20
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bc80      	pop	{r7}
 80140fe:	4770      	bx	lr
 8014100:	200000f8 	.word	0x200000f8

08014104 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b088      	sub	sp, #32
 8014108:	af00      	add	r7, sp, #0
 801410a:	60b9      	str	r1, [r7, #8]
 801410c:	607a      	str	r2, [r7, #4]
 801410e:	461a      	mov	r2, r3
 8014110:	4603      	mov	r3, r0
 8014112:	73fb      	strb	r3, [r7, #15]
 8014114:	4613      	mov	r3, r2
 8014116:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014118:	2300      	movs	r3, #0
 801411a:	613b      	str	r3, [r7, #16]
 801411c:	f107 0314 	add.w	r3, r7, #20
 8014120:	2200      	movs	r2, #0
 8014122:	601a      	str	r2, [r3, #0]
 8014124:	605a      	str	r2, [r3, #4]
 8014126:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014128:	7bfb      	ldrb	r3, [r7, #15]
 801412a:	2b02      	cmp	r3, #2
 801412c:	d002      	beq.n	8014134 <DeriveSessionKey10x+0x30>
 801412e:	2b03      	cmp	r3, #3
 8014130:	d003      	beq.n	801413a <DeriveSessionKey10x+0x36>
 8014132:	e005      	b.n	8014140 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014134:	2301      	movs	r3, #1
 8014136:	743b      	strb	r3, [r7, #16]
            break;
 8014138:	e004      	b.n	8014144 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801413a:	2302      	movs	r3, #2
 801413c:	743b      	strb	r3, [r7, #16]
            break;
 801413e:	e001      	b.n	8014144 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014140:	230b      	movs	r3, #11
 8014142:	e02a      	b.n	801419a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	b2db      	uxtb	r3, r3
 8014148:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	0a1b      	lsrs	r3, r3, #8
 801414e:	b2db      	uxtb	r3, r3
 8014150:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	0c1b      	lsrs	r3, r3, #16
 8014156:	b2db      	uxtb	r3, r3
 8014158:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	b2db      	uxtb	r3, r3
 801415e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	0a1b      	lsrs	r3, r3, #8
 8014164:	b2db      	uxtb	r3, r3
 8014166:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	0c1b      	lsrs	r3, r3, #16
 801416c:	b2db      	uxtb	r3, r3
 801416e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014170:	89bb      	ldrh	r3, [r7, #12]
 8014172:	b2db      	uxtb	r3, r3
 8014174:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014176:	89bb      	ldrh	r3, [r7, #12]
 8014178:	0a1b      	lsrs	r3, r3, #8
 801417a:	b29b      	uxth	r3, r3
 801417c:	b2db      	uxtb	r3, r3
 801417e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014180:	7bfa      	ldrb	r2, [r7, #15]
 8014182:	f107 0310 	add.w	r3, r7, #16
 8014186:	2101      	movs	r1, #1
 8014188:	4618      	mov	r0, r3
 801418a:	f7f9 f873 	bl	800d274 <SecureElementDeriveAndStoreKey>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d001      	beq.n	8014198 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014194:	230f      	movs	r3, #15
 8014196:	e000      	b.n	801419a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014198:	2300      	movs	r3, #0
}
 801419a:	4618      	mov	r0, r3
 801419c:	3720      	adds	r7, #32
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	4603      	mov	r3, r0
 80141ac:	6039      	str	r1, [r7, #0]
 80141ae:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d101      	bne.n	80141ba <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80141b6:	230a      	movs	r3, #10
 80141b8:	e03b      	b.n	8014232 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80141ba:	79fb      	ldrb	r3, [r7, #7]
 80141bc:	3b01      	subs	r3, #1
 80141be:	2b03      	cmp	r3, #3
 80141c0:	d834      	bhi.n	801422c <GetLastFcntDown+0x88>
 80141c2:	a201      	add	r2, pc, #4	; (adr r2, 80141c8 <GetLastFcntDown+0x24>)
 80141c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141c8:	080141d9 	.word	0x080141d9
 80141cc:	080141f1 	.word	0x080141f1
 80141d0:	08014209 	.word	0x08014209
 80141d4:	08014221 	.word	0x08014221
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80141d8:	4b18      	ldr	r3, [pc, #96]	; (801423c <GetLastFcntDown+0x98>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	691a      	ldr	r2, [r3, #16]
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80141e2:	4b16      	ldr	r3, [pc, #88]	; (801423c <GetLastFcntDown+0x98>)
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	4b15      	ldr	r3, [pc, #84]	; (801423c <GetLastFcntDown+0x98>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	6912      	ldr	r2, [r2, #16]
 80141ec:	621a      	str	r2, [r3, #32]
            break;
 80141ee:	e01f      	b.n	8014230 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80141f0:	4b12      	ldr	r3, [pc, #72]	; (801423c <GetLastFcntDown+0x98>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	695a      	ldr	r2, [r3, #20]
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80141fa:	4b10      	ldr	r3, [pc, #64]	; (801423c <GetLastFcntDown+0x98>)
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	4b0f      	ldr	r3, [pc, #60]	; (801423c <GetLastFcntDown+0x98>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	6952      	ldr	r2, [r2, #20]
 8014204:	621a      	str	r2, [r3, #32]
            break;
 8014206:	e013      	b.n	8014230 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014208:	4b0c      	ldr	r3, [pc, #48]	; (801423c <GetLastFcntDown+0x98>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	699a      	ldr	r2, [r3, #24]
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014212:	4b0a      	ldr	r3, [pc, #40]	; (801423c <GetLastFcntDown+0x98>)
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	4b09      	ldr	r3, [pc, #36]	; (801423c <GetLastFcntDown+0x98>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	6992      	ldr	r2, [r2, #24]
 801421c:	621a      	str	r2, [r3, #32]
            break;
 801421e:	e007      	b.n	8014230 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014220:	4b06      	ldr	r3, [pc, #24]	; (801423c <GetLastFcntDown+0x98>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	69da      	ldr	r2, [r3, #28]
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	601a      	str	r2, [r3, #0]
            break;
 801422a:	e001      	b.n	8014230 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801422c:	2305      	movs	r3, #5
 801422e:	e000      	b.n	8014232 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	370c      	adds	r7, #12
 8014236:	46bd      	mov	sp, r7
 8014238:	bc80      	pop	{r7}
 801423a:	4770      	bx	lr
 801423c:	20003c7c 	.word	0x20003c7c

08014240 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	4603      	mov	r3, r0
 8014248:	6039      	str	r1, [r7, #0]
 801424a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014250:	f107 020c 	add.w	r2, r7, #12
 8014254:	79fb      	ldrb	r3, [r7, #7]
 8014256:	4611      	mov	r1, r2
 8014258:	4618      	mov	r0, r3
 801425a:	f7ff ffa3 	bl	80141a4 <GetLastFcntDown>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <CheckFCntDown+0x28>
    {
        return false;
 8014264:	2300      	movs	r3, #0
 8014266:	e00a      	b.n	801427e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	683a      	ldr	r2, [r7, #0]
 801426c:	429a      	cmp	r2, r3
 801426e:	d803      	bhi.n	8014278 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014270:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014276:	d101      	bne.n	801427c <CheckFCntDown+0x3c>
    {
        return true;
 8014278:	2301      	movs	r3, #1
 801427a:	e000      	b.n	801427e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801427c:	2300      	movs	r3, #0
    }
}
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
	...

08014288 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	4603      	mov	r3, r0
 8014290:	6039      	str	r1, [r7, #0]
 8014292:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014294:	79fb      	ldrb	r3, [r7, #7]
 8014296:	3b01      	subs	r3, #1
 8014298:	2b03      	cmp	r3, #3
 801429a:	d81f      	bhi.n	80142dc <UpdateFCntDown+0x54>
 801429c:	a201      	add	r2, pc, #4	; (adr r2, 80142a4 <UpdateFCntDown+0x1c>)
 801429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a2:	bf00      	nop
 80142a4:	080142b5 	.word	0x080142b5
 80142a8:	080142bf 	.word	0x080142bf
 80142ac:	080142c9 	.word	0x080142c9
 80142b0:	080142d3 	.word	0x080142d3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80142b4:	4b0c      	ldr	r3, [pc, #48]	; (80142e8 <UpdateFCntDown+0x60>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	683a      	ldr	r2, [r7, #0]
 80142ba:	611a      	str	r2, [r3, #16]
            break;
 80142bc:	e00f      	b.n	80142de <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80142be:	4b0a      	ldr	r3, [pc, #40]	; (80142e8 <UpdateFCntDown+0x60>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	615a      	str	r2, [r3, #20]
            break;
 80142c6:	e00a      	b.n	80142de <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80142c8:	4b07      	ldr	r3, [pc, #28]	; (80142e8 <UpdateFCntDown+0x60>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	683a      	ldr	r2, [r7, #0]
 80142ce:	619a      	str	r2, [r3, #24]
            break;
 80142d0:	e005      	b.n	80142de <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80142d2:	4b05      	ldr	r3, [pc, #20]	; (80142e8 <UpdateFCntDown+0x60>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	683a      	ldr	r2, [r7, #0]
 80142d8:	61da      	str	r2, [r3, #28]
            break;
 80142da:	e000      	b.n	80142de <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80142dc:	bf00      	nop
    }
}
 80142de:	bf00      	nop
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bc80      	pop	{r7}
 80142e6:	4770      	bx	lr
 80142e8:	20003c7c 	.word	0x20003c7c

080142ec <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80142f2:	4b18      	ldr	r3, [pc, #96]	; (8014354 <ResetFCnts+0x68>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2200      	movs	r2, #0
 80142f8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80142fa:	4b16      	ldr	r3, [pc, #88]	; (8014354 <ResetFCnts+0x68>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014302:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014304:	4b13      	ldr	r3, [pc, #76]	; (8014354 <ResetFCnts+0x68>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	f04f 32ff 	mov.w	r2, #4294967295
 801430c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801430e:	4b11      	ldr	r3, [pc, #68]	; (8014354 <ResetFCnts+0x68>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	f04f 32ff 	mov.w	r2, #4294967295
 8014316:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014318:	4b0e      	ldr	r3, [pc, #56]	; (8014354 <ResetFCnts+0x68>)
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	4b0d      	ldr	r3, [pc, #52]	; (8014354 <ResetFCnts+0x68>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	6992      	ldr	r2, [r2, #24]
 8014322:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014324:	2300      	movs	r3, #0
 8014326:	607b      	str	r3, [r7, #4]
 8014328:	e00b      	b.n	8014342 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801432a:	4b0a      	ldr	r3, [pc, #40]	; (8014354 <ResetFCnts+0x68>)
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	3306      	adds	r3, #6
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4413      	add	r3, r2
 8014336:	f04f 32ff 	mov.w	r2, #4294967295
 801433a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3301      	adds	r3, #1
 8014340:	607b      	str	r3, [r7, #4]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	ddf0      	ble.n	801432a <ResetFCnts+0x3e>
    }
}
 8014348:	bf00      	nop
 801434a:	bf00      	nop
 801434c:	370c      	adds	r7, #12
 801434e:	46bd      	mov	sp, r7
 8014350:	bc80      	pop	{r7}
 8014352:	4770      	bx	lr
 8014354:	20003c7c 	.word	0x20003c7c

08014358 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014366:	2309      	movs	r3, #9
 8014368:	e01c      	b.n	80143a4 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801436a:	4a10      	ldr	r2, [pc, #64]	; (80143ac <LoRaMacCryptoInit+0x54>)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014370:	4b0e      	ldr	r3, [pc, #56]	; (80143ac <LoRaMacCryptoInit+0x54>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2228      	movs	r2, #40	; 0x28
 8014376:	2100      	movs	r1, #0
 8014378:	4618      	mov	r0, r3
 801437a:	f004 fdcf 	bl	8018f1c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801437e:	4b0b      	ldr	r3, [pc, #44]	; (80143ac <LoRaMacCryptoInit+0x54>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2201      	movs	r2, #1
 8014384:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014386:	4b09      	ldr	r3, [pc, #36]	; (80143ac <LoRaMacCryptoInit+0x54>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2201      	movs	r2, #1
 801438c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801438e:	4b07      	ldr	r3, [pc, #28]	; (80143ac <LoRaMacCryptoInit+0x54>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2201      	movs	r2, #1
 8014394:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014396:	4b05      	ldr	r3, [pc, #20]	; (80143ac <LoRaMacCryptoInit+0x54>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2200      	movs	r2, #0
 801439c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801439e:	f7ff ffa5 	bl	80142ec <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80143a2:	2300      	movs	r3, #0
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	20003c7c 	.word	0x20003c7c

080143b0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80143b8:	4b04      	ldr	r3, [pc, #16]	; (80143cc <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	687a      	ldr	r2, [r7, #4]
 80143be:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80143c0:	2300      	movs	r3, #0
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	370c      	adds	r7, #12
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bc80      	pop	{r7}
 80143ca:	4770      	bx	lr
 80143cc:	20003c7c 	.word	0x20003c7c

080143d0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d101      	bne.n	80143e2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80143de:	230a      	movs	r3, #10
 80143e0:	e006      	b.n	80143f0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80143e2:	4b06      	ldr	r3, [pc, #24]	; (80143fc <LoRaMacCryptoGetFCntUp+0x2c>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	1c5a      	adds	r2, r3, #1
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80143ee:	2300      	movs	r3, #0
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bc80      	pop	{r7}
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	20003c7c 	.word	0x20003c7c

08014400 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014404:	b08a      	sub	sp, #40	; 0x28
 8014406:	af00      	add	r7, sp, #0
 8014408:	613a      	str	r2, [r7, #16]
 801440a:	60fb      	str	r3, [r7, #12]
 801440c:	4603      	mov	r3, r0
 801440e:	75fb      	strb	r3, [r7, #23]
 8014410:	460b      	mov	r3, r1
 8014412:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8014414:	2300      	movs	r3, #0
 8014416:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8014418:	2300      	movs	r3, #0
 801441a:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801441c:	2313      	movs	r3, #19
 801441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014428:	230a      	movs	r3, #10
 801442a:	e057      	b.n	80144dc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801442c:	f107 021c 	add.w	r2, r7, #28
 8014430:	7dfb      	ldrb	r3, [r7, #23]
 8014432:	4611      	mov	r1, r2
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff feb5 	bl	80141a4 <GetLastFcntDown>
 801443a:	4603      	mov	r3, r0
 801443c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014444:	2b00      	cmp	r3, #0
 8014446:	d002      	beq.n	801444e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8014448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801444c:	e046      	b.n	80144dc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014454:	d103      	bne.n	801445e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	693a      	ldr	r2, [r7, #16]
 801445a:	601a      	str	r2, [r3, #0]
 801445c:	e01e      	b.n	801449c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	b29b      	uxth	r3, r3
 8014462:	693a      	ldr	r2, [r7, #16]
 8014464:	1ad3      	subs	r3, r2, r3
 8014466:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8014468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446a:	2b00      	cmp	r3, #0
 801446c:	dd05      	ble.n	801447a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801446e:	69fa      	ldr	r2, [r7, #28]
 8014470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014472:	441a      	add	r2, r3
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	e010      	b.n	801449c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447c:	2b00      	cmp	r3, #0
 801447e:	d104      	bne.n	801448a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014480:	69fa      	ldr	r2, [r7, #28]
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014486:	2307      	movs	r3, #7
 8014488:	e028      	b.n	80144dc <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	0c1b      	lsrs	r3, r3, #16
 801448e:	041b      	lsls	r3, r3, #16
 8014490:	693a      	ldr	r2, [r7, #16]
 8014492:	4413      	add	r3, r2
 8014494:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801449c:	4b12      	ldr	r3, [pc, #72]	; (80144e8 <LoRaMacCryptoGetFCntDown+0xe8>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	789b      	ldrb	r3, [r3, #2]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d119      	bne.n	80144da <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	2200      	movs	r2, #0
 80144ac:	603b      	str	r3, [r7, #0]
 80144ae:	607a      	str	r2, [r7, #4]
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	2200      	movs	r2, #0
 80144b4:	469a      	mov	sl, r3
 80144b6:	4693      	mov	fp, r2
 80144b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80144bc:	4611      	mov	r1, r2
 80144be:	ebb1 040a 	subs.w	r4, r1, sl
 80144c2:	eb63 050b 	sbc.w	r5, r3, fp
 80144c6:	8abb      	ldrh	r3, [r7, #20]
 80144c8:	2200      	movs	r2, #0
 80144ca:	4698      	mov	r8, r3
 80144cc:	4691      	mov	r9, r2
 80144ce:	4544      	cmp	r4, r8
 80144d0:	eb75 0309 	sbcs.w	r3, r5, r9
 80144d4:	db01      	blt.n	80144da <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80144d6:	2308      	movs	r3, #8
 80144d8:	e000      	b.n	80144dc <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3728      	adds	r7, #40	; 0x28
 80144e0:	46bd      	mov	sp, r7
 80144e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80144e6:	bf00      	nop
 80144e8:	20003c7c 	.word	0x20003c7c

080144ec <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80144ec:	b480      	push	{r7}
 80144ee:	b085      	sub	sp, #20
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d101      	bne.n	80144fe <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80144fa:	230a      	movs	r3, #10
 80144fc:	e017      	b.n	801452e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144fe:	2300      	movs	r3, #0
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	e010      	b.n	8014526 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014504:	4b0c      	ldr	r3, [pc, #48]	; (8014538 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014506:	6819      	ldr	r1, [r3, #0]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	222c      	movs	r2, #44	; 0x2c
 801450c:	fb02 f303 	mul.w	r3, r2, r3
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	4413      	add	r3, r2
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	3206      	adds	r2, #6
 8014518:	0092      	lsls	r2, r2, #2
 801451a:	440a      	add	r2, r1
 801451c:	3204      	adds	r2, #4
 801451e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	3301      	adds	r3, #1
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	2b00      	cmp	r3, #0
 801452a:	ddeb      	ble.n	8014504 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	3714      	adds	r7, #20
 8014532:	46bd      	mov	sp, r7
 8014534:	bc80      	pop	{r7}
 8014536:	4770      	bx	lr
 8014538:	20003c7c 	.word	0x20003c7c

0801453c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	4603      	mov	r3, r0
 8014544:	6039      	str	r1, [r7, #0]
 8014546:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014548:	79fb      	ldrb	r3, [r7, #7]
 801454a:	6839      	ldr	r1, [r7, #0]
 801454c:	4618      	mov	r0, r3
 801454e:	f7f8 fd7f 	bl	800d050 <SecureElementSetKey>
 8014552:	4603      	mov	r3, r0
 8014554:	2b00      	cmp	r3, #0
 8014556:	d001      	beq.n	801455c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014558:	230f      	movs	r3, #15
 801455a:	e018      	b.n	801458e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d114      	bne.n	801458c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8014562:	4b0d      	ldr	r3, [pc, #52]	; (8014598 <LoRaMacCryptoSetKey+0x5c>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	789b      	ldrb	r3, [r3, #2]
 8014568:	79fa      	ldrb	r2, [r7, #7]
 801456a:	4611      	mov	r1, r2
 801456c:	4618      	mov	r0, r3
 801456e:	f000 fa3f 	bl	80149f0 <LoRaMacCryptoDeriveMcRootKey>
 8014572:	4603      	mov	r3, r0
 8014574:	2b00      	cmp	r3, #0
 8014576:	d001      	beq.n	801457c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014578:	230f      	movs	r3, #15
 801457a:	e008      	b.n	801458e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801457c:	2004      	movs	r0, #4
 801457e:	f000 fa62 	bl	8014a46 <LoRaMacCryptoDeriveMcKEKey>
 8014582:	4603      	mov	r3, r0
 8014584:	2b00      	cmp	r3, #0
 8014586:	d001      	beq.n	801458c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014588:	230f      	movs	r3, #15
 801458a:	e000      	b.n	801458e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	3708      	adds	r7, #8
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	20003c7c 	.word	0x20003c7c

0801459c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b086      	sub	sp, #24
 80145a0:	af02      	add	r7, sp, #8
 80145a2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d101      	bne.n	80145ae <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145aa:	230a      	movs	r3, #10
 80145ac:	e033      	b.n	8014616 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80145ae:	2301      	movs	r3, #1
 80145b0:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80145b6:	f107 0308 	add.w	r3, r7, #8
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7f8 ff18 	bl	800d3f0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80145c0:	68ba      	ldr	r2, [r7, #8]
 80145c2:	4b17      	ldr	r3, [pc, #92]	; (8014620 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	b292      	uxth	r2, r2
 80145c8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80145ca:	4b15      	ldr	r3, [pc, #84]	; (8014620 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	889a      	ldrh	r2, [r3, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 fc18 	bl	8014e0a <LoRaMacSerializerJoinRequest>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d001      	beq.n	80145e4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80145e0:	2311      	movs	r3, #17
 80145e2:	e018      	b.n	8014616 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6819      	ldr	r1, [r3, #0]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	3318      	adds	r3, #24
 80145ec:	7bfa      	ldrb	r2, [r7, #15]
 80145ee:	9300      	str	r3, [sp, #0]
 80145f0:	4613      	mov	r3, r2
 80145f2:	2213      	movs	r2, #19
 80145f4:	2000      	movs	r0, #0
 80145f6:	f7f8 fd89 	bl	800d10c <SecureElementComputeAesCmac>
 80145fa:	4603      	mov	r3, r0
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d001      	beq.n	8014604 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014600:	230f      	movs	r3, #15
 8014602:	e008      	b.n	8014616 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f000 fc00 	bl	8014e0a <LoRaMacSerializerJoinRequest>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014610:	2311      	movs	r3, #17
 8014612:	e000      	b.n	8014616 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3710      	adds	r7, #16
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	20003c7c 	.word	0x20003c7c

08014624 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014624:	b590      	push	{r4, r7, lr}
 8014626:	b097      	sub	sp, #92	; 0x5c
 8014628:	af04      	add	r7, sp, #16
 801462a:	4603      	mov	r3, r0
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	607a      	str	r2, [r7, #4]
 8014630:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d002      	beq.n	801463e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d101      	bne.n	8014642 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801463e:	230a      	movs	r3, #10
 8014640:	e0bd      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014642:	2313      	movs	r3, #19
 8014644:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014648:	2300      	movs	r3, #0
 801464a:	61bb      	str	r3, [r7, #24]
 801464c:	f107 031c 	add.w	r3, r7, #28
 8014650:	221d      	movs	r2, #29
 8014652:	2100      	movs	r1, #0
 8014654:	4618      	mov	r0, r3
 8014656:	f009 f8d1 	bl	801d7fc <memset>
    uint8_t versionMinor         = 0;
 801465a:	2300      	movs	r3, #0
 801465c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801465e:	4b5a      	ldr	r3, [pc, #360]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	889b      	ldrh	r3, [r3, #4]
 8014664:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681c      	ldr	r4, [r3, #0]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	791b      	ldrb	r3, [r3, #4]
 8014670:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014674:	7bf8      	ldrb	r0, [r7, #15]
 8014676:	f107 0217 	add.w	r2, r7, #23
 801467a:	9202      	str	r2, [sp, #8]
 801467c:	f107 0218 	add.w	r2, r7, #24
 8014680:	9201      	str	r2, [sp, #4]
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	4623      	mov	r3, r4
 8014686:	460a      	mov	r2, r1
 8014688:	68b9      	ldr	r1, [r7, #8]
 801468a:	f7f8 fe33 	bl	800d2f4 <SecureElementProcessJoinAccept>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d001      	beq.n	8014698 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014694:	230f      	movs	r3, #15
 8014696:	e092      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6818      	ldr	r0, [r3, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	791b      	ldrb	r3, [r3, #4]
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	f107 0318 	add.w	r3, r7, #24
 80146a6:	4619      	mov	r1, r3
 80146a8:	f004 fbfd 	bl	8018ea6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f000 f9ed 	bl	8014a8c <LoRaMacParserJoinAccept>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d001      	beq.n	80146bc <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80146b8:	2310      	movs	r3, #16
 80146ba:	e080      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	799b      	ldrb	r3, [r3, #6]
 80146c0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	79db      	ldrb	r3, [r3, #7]
 80146c6:	021b      	lsls	r3, r3, #8
 80146c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146ca:	4313      	orrs	r3, r2
 80146cc:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	7a1b      	ldrb	r3, [r3, #8]
 80146d2:	041b      	lsls	r3, r3, #16
 80146d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146d6:	4313      	orrs	r3, r2
 80146d8:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80146da:	4b3b      	ldr	r3, [pc, #236]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d010      	beq.n	8014708 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80146e6:	4b38      	ldr	r3, [pc, #224]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146ec:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80146ee:	7dfb      	ldrb	r3, [r7, #23]
 80146f0:	2100      	movs	r1, #0
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 f97c 	bl	80149f0 <LoRaMacCryptoDeriveMcRootKey>
 80146f8:	4603      	mov	r3, r0
 80146fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80146fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014702:	2b00      	cmp	r3, #0
 8014704:	d005      	beq.n	8014712 <LoRaMacCryptoHandleJoinAccept+0xee>
 8014706:	e001      	b.n	801470c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014708:	2303      	movs	r3, #3
 801470a:	e058      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 801470c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014710:	e055      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014712:	2004      	movs	r0, #4
 8014714:	f000 f997 	bl	8014a46 <LoRaMacCryptoDeriveMcKEKey>
 8014718:	4603      	mov	r3, r0
 801471a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801471e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014722:	2b00      	cmp	r3, #0
 8014724:	d002      	beq.n	801472c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014726:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801472a:	e048      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	7a5b      	ldrb	r3, [r3, #9]
 8014730:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	7a9b      	ldrb	r3, [r3, #10]
 8014736:	021b      	lsls	r3, r3, #8
 8014738:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801473a:	4313      	orrs	r3, r2
 801473c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	7adb      	ldrb	r3, [r3, #11]
 8014742:	041b      	lsls	r3, r3, #16
 8014744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014746:	4313      	orrs	r3, r2
 8014748:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801474a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801474e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014752:	2003      	movs	r0, #3
 8014754:	f7ff fcd6 	bl	8014104 <DeriveSessionKey10x>
 8014758:	4603      	mov	r3, r0
 801475a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801475e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014766:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801476a:	e028      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801476c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014774:	2002      	movs	r0, #2
 8014776:	f7ff fcc5 	bl	8014104 <DeriveSessionKey10x>
 801477a:	4603      	mov	r3, r0
 801477c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014780:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014784:	2b00      	cmp	r3, #0
 8014786:	d002      	beq.n	801478e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801478c:	e017      	b.n	80147be <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801478e:	4b0e      	ldr	r3, [pc, #56]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	7dfa      	ldrb	r2, [r7, #23]
 8014794:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014796:	4b0c      	ldr	r3, [pc, #48]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2200      	movs	r2, #0
 801479c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801479e:	4b0a      	ldr	r3, [pc, #40]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f04f 32ff 	mov.w	r2, #4294967295
 80147a6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80147a8:	4b07      	ldr	r3, [pc, #28]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f04f 32ff 	mov.w	r2, #4294967295
 80147b0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80147b2:	4b05      	ldr	r3, [pc, #20]	; (80147c8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	f04f 32ff 	mov.w	r2, #4294967295
 80147ba:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80147bc:	2300      	movs	r3, #0
}
 80147be:	4618      	mov	r0, r3
 80147c0:	374c      	adds	r7, #76	; 0x4c
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd90      	pop	{r4, r7, pc}
 80147c6:	bf00      	nop
 80147c8:	20003c7c 	.word	0x20003c7c

080147cc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80147cc:	b590      	push	{r4, r7, lr}
 80147ce:	b08b      	sub	sp, #44	; 0x2c
 80147d0:	af04      	add	r7, sp, #16
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	607b      	str	r3, [r7, #4]
 80147d6:	460b      	mov	r3, r1
 80147d8:	72fb      	strb	r3, [r7, #11]
 80147da:	4613      	mov	r3, r2
 80147dc:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80147de:	2313      	movs	r3, #19
 80147e0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80147e2:	2303      	movs	r3, #3
 80147e4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147ec:	230a      	movs	r3, #10
 80147ee:	e05f      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80147f0:	4b31      	ldr	r3, [pc, #196]	; (80148b8 <LoRaMacCryptoSecureMessage+0xec>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	68fa      	ldr	r2, [r7, #12]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d201      	bcs.n	8014800 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80147fc:	2306      	movs	r3, #6
 80147fe:	e057      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d101      	bne.n	801480e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801480a:	2302      	movs	r3, #2
 801480c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801480e:	4b2a      	ldr	r3, [pc, #168]	; (80148b8 <LoRaMacCryptoSecureMessage+0xec>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	68fa      	ldr	r2, [r7, #12]
 8014816:	429a      	cmp	r2, r3
 8014818:	d916      	bls.n	8014848 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014824:	b219      	sxth	r1, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	689c      	ldr	r4, [r3, #8]
 801482a:	7dfa      	ldrb	r2, [r7, #23]
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	9301      	str	r3, [sp, #4]
 8014830:	2300      	movs	r3, #0
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	4623      	mov	r3, r4
 8014836:	f7ff fa71 	bl	8013d1c <PayloadEncrypt>
 801483a:	4603      	mov	r3, r0
 801483c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801483e:	7dbb      	ldrb	r3, [r7, #22]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d001      	beq.n	8014848 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014844:	7dbb      	ldrb	r3, [r7, #22]
 8014846:	e033      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fb60 	bl	8014f0e <LoRaMacSerializerData>
 801484e:	4603      	mov	r3, r0
 8014850:	2b00      	cmp	r3, #0
 8014852:	d001      	beq.n	8014858 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014854:	2311      	movs	r3, #17
 8014856:	e02b      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014858:	2302      	movs	r3, #2
 801485a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6818      	ldr	r0, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	791b      	ldrb	r3, [r3, #4]
 8014864:	b29b      	uxth	r3, r3
 8014866:	3b04      	subs	r3, #4
 8014868:	b299      	uxth	r1, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	689b      	ldr	r3, [r3, #8]
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	322c      	adds	r2, #44	; 0x2c
 8014872:	7dfc      	ldrb	r4, [r7, #23]
 8014874:	9203      	str	r2, [sp, #12]
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	9202      	str	r2, [sp, #8]
 801487a:	9301      	str	r3, [sp, #4]
 801487c:	2300      	movs	r3, #0
 801487e:	9300      	str	r3, [sp, #0]
 8014880:	2300      	movs	r3, #0
 8014882:	4622      	mov	r2, r4
 8014884:	f7ff fb4b 	bl	8013f1e <ComputeCmacB0>
 8014888:	4603      	mov	r3, r0
 801488a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801488c:	7dbb      	ldrb	r3, [r7, #22]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d001      	beq.n	8014896 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014892:	7dbb      	ldrb	r3, [r7, #22]
 8014894:	e00c      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fb39 	bl	8014f0e <LoRaMacSerializerData>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d001      	beq.n	80148a6 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80148a2:	2311      	movs	r3, #17
 80148a4:	e004      	b.n	80148b0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80148a6:	4b04      	ldr	r3, [pc, #16]	; (80148b8 <LoRaMacCryptoSecureMessage+0xec>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80148ae:	2300      	movs	r3, #0
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	371c      	adds	r7, #28
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd90      	pop	{r4, r7, pc}
 80148b8:	20003c7c 	.word	0x20003c7c

080148bc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80148bc:	b590      	push	{r4, r7, lr}
 80148be:	b08b      	sub	sp, #44	; 0x2c
 80148c0:	af04      	add	r7, sp, #16
 80148c2:	60b9      	str	r1, [r7, #8]
 80148c4:	607b      	str	r3, [r7, #4]
 80148c6:	4603      	mov	r3, r0
 80148c8:	73fb      	strb	r3, [r7, #15]
 80148ca:	4613      	mov	r3, r2
 80148cc:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80148ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d101      	bne.n	80148d8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80148d4:	230a      	movs	r3, #10
 80148d6:	e084      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80148d8:	7bbb      	ldrb	r3, [r7, #14]
 80148da:	6879      	ldr	r1, [r7, #4]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7ff fcaf 	bl	8014240 <CheckFCntDown>
 80148e2:	4603      	mov	r3, r0
 80148e4:	f083 0301 	eor.w	r3, r3, #1
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d001      	beq.n	80148f2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80148ee:	2306      	movs	r3, #6
 80148f0:	e077      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80148f2:	2313      	movs	r3, #19
 80148f4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80148f6:	2303      	movs	r3, #3
 80148f8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80148fa:	2302      	movs	r3, #2
 80148fc:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80148fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014900:	f000 f98f 	bl	8014c22 <LoRaMacParserData>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d001      	beq.n	801490e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801490a:	2310      	movs	r3, #16
 801490c:	e069      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801490e:	f107 0210 	add.w	r2, r7, #16
 8014912:	7bfb      	ldrb	r3, [r7, #15]
 8014914:	4611      	mov	r1, r2
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff fbce 	bl	80140b8 <GetKeyAddrItem>
 801491c:	4603      	mov	r3, r0
 801491e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014920:	7d7b      	ldrb	r3, [r7, #21]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d001      	beq.n	801492a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014926:	7d7b      	ldrb	r3, [r7, #21]
 8014928:	e05b      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	785b      	ldrb	r3, [r3, #1]
 801492e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	789b      	ldrb	r3, [r3, #2]
 8014934:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	429a      	cmp	r2, r3
 801493e:	d001      	beq.n	8014944 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014940:	2302      	movs	r3, #2
 8014942:	e04e      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014946:	7b1b      	ldrb	r3, [r3, #12]
 8014948:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801494c:	b2db      	uxtb	r3, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	bf14      	ite	ne
 8014952:	2301      	movne	r3, #1
 8014954:	2300      	moveq	r3, #0
 8014956:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014958:	4b24      	ldr	r3, [pc, #144]	; (80149ec <LoRaMacCryptoUnsecureMessage+0x130>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	789b      	ldrb	r3, [r3, #2]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d101      	bne.n	8014966 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014962:	2300      	movs	r3, #0
 8014964:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014968:	6818      	ldr	r0, [r3, #0]
 801496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496c:	791b      	ldrb	r3, [r3, #4]
 801496e:	b29b      	uxth	r3, r3
 8014970:	3b04      	subs	r3, #4
 8014972:	b299      	uxth	r1, r3
 8014974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014978:	7dbc      	ldrb	r4, [r7, #22]
 801497a:	7d3a      	ldrb	r2, [r7, #20]
 801497c:	9303      	str	r3, [sp, #12]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	9302      	str	r3, [sp, #8]
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	9301      	str	r3, [sp, #4]
 8014986:	2301      	movs	r3, #1
 8014988:	9300      	str	r3, [sp, #0]
 801498a:	4623      	mov	r3, r4
 801498c:	f7ff fb05 	bl	8013f9a <VerifyCmacB0>
 8014990:	4603      	mov	r3, r0
 8014992:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014994:	7d7b      	ldrb	r3, [r7, #21]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d001      	beq.n	801499e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801499a:	7d7b      	ldrb	r3, [r7, #21]
 801499c:	e021      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d101      	bne.n	80149ac <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80149a8:	2302      	movs	r3, #2
 80149aa:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149b6:	b219      	sxth	r1, r3
 80149b8:	7dfa      	ldrb	r2, [r7, #23]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	2301      	movs	r3, #1
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	f7ff f9aa 	bl	8013d1c <PayloadEncrypt>
 80149c8:	4603      	mov	r3, r0
 80149ca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149cc:	7d7b      	ldrb	r3, [r7, #21]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80149d2:	7d7b      	ldrb	r3, [r7, #21]
 80149d4:	e005      	b.n	80149e2 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80149d6:	7bbb      	ldrb	r3, [r7, #14]
 80149d8:	6879      	ldr	r1, [r7, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7ff fc54 	bl	8014288 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	371c      	adds	r7, #28
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd90      	pop	{r4, r7, pc}
 80149ea:	bf00      	nop
 80149ec:	20003c7c 	.word	0x20003c7c

080149f0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	4603      	mov	r3, r0
 80149f8:	460a      	mov	r2, r1
 80149fa:	71fb      	strb	r3, [r7, #7]
 80149fc:	4613      	mov	r3, r2
 80149fe:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014a00:	79bb      	ldrb	r3, [r7, #6]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d001      	beq.n	8014a0a <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014a06:	230b      	movs	r3, #11
 8014a08:	e019      	b.n	8014a3e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	60bb      	str	r3, [r7, #8]
 8014a0e:	f107 030c 	add.w	r3, r7, #12
 8014a12:	2200      	movs	r2, #0
 8014a14:	601a      	str	r2, [r3, #0]
 8014a16:	605a      	str	r2, [r3, #4]
 8014a18:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014a1a:	79fb      	ldrb	r3, [r7, #7]
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d101      	bne.n	8014a24 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014a20:	2320      	movs	r3, #32
 8014a22:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014a24:	79b9      	ldrb	r1, [r7, #6]
 8014a26:	f107 0308 	add.w	r3, r7, #8
 8014a2a:	2204      	movs	r2, #4
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f8 fc21 	bl	800d274 <SecureElementDeriveAndStoreKey>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d001      	beq.n	8014a3c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a38:	230f      	movs	r3, #15
 8014a3a:	e000      	b.n	8014a3e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a3c:	2300      	movs	r3, #0
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b086      	sub	sp, #24
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014a50:	79fb      	ldrb	r3, [r7, #7]
 8014a52:	2b04      	cmp	r3, #4
 8014a54:	d001      	beq.n	8014a5a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014a56:	230b      	movs	r3, #11
 8014a58:	e014      	b.n	8014a84 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	60bb      	str	r3, [r7, #8]
 8014a5e:	f107 030c 	add.w	r3, r7, #12
 8014a62:	2200      	movs	r2, #0
 8014a64:	601a      	str	r2, [r3, #0]
 8014a66:	605a      	str	r2, [r3, #4]
 8014a68:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014a6a:	79f9      	ldrb	r1, [r7, #7]
 8014a6c:	f107 0308 	add.w	r3, r7, #8
 8014a70:	227f      	movs	r2, #127	; 0x7f
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7f8 fbfe 	bl	800d274 <SecureElementDeriveAndStoreKey>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d001      	beq.n	8014a82 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a7e:	230f      	movs	r3, #15
 8014a80:	e000      	b.n	8014a84 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a82:	2300      	movs	r3, #0
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3718      	adds	r7, #24
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d003      	beq.n	8014aa2 <LoRaMacParserJoinAccept+0x16>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d101      	bne.n	8014aa6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014aa2:	2302      	movs	r3, #2
 8014aa4:	e0b9      	b.n	8014c1a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	89fb      	ldrh	r3, [r7, #14]
 8014ab0:	1c59      	adds	r1, r3, #1
 8014ab2:	81f9      	strh	r1, [r7, #14]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	781a      	ldrb	r2, [r3, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	1d98      	adds	r0, r3, #6
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	89fb      	ldrh	r3, [r7, #14]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	2203      	movs	r2, #3
 8014aca:	4619      	mov	r1, r3
 8014acc:	f004 f9eb 	bl	8018ea6 <memcpy1>
    bufItr = bufItr + 3;
 8014ad0:	89fb      	ldrh	r3, [r7, #14]
 8014ad2:	3303      	adds	r3, #3
 8014ad4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f103 0009 	add.w	r0, r3, #9
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	89fb      	ldrh	r3, [r7, #14]
 8014ae2:	4413      	add	r3, r2
 8014ae4:	2203      	movs	r2, #3
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	f004 f9dd 	bl	8018ea6 <memcpy1>
    bufItr = bufItr + 3;
 8014aec:	89fb      	ldrh	r3, [r7, #14]
 8014aee:	3303      	adds	r3, #3
 8014af0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	89fb      	ldrh	r3, [r7, #14]
 8014af8:	1c59      	adds	r1, r3, #1
 8014afa:	81f9      	strh	r1, [r7, #14]
 8014afc:	4413      	add	r3, r2
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	461a      	mov	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	89fb      	ldrh	r3, [r7, #14]
 8014b0c:	1c59      	adds	r1, r3, #1
 8014b0e:	81f9      	strh	r1, [r7, #14]
 8014b10:	4413      	add	r3, r2
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	021a      	lsls	r2, r3, #8
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	431a      	orrs	r2, r3
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	89fb      	ldrh	r3, [r7, #14]
 8014b26:	1c59      	adds	r1, r3, #1
 8014b28:	81f9      	strh	r1, [r7, #14]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	041a      	lsls	r2, r3, #16
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	431a      	orrs	r2, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	89fb      	ldrh	r3, [r7, #14]
 8014b40:	1c59      	adds	r1, r3, #1
 8014b42:	81f9      	strh	r1, [r7, #14]
 8014b44:	4413      	add	r3, r2
 8014b46:	781b      	ldrb	r3, [r3, #0]
 8014b48:	061a      	lsls	r2, r3, #24
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	431a      	orrs	r2, r3
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	89fb      	ldrh	r3, [r7, #14]
 8014b5a:	1c59      	adds	r1, r3, #1
 8014b5c:	81f9      	strh	r1, [r7, #14]
 8014b5e:	4413      	add	r3, r2
 8014b60:	781a      	ldrb	r2, [r3, #0]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681a      	ldr	r2, [r3, #0]
 8014b6a:	89fb      	ldrh	r3, [r7, #14]
 8014b6c:	1c59      	adds	r1, r3, #1
 8014b6e:	81f9      	strh	r1, [r7, #14]
 8014b70:	4413      	add	r3, r2
 8014b72:	781a      	ldrb	r2, [r3, #0]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	791b      	ldrb	r3, [r3, #4]
 8014b7c:	1f1a      	subs	r2, r3, #4
 8014b7e:	89fb      	ldrh	r3, [r7, #14]
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	2b10      	cmp	r3, #16
 8014b84:	d10e      	bne.n	8014ba4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f103 0012 	add.w	r0, r3, #18
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	89fb      	ldrh	r3, [r7, #14]
 8014b92:	4413      	add	r3, r2
 8014b94:	2210      	movs	r2, #16
 8014b96:	4619      	mov	r1, r3
 8014b98:	f004 f985 	bl	8018ea6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014b9c:	89fb      	ldrh	r3, [r7, #14]
 8014b9e:	3310      	adds	r3, #16
 8014ba0:	81fb      	strh	r3, [r7, #14]
 8014ba2:	e008      	b.n	8014bb6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	791b      	ldrb	r3, [r3, #4]
 8014ba8:	1f1a      	subs	r2, r3, #4
 8014baa:	89fb      	ldrh	r3, [r7, #14]
 8014bac:	1ad3      	subs	r3, r2, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	dd01      	ble.n	8014bb6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	e031      	b.n	8014c1a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	89fb      	ldrh	r3, [r7, #14]
 8014bbc:	1c59      	adds	r1, r3, #1
 8014bbe:	81f9      	strh	r1, [r7, #14]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	89fb      	ldrh	r3, [r7, #14]
 8014bd0:	1c59      	adds	r1, r3, #1
 8014bd2:	81f9      	strh	r1, [r7, #14]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	021a      	lsls	r2, r3, #8
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bde:	431a      	orrs	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681a      	ldr	r2, [r3, #0]
 8014be8:	89fb      	ldrh	r3, [r7, #14]
 8014bea:	1c59      	adds	r1, r3, #1
 8014bec:	81f9      	strh	r1, [r7, #14]
 8014bee:	4413      	add	r3, r2
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	041a      	lsls	r2, r3, #16
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bf8:	431a      	orrs	r2, r3
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	89fb      	ldrh	r3, [r7, #14]
 8014c04:	1c59      	adds	r1, r3, #1
 8014c06:	81f9      	strh	r1, [r7, #14]
 8014c08:	4413      	add	r3, r2
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	061a      	lsls	r2, r3, #24
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c12:	431a      	orrs	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014c18:	2300      	movs	r3, #0
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b084      	sub	sp, #16
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d003      	beq.n	8014c38 <LoRaMacParserData+0x16>
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d101      	bne.n	8014c3c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014c38:	2302      	movs	r3, #2
 8014c3a:	e0e2      	b.n	8014e02 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	89fb      	ldrh	r3, [r7, #14]
 8014c46:	1c59      	adds	r1, r3, #1
 8014c48:	81f9      	strh	r1, [r7, #14]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	781a      	ldrb	r2, [r3, #0]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	89fb      	ldrh	r3, [r7, #14]
 8014c58:	1c59      	adds	r1, r3, #1
 8014c5a:	81f9      	strh	r1, [r7, #14]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	461a      	mov	r2, r3
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681a      	ldr	r2, [r3, #0]
 8014c6a:	89fb      	ldrh	r3, [r7, #14]
 8014c6c:	1c59      	adds	r1, r3, #1
 8014c6e:	81f9      	strh	r1, [r7, #14]
 8014c70:	4413      	add	r3, r2
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	021a      	lsls	r2, r3, #8
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	689b      	ldr	r3, [r3, #8]
 8014c7a:	431a      	orrs	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	89fb      	ldrh	r3, [r7, #14]
 8014c86:	1c59      	adds	r1, r3, #1
 8014c88:	81f9      	strh	r1, [r7, #14]
 8014c8a:	4413      	add	r3, r2
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	041a      	lsls	r2, r3, #16
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	689b      	ldr	r3, [r3, #8]
 8014c94:	431a      	orrs	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	89fb      	ldrh	r3, [r7, #14]
 8014ca0:	1c59      	adds	r1, r3, #1
 8014ca2:	81f9      	strh	r1, [r7, #14]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	061a      	lsls	r2, r3, #24
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	431a      	orrs	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	89fb      	ldrh	r3, [r7, #14]
 8014cba:	1c59      	adds	r1, r3, #1
 8014cbc:	81f9      	strh	r1, [r7, #14]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	781a      	ldrb	r2, [r3, #0]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	89fb      	ldrh	r3, [r7, #14]
 8014ccc:	1c59      	adds	r1, r3, #1
 8014cce:	81f9      	strh	r1, [r7, #14]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	89fb      	ldrh	r3, [r7, #14]
 8014ce0:	1c59      	adds	r1, r3, #1
 8014ce2:	81f9      	strh	r1, [r7, #14]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	0219      	lsls	r1, r3, #8
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	89db      	ldrh	r3, [r3, #14]
 8014cee:	b21a      	sxth	r2, r3
 8014cf0:	b20b      	sxth	r3, r1
 8014cf2:	4313      	orrs	r3, r2
 8014cf4:	b21b      	sxth	r3, r3
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f103 0010 	add.w	r0, r3, #16
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	89fb      	ldrh	r3, [r7, #14]
 8014d08:	18d1      	adds	r1, r2, r3
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	7b1b      	ldrb	r3, [r3, #12]
 8014d0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	461a      	mov	r2, r3
 8014d18:	f004 f8c5 	bl	8018ea6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	7b1b      	ldrb	r3, [r3, #12]
 8014d20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d24:	b2db      	uxtb	r3, r3
 8014d26:	b29a      	uxth	r2, r3
 8014d28:	89fb      	ldrh	r3, [r7, #14]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2200      	movs	r2, #0
 8014d32:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	791b      	ldrb	r3, [r3, #4]
 8014d42:	461a      	mov	r2, r3
 8014d44:	89fb      	ldrh	r3, [r7, #14]
 8014d46:	1ad3      	subs	r3, r2, r3
 8014d48:	2b04      	cmp	r3, #4
 8014d4a:	dd28      	ble.n	8014d9e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	89fb      	ldrh	r3, [r7, #14]
 8014d52:	1c59      	adds	r1, r3, #1
 8014d54:	81f9      	strh	r1, [r7, #14]
 8014d56:	4413      	add	r3, r2
 8014d58:	781a      	ldrb	r2, [r3, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	791a      	ldrb	r2, [r3, #4]
 8014d64:	89fb      	ldrh	r3, [r7, #14]
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	1ad3      	subs	r3, r2, r3
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	3b04      	subs	r3, #4
 8014d6e:	b2da      	uxtb	r2, r3
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	89fb      	ldrh	r3, [r7, #14]
 8014d80:	18d1      	adds	r1, r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	f004 f88b 	bl	8018ea6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	89fb      	ldrh	r3, [r7, #14]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	791b      	ldrb	r3, [r3, #4]
 8014da6:	3b04      	subs	r3, #4
 8014da8:	4413      	add	r3, r2
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	461a      	mov	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6819      	ldr	r1, [r3, #0]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	791b      	ldrb	r3, [r3, #4]
 8014dbe:	3b03      	subs	r3, #3
 8014dc0:	440b      	add	r3, r1
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	021b      	lsls	r3, r3, #8
 8014dc6:	431a      	orrs	r2, r3
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6819      	ldr	r1, [r3, #0]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	791b      	ldrb	r3, [r3, #4]
 8014dd8:	3b02      	subs	r3, #2
 8014dda:	440b      	add	r3, r1
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	041b      	lsls	r3, r3, #16
 8014de0:	431a      	orrs	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6819      	ldr	r1, [r3, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	791b      	ldrb	r3, [r3, #4]
 8014df2:	3b01      	subs	r3, #1
 8014df4:	440b      	add	r3, r1
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	061b      	lsls	r3, r3, #24
 8014dfa:	431a      	orrs	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014e00:	2300      	movs	r3, #0
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b084      	sub	sp, #16
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d003      	beq.n	8014e20 <LoRaMacSerializerJoinRequest+0x16>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d101      	bne.n	8014e24 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014e20:	2301      	movs	r3, #1
 8014e22:	e070      	b.n	8014f06 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014e24:	2300      	movs	r3, #0
 8014e26:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	791b      	ldrb	r3, [r3, #4]
 8014e2c:	2b16      	cmp	r3, #22
 8014e2e:	d801      	bhi.n	8014e34 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014e30:	2302      	movs	r3, #2
 8014e32:	e068      	b.n	8014f06 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	89fb      	ldrh	r3, [r7, #14]
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	81f9      	strh	r1, [r7, #14]
 8014e3e:	4413      	add	r3, r2
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	7952      	ldrb	r2, [r2, #5]
 8014e44:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	89fb      	ldrh	r3, [r7, #14]
 8014e4c:	18d0      	adds	r0, r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	3306      	adds	r3, #6
 8014e52:	2208      	movs	r2, #8
 8014e54:	4619      	mov	r1, r3
 8014e56:	f004 f841 	bl	8018edc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014e5a:	89fb      	ldrh	r3, [r7, #14]
 8014e5c:	3308      	adds	r3, #8
 8014e5e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	89fb      	ldrh	r3, [r7, #14]
 8014e66:	18d0      	adds	r0, r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	330e      	adds	r3, #14
 8014e6c:	2208      	movs	r2, #8
 8014e6e:	4619      	mov	r1, r3
 8014e70:	f004 f834 	bl	8018edc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014e74:	89fb      	ldrh	r3, [r7, #14]
 8014e76:	3308      	adds	r3, #8
 8014e78:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	8ad9      	ldrh	r1, [r3, #22]
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	89fb      	ldrh	r3, [r7, #14]
 8014e84:	1c58      	adds	r0, r3, #1
 8014e86:	81f8      	strh	r0, [r7, #14]
 8014e88:	4413      	add	r3, r2
 8014e8a:	b2ca      	uxtb	r2, r1
 8014e8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	8adb      	ldrh	r3, [r3, #22]
 8014e92:	0a1b      	lsrs	r3, r3, #8
 8014e94:	b299      	uxth	r1, r3
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	89fb      	ldrh	r3, [r7, #14]
 8014e9c:	1c58      	adds	r0, r3, #1
 8014e9e:	81f8      	strh	r0, [r7, #14]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	b2ca      	uxtb	r2, r1
 8014ea4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6999      	ldr	r1, [r3, #24]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	89fb      	ldrh	r3, [r7, #14]
 8014eb0:	1c58      	adds	r0, r3, #1
 8014eb2:	81f8      	strh	r0, [r7, #14]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	b2ca      	uxtb	r2, r1
 8014eb8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	699b      	ldr	r3, [r3, #24]
 8014ebe:	0a19      	lsrs	r1, r3, #8
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	89fb      	ldrh	r3, [r7, #14]
 8014ec6:	1c58      	adds	r0, r3, #1
 8014ec8:	81f8      	strh	r0, [r7, #14]
 8014eca:	4413      	add	r3, r2
 8014ecc:	b2ca      	uxtb	r2, r1
 8014ece:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	699b      	ldr	r3, [r3, #24]
 8014ed4:	0c19      	lsrs	r1, r3, #16
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	89fb      	ldrh	r3, [r7, #14]
 8014edc:	1c58      	adds	r0, r3, #1
 8014ede:	81f8      	strh	r0, [r7, #14]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	b2ca      	uxtb	r2, r1
 8014ee4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	699b      	ldr	r3, [r3, #24]
 8014eea:	0e19      	lsrs	r1, r3, #24
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681a      	ldr	r2, [r3, #0]
 8014ef0:	89fb      	ldrh	r3, [r7, #14]
 8014ef2:	1c58      	adds	r0, r3, #1
 8014ef4:	81f8      	strh	r0, [r7, #14]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	b2ca      	uxtb	r2, r1
 8014efa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014efc:	89fb      	ldrh	r3, [r7, #14]
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014f04:	2300      	movs	r3, #0
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}

08014f0e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b084      	sub	sp, #16
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d003      	beq.n	8014f24 <LoRaMacSerializerData+0x16>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014f24:	2301      	movs	r3, #1
 8014f26:	e0e5      	b.n	80150f4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014f2c:	2308      	movs	r3, #8
 8014f2e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	7b1b      	ldrb	r3, [r3, #12]
 8014f34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f38:	b2db      	uxtb	r3, r3
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	89bb      	ldrh	r3, [r7, #12]
 8014f3e:	4413      	add	r3, r2
 8014f40:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d002      	beq.n	8014f52 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014f4c:	89bb      	ldrh	r3, [r7, #12]
 8014f4e:	3301      	adds	r3, #1
 8014f50:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	89bb      	ldrh	r3, [r7, #12]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014f60:	89bb      	ldrh	r3, [r7, #12]
 8014f62:	3304      	adds	r3, #4
 8014f64:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	791b      	ldrb	r3, [r3, #4]
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	89ba      	ldrh	r2, [r7, #12]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d901      	bls.n	8014f76 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014f72:	2302      	movs	r3, #2
 8014f74:	e0be      	b.n	80150f4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	89fb      	ldrh	r3, [r7, #14]
 8014f7c:	1c59      	adds	r1, r3, #1
 8014f7e:	81f9      	strh	r1, [r7, #14]
 8014f80:	4413      	add	r3, r2
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	7952      	ldrb	r2, [r2, #5]
 8014f86:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6899      	ldr	r1, [r3, #8]
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	89fb      	ldrh	r3, [r7, #14]
 8014f92:	1c58      	adds	r0, r3, #1
 8014f94:	81f8      	strh	r0, [r7, #14]
 8014f96:	4413      	add	r3, r2
 8014f98:	b2ca      	uxtb	r2, r1
 8014f9a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	689b      	ldr	r3, [r3, #8]
 8014fa0:	0a19      	lsrs	r1, r3, #8
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	89fb      	ldrh	r3, [r7, #14]
 8014fa8:	1c58      	adds	r0, r3, #1
 8014faa:	81f8      	strh	r0, [r7, #14]
 8014fac:	4413      	add	r3, r2
 8014fae:	b2ca      	uxtb	r2, r1
 8014fb0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	689b      	ldr	r3, [r3, #8]
 8014fb6:	0c19      	lsrs	r1, r3, #16
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	89fb      	ldrh	r3, [r7, #14]
 8014fbe:	1c58      	adds	r0, r3, #1
 8014fc0:	81f8      	strh	r0, [r7, #14]
 8014fc2:	4413      	add	r3, r2
 8014fc4:	b2ca      	uxtb	r2, r1
 8014fc6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	689b      	ldr	r3, [r3, #8]
 8014fcc:	0e19      	lsrs	r1, r3, #24
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	89fb      	ldrh	r3, [r7, #14]
 8014fd4:	1c58      	adds	r0, r3, #1
 8014fd6:	81f8      	strh	r0, [r7, #14]
 8014fd8:	4413      	add	r3, r2
 8014fda:	b2ca      	uxtb	r2, r1
 8014fdc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681a      	ldr	r2, [r3, #0]
 8014fe2:	89fb      	ldrh	r3, [r7, #14]
 8014fe4:	1c59      	adds	r1, r3, #1
 8014fe6:	81f9      	strh	r1, [r7, #14]
 8014fe8:	4413      	add	r3, r2
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	7b12      	ldrb	r2, [r2, #12]
 8014fee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	89d9      	ldrh	r1, [r3, #14]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	89fb      	ldrh	r3, [r7, #14]
 8014ffa:	1c58      	adds	r0, r3, #1
 8014ffc:	81f8      	strh	r0, [r7, #14]
 8014ffe:	4413      	add	r3, r2
 8015000:	b2ca      	uxtb	r2, r1
 8015002:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	89db      	ldrh	r3, [r3, #14]
 8015008:	0a1b      	lsrs	r3, r3, #8
 801500a:	b299      	uxth	r1, r3
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	89fb      	ldrh	r3, [r7, #14]
 8015012:	1c58      	adds	r0, r3, #1
 8015014:	81f8      	strh	r0, [r7, #14]
 8015016:	4413      	add	r3, r2
 8015018:	b2ca      	uxtb	r2, r1
 801501a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	89fb      	ldrh	r3, [r7, #14]
 8015022:	18d0      	adds	r0, r2, r3
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f103 0110 	add.w	r1, r3, #16
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	7b1b      	ldrb	r3, [r3, #12]
 801502e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015032:	b2db      	uxtb	r3, r3
 8015034:	b29b      	uxth	r3, r3
 8015036:	461a      	mov	r2, r3
 8015038:	f003 ff35 	bl	8018ea6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	7b1b      	ldrb	r3, [r3, #12]
 8015040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015044:	b2db      	uxtb	r3, r3
 8015046:	b29a      	uxth	r2, r3
 8015048:	89fb      	ldrh	r3, [r7, #14]
 801504a:	4413      	add	r3, r2
 801504c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015054:	2b00      	cmp	r3, #0
 8015056:	d009      	beq.n	801506c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	89fb      	ldrh	r3, [r7, #14]
 801505e:	1c59      	adds	r1, r3, #1
 8015060:	81f9      	strh	r1, [r7, #14]
 8015062:	4413      	add	r3, r2
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	f892 2020 	ldrb.w	r2, [r2, #32]
 801506a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	89fb      	ldrh	r3, [r7, #14]
 8015072:	18d0      	adds	r0, r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801507e:	b29b      	uxth	r3, r3
 8015080:	461a      	mov	r2, r3
 8015082:	f003 ff10 	bl	8018ea6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801508c:	b29a      	uxth	r2, r3
 801508e:	89fb      	ldrh	r3, [r7, #14]
 8015090:	4413      	add	r3, r2
 8015092:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	89fb      	ldrh	r3, [r7, #14]
 801509e:	1c58      	adds	r0, r3, #1
 80150a0:	81f8      	strh	r0, [r7, #14]
 80150a2:	4413      	add	r3, r2
 80150a4:	b2ca      	uxtb	r2, r1
 80150a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ac:	0a19      	lsrs	r1, r3, #8
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	89fb      	ldrh	r3, [r7, #14]
 80150b4:	1c58      	adds	r0, r3, #1
 80150b6:	81f8      	strh	r0, [r7, #14]
 80150b8:	4413      	add	r3, r2
 80150ba:	b2ca      	uxtb	r2, r1
 80150bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c2:	0c19      	lsrs	r1, r3, #16
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	89fb      	ldrh	r3, [r7, #14]
 80150ca:	1c58      	adds	r0, r3, #1
 80150cc:	81f8      	strh	r0, [r7, #14]
 80150ce:	4413      	add	r3, r2
 80150d0:	b2ca      	uxtb	r2, r1
 80150d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150d8:	0e19      	lsrs	r1, r3, #24
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	89fb      	ldrh	r3, [r7, #14]
 80150e0:	1c58      	adds	r0, r3, #1
 80150e2:	81f8      	strh	r0, [r7, #14]
 80150e4:	4413      	add	r3, r2
 80150e6:	b2ca      	uxtb	r2, r1
 80150e8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80150ea:	89fb      	ldrh	r3, [r7, #14]
 80150ec:	b2da      	uxtb	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80150f2:	2300      	movs	r3, #0
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
 8015102:	4603      	mov	r3, r0
 8015104:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	2b05      	cmp	r3, #5
 801510a:	d002      	beq.n	8015112 <RegionIsActive+0x16>
 801510c:	2b08      	cmp	r3, #8
 801510e:	d002      	beq.n	8015116 <RegionIsActive+0x1a>
 8015110:	e003      	b.n	801511a <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015112:	2301      	movs	r3, #1
 8015114:	e002      	b.n	801511c <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8015116:	2301      	movs	r3, #1
 8015118:	e000      	b.n	801511c <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801511a:	2300      	movs	r3, #0
        }
    }
}
 801511c:	4618      	mov	r0, r3
 801511e:	370c      	adds	r7, #12
 8015120:	46bd      	mov	sp, r7
 8015122:	bc80      	pop	{r7}
 8015124:	4770      	bx	lr

08015126 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	4603      	mov	r3, r0
 801512e:	6039      	str	r1, [r7, #0]
 8015130:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015132:	2300      	movs	r3, #0
 8015134:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015136:	79fb      	ldrb	r3, [r7, #7]
 8015138:	2b05      	cmp	r3, #5
 801513a:	d002      	beq.n	8015142 <RegionGetPhyParam+0x1c>
 801513c:	2b08      	cmp	r3, #8
 801513e:	d006      	beq.n	801514e <RegionGetPhyParam+0x28>
 8015140:	e00b      	b.n	801515a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8015142:	6838      	ldr	r0, [r7, #0]
 8015144:	f001 fae8 	bl	8016718 <RegionEU868GetPhyParam>
 8015148:	4603      	mov	r3, r0
 801514a:	60fb      	str	r3, [r7, #12]
 801514c:	e007      	b.n	801515e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801514e:	6838      	ldr	r0, [r7, #0]
 8015150:	f002 fca6 	bl	8017aa0 <RegionUS915GetPhyParam>
 8015154:	4603      	mov	r3, r0
 8015156:	60fb      	str	r3, [r7, #12]
 8015158:	e001      	b.n	801515e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	4618      	mov	r0, r3
 8015162:	3710      	adds	r7, #16
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	4603      	mov	r3, r0
 8015170:	6039      	str	r1, [r7, #0]
 8015172:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015174:	79fb      	ldrb	r3, [r7, #7]
 8015176:	2b05      	cmp	r3, #5
 8015178:	d002      	beq.n	8015180 <RegionSetBandTxDone+0x18>
 801517a:	2b08      	cmp	r3, #8
 801517c:	d004      	beq.n	8015188 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801517e:	e007      	b.n	8015190 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8015180:	6838      	ldr	r0, [r7, #0]
 8015182:	f001 fc15 	bl	80169b0 <RegionEU868SetBandTxDone>
 8015186:	e003      	b.n	8015190 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8015188:	6838      	ldr	r0, [r7, #0]
 801518a:	f002 fdeb 	bl	8017d64 <RegionUS915SetBandTxDone>
 801518e:	bf00      	nop
        }
    }
}
 8015190:	3708      	adds	r7, #8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b082      	sub	sp, #8
 801519a:	af00      	add	r7, sp, #0
 801519c:	4603      	mov	r3, r0
 801519e:	6039      	str	r1, [r7, #0]
 80151a0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80151a2:	79fb      	ldrb	r3, [r7, #7]
 80151a4:	2b05      	cmp	r3, #5
 80151a6:	d002      	beq.n	80151ae <RegionInitDefaults+0x18>
 80151a8:	2b08      	cmp	r3, #8
 80151aa:	d004      	beq.n	80151b6 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80151ac:	e007      	b.n	80151be <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 80151ae:	6838      	ldr	r0, [r7, #0]
 80151b0:	f001 fc2a 	bl	8016a08 <RegionEU868InitDefaults>
 80151b4:	e003      	b.n	80151be <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 80151b6:	6838      	ldr	r0, [r7, #0]
 80151b8:	f002 fe00 	bl	8017dbc <RegionUS915InitDefaults>
 80151bc:	bf00      	nop
        }
    }
}
 80151be:	bf00      	nop
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b082      	sub	sp, #8
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	4603      	mov	r3, r0
 80151ce:	6039      	str	r1, [r7, #0]
 80151d0:	71fb      	strb	r3, [r7, #7]
 80151d2:	4613      	mov	r3, r2
 80151d4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80151d6:	79fb      	ldrb	r3, [r7, #7]
 80151d8:	2b05      	cmp	r3, #5
 80151da:	d002      	beq.n	80151e2 <RegionVerify+0x1c>
 80151dc:	2b08      	cmp	r3, #8
 80151de:	d007      	beq.n	80151f0 <RegionVerify+0x2a>
 80151e0:	e00d      	b.n	80151fe <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80151e2:	79bb      	ldrb	r3, [r7, #6]
 80151e4:	4619      	mov	r1, r3
 80151e6:	6838      	ldr	r0, [r7, #0]
 80151e8:	f001 fc9c 	bl	8016b24 <RegionEU868Verify>
 80151ec:	4603      	mov	r3, r0
 80151ee:	e007      	b.n	8015200 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80151f0:	79bb      	ldrb	r3, [r7, #6]
 80151f2:	4619      	mov	r1, r3
 80151f4:	6838      	ldr	r0, [r7, #0]
 80151f6:	f002 ff13 	bl	8018020 <RegionUS915Verify>
 80151fa:	4603      	mov	r3, r0
 80151fc:	e000      	b.n	8015200 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80151fe:	2300      	movs	r3, #0
        }
    }
}
 8015200:	4618      	mov	r0, r3
 8015202:	3708      	adds	r7, #8
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	4603      	mov	r3, r0
 8015210:	6039      	str	r1, [r7, #0]
 8015212:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015214:	79fb      	ldrb	r3, [r7, #7]
 8015216:	2b05      	cmp	r3, #5
 8015218:	d002      	beq.n	8015220 <RegionApplyCFList+0x18>
 801521a:	2b08      	cmp	r3, #8
 801521c:	d004      	beq.n	8015228 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801521e:	e007      	b.n	8015230 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8015220:	6838      	ldr	r0, [r7, #0]
 8015222:	f001 fcfb 	bl	8016c1c <RegionEU868ApplyCFList>
 8015226:	e003      	b.n	8015230 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8015228:	6838      	ldr	r0, [r7, #0]
 801522a:	f002 ff61 	bl	80180f0 <RegionUS915ApplyCFList>
 801522e:	bf00      	nop
        }
    }
}
 8015230:	bf00      	nop
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
 801523e:	4603      	mov	r3, r0
 8015240:	6039      	str	r1, [r7, #0]
 8015242:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015244:	79fb      	ldrb	r3, [r7, #7]
 8015246:	2b05      	cmp	r3, #5
 8015248:	d002      	beq.n	8015250 <RegionChanMaskSet+0x18>
 801524a:	2b08      	cmp	r3, #8
 801524c:	d005      	beq.n	801525a <RegionChanMaskSet+0x22>
 801524e:	e009      	b.n	8015264 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8015250:	6838      	ldr	r0, [r7, #0]
 8015252:	f001 fd57 	bl	8016d04 <RegionEU868ChanMaskSet>
 8015256:	4603      	mov	r3, r0
 8015258:	e005      	b.n	8015266 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 801525a:	6838      	ldr	r0, [r7, #0]
 801525c:	f002 ffbe 	bl	80181dc <RegionUS915ChanMaskSet>
 8015260:	4603      	mov	r3, r0
 8015262:	e000      	b.n	8015266 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015264:	2300      	movs	r3, #0
        }
    }
}
 8015266:	4618      	mov	r0, r3
 8015268:	3708      	adds	r7, #8
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b082      	sub	sp, #8
 8015272:	af00      	add	r7, sp, #0
 8015274:	603b      	str	r3, [r7, #0]
 8015276:	4603      	mov	r3, r0
 8015278:	71fb      	strb	r3, [r7, #7]
 801527a:	460b      	mov	r3, r1
 801527c:	71bb      	strb	r3, [r7, #6]
 801527e:	4613      	mov	r3, r2
 8015280:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015282:	79fb      	ldrb	r3, [r7, #7]
 8015284:	2b05      	cmp	r3, #5
 8015286:	d002      	beq.n	801528e <RegionComputeRxWindowParameters+0x20>
 8015288:	2b08      	cmp	r3, #8
 801528a:	d008      	beq.n	801529e <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801528c:	e00f      	b.n	80152ae <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801528e:	7979      	ldrb	r1, [r7, #5]
 8015290:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	f001 fd5e 	bl	8016d58 <RegionEU868ComputeRxWindowParameters>
 801529c:	e007      	b.n	80152ae <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801529e:	7979      	ldrb	r1, [r7, #5]
 80152a0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	683a      	ldr	r2, [r7, #0]
 80152a8:	f003 f802 	bl	80182b0 <RegionUS915ComputeRxWindowParameters>
 80152ac:	bf00      	nop
        }
    }
}
 80152ae:	bf00      	nop
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b084      	sub	sp, #16
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	4603      	mov	r3, r0
 80152be:	60b9      	str	r1, [r7, #8]
 80152c0:	607a      	str	r2, [r7, #4]
 80152c2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80152c4:	7bfb      	ldrb	r3, [r7, #15]
 80152c6:	2b05      	cmp	r3, #5
 80152c8:	d002      	beq.n	80152d0 <RegionRxConfig+0x1a>
 80152ca:	2b08      	cmp	r3, #8
 80152cc:	d006      	beq.n	80152dc <RegionRxConfig+0x26>
 80152ce:	e00b      	b.n	80152e8 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80152d0:	6879      	ldr	r1, [r7, #4]
 80152d2:	68b8      	ldr	r0, [r7, #8]
 80152d4:	f001 fd9a 	bl	8016e0c <RegionEU868RxConfig>
 80152d8:	4603      	mov	r3, r0
 80152da:	e006      	b.n	80152ea <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80152dc:	6879      	ldr	r1, [r7, #4]
 80152de:	68b8      	ldr	r0, [r7, #8]
 80152e0:	f003 f830 	bl	8018344 <RegionUS915RxConfig>
 80152e4:	4603      	mov	r3, r0
 80152e6:	e000      	b.n	80152ea <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80152e8:	2300      	movs	r3, #0
        }
    }
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3710      	adds	r7, #16
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b084      	sub	sp, #16
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	603b      	str	r3, [r7, #0]
 80152fe:	4603      	mov	r3, r0
 8015300:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015302:	7bfb      	ldrb	r3, [r7, #15]
 8015304:	2b05      	cmp	r3, #5
 8015306:	d002      	beq.n	801530e <RegionTxConfig+0x1c>
 8015308:	2b08      	cmp	r3, #8
 801530a:	d007      	beq.n	801531c <RegionTxConfig+0x2a>
 801530c:	e00d      	b.n	801532a <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	6879      	ldr	r1, [r7, #4]
 8015312:	68b8      	ldr	r0, [r7, #8]
 8015314:	f001 fe4a 	bl	8016fac <RegionEU868TxConfig>
 8015318:	4603      	mov	r3, r0
 801531a:	e007      	b.n	801532c <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 801531c:	683a      	ldr	r2, [r7, #0]
 801531e:	6879      	ldr	r1, [r7, #4]
 8015320:	68b8      	ldr	r0, [r7, #8]
 8015322:	f003 f893 	bl	801844c <RegionUS915TxConfig>
 8015326:	4603      	mov	r3, r0
 8015328:	e000      	b.n	801532c <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801532a:	2300      	movs	r3, #0
        }
    }
}
 801532c:	4618      	mov	r0, r3
 801532e:	3710      	adds	r7, #16
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b086      	sub	sp, #24
 8015338:	af02      	add	r7, sp, #8
 801533a:	60b9      	str	r1, [r7, #8]
 801533c:	607a      	str	r2, [r7, #4]
 801533e:	603b      	str	r3, [r7, #0]
 8015340:	4603      	mov	r3, r0
 8015342:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015344:	7bfb      	ldrb	r3, [r7, #15]
 8015346:	2b05      	cmp	r3, #5
 8015348:	d002      	beq.n	8015350 <RegionLinkAdrReq+0x1c>
 801534a:	2b08      	cmp	r3, #8
 801534c:	d00a      	beq.n	8015364 <RegionLinkAdrReq+0x30>
 801534e:	e013      	b.n	8015378 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	9300      	str	r3, [sp, #0]
 8015354:	69bb      	ldr	r3, [r7, #24]
 8015356:	683a      	ldr	r2, [r7, #0]
 8015358:	6879      	ldr	r1, [r7, #4]
 801535a:	68b8      	ldr	r0, [r7, #8]
 801535c:	f001 fef6 	bl	801714c <RegionEU868LinkAdrReq>
 8015360:	4603      	mov	r3, r0
 8015362:	e00a      	b.n	801537a <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	683a      	ldr	r2, [r7, #0]
 801536c:	6879      	ldr	r1, [r7, #4]
 801536e:	68b8      	ldr	r0, [r7, #8]
 8015370:	f003 f918 	bl	80185a4 <RegionUS915LinkAdrReq>
 8015374:	4603      	mov	r3, r0
 8015376:	e000      	b.n	801537a <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015378:	2300      	movs	r3, #0
        }
    }
}
 801537a:	4618      	mov	r0, r3
 801537c:	3710      	adds	r7, #16
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015382:	b580      	push	{r7, lr}
 8015384:	b082      	sub	sp, #8
 8015386:	af00      	add	r7, sp, #0
 8015388:	4603      	mov	r3, r0
 801538a:	6039      	str	r1, [r7, #0]
 801538c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801538e:	79fb      	ldrb	r3, [r7, #7]
 8015390:	2b05      	cmp	r3, #5
 8015392:	d002      	beq.n	801539a <RegionRxParamSetupReq+0x18>
 8015394:	2b08      	cmp	r3, #8
 8015396:	d005      	beq.n	80153a4 <RegionRxParamSetupReq+0x22>
 8015398:	e009      	b.n	80153ae <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801539a:	6838      	ldr	r0, [r7, #0]
 801539c:	f001 fff8 	bl	8017390 <RegionEU868RxParamSetupReq>
 80153a0:	4603      	mov	r3, r0
 80153a2:	e005      	b.n	80153b0 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80153a4:	6838      	ldr	r0, [r7, #0]
 80153a6:	f003 fb21 	bl	80189ec <RegionUS915RxParamSetupReq>
 80153aa:	4603      	mov	r3, r0
 80153ac:	e000      	b.n	80153b0 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80153ae:	2300      	movs	r3, #0
        }
    }
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3708      	adds	r7, #8
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	6039      	str	r1, [r7, #0]
 80153c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153c4:	79fb      	ldrb	r3, [r7, #7]
 80153c6:	2b05      	cmp	r3, #5
 80153c8:	d002      	beq.n	80153d0 <RegionNewChannelReq+0x18>
 80153ca:	2b08      	cmp	r3, #8
 80153cc:	d005      	beq.n	80153da <RegionNewChannelReq+0x22>
 80153ce:	e009      	b.n	80153e4 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80153d0:	6838      	ldr	r0, [r7, #0]
 80153d2:	f002 f81b 	bl	801740c <RegionEU868NewChannelReq>
 80153d6:	4603      	mov	r3, r0
 80153d8:	e005      	b.n	80153e6 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80153da:	6838      	ldr	r0, [r7, #0]
 80153dc:	f003 fb52 	bl	8018a84 <RegionUS915NewChannelReq>
 80153e0:	4603      	mov	r3, r0
 80153e2:	e000      	b.n	80153e6 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80153e4:	2300      	movs	r3, #0
        }
    }
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	4603      	mov	r3, r0
 80153f6:	6039      	str	r1, [r7, #0]
 80153f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153fa:	79fb      	ldrb	r3, [r7, #7]
 80153fc:	2b05      	cmp	r3, #5
 80153fe:	d002      	beq.n	8015406 <RegionTxParamSetupReq+0x18>
 8015400:	2b08      	cmp	r3, #8
 8015402:	d005      	beq.n	8015410 <RegionTxParamSetupReq+0x22>
 8015404:	e009      	b.n	801541a <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015406:	6838      	ldr	r0, [r7, #0]
 8015408:	f002 f85e 	bl	80174c8 <RegionEU868TxParamSetupReq>
 801540c:	4603      	mov	r3, r0
 801540e:	e005      	b.n	801541c <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8015410:	6838      	ldr	r0, [r7, #0]
 8015412:	f003 fb42 	bl	8018a9a <RegionUS915TxParamSetupReq>
 8015416:	4603      	mov	r3, r0
 8015418:	e000      	b.n	801541c <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801541a:	2300      	movs	r3, #0
        }
    }
}
 801541c:	4618      	mov	r0, r3
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	6039      	str	r1, [r7, #0]
 801542e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015430:	79fb      	ldrb	r3, [r7, #7]
 8015432:	2b05      	cmp	r3, #5
 8015434:	d002      	beq.n	801543c <RegionDlChannelReq+0x18>
 8015436:	2b08      	cmp	r3, #8
 8015438:	d005      	beq.n	8015446 <RegionDlChannelReq+0x22>
 801543a:	e009      	b.n	8015450 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801543c:	6838      	ldr	r0, [r7, #0]
 801543e:	f002 f84f 	bl	80174e0 <RegionEU868DlChannelReq>
 8015442:	4603      	mov	r3, r0
 8015444:	e005      	b.n	8015452 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8015446:	6838      	ldr	r0, [r7, #0]
 8015448:	f003 fb32 	bl	8018ab0 <RegionUS915DlChannelReq>
 801544c:	4603      	mov	r3, r0
 801544e:	e000      	b.n	8015452 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015450:	2300      	movs	r3, #0
        }
    }
}
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	4603      	mov	r3, r0
 8015462:	71fb      	strb	r3, [r7, #7]
 8015464:	460b      	mov	r3, r1
 8015466:	71bb      	strb	r3, [r7, #6]
 8015468:	4613      	mov	r3, r2
 801546a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801546c:	79fb      	ldrb	r3, [r7, #7]
 801546e:	2b05      	cmp	r3, #5
 8015470:	d002      	beq.n	8015478 <RegionAlternateDr+0x1e>
 8015472:	2b08      	cmp	r3, #8
 8015474:	d009      	beq.n	801548a <RegionAlternateDr+0x30>
 8015476:	e011      	b.n	801549c <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015478:	797a      	ldrb	r2, [r7, #5]
 801547a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801547e:	4611      	mov	r1, r2
 8015480:	4618      	mov	r0, r3
 8015482:	f002 f871 	bl	8017568 <RegionEU868AlternateDr>
 8015486:	4603      	mov	r3, r0
 8015488:	e009      	b.n	801549e <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 801548a:	797a      	ldrb	r2, [r7, #5]
 801548c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f003 fb18 	bl	8018ac8 <RegionUS915AlternateDr>
 8015498:	4603      	mov	r3, r0
 801549a:	e000      	b.n	801549e <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801549c:	2300      	movs	r3, #0
        }
    }
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b084      	sub	sp, #16
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	603b      	str	r3, [r7, #0]
 80154b2:	4603      	mov	r3, r0
 80154b4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154b6:	7bfb      	ldrb	r3, [r7, #15]
 80154b8:	2b05      	cmp	r3, #5
 80154ba:	d002      	beq.n	80154c2 <RegionNextChannel+0x1c>
 80154bc:	2b08      	cmp	r3, #8
 80154be:	d008      	beq.n	80154d2 <RegionNextChannel+0x2c>
 80154c0:	e00f      	b.n	80154e2 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	683a      	ldr	r2, [r7, #0]
 80154c6:	6879      	ldr	r1, [r7, #4]
 80154c8:	68b8      	ldr	r0, [r7, #8]
 80154ca:	f002 f85d 	bl	8017588 <RegionEU868NextChannel>
 80154ce:	4603      	mov	r3, r0
 80154d0:	e008      	b.n	80154e4 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	683a      	ldr	r2, [r7, #0]
 80154d6:	6879      	ldr	r1, [r7, #4]
 80154d8:	68b8      	ldr	r0, [r7, #8]
 80154da:	f003 fb31 	bl	8018b40 <RegionUS915NextChannel>
 80154de:	4603      	mov	r3, r0
 80154e0:	e000      	b.n	80154e4 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80154e2:	2309      	movs	r3, #9
        }
    }
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3710      	adds	r7, #16
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	4603      	mov	r3, r0
 80154f4:	6039      	str	r1, [r7, #0]
 80154f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154f8:	79fb      	ldrb	r3, [r7, #7]
 80154fa:	2b05      	cmp	r3, #5
 80154fc:	d002      	beq.n	8015504 <RegionSetContinuousWave+0x18>
 80154fe:	2b08      	cmp	r3, #8
 8015500:	d004      	beq.n	801550c <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015502:	e007      	b.n	8015514 <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 8015504:	6838      	ldr	r0, [r7, #0]
 8015506:	f002 f9b9 	bl	801787c <RegionEU868SetContinuousWave>
 801550a:	e003      	b.n	8015514 <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 801550c:	6838      	ldr	r0, [r7, #0]
 801550e:	f003 fc0b 	bl	8018d28 <RegionUS915SetContinuousWave>
 8015512:	bf00      	nop
        }
    }
}
 8015514:	bf00      	nop
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801551c:	b590      	push	{r4, r7, lr}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	4604      	mov	r4, r0
 8015524:	4608      	mov	r0, r1
 8015526:	4611      	mov	r1, r2
 8015528:	461a      	mov	r2, r3
 801552a:	4623      	mov	r3, r4
 801552c:	71fb      	strb	r3, [r7, #7]
 801552e:	4603      	mov	r3, r0
 8015530:	71bb      	strb	r3, [r7, #6]
 8015532:	460b      	mov	r3, r1
 8015534:	717b      	strb	r3, [r7, #5]
 8015536:	4613      	mov	r3, r2
 8015538:	713b      	strb	r3, [r7, #4]
    switch( region )
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	2b05      	cmp	r3, #5
 801553e:	d002      	beq.n	8015546 <RegionApplyDrOffset+0x2a>
 8015540:	2b08      	cmp	r3, #8
 8015542:	d00a      	beq.n	801555a <RegionApplyDrOffset+0x3e>
 8015544:	e013      	b.n	801556e <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015546:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801554a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801554e:	79bb      	ldrb	r3, [r7, #6]
 8015550:	4618      	mov	r0, r3
 8015552:	f002 f9e1 	bl	8017918 <RegionEU868ApplyDrOffset>
 8015556:	4603      	mov	r3, r0
 8015558:	e00a      	b.n	8015570 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 801555a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801555e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015562:	79bb      	ldrb	r3, [r7, #6]
 8015564:	4618      	mov	r0, r3
 8015566:	f003 fc35 	bl	8018dd4 <RegionUS915ApplyDrOffset>
 801556a:	4603      	mov	r3, r0
 801556c:	e000      	b.n	8015570 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801556e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015570:	4618      	mov	r0, r3
 8015572:	370c      	adds	r7, #12
 8015574:	46bd      	mov	sp, r7
 8015576:	bd90      	pop	{r4, r7, pc}

08015578 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801557e:	4b04      	ldr	r3, [pc, #16]	; (8015590 <RegionGetVersion+0x18>)
 8015580:	607b      	str	r3, [r7, #4]

    return version;
 8015582:	687b      	ldr	r3, [r7, #4]
}
 8015584:	4618      	mov	r0, r3
 8015586:	370c      	adds	r7, #12
 8015588:	46bd      	mov	sp, r7
 801558a:	bc80      	pop	{r7}
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	01000300 	.word	0x01000300

08015594 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015594:	b480      	push	{r7}
 8015596:	b087      	sub	sp, #28
 8015598:	af00      	add	r7, sp, #0
 801559a:	4603      	mov	r3, r0
 801559c:	60b9      	str	r1, [r7, #8]
 801559e:	607a      	str	r2, [r7, #4]
 80155a0:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d002      	beq.n	80155ae <FindAvailable125kHzChannels+0x1a>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d101      	bne.n	80155b2 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80155ae:	2303      	movs	r3, #3
 80155b0:	e021      	b.n	80155f6 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2200      	movs	r2, #0
 80155b6:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80155b8:	2300      	movs	r3, #0
 80155ba:	75fb      	strb	r3, [r7, #23]
 80155bc:	e017      	b.n	80155ee <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80155be:	89fa      	ldrh	r2, [r7, #14]
 80155c0:	7dfb      	ldrb	r3, [r7, #23]
 80155c2:	fa42 f303 	asr.w	r3, r2, r3
 80155c6:	f003 0301 	and.w	r3, r3, #1
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00c      	beq.n	80155e8 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	461a      	mov	r2, r3
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	4413      	add	r3, r2
 80155d8:	7dfa      	ldrb	r2, [r7, #23]
 80155da:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	3301      	adds	r3, #1
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80155e8:	7dfb      	ldrb	r3, [r7, #23]
 80155ea:	3301      	adds	r3, #1
 80155ec:	75fb      	strb	r3, [r7, #23]
 80155ee:	7dfb      	ldrb	r3, [r7, #23]
 80155f0:	2b07      	cmp	r3, #7
 80155f2:	d9e4      	bls.n	80155be <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	371c      	adds	r7, #28
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bc80      	pop	{r7}
 80155fe:	4770      	bx	lr

08015600 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015600:	b590      	push	{r4, r7, lr}
 8015602:	b089      	sub	sp, #36	; 0x24
 8015604:	af00      	add	r7, sp, #0
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801560c:	2300      	movs	r3, #0
 801560e:	617b      	str	r3, [r7, #20]
 8015610:	2300      	movs	r3, #0
 8015612:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015614:	2300      	movs	r3, #0
 8015616:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d005      	beq.n	801562a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d002      	beq.n	801562a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d101      	bne.n	801562e <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801562a:	2303      	movs	r3, #3
 801562c:	e055      	b.n	80156da <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015634:	7f7b      	ldrb	r3, [r7, #29]
 8015636:	085b      	lsrs	r3, r3, #1
 8015638:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801563a:	7f7b      	ldrb	r3, [r7, #29]
 801563c:	f003 0301 	and.w	r3, r3, #1
 8015640:	b2db      	uxtb	r3, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d107      	bne.n	8015656 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015646:	7f3b      	ldrb	r3, [r7, #28]
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	68fa      	ldr	r2, [r7, #12]
 801564c:	4413      	add	r3, r2
 801564e:	881b      	ldrh	r3, [r3, #0]
 8015650:	b2db      	uxtb	r3, r3
 8015652:	83fb      	strh	r3, [r7, #30]
 8015654:	e006      	b.n	8015664 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015656:	7f3b      	ldrb	r3, [r7, #28]
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	68fa      	ldr	r2, [r7, #12]
 801565c:	4413      	add	r3, r2
 801565e:	881b      	ldrh	r3, [r3, #0]
 8015660:	0a1b      	lsrs	r3, r3, #8
 8015662:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015664:	f107 0213 	add.w	r2, r7, #19
 8015668:	f107 0114 	add.w	r1, r7, #20
 801566c:	8bfb      	ldrh	r3, [r7, #30]
 801566e:	4618      	mov	r0, r3
 8015670:	f7ff ff90 	bl	8015594 <FindAvailable125kHzChannels>
 8015674:	4603      	mov	r3, r0
 8015676:	2b03      	cmp	r3, #3
 8015678:	d101      	bne.n	801567e <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801567a:	2303      	movs	r3, #3
 801567c:	e02d      	b.n	80156da <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801567e:	7cfb      	ldrb	r3, [r7, #19]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d011      	beq.n	80156a8 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015684:	7f7b      	ldrb	r3, [r7, #29]
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	b2dc      	uxtb	r4, r3
 801568a:	7cfb      	ldrb	r3, [r7, #19]
 801568c:	3b01      	subs	r3, #1
 801568e:	4619      	mov	r1, r3
 8015690:	2000      	movs	r0, #0
 8015692:	f003 fbf1 	bl	8018e78 <randr>
 8015696:	4603      	mov	r3, r0
 8015698:	3320      	adds	r3, #32
 801569a:	443b      	add	r3, r7
 801569c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80156a0:	4423      	add	r3, r4
 80156a2:	b2da      	uxtb	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80156a8:	7f7b      	ldrb	r3, [r7, #29]
 80156aa:	3301      	adds	r3, #1
 80156ac:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80156ae:	7f7b      	ldrb	r3, [r7, #29]
 80156b0:	2b07      	cmp	r3, #7
 80156b2:	d901      	bls.n	80156b8 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80156b8:	7cfb      	ldrb	r3, [r7, #19]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d104      	bne.n	80156c8 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	7f7a      	ldrb	r2, [r7, #29]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d1b5      	bne.n	8015634 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80156c8:	7cfb      	ldrb	r3, [r7, #19]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d004      	beq.n	80156d8 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	7f7a      	ldrb	r2, [r7, #29]
 80156d2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80156d4:	2300      	movs	r3, #0
 80156d6:	e000      	b.n	80156da <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80156d8:	2303      	movs	r3, #3
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3724      	adds	r7, #36	; 0x24
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd90      	pop	{r4, r7, pc}

080156e2 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80156e2:	b480      	push	{r7}
 80156e4:	b085      	sub	sp, #20
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	4603      	mov	r3, r0
 80156ea:	60b9      	str	r1, [r7, #8]
 80156ec:	607a      	str	r2, [r7, #4]
 80156ee:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80156f0:	7bfb      	ldrb	r3, [r7, #15]
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	fb03 f202 	mul.w	r2, r3, r2
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	4413      	add	r3, r2
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3714      	adds	r7, #20
 8015700:	46bd      	mov	sp, r7
 8015702:	bc80      	pop	{r7}
 8015704:	4770      	bx	lr

08015706 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015706:	b480      	push	{r7}
 8015708:	b087      	sub	sp, #28
 801570a:	af00      	add	r7, sp, #0
 801570c:	60f8      	str	r0, [r7, #12]
 801570e:	4608      	mov	r0, r1
 8015710:	4639      	mov	r1, r7
 8015712:	e881 000c 	stmia.w	r1, {r2, r3}
 8015716:	4603      	mov	r3, r0
 8015718:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	881b      	ldrh	r3, [r3, #0]
 801571e:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015720:	7afb      	ldrb	r3, [r7, #11]
 8015722:	f083 0301 	eor.w	r3, r3, #1
 8015726:	b2db      	uxtb	r3, r3
 8015728:	2b00      	cmp	r3, #0
 801572a:	d01b      	beq.n	8015764 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801572c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015730:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015738:	d202      	bcs.n	8015740 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801573a:	2364      	movs	r3, #100	; 0x64
 801573c:	82bb      	strh	r3, [r7, #20]
 801573e:	e00b      	b.n	8015758 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8015746:	4293      	cmp	r3, r2
 8015748:	d803      	bhi.n	8015752 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801574a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801574e:	82bb      	strh	r3, [r7, #20]
 8015750:	e002      	b.n	8015758 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015752:	f242 7310 	movw	r3, #10000	; 0x2710
 8015756:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015758:	8aba      	ldrh	r2, [r7, #20]
 801575a:	8afb      	ldrh	r3, [r7, #22]
 801575c:	4293      	cmp	r3, r2
 801575e:	bf38      	it	cc
 8015760:	4613      	movcc	r3, r2
 8015762:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015764:	8afb      	ldrh	r3, [r7, #22]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d101      	bne.n	801576e <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801576a:	2301      	movs	r3, #1
 801576c:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801576e:	8afb      	ldrh	r3, [r7, #22]
}
 8015770:	4618      	mov	r0, r3
 8015772:	371c      	adds	r7, #28
 8015774:	46bd      	mov	sp, r7
 8015776:	bc80      	pop	{r7}
 8015778:	4770      	bx	lr
	...

0801577c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b08e      	sub	sp, #56	; 0x38
 8015780:	af02      	add	r7, sp, #8
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	4608      	mov	r0, r1
 8015786:	4639      	mov	r1, r7
 8015788:	e881 000c 	stmia.w	r1, {r2, r3}
 801578c:	4603      	mov	r3, r0
 801578e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	881b      	ldrh	r3, [r3, #0]
 8015794:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015796:	4b4b      	ldr	r3, [pc, #300]	; (80158c4 <SetMaxTimeCredits+0x148>)
 8015798:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801579a:	463b      	mov	r3, r7
 801579c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157a0:	f007 fa9a 	bl	801ccd8 <SysTimeToMs>
 80157a4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80157a6:	f107 0314 	add.w	r3, r7, #20
 80157aa:	2200      	movs	r2, #0
 80157ac:	601a      	str	r2, [r3, #0]
 80157ae:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80157b0:	7af9      	ldrb	r1, [r7, #11]
 80157b2:	463b      	mov	r3, r7
 80157b4:	cb0c      	ldmia	r3, {r2, r3}
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	f7ff ffa5 	bl	8015706 <GetDutyCycle>
 80157bc:	4603      	mov	r3, r0
 80157be:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80157c0:	7afb      	ldrb	r3, [r7, #11]
 80157c2:	f083 0301 	eor.w	r3, r3, #1
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d062      	beq.n	8015892 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80157cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157ce:	2b64      	cmp	r3, #100	; 0x64
 80157d0:	d105      	bne.n	80157de <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80157d2:	4b3c      	ldr	r3, [pc, #240]	; (80158c4 <SetMaxTimeCredits+0x148>)
 80157d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157da:	609a      	str	r2, [r3, #8]
 80157dc:	e00b      	b.n	80157f6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80157de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80157e4:	d105      	bne.n	80157f2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80157e6:	4b38      	ldr	r3, [pc, #224]	; (80158c8 <SetMaxTimeCredits+0x14c>)
 80157e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ee:	609a      	str	r2, [r3, #8]
 80157f0:	e001      	b.n	80157f6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80157f2:	4b36      	ldr	r3, [pc, #216]	; (80158cc <SetMaxTimeCredits+0x150>)
 80157f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	689a      	ldr	r2, [r3, #8]
 80157fa:	f107 031c 	add.w	r3, r7, #28
 80157fe:	4611      	mov	r1, r2
 8015800:	4618      	mov	r0, r3
 8015802:	f007 fa91 	bl	801cd28 <SysTimeFromMs>
 8015806:	f107 0014 	add.w	r0, r7, #20
 801580a:	6a3b      	ldr	r3, [r7, #32]
 801580c:	9300      	str	r3, [sp, #0]
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	463a      	mov	r2, r7
 8015812:	ca06      	ldmia	r2, {r1, r2}
 8015814:	f007 f9a1 	bl	801cb5a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015818:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801581c:	f083 0301 	eor.w	r3, r3, #1
 8015820:	b2db      	uxtb	r3, r3
 8015822:	2b00      	cmp	r3, #0
 8015824:	d006      	beq.n	8015834 <SetMaxTimeCredits+0xb8>
 8015826:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801582a:	f083 0301 	eor.w	r3, r3, #1
 801582e:	b2db      	uxtb	r3, r3
 8015830:	2b00      	cmp	r3, #0
 8015832:	d108      	bne.n	8015846 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801583a:	429a      	cmp	r2, r3
 801583c:	d103      	bne.n	8015846 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801583e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015840:	4a23      	ldr	r2, [pc, #140]	; (80158d0 <SetMaxTimeCredits+0x154>)
 8015842:	4293      	cmp	r3, r2
 8015844:	d92f      	bls.n	80158a6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801584a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	4a21      	ldr	r2, [pc, #132]	; (80158d4 <SetMaxTimeCredits+0x158>)
 8015850:	4293      	cmp	r3, r2
 8015852:	d928      	bls.n	80158a6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801585a:	3b30      	subs	r3, #48	; 0x30
 801585c:	4a1e      	ldr	r2, [pc, #120]	; (80158d8 <SetMaxTimeCredits+0x15c>)
 801585e:	fba2 2303 	umull	r2, r3, r2, r3
 8015862:	0c1b      	lsrs	r3, r3, #16
 8015864:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	4a1c      	ldr	r2, [pc, #112]	; (80158dc <SetMaxTimeCredits+0x160>)
 801586a:	fb02 f303 	mul.w	r3, r2, r3
 801586e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015876:	3330      	adds	r3, #48	; 0x30
 8015878:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801587a:	2300      	movs	r3, #0
 801587c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801587e:	f107 0314 	add.w	r3, r7, #20
 8015882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015886:	f007 fa27 	bl	801ccd8 <SysTimeToMs>
 801588a:	4602      	mov	r2, r0
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	609a      	str	r2, [r3, #8]
 8015890:	e009      	b.n	80158a6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015892:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015896:	f083 0301 	eor.w	r3, r3, #1
 801589a:	b2db      	uxtb	r3, r3
 801589c:	2b00      	cmp	r3, #0
 801589e:	d002      	beq.n	80158a6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158a4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d102      	bne.n	80158b4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158b2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158b8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80158ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3730      	adds	r7, #48	; 0x30
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	001b7740 	.word	0x001b7740
 80158c8:	0112a880 	.word	0x0112a880
 80158cc:	02932e00 	.word	0x02932e00
 80158d0:	0001517f 	.word	0x0001517f
 80158d4:	0001ec2f 	.word	0x0001ec2f
 80158d8:	c22e4507 	.word	0xc22e4507
 80158dc:	00015180 	.word	0x00015180

080158e0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b086      	sub	sp, #24
 80158e4:	af02      	add	r7, sp, #8
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	4608      	mov	r0, r1
 80158ea:	4611      	mov	r1, r2
 80158ec:	461a      	mov	r2, r3
 80158ee:	4603      	mov	r3, r0
 80158f0:	70fb      	strb	r3, [r7, #3]
 80158f2:	460b      	mov	r3, r1
 80158f4:	70bb      	strb	r3, [r7, #2]
 80158f6:	4613      	mov	r3, r2
 80158f8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80158fa:	78f9      	ldrb	r1, [r7, #3]
 80158fc:	787b      	ldrb	r3, [r7, #1]
 80158fe:	9301      	str	r3, [sp, #4]
 8015900:	78bb      	ldrb	r3, [r7, #2]
 8015902:	9300      	str	r3, [sp, #0]
 8015904:	f107 0318 	add.w	r3, r7, #24
 8015908:	cb0c      	ldmia	r3, {r2, r3}
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f7ff ff36 	bl	801577c <SetMaxTimeCredits>
 8015910:	4603      	mov	r3, r0
 8015912:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015914:	78fb      	ldrb	r3, [r7, #3]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00a      	beq.n	8015930 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	4618      	mov	r0, r3
 8015920:	f007 fc20 	bl	801d164 <UTIL_TIMER_GetElapsedTime>
 8015924:	4602      	mov	r2, r0
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	441a      	add	r2, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	68da      	ldr	r2, [r3, #12]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	691b      	ldr	r3, [r3, #16]
 8015938:	429a      	cmp	r2, r3
 801593a:	d903      	bls.n	8015944 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	691a      	ldr	r2, [r3, #16]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6a3a      	ldr	r2, [r7, #32]
 8015948:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801594a:	89fb      	ldrh	r3, [r7, #14]
}
 801594c:	4618      	mov	r0, r3
 801594e:	3710      	adds	r7, #16
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	460a      	mov	r2, r1
 801595e:	80fb      	strh	r3, [r7, #6]
 8015960:	4613      	mov	r3, r2
 8015962:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015964:	2300      	movs	r3, #0
 8015966:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015968:	2300      	movs	r3, #0
 801596a:	73bb      	strb	r3, [r7, #14]
 801596c:	e011      	b.n	8015992 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801596e:	88fa      	ldrh	r2, [r7, #6]
 8015970:	7bbb      	ldrb	r3, [r7, #14]
 8015972:	2101      	movs	r1, #1
 8015974:	fa01 f303 	lsl.w	r3, r1, r3
 8015978:	401a      	ands	r2, r3
 801597a:	7bbb      	ldrb	r3, [r7, #14]
 801597c:	2101      	movs	r1, #1
 801597e:	fa01 f303 	lsl.w	r3, r1, r3
 8015982:	429a      	cmp	r2, r3
 8015984:	d102      	bne.n	801598c <CountChannels+0x38>
        {
            nbActiveBits++;
 8015986:	7bfb      	ldrb	r3, [r7, #15]
 8015988:	3301      	adds	r3, #1
 801598a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801598c:	7bbb      	ldrb	r3, [r7, #14]
 801598e:	3301      	adds	r3, #1
 8015990:	73bb      	strb	r3, [r7, #14]
 8015992:	7bba      	ldrb	r2, [r7, #14]
 8015994:	797b      	ldrb	r3, [r7, #5]
 8015996:	429a      	cmp	r2, r3
 8015998:	d3e9      	bcc.n	801596e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801599a:	7bfb      	ldrb	r3, [r7, #15]
}
 801599c:	4618      	mov	r0, r3
 801599e:	3714      	adds	r7, #20
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bc80      	pop	{r7}
 80159a4:	4770      	bx	lr

080159a6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b084      	sub	sp, #16
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6039      	str	r1, [r7, #0]
 80159ae:	4611      	mov	r1, r2
 80159b0:	461a      	mov	r2, r3
 80159b2:	4603      	mov	r3, r0
 80159b4:	71fb      	strb	r3, [r7, #7]
 80159b6:	460b      	mov	r3, r1
 80159b8:	71bb      	strb	r3, [r7, #6]
 80159ba:	4613      	mov	r3, r2
 80159bc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80159be:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80159c2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80159c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 f85d 	bl	8015a8a <RegionCommonValueInRange>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d101      	bne.n	80159da <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80159d6:	2300      	movs	r3, #0
 80159d8:	e053      	b.n	8015a82 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159da:	2300      	movs	r3, #0
 80159dc:	73fb      	strb	r3, [r7, #15]
 80159de:	2300      	movs	r3, #0
 80159e0:	73bb      	strb	r3, [r7, #14]
 80159e2:	e049      	b.n	8015a78 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80159e4:	2300      	movs	r3, #0
 80159e6:	737b      	strb	r3, [r7, #13]
 80159e8:	e03d      	b.n	8015a66 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80159ea:	7bbb      	ldrb	r3, [r7, #14]
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	4413      	add	r3, r2
 80159f2:	881b      	ldrh	r3, [r3, #0]
 80159f4:	461a      	mov	r2, r3
 80159f6:	7b7b      	ldrb	r3, [r7, #13]
 80159f8:	fa42 f303 	asr.w	r3, r2, r3
 80159fc:	f003 0301 	and.w	r3, r3, #1
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d02d      	beq.n	8015a60 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a04:	7bfa      	ldrb	r2, [r7, #15]
 8015a06:	7b7b      	ldrb	r3, [r7, #13]
 8015a08:	4413      	add	r3, r2
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	005b      	lsls	r3, r3, #1
 8015a10:	4413      	add	r3, r2
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	461a      	mov	r2, r3
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	4413      	add	r3, r2
 8015a1a:	7a1b      	ldrb	r3, [r3, #8]
 8015a1c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015a20:	b25b      	sxtb	r3, r3
 8015a22:	f003 030f 	and.w	r3, r3, #15
 8015a26:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015a28:	7bfa      	ldrb	r2, [r7, #15]
 8015a2a:	7b7b      	ldrb	r3, [r7, #13]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	461a      	mov	r2, r3
 8015a30:	4613      	mov	r3, r2
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	4413      	add	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	461a      	mov	r2, r3
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	4413      	add	r3, r2
 8015a3e:	7a1b      	ldrb	r3, [r3, #8]
 8015a40:	f343 1303 	sbfx	r3, r3, #4, #4
 8015a44:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a46:	f003 030f 	and.w	r3, r3, #15
 8015a4a:	b25a      	sxtb	r2, r3
 8015a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f81a 	bl	8015a8a <RegionCommonValueInRange>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d101      	bne.n	8015a60 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e010      	b.n	8015a82 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015a60:	7b7b      	ldrb	r3, [r7, #13]
 8015a62:	3301      	adds	r3, #1
 8015a64:	737b      	strb	r3, [r7, #13]
 8015a66:	7b7b      	ldrb	r3, [r7, #13]
 8015a68:	2b0f      	cmp	r3, #15
 8015a6a:	d9be      	bls.n	80159ea <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015a6c:	7bfb      	ldrb	r3, [r7, #15]
 8015a6e:	3310      	adds	r3, #16
 8015a70:	73fb      	strb	r3, [r7, #15]
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	3301      	adds	r3, #1
 8015a76:	73bb      	strb	r3, [r7, #14]
 8015a78:	7bfa      	ldrb	r2, [r7, #15]
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d3b1      	bcc.n	80159e4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3710      	adds	r7, #16
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015a8a:	b480      	push	{r7}
 8015a8c:	b083      	sub	sp, #12
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	4603      	mov	r3, r0
 8015a92:	71fb      	strb	r3, [r7, #7]
 8015a94:	460b      	mov	r3, r1
 8015a96:	71bb      	strb	r3, [r7, #6]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015a9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015aa0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	db07      	blt.n	8015ab8 <RegionCommonValueInRange+0x2e>
 8015aa8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015aac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	dc01      	bgt.n	8015ab8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	e000      	b.n	8015aba <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ab8:	2300      	movs	r3, #0
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	370c      	adds	r7, #12
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bc80      	pop	{r7}
 8015ac2:	4770      	bx	lr

08015ac4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	b085      	sub	sp, #20
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	460b      	mov	r3, r1
 8015ace:	70fb      	strb	r3, [r7, #3]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015ad4:	78fb      	ldrb	r3, [r7, #3]
 8015ad6:	091b      	lsrs	r3, r3, #4
 8015ad8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015ada:	78bb      	ldrb	r3, [r7, #2]
 8015adc:	091b      	lsrs	r3, r3, #4
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	7bfa      	ldrb	r2, [r7, #15]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d803      	bhi.n	8015aee <RegionCommonChanDisable+0x2a>
 8015ae6:	78fa      	ldrb	r2, [r7, #3]
 8015ae8:	78bb      	ldrb	r3, [r7, #2]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d301      	bcc.n	8015af2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015aee:	2300      	movs	r3, #0
 8015af0:	e017      	b.n	8015b22 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015af2:	7bfb      	ldrb	r3, [r7, #15]
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	4413      	add	r3, r2
 8015afa:	881b      	ldrh	r3, [r3, #0]
 8015afc:	b21a      	sxth	r2, r3
 8015afe:	78fb      	ldrb	r3, [r7, #3]
 8015b00:	f003 030f 	and.w	r3, r3, #15
 8015b04:	2101      	movs	r1, #1
 8015b06:	fa01 f303 	lsl.w	r3, r1, r3
 8015b0a:	b21b      	sxth	r3, r3
 8015b0c:	43db      	mvns	r3, r3
 8015b0e:	b21b      	sxth	r3, r3
 8015b10:	4013      	ands	r3, r2
 8015b12:	b219      	sxth	r1, r3
 8015b14:	7bfb      	ldrb	r3, [r7, #15]
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	b28a      	uxth	r2, r1
 8015b1e:	801a      	strh	r2, [r3, #0]

    return true;
 8015b20:	2301      	movs	r3, #1
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3714      	adds	r7, #20
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bc80      	pop	{r7}
 8015b2a:	4770      	bx	lr

08015b2c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	460b      	mov	r3, r1
 8015b36:	70fb      	strb	r3, [r7, #3]
 8015b38:	4613      	mov	r3, r2
 8015b3a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d101      	bne.n	8015b4a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015b46:	2300      	movs	r3, #0
 8015b48:	e018      	b.n	8015b7c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b4a:	78fb      	ldrb	r3, [r7, #3]
 8015b4c:	73bb      	strb	r3, [r7, #14]
 8015b4e:	e010      	b.n	8015b72 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015b50:	7bbb      	ldrb	r3, [r7, #14]
 8015b52:	005b      	lsls	r3, r3, #1
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	4413      	add	r3, r2
 8015b58:	881b      	ldrh	r3, [r3, #0]
 8015b5a:	2110      	movs	r1, #16
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7ff fef9 	bl	8015954 <CountChannels>
 8015b62:	4603      	mov	r3, r0
 8015b64:	461a      	mov	r2, r3
 8015b66:	7bfb      	ldrb	r3, [r7, #15]
 8015b68:	4413      	add	r3, r2
 8015b6a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	3301      	adds	r3, #1
 8015b70:	73bb      	strb	r3, [r7, #14]
 8015b72:	7bba      	ldrb	r2, [r7, #14]
 8015b74:	78bb      	ldrb	r3, [r7, #2]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d3ea      	bcc.n	8015b50 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3710      	adds	r7, #16
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015b84:	b480      	push	{r7}
 8015b86:	b087      	sub	sp, #28
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	60f8      	str	r0, [r7, #12]
 8015b8c:	60b9      	str	r1, [r7, #8]
 8015b8e:	4613      	mov	r3, r2
 8015b90:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d016      	beq.n	8015bc6 <RegionCommonChanMaskCopy+0x42>
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d013      	beq.n	8015bc6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	75fb      	strb	r3, [r7, #23]
 8015ba2:	e00c      	b.n	8015bbe <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	68ba      	ldr	r2, [r7, #8]
 8015baa:	441a      	add	r2, r3
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	005b      	lsls	r3, r3, #1
 8015bb0:	68f9      	ldr	r1, [r7, #12]
 8015bb2:	440b      	add	r3, r1
 8015bb4:	8812      	ldrh	r2, [r2, #0]
 8015bb6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015bb8:	7dfb      	ldrb	r3, [r7, #23]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	75fb      	strb	r3, [r7, #23]
 8015bbe:	7dfa      	ldrb	r2, [r7, #23]
 8015bc0:	79fb      	ldrb	r3, [r7, #7]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d3ee      	bcc.n	8015ba4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015bc6:	bf00      	nop
 8015bc8:	371c      	adds	r7, #28
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bc80      	pop	{r7}
 8015bce:	4770      	bx	lr

08015bd0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015bd0:	b082      	sub	sp, #8
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b086      	sub	sp, #24
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	60f8      	str	r0, [r7, #12]
 8015bda:	60b9      	str	r1, [r7, #8]
 8015bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8015bde:	4613      	mov	r3, r2
 8015be0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015be2:	79f9      	ldrb	r1, [r7, #7]
 8015be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015be8:	cb0c      	ldmia	r3, {r2, r3}
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f7ff fd8b 	bl	8015706 <GetDutyCycle>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	68da      	ldr	r2, [r3, #12]
 8015bf8:	8afb      	ldrh	r3, [r7, #22]
 8015bfa:	68b9      	ldr	r1, [r7, #8]
 8015bfc:	fb01 f303 	mul.w	r3, r1, r3
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d909      	bls.n	8015c18 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	68da      	ldr	r2, [r3, #12]
 8015c08:	8afb      	ldrh	r3, [r7, #22]
 8015c0a:	68b9      	ldr	r1, [r7, #8]
 8015c0c:	fb01 f303 	mul.w	r3, r1, r3
 8015c10:	1ad2      	subs	r2, r2, r3
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015c16:	e002      	b.n	8015c1e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	60da      	str	r2, [r3, #12]
}
 8015c1e:	bf00      	nop
 8015c20:	3718      	adds	r7, #24
 8015c22:	46bd      	mov	sp, r7
 8015c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c28:	b002      	add	sp, #8
 8015c2a:	4770      	bx	lr

08015c2c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c2e:	b08f      	sub	sp, #60	; 0x3c
 8015c30:	af04      	add	r7, sp, #16
 8015c32:	6039      	str	r1, [r7, #0]
 8015c34:	4611      	mov	r1, r2
 8015c36:	461a      	mov	r2, r3
 8015c38:	4603      	mov	r3, r0
 8015c3a:	71fb      	strb	r3, [r7, #7]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	71bb      	strb	r3, [r7, #6]
 8015c40:	4613      	mov	r3, r2
 8015c42:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015c44:	f04f 33ff 	mov.w	r3, #4294967295
 8015c48:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015c4a:	f007 fa79 	bl	801d140 <UTIL_TIMER_GetCurrentTime>
 8015c4e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015c50:	2300      	movs	r3, #0
 8015c52:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015c54:	2301      	movs	r3, #1
 8015c56:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015c5e:	2300      	movs	r3, #0
 8015c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015c64:	e0ba      	b.n	8015ddc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015c66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c6a:	4613      	mov	r3, r2
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	4413      	add	r3, r2
 8015c70:	00db      	lsls	r3, r3, #3
 8015c72:	461a      	mov	r2, r3
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	189c      	adds	r4, r3, r2
 8015c78:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015c7c:	797a      	ldrb	r2, [r7, #5]
 8015c7e:	79fd      	ldrb	r5, [r7, #7]
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	9302      	str	r3, [sp, #8]
 8015c84:	46ec      	mov	ip, sp
 8015c86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c92:	4633      	mov	r3, r6
 8015c94:	4629      	mov	r1, r5
 8015c96:	4620      	mov	r0, r4
 8015c98:	f7ff fe22 	bl	80158e0 <UpdateTimeCredits>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015ca0:	8afa      	ldrh	r2, [r7, #22]
 8015ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ca4:	fb02 f303 	mul.w	r3, r2, r3
 8015ca8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015caa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015cae:	4613      	mov	r3, r2
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	4413      	add	r3, r2
 8015cb4:	00db      	lsls	r3, r3, #3
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	4413      	add	r3, r2
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	69ba      	ldr	r2, [r7, #24]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d308      	bcc.n	8015cd6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015cc4:	797b      	ldrb	r3, [r7, #5]
 8015cc6:	f083 0301 	eor.w	r3, r3, #1
 8015cca:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d013      	beq.n	8015cf8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015cd0:	79fb      	ldrb	r3, [r7, #7]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d010      	beq.n	8015cf8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015cd6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015cda:	4613      	mov	r3, r2
 8015cdc:	005b      	lsls	r3, r3, #1
 8015cde:	4413      	add	r3, r2
 8015ce0:	00db      	lsls	r3, r3, #3
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	2201      	movs	r2, #1
 8015cea:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015cf6:	e06c      	b.n	8015dd2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015cf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	4413      	add	r3, r2
 8015d02:	00db      	lsls	r3, r3, #3
 8015d04:	461a      	mov	r2, r3
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	4413      	add	r3, r2
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015d0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d12:	4613      	mov	r3, r2
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	4413      	add	r3, r2
 8015d18:	00db      	lsls	r3, r3, #3
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	4413      	add	r3, r2
 8015d20:	691b      	ldr	r3, [r3, #16]
 8015d22:	69ba      	ldr	r2, [r7, #24]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d215      	bcs.n	8015d54 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015d28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4413      	add	r3, r2
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	461a      	mov	r2, r3
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	4413      	add	r3, r2
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	69ba      	ldr	r2, [r7, #24]
 8015d3e:	1ad3      	subs	r3, r2, r3
 8015d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d42:	4293      	cmp	r3, r2
 8015d44:	bf28      	it	cs
 8015d46:	4613      	movcs	r3, r2
 8015d48:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d4e:	3301      	adds	r3, #1
 8015d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015d54:	79fb      	ldrb	r3, [r7, #7]
 8015d56:	f083 0301 	eor.w	r3, r3, #1
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d038      	beq.n	8015dd2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015d60:	2300      	movs	r3, #0
 8015d62:	60fb      	str	r3, [r7, #12]
 8015d64:	2300      	movs	r3, #0
 8015d66:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015d68:	8afb      	ldrh	r3, [r7, #22]
 8015d6a:	2b64      	cmp	r3, #100	; 0x64
 8015d6c:	d103      	bne.n	8015d76 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015d6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015d72:	60fb      	str	r3, [r7, #12]
 8015d74:	e009      	b.n	8015d8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015d76:	8afb      	ldrh	r3, [r7, #22]
 8015d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015d7c:	d103      	bne.n	8015d86 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015d7e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015d82:	60fb      	str	r3, [r7, #12]
 8015d84:	e001      	b.n	8015d8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015d86:	4b1e      	ldr	r3, [pc, #120]	; (8015e00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d88:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d8c:	4a1c      	ldr	r2, [pc, #112]	; (8015e00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d90e      	bls.n	8015db0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015d92:	68fa      	ldr	r2, [r7, #12]
 8015d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d96:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015d9a:	3b30      	subs	r3, #48	; 0x30
 8015d9c:	4919      	ldr	r1, [pc, #100]	; (8015e04 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015d9e:	fba1 1303 	umull	r1, r3, r1, r3
 8015da2:	0c1b      	lsrs	r3, r3, #16
 8015da4:	3301      	adds	r3, #1
 8015da6:	4918      	ldr	r1, [pc, #96]	; (8015e08 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015da8:	fb01 f303 	mul.w	r3, r1, r3
 8015dac:	4413      	add	r3, r2
 8015dae:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015db0:	f107 000c 	add.w	r0, r7, #12
 8015db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dba:	f107 020c 	add.w	r2, r7, #12
 8015dbe:	ca06      	ldmia	r2, {r1, r2}
 8015dc0:	f006 fecb 	bl	801cb5a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015dc4:	f107 030c 	add.w	r3, r7, #12
 8015dc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dcc:	f006 ff84 	bl	801ccd8 <SysTimeToMs>
 8015dd0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015dd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015ddc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015de0:	79bb      	ldrb	r3, [r7, #6]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	f4ff af3f 	bcc.w	8015c66 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8015de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d102      	bne.n	8015df6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015df0:	f04f 33ff 	mov.w	r3, #4294967295
 8015df4:	e000      	b.n	8015df8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	372c      	adds	r7, #44	; 0x2c
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e00:	0001ec30 	.word	0x0001ec30
 8015e04:	c22e4507 	.word	0xc22e4507
 8015e08:	00015180 	.word	0x00015180

08015e0c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015e0c:	b480      	push	{r7}
 8015e0e:	b085      	sub	sp, #20
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015e16:	2300      	movs	r3, #0
 8015e18:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b03      	cmp	r3, #3
 8015e20:	d13f      	bne.n	8015ea2 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	3301      	adds	r3, #1
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	b25a      	sxtb	r2, r3
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e34:	f003 030f 	and.w	r3, r3, #15
 8015e38:	b25a      	sxtb	r2, r3
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	091b      	lsrs	r3, r3, #4
 8015e48:	b2db      	uxtb	r3, r3
 8015e4a:	b25a      	sxtb	r2, r3
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	3302      	adds	r3, #2
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	889b      	ldrh	r3, [r3, #4]
 8015e60:	b21a      	sxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	3303      	adds	r3, #3
 8015e66:	781b      	ldrb	r3, [r3, #0]
 8015e68:	021b      	lsls	r3, r3, #8
 8015e6a:	b21b      	sxth	r3, r3
 8015e6c:	4313      	orrs	r3, r2
 8015e6e:	b21b      	sxth	r3, r3
 8015e70:	b29a      	uxth	r2, r3
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	791a      	ldrb	r2, [r3, #4]
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	091b      	lsrs	r3, r3, #4
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	f003 0307 	and.w	r3, r3, #7
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	f003 030f 	and.w	r3, r3, #15
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015e9e:	2305      	movs	r3, #5
 8015ea0:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3714      	adds	r7, #20
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bc80      	pop	{r7}
 8015eac:	4770      	bx	lr

08015eae <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015eae:	b5b0      	push	{r4, r5, r7, lr}
 8015eb0:	b088      	sub	sp, #32
 8015eb2:	af02      	add	r7, sp, #8
 8015eb4:	60f8      	str	r0, [r7, #12]
 8015eb6:	60b9      	str	r1, [r7, #8]
 8015eb8:	607a      	str	r2, [r7, #4]
 8015eba:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	791b      	ldrb	r3, [r3, #4]
 8015ec0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	799b      	ldrb	r3, [r3, #6]
 8015ec6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	79db      	ldrb	r3, [r3, #7]
 8015ecc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	7a1b      	ldrb	r3, [r3, #8]
 8015ed2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	795b      	ldrb	r3, [r3, #5]
 8015ed8:	f083 0301 	eor.w	r3, r3, #1
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d008      	beq.n	8015ef4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	7adb      	ldrb	r3, [r3, #11]
 8015ee6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	7a5b      	ldrb	r3, [r3, #9]
 8015eec:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	7a9b      	ldrb	r3, [r3, #10]
 8015ef2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015ef4:	7dfb      	ldrb	r3, [r7, #23]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d03a      	beq.n	8015f70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	7b18      	ldrb	r0, [r3, #12]
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	6919      	ldr	r1, [r3, #16]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015f0e:	68fa      	ldr	r2, [r7, #12]
 8015f10:	6992      	ldr	r2, [r2, #24]
 8015f12:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015f16:	9201      	str	r2, [sp, #4]
 8015f18:	9300      	str	r3, [sp, #0]
 8015f1a:	462b      	mov	r3, r5
 8015f1c:	4622      	mov	r2, r4
 8015f1e:	f7ff fd42 	bl	80159a6 <RegionCommonChanVerifyDr>
 8015f22:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015f24:	f083 0301 	eor.w	r3, r3, #1
 8015f28:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d003      	beq.n	8015f36 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8015f2e:	7dfb      	ldrb	r3, [r7, #23]
 8015f30:	f023 0302 	bic.w	r3, r3, #2
 8015f34:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015f42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ff fd9f 	bl	8015a8a <RegionCommonValueInRange>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10e      	bne.n	8015f70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015f58:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	da03      	bge.n	8015f68 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	7f5b      	ldrb	r3, [r3, #29]
 8015f64:	757b      	strb	r3, [r7, #21]
 8015f66:	e003      	b.n	8015f70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015f68:	7dfb      	ldrb	r3, [r7, #23]
 8015f6a:	f023 0304 	bic.w	r3, r3, #4
 8015f6e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015f70:	7dfb      	ldrb	r3, [r7, #23]
 8015f72:	2b07      	cmp	r3, #7
 8015f74:	d105      	bne.n	8015f82 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8015f76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d101      	bne.n	8015f82 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8015f7e:	2301      	movs	r3, #1
 8015f80:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	7dba      	ldrb	r2, [r7, #22]
 8015f86:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	7d7a      	ldrb	r2, [r7, #21]
 8015f8c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015f8e:	7d3a      	ldrb	r2, [r7, #20]
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	701a      	strb	r2, [r3, #0]

    return status;
 8015f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3718      	adds	r7, #24
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015fa0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	6039      	str	r1, [r7, #0]
 8015faa:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015fac:	79fb      	ldrb	r3, [r7, #7]
 8015fae:	4a06      	ldr	r2, [pc, #24]	; (8015fc8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	370c      	adds	r7, #12
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bc80      	pop	{r7}
 8015fc4:	4770      	bx	lr
 8015fc6:	bf00      	nop
 8015fc8:	000f4240 	.word	0x000f4240

08015fcc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015fcc:	b480      	push	{r7}
 8015fce:	b083      	sub	sp, #12
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015fd6:	79fb      	ldrb	r3, [r7, #7]
 8015fd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015fdc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bc80      	pop	{r7}
 8015fe8:	4770      	bx	lr
	...

08015fec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015fec:	b480      	push	{r7}
 8015fee:	b085      	sub	sp, #20
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	607a      	str	r2, [r7, #4]
 8015ff6:	603b      	str	r3, [r7, #0]
 8015ff8:	460b      	mov	r3, r1
 8015ffa:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015ffc:	7afa      	ldrb	r2, [r7, #11]
 8015ffe:	7afb      	ldrb	r3, [r7, #11]
 8016000:	3b04      	subs	r3, #4
 8016002:	4619      	mov	r1, r3
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	fb03 f101 	mul.w	r1, r3, r1
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016010:	fb00 f303 	mul.w	r3, r0, r3
 8016014:	440b      	add	r3, r1
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	2b00      	cmp	r3, #0
 801601a:	d013      	beq.n	8016044 <RegionCommonComputeRxWindowParameters+0x58>
 801601c:	7afb      	ldrb	r3, [r7, #11]
 801601e:	3b04      	subs	r3, #4
 8016020:	4619      	mov	r1, r3
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	fb03 f101 	mul.w	r1, r3, r1
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801602e:	fb00 f303 	mul.w	r3, r0, r3
 8016032:	440b      	add	r3, r1
 8016034:	0059      	lsls	r1, r3, #1
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	440b      	add	r3, r1
 801603a:	1e59      	subs	r1, r3, #1
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016042:	e00f      	b.n	8016064 <RegionCommonComputeRxWindowParameters+0x78>
 8016044:	7afb      	ldrb	r3, [r7, #11]
 8016046:	3b04      	subs	r3, #4
 8016048:	4619      	mov	r1, r3
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	fb03 f101 	mul.w	r1, r3, r1
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016056:	fb00 f303 	mul.w	r3, r0, r3
 801605a:	440b      	add	r3, r1
 801605c:	0059      	lsls	r1, r3, #1
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	fbb1 f3f3 	udiv	r3, r1, r3
 8016064:	429a      	cmp	r2, r3
 8016066:	bf38      	it	cc
 8016068:	461a      	movcc	r2, r3
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	4619      	mov	r1, r3
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	68fa      	ldr	r2, [r7, #12]
 801607a:	fb02 f303 	mul.w	r3, r2, r3
 801607e:	2b00      	cmp	r3, #0
 8016080:	d007      	beq.n	8016092 <RegionCommonComputeRxWindowParameters+0xa6>
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	68fa      	ldr	r2, [r7, #12]
 8016088:	fb02 f303 	mul.w	r3, r2, r3
 801608c:	3301      	adds	r3, #1
 801608e:	085b      	lsrs	r3, r3, #1
 8016090:	e005      	b.n	801609e <RegionCommonComputeRxWindowParameters+0xb2>
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	68fa      	ldr	r2, [r7, #12]
 8016098:	fb02 f303 	mul.w	r3, r2, r3
 801609c:	085b      	lsrs	r3, r3, #1
 801609e:	1acb      	subs	r3, r1, r3
 80160a0:	683a      	ldr	r2, [r7, #0]
 80160a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160a6:	fb01 f202 	mul.w	r2, r1, r2
 80160aa:	1a9b      	subs	r3, r3, r2
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	dd27      	ble.n	8016100 <RegionCommonComputeRxWindowParameters+0x114>
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	4619      	mov	r1, r3
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	fb02 f303 	mul.w	r3, r2, r3
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d007      	beq.n	80160d4 <RegionCommonComputeRxWindowParameters+0xe8>
 80160c4:	69bb      	ldr	r3, [r7, #24]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	fb02 f303 	mul.w	r3, r2, r3
 80160ce:	3301      	adds	r3, #1
 80160d0:	085b      	lsrs	r3, r3, #1
 80160d2:	e005      	b.n	80160e0 <RegionCommonComputeRxWindowParameters+0xf4>
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	fb02 f303 	mul.w	r3, r2, r3
 80160de:	085b      	lsrs	r3, r3, #1
 80160e0:	1acb      	subs	r3, r1, r3
 80160e2:	683a      	ldr	r2, [r7, #0]
 80160e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160e8:	fb01 f202 	mul.w	r2, r1, r2
 80160ec:	1a9b      	subs	r3, r3, r2
 80160ee:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80160f2:	4a19      	ldr	r2, [pc, #100]	; (8016158 <RegionCommonComputeRxWindowParameters+0x16c>)
 80160f4:	fb82 1203 	smull	r1, r2, r2, r3
 80160f8:	1192      	asrs	r2, r2, #6
 80160fa:	17db      	asrs	r3, r3, #31
 80160fc:	1ad3      	subs	r3, r2, r3
 80160fe:	e024      	b.n	801614a <RegionCommonComputeRxWindowParameters+0x15e>
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4619      	mov	r1, r3
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	68fa      	ldr	r2, [r7, #12]
 801610c:	fb02 f303 	mul.w	r3, r2, r3
 8016110:	2b00      	cmp	r3, #0
 8016112:	d007      	beq.n	8016124 <RegionCommonComputeRxWindowParameters+0x138>
 8016114:	69bb      	ldr	r3, [r7, #24]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	68fa      	ldr	r2, [r7, #12]
 801611a:	fb02 f303 	mul.w	r3, r2, r3
 801611e:	3301      	adds	r3, #1
 8016120:	085b      	lsrs	r3, r3, #1
 8016122:	e005      	b.n	8016130 <RegionCommonComputeRxWindowParameters+0x144>
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	68fa      	ldr	r2, [r7, #12]
 801612a:	fb02 f303 	mul.w	r3, r2, r3
 801612e:	085b      	lsrs	r3, r3, #1
 8016130:	1acb      	subs	r3, r1, r3
 8016132:	683a      	ldr	r2, [r7, #0]
 8016134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016138:	fb01 f202 	mul.w	r2, r1, r2
 801613c:	1a9b      	subs	r3, r3, r2
 801613e:	4a06      	ldr	r2, [pc, #24]	; (8016158 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016140:	fb82 1203 	smull	r1, r2, r2, r3
 8016144:	1192      	asrs	r2, r2, #6
 8016146:	17db      	asrs	r3, r3, #31
 8016148:	1ad3      	subs	r3, r2, r3
 801614a:	69fa      	ldr	r2, [r7, #28]
 801614c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801614e:	bf00      	nop
 8016150:	3714      	adds	r7, #20
 8016152:	46bd      	mov	sp, r7
 8016154:	bc80      	pop	{r7}
 8016156:	4770      	bx	lr
 8016158:	10624dd3 	.word	0x10624dd3

0801615c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b086      	sub	sp, #24
 8016160:	af00      	add	r7, sp, #0
 8016162:	4603      	mov	r3, r0
 8016164:	60b9      	str	r1, [r7, #8]
 8016166:	607a      	str	r2, [r7, #4]
 8016168:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801616a:	2300      	movs	r3, #0
 801616c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801616e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	4618      	mov	r0, r3
 8016176:	f7ea fb2d 	bl	80007d4 <__aeabi_ui2f>
 801617a:	4603      	mov	r3, r0
 801617c:	4619      	mov	r1, r3
 801617e:	68b8      	ldr	r0, [r7, #8]
 8016180:	f7ea fa76 	bl	8000670 <__aeabi_fsub>
 8016184:	4603      	mov	r3, r0
 8016186:	6879      	ldr	r1, [r7, #4]
 8016188:	4618      	mov	r0, r3
 801618a:	f7ea fa71 	bl	8000670 <__aeabi_fsub>
 801618e:	4603      	mov	r3, r0
 8016190:	4618      	mov	r0, r3
 8016192:	f7ea f961 	bl	8000458 <__aeabi_f2d>
 8016196:	4602      	mov	r2, r0
 8016198:	460b      	mov	r3, r1
 801619a:	4610      	mov	r0, r2
 801619c:	4619      	mov	r1, r3
 801619e:	f007 fb37 	bl	801d810 <floor>
 80161a2:	4602      	mov	r2, r0
 80161a4:	460b      	mov	r3, r1
 80161a6:	4610      	mov	r0, r2
 80161a8:	4619      	mov	r1, r3
 80161aa:	f7ea fa35 	bl	8000618 <__aeabi_d2iz>
 80161ae:	4603      	mov	r3, r0
 80161b0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80161b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3718      	adds	r7, #24
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}

080161be <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80161be:	b590      	push	{r4, r7, lr}
 80161c0:	b087      	sub	sp, #28
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	60f8      	str	r0, [r7, #12]
 80161c6:	60b9      	str	r1, [r7, #8]
 80161c8:	607a      	str	r2, [r7, #4]
 80161ca:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80161cc:	2300      	movs	r3, #0
 80161ce:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80161d0:	2300      	movs	r3, #0
 80161d2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80161d4:	2300      	movs	r3, #0
 80161d6:	757b      	strb	r3, [r7, #21]
 80161d8:	2300      	movs	r3, #0
 80161da:	753b      	strb	r3, [r7, #20]
 80161dc:	e09c      	b.n	8016318 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80161de:	2300      	movs	r3, #0
 80161e0:	74fb      	strb	r3, [r7, #19]
 80161e2:	e08f      	b.n	8016304 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	685a      	ldr	r2, [r3, #4]
 80161e8:	7d3b      	ldrb	r3, [r7, #20]
 80161ea:	005b      	lsls	r3, r3, #1
 80161ec:	4413      	add	r3, r2
 80161ee:	881b      	ldrh	r3, [r3, #0]
 80161f0:	461a      	mov	r2, r3
 80161f2:	7cfb      	ldrb	r3, [r7, #19]
 80161f4:	fa42 f303 	asr.w	r3, r2, r3
 80161f8:	f003 0301 	and.w	r3, r3, #1
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d07e      	beq.n	80162fe <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	689a      	ldr	r2, [r3, #8]
 8016204:	7d79      	ldrb	r1, [r7, #21]
 8016206:	7cfb      	ldrb	r3, [r7, #19]
 8016208:	440b      	add	r3, r1
 801620a:	4619      	mov	r1, r3
 801620c:	460b      	mov	r3, r1
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	440b      	add	r3, r1
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4413      	add	r3, r2
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d06b      	beq.n	80162f4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f083 0301 	eor.w	r3, r3, #1
 8016224:	b2db      	uxtb	r3, r3
 8016226:	2b00      	cmp	r3, #0
 8016228:	d011      	beq.n	801624e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801622e:	2b00      	cmp	r3, #0
 8016230:	d00d      	beq.n	801624e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	695a      	ldr	r2, [r3, #20]
 8016236:	7d3b      	ldrb	r3, [r7, #20]
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	4413      	add	r3, r2
 801623c:	881b      	ldrh	r3, [r3, #0]
 801623e:	461a      	mov	r2, r3
 8016240:	7cfb      	ldrb	r3, [r7, #19]
 8016242:	fa42 f303 	asr.w	r3, r2, r3
 8016246:	f003 0301 	and.w	r3, r3, #1
 801624a:	2b00      	cmp	r3, #0
 801624c:	d054      	beq.n	80162f8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	785b      	ldrb	r3, [r3, #1]
 8016252:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	689a      	ldr	r2, [r3, #8]
 8016258:	7d79      	ldrb	r1, [r7, #21]
 801625a:	7cfb      	ldrb	r3, [r7, #19]
 801625c:	440b      	add	r3, r1
 801625e:	4619      	mov	r1, r3
 8016260:	460b      	mov	r3, r1
 8016262:	005b      	lsls	r3, r3, #1
 8016264:	440b      	add	r3, r1
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	4413      	add	r3, r2
 801626a:	7a1b      	ldrb	r3, [r3, #8]
 801626c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016270:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016272:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	689a      	ldr	r2, [r3, #8]
 8016278:	7d79      	ldrb	r1, [r7, #21]
 801627a:	7cfb      	ldrb	r3, [r7, #19]
 801627c:	440b      	add	r3, r1
 801627e:	4619      	mov	r1, r3
 8016280:	460b      	mov	r3, r1
 8016282:	005b      	lsls	r3, r3, #1
 8016284:	440b      	add	r3, r1
 8016286:	009b      	lsls	r3, r3, #2
 8016288:	4413      	add	r3, r2
 801628a:	7a1b      	ldrb	r3, [r3, #8]
 801628c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016290:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016292:	461a      	mov	r2, r3
 8016294:	4621      	mov	r1, r4
 8016296:	f7ff fbf8 	bl	8015a8a <RegionCommonValueInRange>
 801629a:	4603      	mov	r3, r0
 801629c:	2b00      	cmp	r3, #0
 801629e:	d02d      	beq.n	80162fc <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	68da      	ldr	r2, [r3, #12]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6899      	ldr	r1, [r3, #8]
 80162a8:	7d78      	ldrb	r0, [r7, #21]
 80162aa:	7cfb      	ldrb	r3, [r7, #19]
 80162ac:	4403      	add	r3, r0
 80162ae:	4618      	mov	r0, r3
 80162b0:	4603      	mov	r3, r0
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	4403      	add	r3, r0
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	440b      	add	r3, r1
 80162ba:	7a5b      	ldrb	r3, [r3, #9]
 80162bc:	4619      	mov	r1, r3
 80162be:	460b      	mov	r3, r1
 80162c0:	005b      	lsls	r3, r3, #1
 80162c2:	440b      	add	r3, r1
 80162c4:	00db      	lsls	r3, r3, #3
 80162c6:	4413      	add	r3, r2
 80162c8:	7d1b      	ldrb	r3, [r3, #20]
 80162ca:	f083 0301 	eor.w	r3, r3, #1
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d003      	beq.n	80162dc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80162d4:	7dbb      	ldrb	r3, [r7, #22]
 80162d6:	3301      	adds	r3, #1
 80162d8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80162da:	e010      	b.n	80162fe <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80162dc:	7dfb      	ldrb	r3, [r7, #23]
 80162de:	1c5a      	adds	r2, r3, #1
 80162e0:	75fa      	strb	r2, [r7, #23]
 80162e2:	461a      	mov	r2, r3
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	4413      	add	r3, r2
 80162e8:	7d79      	ldrb	r1, [r7, #21]
 80162ea:	7cfa      	ldrb	r2, [r7, #19]
 80162ec:	440a      	add	r2, r1
 80162ee:	b2d2      	uxtb	r2, r2
 80162f0:	701a      	strb	r2, [r3, #0]
 80162f2:	e004      	b.n	80162fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80162f4:	bf00      	nop
 80162f6:	e002      	b.n	80162fe <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80162f8:	bf00      	nop
 80162fa:	e000      	b.n	80162fe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80162fc:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80162fe:	7cfb      	ldrb	r3, [r7, #19]
 8016300:	3301      	adds	r3, #1
 8016302:	74fb      	strb	r3, [r7, #19]
 8016304:	7cfb      	ldrb	r3, [r7, #19]
 8016306:	2b0f      	cmp	r3, #15
 8016308:	f67f af6c 	bls.w	80161e4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801630c:	7d7b      	ldrb	r3, [r7, #21]
 801630e:	3310      	adds	r3, #16
 8016310:	757b      	strb	r3, [r7, #21]
 8016312:	7d3b      	ldrb	r3, [r7, #20]
 8016314:	3301      	adds	r3, #1
 8016316:	753b      	strb	r3, [r7, #20]
 8016318:	7d7b      	ldrb	r3, [r7, #21]
 801631a:	b29a      	uxth	r2, r3
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	8a1b      	ldrh	r3, [r3, #16]
 8016320:	429a      	cmp	r2, r3
 8016322:	f4ff af5c 	bcc.w	80161de <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	7dfa      	ldrb	r2, [r7, #23]
 801632a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	7dba      	ldrb	r2, [r7, #22]
 8016330:	701a      	strb	r2, [r3, #0]
}
 8016332:	bf00      	nop
 8016334:	371c      	adds	r7, #28
 8016336:	46bd      	mov	sp, r7
 8016338:	bd90      	pop	{r4, r7, pc}

0801633a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801633a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801633c:	b08b      	sub	sp, #44	; 0x2c
 801633e:	af04      	add	r7, sp, #16
 8016340:	60f8      	str	r0, [r7, #12]
 8016342:	60b9      	str	r1, [r7, #8]
 8016344:	607a      	str	r2, [r7, #4]
 8016346:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	4618      	mov	r0, r3
 801634e:	f006 ff09 	bl	801d164 <UTIL_TIMER_GetElapsedTime>
 8016352:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	1ad2      	subs	r2, r2, r3
 801635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801635e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016362:	2201      	movs	r2, #1
 8016364:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	2200      	movs	r2, #0
 801636a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d004      	beq.n	801637e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016378:	697a      	ldr	r2, [r7, #20]
 801637a:	429a      	cmp	r2, r3
 801637c:	d32b      	bcc.n	80163d6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	2200      	movs	r2, #0
 8016382:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	69db      	ldr	r3, [r3, #28]
 8016388:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801638e:	68dd      	ldr	r5, [r3, #12]
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	7a5e      	ldrb	r6, [r3, #9]
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	f893 c008 	ldrb.w	ip, [r3, #8]
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	7d1b      	ldrb	r3, [r3, #20]
 801639e:	68fa      	ldr	r2, [r7, #12]
 80163a0:	6992      	ldr	r2, [r2, #24]
 80163a2:	9203      	str	r2, [sp, #12]
 80163a4:	68fa      	ldr	r2, [r7, #12]
 80163a6:	f10d 0e04 	add.w	lr, sp, #4
 80163aa:	320c      	adds	r2, #12
 80163ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80163b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	4663      	mov	r3, ip
 80163b8:	4632      	mov	r2, r6
 80163ba:	4629      	mov	r1, r5
 80163bc:	4620      	mov	r0, r4
 80163be:	f7ff fc35 	bl	8015c2c <RegionCommonUpdateBandTimeOff>
 80163c2:	4602      	mov	r2, r0
 80163c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	69d8      	ldr	r0, [r3, #28]
 80163cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ce:	683a      	ldr	r2, [r7, #0]
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	f7ff fef4 	bl	80161be <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d004      	beq.n	80163e8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80163de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e0:	2200      	movs	r2, #0
 80163e2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80163e4:	2300      	movs	r3, #0
 80163e6:	e006      	b.n	80163f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80163e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d001      	beq.n	80163f4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80163f0:	230b      	movs	r3, #11
 80163f2:	e000      	b.n	80163f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80163f4:	230c      	movs	r3, #12
    }
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	371c      	adds	r7, #28
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163fe <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80163fe:	b5b0      	push	{r4, r5, r7, lr}
 8016400:	b086      	sub	sp, #24
 8016402:	af02      	add	r7, sp, #8
 8016404:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f993 2000 	ldrsb.w	r2, [r3]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016418:	429a      	cmp	r2, r3
 801641a:	d103      	bne.n	8016424 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016422:	e026      	b.n	8016472 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016424:	7bfb      	ldrb	r3, [r7, #15]
 8016426:	3b01      	subs	r3, #1
 8016428:	b2db      	uxtb	r3, r3
 801642a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016432:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016436:	429a      	cmp	r2, r3
 8016438:	d019      	beq.n	801646e <RegionCommonGetNextLowerTxDr+0x70>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	78d8      	ldrb	r0, [r3, #3]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6859      	ldr	r1, [r3, #4]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	6892      	ldr	r2, [r2, #8]
 8016452:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016456:	9201      	str	r2, [sp, #4]
 8016458:	9300      	str	r3, [sp, #0]
 801645a:	462b      	mov	r3, r5
 801645c:	4622      	mov	r2, r4
 801645e:	f7ff faa2 	bl	80159a6 <RegionCommonChanVerifyDr>
 8016462:	4603      	mov	r3, r0
 8016464:	f083 0301 	eor.w	r3, r3, #1
 8016468:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1da      	bne.n	8016424 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801646e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016472:	4618      	mov	r0, r3
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bdb0      	pop	{r4, r5, r7, pc}

0801647a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801647a:	b480      	push	{r7}
 801647c:	b083      	sub	sp, #12
 801647e:	af00      	add	r7, sp, #0
 8016480:	4603      	mov	r3, r0
 8016482:	460a      	mov	r2, r1
 8016484:	71fb      	strb	r3, [r7, #7]
 8016486:	4613      	mov	r3, r2
 8016488:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801648a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016492:	4293      	cmp	r3, r2
 8016494:	bfb8      	it	lt
 8016496:	4613      	movlt	r3, r2
 8016498:	b25b      	sxtb	r3, r3
}
 801649a:	4618      	mov	r0, r3
 801649c:	370c      	adds	r7, #12
 801649e:	46bd      	mov	sp, r7
 80164a0:	bc80      	pop	{r7}
 80164a2:	4770      	bx	lr

080164a4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	009b      	lsls	r3, r3, #2
 80164b2:	683a      	ldr	r2, [r7, #0]
 80164b4:	4413      	add	r3, r2
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4a07      	ldr	r2, [pc, #28]	; (80164d8 <RegionCommonGetBandwidth+0x34>)
 80164ba:	4293      	cmp	r3, r2
 80164bc:	d004      	beq.n	80164c8 <RegionCommonGetBandwidth+0x24>
 80164be:	4a07      	ldr	r2, [pc, #28]	; (80164dc <RegionCommonGetBandwidth+0x38>)
 80164c0:	4293      	cmp	r3, r2
 80164c2:	d003      	beq.n	80164cc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80164c4:	2300      	movs	r3, #0
 80164c6:	e002      	b.n	80164ce <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80164c8:	2301      	movs	r3, #1
 80164ca:	e000      	b.n	80164ce <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80164cc:	2302      	movs	r3, #2
    }
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	370c      	adds	r7, #12
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bc80      	pop	{r7}
 80164d6:	4770      	bx	lr
 80164d8:	0003d090 	.word	0x0003d090
 80164dc:	0007a120 	.word	0x0007a120

080164e0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80164e0:	b5b0      	push	{r4, r5, r7, lr}
 80164e2:	b08c      	sub	sp, #48	; 0x30
 80164e4:	af04      	add	r7, sp, #16
 80164e6:	4603      	mov	r3, r0
 80164e8:	6039      	str	r1, [r7, #0]
 80164ea:	71fb      	strb	r3, [r7, #7]
 80164ec:	4613      	mov	r3, r2
 80164ee:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80164f0:	4b17      	ldr	r3, [pc, #92]	; (8016550 <RegionCommonRxConfigPrint+0x70>)
 80164f2:	f107 0408 	add.w	r4, r7, #8
 80164f6:	461d      	mov	r5, r3
 80164f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016500:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8016504:	79fb      	ldrb	r3, [r7, #7]
 8016506:	2b05      	cmp	r3, #5
 8016508:	d812      	bhi.n	8016530 <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 801650a:	79fb      	ldrb	r3, [r7, #7]
 801650c:	009b      	lsls	r3, r3, #2
 801650e:	3320      	adds	r3, #32
 8016510:	443b      	add	r3, r7
 8016512:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8016516:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801651a:	9202      	str	r2, [sp, #8]
 801651c:	683a      	ldr	r2, [r7, #0]
 801651e:	9201      	str	r2, [sp, #4]
 8016520:	9300      	str	r3, [sp, #0]
 8016522:	4b0c      	ldr	r3, [pc, #48]	; (8016554 <RegionCommonRxConfigPrint+0x74>)
 8016524:	2201      	movs	r2, #1
 8016526:	2100      	movs	r1, #0
 8016528:	2002      	movs	r0, #2
 801652a:	f005 fe0f 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801652e:	e00a      	b.n	8016546 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016530:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016534:	9301      	str	r3, [sp, #4]
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	9300      	str	r3, [sp, #0]
 801653a:	4b07      	ldr	r3, [pc, #28]	; (8016558 <RegionCommonRxConfigPrint+0x78>)
 801653c:	2201      	movs	r2, #1
 801653e:	2100      	movs	r1, #0
 8016540:	2002      	movs	r0, #2
 8016542:	f005 fe03 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 8016546:	bf00      	nop
 8016548:	3720      	adds	r7, #32
 801654a:	46bd      	mov	sp, r7
 801654c:	bdb0      	pop	{r4, r5, r7, pc}
 801654e:	bf00      	nop
 8016550:	0801dfe8 	.word	0x0801dfe8
 8016554:	0801dfac 	.word	0x0801dfac
 8016558:	0801dfcc 	.word	0x0801dfcc

0801655c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af02      	add	r7, sp, #8
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	460b      	mov	r3, r1
 8016566:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801656c:	9301      	str	r3, [sp, #4]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	9300      	str	r3, [sp, #0]
 8016572:	4b05      	ldr	r3, [pc, #20]	; (8016588 <RegionCommonTxConfigPrint+0x2c>)
 8016574:	2201      	movs	r2, #1
 8016576:	2100      	movs	r1, #0
 8016578:	2002      	movs	r0, #2
 801657a:	f005 fde7 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
}
 801657e:	bf00      	nop
 8016580:	3708      	adds	r7, #8
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	0801e000 	.word	0x0801e000

0801658c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016596:	4b2d      	ldr	r3, [pc, #180]	; (801664c <VerifyRfFreq+0xc0>)
 8016598:	6a1b      	ldr	r3, [r3, #32]
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	4798      	blx	r3
 801659e:	4603      	mov	r3, r0
 80165a0:	f083 0301 	eor.w	r3, r3, #1
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d001      	beq.n	80165ae <VerifyRfFreq+0x22>
    {
        return false;
 80165aa:	2300      	movs	r3, #0
 80165ac:	e04a      	b.n	8016644 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	4a27      	ldr	r2, [pc, #156]	; (8016650 <VerifyRfFreq+0xc4>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d307      	bcc.n	80165c6 <VerifyRfFreq+0x3a>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	4a26      	ldr	r2, [pc, #152]	; (8016654 <VerifyRfFreq+0xc8>)
 80165ba:	4293      	cmp	r3, r2
 80165bc:	d803      	bhi.n	80165c6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	2202      	movs	r2, #2
 80165c2:	701a      	strb	r2, [r3, #0]
 80165c4:	e03d      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	4a22      	ldr	r2, [pc, #136]	; (8016654 <VerifyRfFreq+0xc8>)
 80165ca:	4293      	cmp	r3, r2
 80165cc:	d907      	bls.n	80165de <VerifyRfFreq+0x52>
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	4a21      	ldr	r2, [pc, #132]	; (8016658 <VerifyRfFreq+0xcc>)
 80165d2:	4293      	cmp	r3, r2
 80165d4:	d803      	bhi.n	80165de <VerifyRfFreq+0x52>
    {
        *band = 0;
 80165d6:	683b      	ldr	r3, [r7, #0]
 80165d8:	2200      	movs	r2, #0
 80165da:	701a      	strb	r2, [r3, #0]
 80165dc:	e031      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	4a1d      	ldr	r2, [pc, #116]	; (8016658 <VerifyRfFreq+0xcc>)
 80165e2:	4293      	cmp	r3, r2
 80165e4:	d907      	bls.n	80165f6 <VerifyRfFreq+0x6a>
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	4a1c      	ldr	r2, [pc, #112]	; (801665c <VerifyRfFreq+0xd0>)
 80165ea:	4293      	cmp	r3, r2
 80165ec:	d803      	bhi.n	80165f6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	2201      	movs	r2, #1
 80165f2:	701a      	strb	r2, [r3, #0]
 80165f4:	e025      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	4a19      	ldr	r2, [pc, #100]	; (8016660 <VerifyRfFreq+0xd4>)
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d907      	bls.n	801660e <VerifyRfFreq+0x82>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	4a18      	ldr	r2, [pc, #96]	; (8016664 <VerifyRfFreq+0xd8>)
 8016602:	4293      	cmp	r3, r2
 8016604:	d803      	bhi.n	801660e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	2205      	movs	r2, #5
 801660a:	701a      	strb	r2, [r3, #0]
 801660c:	e019      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	4a15      	ldr	r2, [pc, #84]	; (8016668 <VerifyRfFreq+0xdc>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d907      	bls.n	8016626 <VerifyRfFreq+0x9a>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	4a14      	ldr	r2, [pc, #80]	; (801666c <VerifyRfFreq+0xe0>)
 801661a:	4293      	cmp	r3, r2
 801661c:	d803      	bhi.n	8016626 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	2203      	movs	r2, #3
 8016622:	701a      	strb	r2, [r3, #0]
 8016624:	e00d      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	4a11      	ldr	r2, [pc, #68]	; (8016670 <VerifyRfFreq+0xe4>)
 801662a:	4293      	cmp	r3, r2
 801662c:	d307      	bcc.n	801663e <VerifyRfFreq+0xb2>
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	4a10      	ldr	r2, [pc, #64]	; (8016674 <VerifyRfFreq+0xe8>)
 8016632:	4293      	cmp	r3, r2
 8016634:	d803      	bhi.n	801663e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	2204      	movs	r2, #4
 801663a:	701a      	strb	r2, [r3, #0]
 801663c:	e001      	b.n	8016642 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801663e:	2300      	movs	r3, #0
 8016640:	e000      	b.n	8016644 <VerifyRfFreq+0xb8>
    }
    return true;
 8016642:	2301      	movs	r3, #1
}
 8016644:	4618      	mov	r0, r3
 8016646:	3708      	adds	r7, #8
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	0801e6b8 	.word	0x0801e6b8
 8016650:	337055c0 	.word	0x337055c0
 8016654:	338eda3f 	.word	0x338eda3f
 8016658:	33bca100 	.word	0x33bca100
 801665c:	33c5c8c0 	.word	0x33c5c8c0
 8016660:	33c74f5f 	.word	0x33c74f5f
 8016664:	33cef080 	.word	0x33cef080
 8016668:	33d1fdbf 	.word	0x33d1fdbf
 801666c:	33d5ce50 	.word	0x33d5ce50
 8016670:	33d691a0 	.word	0x33d691a0
 8016674:	33db2580 	.word	0x33db2580

08016678 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016678:	b590      	push	{r4, r7, lr}
 801667a:	b08b      	sub	sp, #44	; 0x2c
 801667c:	af04      	add	r7, sp, #16
 801667e:	4603      	mov	r3, r0
 8016680:	460a      	mov	r2, r1
 8016682:	71fb      	strb	r3, [r7, #7]
 8016684:	4613      	mov	r3, r2
 8016686:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801668c:	4a1f      	ldr	r2, [pc, #124]	; (801670c <GetTimeOnAir+0x94>)
 801668e:	5cd3      	ldrb	r3, [r2, r3]
 8016690:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016696:	491e      	ldr	r1, [pc, #120]	; (8016710 <GetTimeOnAir+0x98>)
 8016698:	4618      	mov	r0, r3
 801669a:	f7ff ff03 	bl	80164a4 <RegionCommonGetBandwidth>
 801669e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80166a0:	2300      	movs	r3, #0
 80166a2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80166a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166a8:	2b07      	cmp	r3, #7
 80166aa:	d118      	bne.n	80166de <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80166ac:	4b19      	ldr	r3, [pc, #100]	; (8016714 <GetTimeOnAir+0x9c>)
 80166ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80166b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80166b8:	fb02 f303 	mul.w	r3, r2, r3
 80166bc:	4619      	mov	r1, r3
 80166be:	88bb      	ldrh	r3, [r7, #4]
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2201      	movs	r2, #1
 80166c4:	9203      	str	r2, [sp, #12]
 80166c6:	9302      	str	r3, [sp, #8]
 80166c8:	2300      	movs	r3, #0
 80166ca:	9301      	str	r3, [sp, #4]
 80166cc:	2305      	movs	r3, #5
 80166ce:	9300      	str	r3, [sp, #0]
 80166d0:	2300      	movs	r3, #0
 80166d2:	460a      	mov	r2, r1
 80166d4:	68f9      	ldr	r1, [r7, #12]
 80166d6:	2000      	movs	r0, #0
 80166d8:	47a0      	blx	r4
 80166da:	6178      	str	r0, [r7, #20]
 80166dc:	e011      	b.n	8016702 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80166de:	4b0d      	ldr	r3, [pc, #52]	; (8016714 <GetTimeOnAir+0x9c>)
 80166e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80166e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80166e6:	88bb      	ldrh	r3, [r7, #4]
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	2101      	movs	r1, #1
 80166ec:	9103      	str	r1, [sp, #12]
 80166ee:	9302      	str	r3, [sp, #8]
 80166f0:	2300      	movs	r3, #0
 80166f2:	9301      	str	r3, [sp, #4]
 80166f4:	2308      	movs	r3, #8
 80166f6:	9300      	str	r3, [sp, #0]
 80166f8:	2301      	movs	r3, #1
 80166fa:	68f9      	ldr	r1, [r7, #12]
 80166fc:	2001      	movs	r0, #1
 80166fe:	47a0      	blx	r4
 8016700:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016702:	697b      	ldr	r3, [r7, #20]
}
 8016704:	4618      	mov	r0, r3
 8016706:	371c      	adds	r7, #28
 8016708:	46bd      	mov	sp, r7
 801670a:	bd90      	pop	{r4, r7, pc}
 801670c:	0801e5fc 	.word	0x0801e5fc
 8016710:	0801e604 	.word	0x0801e604
 8016714:	0801e6b8 	.word	0x0801e6b8

08016718 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b088      	sub	sp, #32
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016720:	2300      	movs	r3, #0
 8016722:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	3b01      	subs	r3, #1
 801672a:	2b38      	cmp	r3, #56	; 0x38
 801672c:	f200 8128 	bhi.w	8016980 <RegionEU868GetPhyParam+0x268>
 8016730:	a201      	add	r2, pc, #4	; (adr r2, 8016738 <RegionEU868GetPhyParam+0x20>)
 8016732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016736:	bf00      	nop
 8016738:	0801681d 	.word	0x0801681d
 801673c:	08016823 	.word	0x08016823
 8016740:	08016981 	.word	0x08016981
 8016744:	08016981 	.word	0x08016981
 8016748:	08016981 	.word	0x08016981
 801674c:	08016829 	.word	0x08016829
 8016750:	08016981 	.word	0x08016981
 8016754:	08016863 	.word	0x08016863
 8016758:	08016981 	.word	0x08016981
 801675c:	08016869 	.word	0x08016869
 8016760:	0801686f 	.word	0x0801686f
 8016764:	08016875 	.word	0x08016875
 8016768:	0801687b 	.word	0x0801687b
 801676c:	0801688b 	.word	0x0801688b
 8016770:	0801689b 	.word	0x0801689b
 8016774:	080168a1 	.word	0x080168a1
 8016778:	080168a9 	.word	0x080168a9
 801677c:	080168b1 	.word	0x080168b1
 8016780:	080168b9 	.word	0x080168b9
 8016784:	080168c1 	.word	0x080168c1
 8016788:	080168c9 	.word	0x080168c9
 801678c:	080168d1 	.word	0x080168d1
 8016790:	080168e5 	.word	0x080168e5
 8016794:	080168eb 	.word	0x080168eb
 8016798:	080168f1 	.word	0x080168f1
 801679c:	080168f7 	.word	0x080168f7
 80167a0:	08016903 	.word	0x08016903
 80167a4:	0801690f 	.word	0x0801690f
 80167a8:	08016915 	.word	0x08016915
 80167ac:	0801691d 	.word	0x0801691d
 80167b0:	08016923 	.word	0x08016923
 80167b4:	08016929 	.word	0x08016929
 80167b8:	08016931 	.word	0x08016931
 80167bc:	0801682f 	.word	0x0801682f
 80167c0:	08016981 	.word	0x08016981
 80167c4:	08016981 	.word	0x08016981
 80167c8:	08016981 	.word	0x08016981
 80167cc:	08016981 	.word	0x08016981
 80167d0:	08016981 	.word	0x08016981
 80167d4:	08016981 	.word	0x08016981
 80167d8:	08016981 	.word	0x08016981
 80167dc:	08016981 	.word	0x08016981
 80167e0:	08016981 	.word	0x08016981
 80167e4:	08016981 	.word	0x08016981
 80167e8:	08016981 	.word	0x08016981
 80167ec:	08016981 	.word	0x08016981
 80167f0:	08016981 	.word	0x08016981
 80167f4:	08016937 	.word	0x08016937
 80167f8:	0801693d 	.word	0x0801693d
 80167fc:	0801694b 	.word	0x0801694b
 8016800:	08016981 	.word	0x08016981
 8016804:	08016981 	.word	0x08016981
 8016808:	08016951 	.word	0x08016951
 801680c:	08016957 	.word	0x08016957
 8016810:	08016981 	.word	0x08016981
 8016814:	0801695d 	.word	0x0801695d
 8016818:	0801696d 	.word	0x0801696d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801681c:	2300      	movs	r3, #0
 801681e:	61bb      	str	r3, [r7, #24]
            break;
 8016820:	e0af      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016822:	2300      	movs	r3, #0
 8016824:	61bb      	str	r3, [r7, #24]
            break;
 8016826:	e0ac      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016828:	2305      	movs	r3, #5
 801682a:	61bb      	str	r3, [r7, #24]
            break;
 801682c:	e0a9      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016834:	733b      	strb	r3, [r7, #12]
 8016836:	2307      	movs	r3, #7
 8016838:	737b      	strb	r3, [r7, #13]
 801683a:	2300      	movs	r3, #0
 801683c:	73bb      	strb	r3, [r7, #14]
 801683e:	2310      	movs	r3, #16
 8016840:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016842:	4b53      	ldr	r3, [pc, #332]	; (8016990 <RegionEU868GetPhyParam+0x278>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801684a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801684c:	4b50      	ldr	r3, [pc, #320]	; (8016990 <RegionEU868GetPhyParam+0x278>)
 801684e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016850:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016852:	f107 030c 	add.w	r3, r7, #12
 8016856:	4618      	mov	r0, r3
 8016858:	f7ff fdd1 	bl	80163fe <RegionCommonGetNextLowerTxDr>
 801685c:	4603      	mov	r3, r0
 801685e:	61bb      	str	r3, [r7, #24]
            break;
 8016860:	e08f      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016862:	230e      	movs	r3, #14
 8016864:	61bb      	str	r3, [r7, #24]
            break;
 8016866:	e08c      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016868:	2300      	movs	r3, #0
 801686a:	61bb      	str	r3, [r7, #24]
            break;
 801686c:	e089      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801686e:	2340      	movs	r3, #64	; 0x40
 8016870:	61bb      	str	r3, [r7, #24]
            break;
 8016872:	e086      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016874:	2320      	movs	r3, #32
 8016876:	61bb      	str	r3, [r7, #24]
            break;
 8016878:	e083      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016880:	461a      	mov	r2, r3
 8016882:	4b44      	ldr	r3, [pc, #272]	; (8016994 <RegionEU868GetPhyParam+0x27c>)
 8016884:	5c9b      	ldrb	r3, [r3, r2]
 8016886:	61bb      	str	r3, [r7, #24]
            break;
 8016888:	e07b      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016890:	461a      	mov	r2, r3
 8016892:	4b41      	ldr	r3, [pc, #260]	; (8016998 <RegionEU868GetPhyParam+0x280>)
 8016894:	5c9b      	ldrb	r3, [r3, r2]
 8016896:	61bb      	str	r3, [r7, #24]
            break;
 8016898:	e073      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801689a:	2301      	movs	r3, #1
 801689c:	61bb      	str	r3, [r7, #24]
            break;
 801689e:	e070      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80168a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80168a4:	61bb      	str	r3, [r7, #24]
            break;
 80168a6:	e06c      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80168a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80168ac:	61bb      	str	r3, [r7, #24]
            break;
 80168ae:	e068      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80168b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80168b4:	61bb      	str	r3, [r7, #24]
            break;
 80168b6:	e064      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80168b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80168bc:	61bb      	str	r3, [r7, #24]
            break;
 80168be:	e060      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80168c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80168c4:	61bb      	str	r3, [r7, #24]
            break;
 80168c6:	e05c      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80168c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80168cc:	61bb      	str	r3, [r7, #24]
            break;
 80168ce:	e058      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80168d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80168d4:	4831      	ldr	r0, [pc, #196]	; (801699c <RegionEU868GetPhyParam+0x284>)
 80168d6:	f002 facf 	bl	8018e78 <randr>
 80168da:	4603      	mov	r3, r0
 80168dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80168e0:	61bb      	str	r3, [r7, #24]
            break;
 80168e2:	e04e      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80168e4:	2300      	movs	r3, #0
 80168e6:	61bb      	str	r3, [r7, #24]
            break;
 80168e8:	e04b      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80168ea:	4b2d      	ldr	r3, [pc, #180]	; (80169a0 <RegionEU868GetPhyParam+0x288>)
 80168ec:	61bb      	str	r3, [r7, #24]
            break;
 80168ee:	e048      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80168f0:	2300      	movs	r3, #0
 80168f2:	61bb      	str	r3, [r7, #24]
            break;
 80168f4:	e045      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80168f6:	4b26      	ldr	r3, [pc, #152]	; (8016990 <RegionEU868GetPhyParam+0x278>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80168fe:	61bb      	str	r3, [r7, #24]
            break;
 8016900:	e03f      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016902:	4b23      	ldr	r3, [pc, #140]	; (8016990 <RegionEU868GetPhyParam+0x278>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801690a:	61bb      	str	r3, [r7, #24]
            break;
 801690c:	e039      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801690e:	2310      	movs	r3, #16
 8016910:	61bb      	str	r3, [r7, #24]
            break;
 8016912:	e036      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016914:	4b1e      	ldr	r3, [pc, #120]	; (8016990 <RegionEU868GetPhyParam+0x278>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	61bb      	str	r3, [r7, #24]
            break;
 801691a:	e032      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801691c:	2300      	movs	r3, #0
 801691e:	61bb      	str	r3, [r7, #24]
            break;
 8016920:	e02f      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016922:	2300      	movs	r3, #0
 8016924:	61bb      	str	r3, [r7, #24]
            break;
 8016926:	e02c      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016928:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801692c:	61bb      	str	r3, [r7, #24]
            break;
 801692e:	e028      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016930:	4b1c      	ldr	r3, [pc, #112]	; (80169a4 <RegionEU868GetPhyParam+0x28c>)
 8016932:	61bb      	str	r3, [r7, #24]
            break;
 8016934:	e025      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016936:	4b1a      	ldr	r3, [pc, #104]	; (80169a0 <RegionEU868GetPhyParam+0x288>)
 8016938:	61bb      	str	r3, [r7, #24]
            break;
 801693a:	e022      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801693c:	2311      	movs	r3, #17
 801693e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016940:	2302      	movs	r3, #2
 8016942:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016944:	2300      	movs	r3, #0
 8016946:	76bb      	strb	r3, [r7, #26]
            break;
 8016948:	e01b      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801694a:	2303      	movs	r3, #3
 801694c:	61bb      	str	r3, [r7, #24]
            break;
 801694e:	e018      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016950:	4b13      	ldr	r3, [pc, #76]	; (80169a0 <RegionEU868GetPhyParam+0x288>)
 8016952:	61bb      	str	r3, [r7, #24]
            break;
 8016954:	e015      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016956:	2303      	movs	r3, #3
 8016958:	61bb      	str	r3, [r7, #24]
            break;
 801695a:	e012      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016962:	461a      	mov	r2, r3
 8016964:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <RegionEU868GetPhyParam+0x290>)
 8016966:	5c9b      	ldrb	r3, [r3, r2]
 8016968:	61bb      	str	r3, [r7, #24]
            break;
 801696a:	e00a      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016972:	490e      	ldr	r1, [pc, #56]	; (80169ac <RegionEU868GetPhyParam+0x294>)
 8016974:	4618      	mov	r0, r3
 8016976:	f7ff fd95 	bl	80164a4 <RegionCommonGetBandwidth>
 801697a:	4603      	mov	r3, r0
 801697c:	61bb      	str	r3, [r7, #24]
            break;
 801697e:	e000      	b.n	8016982 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8016980:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016982:	69bb      	ldr	r3, [r7, #24]
 8016984:	61fb      	str	r3, [r7, #28]
 8016986:	69fb      	ldr	r3, [r7, #28]
}
 8016988:	4618      	mov	r0, r3
 801698a:	3720      	adds	r7, #32
 801698c:	46bd      	mov	sp, r7
 801698e:	bd80      	pop	{r7, pc}
 8016990:	20003c84 	.word	0x20003c84
 8016994:	0801e624 	.word	0x0801e624
 8016998:	0801e62c 	.word	0x0801e62c
 801699c:	fffffc18 	.word	0xfffffc18
 80169a0:	33d3e608 	.word	0x33d3e608
 80169a4:	4009999a 	.word	0x4009999a
 80169a8:	0801e5fc 	.word	0x0801e5fc
 80169ac:	0801e604 	.word	0x0801e604

080169b0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80169b0:	b590      	push	{r4, r7, lr}
 80169b2:	b085      	sub	sp, #20
 80169b4:	af02      	add	r7, sp, #8
 80169b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80169b8:	4b11      	ldr	r3, [pc, #68]	; (8016a00 <RegionEU868SetBandTxDone+0x50>)
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	4b11      	ldr	r3, [pc, #68]	; (8016a04 <RegionEU868SetBandTxDone+0x54>)
 80169be:	6819      	ldr	r1, [r3, #0]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	4618      	mov	r0, r3
 80169c6:	4603      	mov	r3, r0
 80169c8:	005b      	lsls	r3, r3, #1
 80169ca:	4403      	add	r3, r0
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	440b      	add	r3, r1
 80169d0:	3309      	adds	r3, #9
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	4619      	mov	r1, r3
 80169d6:	460b      	mov	r3, r1
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	440b      	add	r3, r1
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	18d0      	adds	r0, r2, r3
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6899      	ldr	r1, [r3, #8]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	785c      	ldrb	r4, [r3, #1]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	691a      	ldr	r2, [r3, #16]
 80169ec:	9200      	str	r2, [sp, #0]
 80169ee:	68db      	ldr	r3, [r3, #12]
 80169f0:	4622      	mov	r2, r4
 80169f2:	f7ff f8ed 	bl	8015bd0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80169f6:	bf00      	nop
 80169f8:	370c      	adds	r7, #12
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd90      	pop	{r4, r7, pc}
 80169fe:	bf00      	nop
 8016a00:	20003c80 	.word	0x20003c80
 8016a04:	20003c84 	.word	0x20003c84

08016a08 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b0b0      	sub	sp, #192	; 0xc0
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016a10:	4a3e      	ldr	r2, [pc, #248]	; (8016b0c <RegionEU868InitDefaults+0x104>)
 8016a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a16:	4611      	mov	r1, r2
 8016a18:	2290      	movs	r2, #144	; 0x90
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f006 fee0 	bl	801d7e0 <memcpy>
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	7a1b      	ldrb	r3, [r3, #8]
 8016a24:	2b02      	cmp	r3, #2
 8016a26:	d05e      	beq.n	8016ae6 <RegionEU868InitDefaults+0xde>
 8016a28:	2b02      	cmp	r3, #2
 8016a2a:	dc6b      	bgt.n	8016b04 <RegionEU868InitDefaults+0xfc>
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d002      	beq.n	8016a36 <RegionEU868InitDefaults+0x2e>
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d03f      	beq.n	8016ab4 <RegionEU868InitDefaults+0xac>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016a34:	e066      	b.n	8016b04 <RegionEU868InitDefaults+0xfc>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d063      	beq.n	8016b06 <RegionEU868InitDefaults+0xfe>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d05f      	beq.n	8016b06 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	4a31      	ldr	r2, [pc, #196]	; (8016b10 <RegionEU868InitDefaults+0x108>)
 8016a4c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	4a30      	ldr	r2, [pc, #192]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a54:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016a56:	4b2e      	ldr	r3, [pc, #184]	; (8016b10 <RegionEU868InitDefaults+0x108>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a60:	2290      	movs	r2, #144	; 0x90
 8016a62:	4619      	mov	r1, r3
 8016a64:	f002 fa1f 	bl	8018ea6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016a68:	4b2a      	ldr	r3, [pc, #168]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	4a2a      	ldr	r2, [pc, #168]	; (8016b18 <RegionEU868InitDefaults+0x110>)
 8016a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016a74:	4b27      	ldr	r3, [pc, #156]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4a28      	ldr	r2, [pc, #160]	; (8016b1c <RegionEU868InitDefaults+0x114>)
 8016a7a:	330c      	adds	r3, #12
 8016a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016a82:	4b24      	ldr	r3, [pc, #144]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	4a26      	ldr	r2, [pc, #152]	; (8016b20 <RegionEU868InitDefaults+0x118>)
 8016a88:	3318      	adds	r3, #24
 8016a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016a90:	4b20      	ldr	r3, [pc, #128]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2207      	movs	r2, #7
 8016a96:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016a9a:	4b1e      	ldr	r3, [pc, #120]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016aa2:	4b1c      	ldr	r3, [pc, #112]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016aaa:	2201      	movs	r2, #1
 8016aac:	4619      	mov	r1, r3
 8016aae:	f7ff f869 	bl	8015b84 <RegionCommonChanMaskCopy>
 8016ab2:	e028      	b.n	8016b06 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016ab4:	4b17      	ldr	r3, [pc, #92]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2200      	movs	r2, #0
 8016aba:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016abc:	4b15      	ldr	r3, [pc, #84]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016ac4:	4b13      	ldr	r3, [pc, #76]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016acc:	4b11      	ldr	r3, [pc, #68]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016ad4:	4b0f      	ldr	r3, [pc, #60]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016adc:	2201      	movs	r2, #1
 8016ade:	4619      	mov	r1, r3
 8016ae0:	f7ff f850 	bl	8015b84 <RegionCommonChanMaskCopy>
            break;
 8016ae4:	e00f      	b.n	8016b06 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016ae6:	4b0b      	ldr	r3, [pc, #44]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016af6:	4b07      	ldr	r3, [pc, #28]	; (8016b14 <RegionEU868InitDefaults+0x10c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	430a      	orrs	r2, r1
 8016afc:	b292      	uxth	r2, r2
 8016afe:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016b02:	e000      	b.n	8016b06 <RegionEU868InitDefaults+0xfe>
            break;
 8016b04:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016b06:	37c0      	adds	r7, #192	; 0xc0
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	0801e01c 	.word	0x0801e01c
 8016b10:	20003c80 	.word	0x20003c80
 8016b14:	20003c84 	.word	0x20003c84
 8016b18:	0801e0ac 	.word	0x0801e0ac
 8016b1c:	0801e0b8 	.word	0x0801e0b8
 8016b20:	0801e0c4 	.word	0x0801e0c4

08016b24 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b084      	sub	sp, #16
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
 8016b2c:	460b      	mov	r3, r1
 8016b2e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016b30:	78fb      	ldrb	r3, [r7, #3]
 8016b32:	2b0f      	cmp	r3, #15
 8016b34:	d86c      	bhi.n	8016c10 <RegionEU868Verify+0xec>
 8016b36:	a201      	add	r2, pc, #4	; (adr r2, 8016b3c <RegionEU868Verify+0x18>)
 8016b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b3c:	08016b7d 	.word	0x08016b7d
 8016b40:	08016c11 	.word	0x08016c11
 8016b44:	08016c11 	.word	0x08016c11
 8016b48:	08016c11 	.word	0x08016c11
 8016b4c:	08016c11 	.word	0x08016c11
 8016b50:	08016b95 	.word	0x08016b95
 8016b54:	08016bb3 	.word	0x08016bb3
 8016b58:	08016bd1 	.word	0x08016bd1
 8016b5c:	08016c11 	.word	0x08016c11
 8016b60:	08016bef 	.word	0x08016bef
 8016b64:	08016bef 	.word	0x08016bef
 8016b68:	08016c11 	.word	0x08016c11
 8016b6c:	08016c11 	.word	0x08016c11
 8016b70:	08016c11 	.word	0x08016c11
 8016b74:	08016c11 	.word	0x08016c11
 8016b78:	08016c0d 	.word	0x08016c0d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f107 020f 	add.w	r2, r7, #15
 8016b88:	4611      	mov	r1, r2
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7ff fcfe 	bl	801658c <VerifyRfFreq>
 8016b90:	4603      	mov	r3, r0
 8016b92:	e03e      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f993 3000 	ldrsb.w	r3, [r3]
 8016b9a:	2207      	movs	r2, #7
 8016b9c:	2100      	movs	r1, #0
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7fe ff73 	bl	8015a8a <RegionCommonValueInRange>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	bf14      	ite	ne
 8016baa:	2301      	movne	r3, #1
 8016bac:	2300      	moveq	r3, #0
 8016bae:	b2db      	uxtb	r3, r3
 8016bb0:	e02f      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8016bb8:	2205      	movs	r2, #5
 8016bba:	2100      	movs	r1, #0
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7fe ff64 	bl	8015a8a <RegionCommonValueInRange>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	bf14      	ite	ne
 8016bc8:	2301      	movne	r3, #1
 8016bca:	2300      	moveq	r3, #0
 8016bcc:	b2db      	uxtb	r3, r3
 8016bce:	e020      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8016bd6:	2207      	movs	r2, #7
 8016bd8:	2100      	movs	r1, #0
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7fe ff55 	bl	8015a8a <RegionCommonValueInRange>
 8016be0:	4603      	mov	r3, r0
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	bf14      	ite	ne
 8016be6:	2301      	movne	r3, #1
 8016be8:	2300      	moveq	r3, #0
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	e011      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8016bf4:	2207      	movs	r2, #7
 8016bf6:	210e      	movs	r1, #14
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7fe ff46 	bl	8015a8a <RegionCommonValueInRange>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	bf14      	ite	ne
 8016c04:	2301      	movne	r3, #1
 8016c06:	2300      	moveq	r3, #0
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	e002      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e000      	b.n	8016c12 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016c10:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop

08016c1c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b08a      	sub	sp, #40	; 0x28
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016c24:	2350      	movs	r3, #80	; 0x50
 8016c26:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	791b      	ldrb	r3, [r3, #4]
 8016c2e:	2b10      	cmp	r3, #16
 8016c30:	d162      	bne.n	8016cf8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	330f      	adds	r3, #15
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d15e      	bne.n	8016cfc <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016c3e:	2300      	movs	r3, #0
 8016c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c44:	2303      	movs	r3, #3
 8016c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c4a:	e050      	b.n	8016cee <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c50:	2b07      	cmp	r3, #7
 8016c52:	d824      	bhi.n	8016c9e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c5c:	4413      	add	r3, r2
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016c62:	69ba      	ldr	r2, [r7, #24]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6819      	ldr	r1, [r3, #0]
 8016c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c6c:	3301      	adds	r3, #1
 8016c6e:	440b      	add	r3, r1
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	021b      	lsls	r3, r3, #8
 8016c74:	4313      	orrs	r3, r2
 8016c76:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016c78:	69ba      	ldr	r2, [r7, #24]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	6819      	ldr	r1, [r3, #0]
 8016c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c82:	3302      	adds	r3, #2
 8016c84:	440b      	add	r3, r1
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	041b      	lsls	r3, r3, #16
 8016c8a:	4313      	orrs	r3, r2
 8016c8c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	2264      	movs	r2, #100	; 0x64
 8016c92:	fb02 f303 	mul.w	r3, r2, r3
 8016c96:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	61fb      	str	r3, [r7, #28]
 8016c9c:	e006      	b.n	8016cac <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016cac:	69bb      	ldr	r3, [r7, #24]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d00b      	beq.n	8016cca <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016cb2:	f107 0318 	add.w	r3, r7, #24
 8016cb6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cbc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016cbe:	f107 0310 	add.w	r3, r7, #16
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fd0e 	bl	80176e4 <RegionEU868ChannelAdd>
 8016cc8:	e007      	b.n	8016cda <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016cca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cce:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016cd0:	f107 030c 	add.w	r3, r7, #12
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f000 fda7 	bl	8017828 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cde:	3303      	adds	r3, #3
 8016ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ce8:	3301      	adds	r3, #1
 8016cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cf2:	2b0f      	cmp	r3, #15
 8016cf4:	d9aa      	bls.n	8016c4c <RegionEU868ApplyCFList+0x30>
 8016cf6:	e002      	b.n	8016cfe <RegionEU868ApplyCFList+0xe2>
        return;
 8016cf8:	bf00      	nop
 8016cfa:	e000      	b.n	8016cfe <RegionEU868ApplyCFList+0xe2>
        return;
 8016cfc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016cfe:	3728      	adds	r7, #40	; 0x28
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	791b      	ldrb	r3, [r3, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d002      	beq.n	8016d1a <RegionEU868ChanMaskSet+0x16>
 8016d14:	2b01      	cmp	r3, #1
 8016d16:	d00b      	beq.n	8016d30 <RegionEU868ChanMaskSet+0x2c>
 8016d18:	e015      	b.n	8016d46 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016d1a:	4b0e      	ldr	r3, [pc, #56]	; (8016d54 <RegionEU868ChanMaskSet+0x50>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	2201      	movs	r2, #1
 8016d28:	4619      	mov	r1, r3
 8016d2a:	f7fe ff2b 	bl	8015b84 <RegionCommonChanMaskCopy>
            break;
 8016d2e:	e00c      	b.n	8016d4a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016d30:	4b08      	ldr	r3, [pc, #32]	; (8016d54 <RegionEU868ChanMaskSet+0x50>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	4619      	mov	r1, r3
 8016d40:	f7fe ff20 	bl	8015b84 <RegionCommonChanMaskCopy>
            break;
 8016d44:	e001      	b.n	8016d4a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016d46:	2300      	movs	r3, #0
 8016d48:	e000      	b.n	8016d4c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016d4a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3708      	adds	r7, #8
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	20003c84 	.word	0x20003c84

08016d58 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b088      	sub	sp, #32
 8016d5c:	af02      	add	r7, sp, #8
 8016d5e:	60ba      	str	r2, [r7, #8]
 8016d60:	607b      	str	r3, [r7, #4]
 8016d62:	4603      	mov	r3, r0
 8016d64:	73fb      	strb	r3, [r7, #15]
 8016d66:	460b      	mov	r3, r1
 8016d68:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d72:	2b07      	cmp	r3, #7
 8016d74:	bfa8      	it	ge
 8016d76:	2307      	movge	r3, #7
 8016d78:	b25a      	sxtb	r2, r3
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d84:	491e      	ldr	r1, [pc, #120]	; (8016e00 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7ff fb8c 	bl	80164a4 <RegionCommonGetBandwidth>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	b2da      	uxtb	r2, r3
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d9a:	2b07      	cmp	r3, #7
 8016d9c:	d10a      	bne.n	8016db4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016da4:	461a      	mov	r2, r3
 8016da6:	4b17      	ldr	r3, [pc, #92]	; (8016e04 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016da8:	5c9b      	ldrb	r3, [r3, r2]
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7ff f90e 	bl	8015fcc <RegionCommonComputeSymbolTimeFsk>
 8016db0:	6178      	str	r0, [r7, #20]
 8016db2:	e011      	b.n	8016dd8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dba:	461a      	mov	r2, r3
 8016dbc:	4b11      	ldr	r3, [pc, #68]	; (8016e04 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016dbe:	5c9a      	ldrb	r2, [r3, r2]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	4b0d      	ldr	r3, [pc, #52]	; (8016e00 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016dca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016dce:	4619      	mov	r1, r3
 8016dd0:	4610      	mov	r0, r2
 8016dd2:	f7ff f8e5 	bl	8015fa0 <RegionCommonComputeSymbolTimeLoRa>
 8016dd6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016dd8:	4b0b      	ldr	r3, [pc, #44]	; (8016e08 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ddc:	4798      	blx	r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	3308      	adds	r3, #8
 8016de2:	687a      	ldr	r2, [r7, #4]
 8016de4:	320c      	adds	r2, #12
 8016de6:	7bb9      	ldrb	r1, [r7, #14]
 8016de8:	9201      	str	r2, [sp, #4]
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	4603      	mov	r3, r0
 8016dee:	68ba      	ldr	r2, [r7, #8]
 8016df0:	6978      	ldr	r0, [r7, #20]
 8016df2:	f7ff f8fb 	bl	8015fec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016df6:	bf00      	nop
 8016df8:	3718      	adds	r7, #24
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	0801e604 	.word	0x0801e604
 8016e04:	0801e5fc 	.word	0x0801e5fc
 8016e08:	0801e6b8 	.word	0x0801e6b8

08016e0c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016e0c:	b5b0      	push	{r4, r5, r7, lr}
 8016e0e:	b090      	sub	sp, #64	; 0x40
 8016e10:	af0a      	add	r7, sp, #40	; 0x28
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	785b      	ldrb	r3, [r3, #1]
 8016e1a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016e2a:	4b5a      	ldr	r3, [pc, #360]	; (8016f94 <RegionEU868RxConfig+0x188>)
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	4798      	blx	r3
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d001      	beq.n	8016e3a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016e36:	2300      	movs	r3, #0
 8016e38:	e0a8      	b.n	8016f8c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	7cdb      	ldrb	r3, [r3, #19]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d126      	bne.n	8016e90 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016e42:	4b55      	ldr	r3, [pc, #340]	; (8016f98 <RegionEU868RxConfig+0x18c>)
 8016e44:	681a      	ldr	r2, [r3, #0]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	440b      	add	r3, r1
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	4413      	add	r3, r2
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016e5a:	4b4f      	ldr	r3, [pc, #316]	; (8016f98 <RegionEU868RxConfig+0x18c>)
 8016e5c:	681a      	ldr	r2, [r3, #0]
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	4619      	mov	r1, r3
 8016e64:	460b      	mov	r3, r1
 8016e66:	005b      	lsls	r3, r3, #1
 8016e68:	440b      	add	r3, r1
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	4413      	add	r3, r2
 8016e6e:	3304      	adds	r3, #4
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d00c      	beq.n	8016e90 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016e76:	4b48      	ldr	r3, [pc, #288]	; (8016f98 <RegionEU868RxConfig+0x18c>)
 8016e78:	681a      	ldr	r2, [r3, #0]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	4619      	mov	r1, r3
 8016e80:	460b      	mov	r3, r1
 8016e82:	005b      	lsls	r3, r3, #1
 8016e84:	440b      	add	r3, r1
 8016e86:	009b      	lsls	r3, r3, #2
 8016e88:	4413      	add	r3, r2
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e94:	4a41      	ldr	r2, [pc, #260]	; (8016f9c <RegionEU868RxConfig+0x190>)
 8016e96:	5cd3      	ldrb	r3, [r2, r3]
 8016e98:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016e9a:	4b3e      	ldr	r3, [pc, #248]	; (8016f94 <RegionEU868RxConfig+0x188>)
 8016e9c:	68db      	ldr	r3, [r3, #12]
 8016e9e:	6938      	ldr	r0, [r7, #16]
 8016ea0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ea6:	2b07      	cmp	r3, #7
 8016ea8:	d128      	bne.n	8016efc <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016eae:	4b39      	ldr	r3, [pc, #228]	; (8016f94 <RegionEU868RxConfig+0x188>)
 8016eb0:	699c      	ldr	r4, [r3, #24]
 8016eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016eba:	fb02 f303 	mul.w	r3, r2, r3
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	689b      	ldr	r3, [r3, #8]
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	687a      	ldr	r2, [r7, #4]
 8016ec8:	7c92      	ldrb	r2, [r2, #18]
 8016eca:	7df8      	ldrb	r0, [r7, #23]
 8016ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8016ece:	2200      	movs	r2, #0
 8016ed0:	9208      	str	r2, [sp, #32]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	9207      	str	r2, [sp, #28]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	9206      	str	r2, [sp, #24]
 8016eda:	2201      	movs	r2, #1
 8016edc:	9205      	str	r2, [sp, #20]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	9204      	str	r2, [sp, #16]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	9203      	str	r2, [sp, #12]
 8016ee6:	9302      	str	r3, [sp, #8]
 8016ee8:	2305      	movs	r3, #5
 8016eea:	9301      	str	r3, [sp, #4]
 8016eec:	4b2c      	ldr	r3, [pc, #176]	; (8016fa0 <RegionEU868RxConfig+0x194>)
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	460a      	mov	r2, r1
 8016ef4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016ef8:	47a0      	blx	r4
 8016efa:	e024      	b.n	8016f46 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016efc:	2301      	movs	r3, #1
 8016efe:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016f00:	4b24      	ldr	r3, [pc, #144]	; (8016f94 <RegionEU868RxConfig+0x188>)
 8016f02:	699c      	ldr	r4, [r3, #24]
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	789b      	ldrb	r3, [r3, #2]
 8016f08:	461d      	mov	r5, r3
 8016f0a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	b29b      	uxth	r3, r3
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	7c92      	ldrb	r2, [r2, #18]
 8016f18:	7df8      	ldrb	r0, [r7, #23]
 8016f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8016f1c:	2201      	movs	r2, #1
 8016f1e:	9208      	str	r2, [sp, #32]
 8016f20:	2200      	movs	r2, #0
 8016f22:	9207      	str	r2, [sp, #28]
 8016f24:	2200      	movs	r2, #0
 8016f26:	9206      	str	r2, [sp, #24]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	9205      	str	r2, [sp, #20]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	9204      	str	r2, [sp, #16]
 8016f30:	2200      	movs	r2, #0
 8016f32:	9203      	str	r2, [sp, #12]
 8016f34:	9302      	str	r3, [sp, #8]
 8016f36:	2308      	movs	r3, #8
 8016f38:	9301      	str	r3, [sp, #4]
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	9300      	str	r3, [sp, #0]
 8016f3e:	2301      	movs	r3, #1
 8016f40:	460a      	mov	r2, r1
 8016f42:	4629      	mov	r1, r5
 8016f44:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	7c5b      	ldrb	r3, [r3, #17]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d005      	beq.n	8016f5a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f52:	4a14      	ldr	r2, [pc, #80]	; (8016fa4 <RegionEU868RxConfig+0x198>)
 8016f54:	5cd3      	ldrb	r3, [r2, r3]
 8016f56:	75bb      	strb	r3, [r7, #22]
 8016f58:	e004      	b.n	8016f64 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f5e:	4a12      	ldr	r2, [pc, #72]	; (8016fa8 <RegionEU868RxConfig+0x19c>)
 8016f60:	5cd3      	ldrb	r3, [r2, r3]
 8016f62:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016f64:	4b0b      	ldr	r3, [pc, #44]	; (8016f94 <RegionEU868RxConfig+0x188>)
 8016f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f68:	7dba      	ldrb	r2, [r7, #22]
 8016f6a:	320d      	adds	r2, #13
 8016f6c:	b2d1      	uxtb	r1, r2
 8016f6e:	7dfa      	ldrb	r2, [r7, #23]
 8016f70:	4610      	mov	r0, r2
 8016f72:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	7cdb      	ldrb	r3, [r3, #19]
 8016f78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016f7c:	6939      	ldr	r1, [r7, #16]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7ff faae 	bl	80164e0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	7bfa      	ldrb	r2, [r7, #15]
 8016f88:	701a      	strb	r2, [r3, #0]
    return true;
 8016f8a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3718      	adds	r7, #24
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bdb0      	pop	{r4, r5, r7, pc}
 8016f94:	0801e6b8 	.word	0x0801e6b8
 8016f98:	20003c84 	.word	0x20003c84
 8016f9c:	0801e5fc 	.word	0x0801e5fc
 8016fa0:	00014585 	.word	0x00014585
 8016fa4:	0801e62c 	.word	0x0801e62c
 8016fa8:	0801e624 	.word	0x0801e624

08016fac <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016fac:	b590      	push	{r4, r7, lr}
 8016fae:	b093      	sub	sp, #76	; 0x4c
 8016fb0:	af0a      	add	r7, sp, #40	; 0x28
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	60b9      	str	r1, [r7, #8]
 8016fb6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	4b5d      	ldr	r3, [pc, #372]	; (8017138 <RegionEU868TxConfig+0x18c>)
 8016fc2:	5c9b      	ldrb	r3, [r3, r2]
 8016fc4:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016fcc:	4b5b      	ldr	r3, [pc, #364]	; (801713c <RegionEU868TxConfig+0x190>)
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	4b5b      	ldr	r3, [pc, #364]	; (8017140 <RegionEU868TxConfig+0x194>)
 8016fd2:	6819      	ldr	r1, [r3, #0]
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	461c      	mov	r4, r3
 8016fda:	4623      	mov	r3, r4
 8016fdc:	005b      	lsls	r3, r3, #1
 8016fde:	4423      	add	r3, r4
 8016fe0:	009b      	lsls	r3, r3, #2
 8016fe2:	440b      	add	r3, r1
 8016fe4:	3309      	adds	r3, #9
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	460b      	mov	r3, r1
 8016fec:	005b      	lsls	r3, r3, #1
 8016fee:	440b      	add	r3, r1
 8016ff0:	00db      	lsls	r3, r3, #3
 8016ff2:	4413      	add	r3, r2
 8016ff4:	3302      	adds	r3, #2
 8016ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	f7ff fa3d 	bl	801647a <RegionCommonLimitTxPower>
 8017000:	4603      	mov	r3, r0
 8017002:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801700a:	494e      	ldr	r1, [pc, #312]	; (8017144 <RegionEU868TxConfig+0x198>)
 801700c:	4618      	mov	r0, r3
 801700e:	f7ff fa49 	bl	80164a4 <RegionCommonGetBandwidth>
 8017012:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017014:	2300      	movs	r3, #0
 8017016:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	6859      	ldr	r1, [r3, #4]
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	689a      	ldr	r2, [r3, #8]
 8017020:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017024:	4618      	mov	r0, r3
 8017026:	f7ff f899 	bl	801615c <RegionCommonComputeTxPower>
 801702a:	4603      	mov	r3, r0
 801702c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801702e:	4b46      	ldr	r3, [pc, #280]	; (8017148 <RegionEU868TxConfig+0x19c>)
 8017030:	68da      	ldr	r2, [r3, #12]
 8017032:	4b43      	ldr	r3, [pc, #268]	; (8017140 <RegionEU868TxConfig+0x194>)
 8017034:	6819      	ldr	r1, [r3, #0]
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	4618      	mov	r0, r3
 801703c:	4603      	mov	r3, r0
 801703e:	005b      	lsls	r3, r3, #1
 8017040:	4403      	add	r3, r0
 8017042:	009b      	lsls	r3, r3, #2
 8017044:	440b      	add	r3, r1
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4618      	mov	r0, r3
 801704a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017052:	2b07      	cmp	r3, #7
 8017054:	d124      	bne.n	80170a0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017056:	2300      	movs	r3, #0
 8017058:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801705a:	4b3b      	ldr	r3, [pc, #236]	; (8017148 <RegionEU868TxConfig+0x19c>)
 801705c:	69dc      	ldr	r4, [r3, #28]
 801705e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017066:	fb02 f303 	mul.w	r3, r2, r3
 801706a:	461a      	mov	r2, r3
 801706c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017070:	7ff8      	ldrb	r0, [r7, #31]
 8017072:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017076:	9308      	str	r3, [sp, #32]
 8017078:	2300      	movs	r3, #0
 801707a:	9307      	str	r3, [sp, #28]
 801707c:	2300      	movs	r3, #0
 801707e:	9306      	str	r3, [sp, #24]
 8017080:	2300      	movs	r3, #0
 8017082:	9305      	str	r3, [sp, #20]
 8017084:	2301      	movs	r3, #1
 8017086:	9304      	str	r3, [sp, #16]
 8017088:	2300      	movs	r3, #0
 801708a:	9303      	str	r3, [sp, #12]
 801708c:	2305      	movs	r3, #5
 801708e:	9302      	str	r3, [sp, #8]
 8017090:	2300      	movs	r3, #0
 8017092:	9301      	str	r3, [sp, #4]
 8017094:	9200      	str	r2, [sp, #0]
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801709c:	47a0      	blx	r4
 801709e:	e01d      	b.n	80170dc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80170a0:	2301      	movs	r3, #1
 80170a2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80170a4:	4b28      	ldr	r3, [pc, #160]	; (8017148 <RegionEU868TxConfig+0x19c>)
 80170a6:	69dc      	ldr	r4, [r3, #28]
 80170a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80170ac:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80170b0:	7ff8      	ldrb	r0, [r7, #31]
 80170b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80170b6:	9208      	str	r2, [sp, #32]
 80170b8:	2200      	movs	r2, #0
 80170ba:	9207      	str	r2, [sp, #28]
 80170bc:	2200      	movs	r2, #0
 80170be:	9206      	str	r2, [sp, #24]
 80170c0:	2200      	movs	r2, #0
 80170c2:	9205      	str	r2, [sp, #20]
 80170c4:	2201      	movs	r2, #1
 80170c6:	9204      	str	r2, [sp, #16]
 80170c8:	2200      	movs	r2, #0
 80170ca:	9203      	str	r2, [sp, #12]
 80170cc:	2208      	movs	r2, #8
 80170ce:	9202      	str	r2, [sp, #8]
 80170d0:	2201      	movs	r2, #1
 80170d2:	9201      	str	r2, [sp, #4]
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	2200      	movs	r2, #0
 80170da:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80170dc:	4b18      	ldr	r3, [pc, #96]	; (8017140 <RegionEU868TxConfig+0x194>)
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	4619      	mov	r1, r3
 80170e6:	460b      	mov	r3, r1
 80170e8:	005b      	lsls	r3, r3, #1
 80170ea:	440b      	add	r3, r1
 80170ec:	009b      	lsls	r3, r3, #2
 80170ee:	4413      	add	r3, r2
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80170f8:	4619      	mov	r1, r3
 80170fa:	4610      	mov	r0, r2
 80170fc:	f7ff fa2e 	bl	801655c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	899b      	ldrh	r3, [r3, #12]
 801710a:	4619      	mov	r1, r3
 801710c:	4610      	mov	r0, r2
 801710e:	f7ff fab3 	bl	8016678 <GetTimeOnAir>
 8017112:	4602      	mov	r2, r0
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017118:	4b0b      	ldr	r3, [pc, #44]	; (8017148 <RegionEU868TxConfig+0x19c>)
 801711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801711c:	68fa      	ldr	r2, [r7, #12]
 801711e:	8992      	ldrh	r2, [r2, #12]
 8017120:	b2d1      	uxtb	r1, r2
 8017122:	7ffa      	ldrb	r2, [r7, #31]
 8017124:	4610      	mov	r0, r2
 8017126:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	7f7a      	ldrb	r2, [r7, #29]
 801712c:	701a      	strb	r2, [r3, #0]
    return true;
 801712e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017130:	4618      	mov	r0, r3
 8017132:	3724      	adds	r7, #36	; 0x24
 8017134:	46bd      	mov	sp, r7
 8017136:	bd90      	pop	{r4, r7, pc}
 8017138:	0801e5fc 	.word	0x0801e5fc
 801713c:	20003c80 	.word	0x20003c80
 8017140:	20003c84 	.word	0x20003c84
 8017144:	0801e604 	.word	0x0801e604
 8017148:	0801e6b8 	.word	0x0801e6b8

0801714c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801714c:	b590      	push	{r4, r7, lr}
 801714e:	b093      	sub	sp, #76	; 0x4c
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	607a      	str	r2, [r7, #4]
 8017158:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801715a:	2307      	movs	r3, #7
 801715c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017164:	2200      	movs	r2, #0
 8017166:	601a      	str	r2, [r3, #0]
 8017168:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801716a:	2300      	movs	r3, #0
 801716c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017170:	2300      	movs	r3, #0
 8017172:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017176:	2300      	movs	r3, #0
 8017178:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801717a:	e085      	b.n	8017288 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	685a      	ldr	r2, [r3, #4]
 8017180:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017184:	4413      	add	r3, r2
 8017186:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801718a:	4611      	mov	r1, r2
 801718c:	4618      	mov	r0, r3
 801718e:	f7fe fe3d 	bl	8015e0c <RegionCommonParseLinkAdrReq>
 8017192:	4603      	mov	r3, r0
 8017194:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017198:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801719c:	2b00      	cmp	r3, #0
 801719e:	d07b      	beq.n	8017298 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80171a0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80171a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80171a8:	4413      	add	r3, r2
 80171aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80171ae:	2307      	movs	r3, #7
 80171b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80171b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80171b8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80171ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d109      	bne.n	80171d6 <RegionEU868LinkAdrReq+0x8a>
 80171c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d106      	bne.n	80171d6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80171c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171cc:	f023 0301 	bic.w	r3, r3, #1
 80171d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80171d4:	e058      	b.n	8017288 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80171d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d003      	beq.n	80171e6 <RegionEU868LinkAdrReq+0x9a>
 80171de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171e2:	2b05      	cmp	r3, #5
 80171e4:	d903      	bls.n	80171ee <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80171e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80171ea:	2b06      	cmp	r3, #6
 80171ec:	d906      	bls.n	80171fc <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80171ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171f2:	f023 0301 	bic.w	r3, r3, #1
 80171f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80171fa:	e045      	b.n	8017288 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80171fc:	2300      	movs	r3, #0
 80171fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017202:	e03d      	b.n	8017280 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017204:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017208:	2b06      	cmp	r3, #6
 801720a:	d118      	bne.n	801723e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801720c:	4b5f      	ldr	r3, [pc, #380]	; (801738c <RegionEU868LinkAdrReq+0x240>)
 801720e:	6819      	ldr	r1, [r3, #0]
 8017210:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017214:	4613      	mov	r3, r2
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	4413      	add	r3, r2
 801721a:	009b      	lsls	r3, r3, #2
 801721c:	440b      	add	r3, r1
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d028      	beq.n	8017276 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017224:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017228:	2201      	movs	r2, #1
 801722a:	fa02 f303 	lsl.w	r3, r2, r3
 801722e:	b21a      	sxth	r2, r3
 8017230:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017232:	b21b      	sxth	r3, r3
 8017234:	4313      	orrs	r3, r2
 8017236:	b21b      	sxth	r3, r3
 8017238:	b29b      	uxth	r3, r3
 801723a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801723c:	e01b      	b.n	8017276 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801723e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017240:	461a      	mov	r2, r3
 8017242:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017246:	fa42 f303 	asr.w	r3, r2, r3
 801724a:	f003 0301 	and.w	r3, r3, #1
 801724e:	2b00      	cmp	r3, #0
 8017250:	d011      	beq.n	8017276 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017252:	4b4e      	ldr	r3, [pc, #312]	; (801738c <RegionEU868LinkAdrReq+0x240>)
 8017254:	6819      	ldr	r1, [r3, #0]
 8017256:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801725a:	4613      	mov	r3, r2
 801725c:	005b      	lsls	r3, r3, #1
 801725e:	4413      	add	r3, r2
 8017260:	009b      	lsls	r3, r3, #2
 8017262:	440b      	add	r3, r1
 8017264:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017266:	2b00      	cmp	r3, #0
 8017268:	d105      	bne.n	8017276 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801726a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801726e:	f023 0301 	bic.w	r3, r3, #1
 8017272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017276:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801727a:	3301      	adds	r3, #1
 801727c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017280:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017284:	2b0f      	cmp	r3, #15
 8017286:	d9bd      	bls.n	8017204 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	7a1b      	ldrb	r3, [r3, #8]
 801728c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017290:	429a      	cmp	r2, r3
 8017292:	f4ff af73 	bcc.w	801717c <RegionEU868LinkAdrReq+0x30>
 8017296:	e000      	b.n	801729a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017298:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801729a:	2302      	movs	r3, #2
 801729c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	7a5b      	ldrb	r3, [r3, #9]
 80172a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80172a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80172ac:	4618      	mov	r0, r3
 80172ae:	f7ff fa33 	bl	8016718 <RegionEU868GetPhyParam>
 80172b2:	4603      	mov	r3, r0
 80172b4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80172b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80172ba:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	7a9b      	ldrb	r3, [r3, #10]
 80172c0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80172c2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80172c6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80172c8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80172cc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80172ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80172d2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80172da:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80172e2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	7b5b      	ldrb	r3, [r3, #13]
 80172e8:	b25b      	sxtb	r3, r3
 80172ea:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80172ec:	2310      	movs	r3, #16
 80172ee:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80172f0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80172f4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80172f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f8:	b25b      	sxtb	r3, r3
 80172fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80172fe:	2307      	movs	r3, #7
 8017300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017304:	4b21      	ldr	r3, [pc, #132]	; (801738c <RegionEU868LinkAdrReq+0x240>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801730a:	2307      	movs	r3, #7
 801730c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017310:	230e      	movs	r3, #14
 8017312:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801731c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017320:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017324:	1c9a      	adds	r2, r3, #2
 8017326:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801732a:	1c59      	adds	r1, r3, #1
 801732c:	f107 0010 	add.w	r0, r7, #16
 8017330:	4623      	mov	r3, r4
 8017332:	f7fe fdbc 	bl	8015eae <RegionCommonLinkAdrReqVerifyParams>
 8017336:	4603      	mov	r3, r0
 8017338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801733c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017340:	2b07      	cmp	r3, #7
 8017342:	d10d      	bne.n	8017360 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017344:	4b11      	ldr	r3, [pc, #68]	; (801738c <RegionEU868LinkAdrReq+0x240>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801734c:	220c      	movs	r2, #12
 801734e:	2100      	movs	r1, #0
 8017350:	4618      	mov	r0, r3
 8017352:	f001 fde3 	bl	8018f1c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017356:	4b0d      	ldr	r3, [pc, #52]	; (801738c <RegionEU868LinkAdrReq+0x240>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801735c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017360:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017368:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017370:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801737a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801737e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017380:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017384:	4618      	mov	r0, r3
 8017386:	374c      	adds	r7, #76	; 0x4c
 8017388:	46bd      	mov	sp, r7
 801738a:	bd90      	pop	{r4, r7, pc}
 801738c:	20003c84 	.word	0x20003c84

08017390 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b084      	sub	sp, #16
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017398:	2307      	movs	r3, #7
 801739a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801739c:	2300      	movs	r3, #0
 801739e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	f107 020e 	add.w	r2, r7, #14
 80173a8:	4611      	mov	r1, r2
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7ff f8ee 	bl	801658c <VerifyRfFreq>
 80173b0:	4603      	mov	r3, r0
 80173b2:	f083 0301 	eor.w	r3, r3, #1
 80173b6:	b2db      	uxtb	r3, r3
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d003      	beq.n	80173c4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	f023 0301 	bic.w	r3, r3, #1
 80173c2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f993 3000 	ldrsb.w	r3, [r3]
 80173ca:	2207      	movs	r2, #7
 80173cc:	2100      	movs	r1, #0
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fe fb5b 	bl	8015a8a <RegionCommonValueInRange>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d103      	bne.n	80173e2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80173da:	7bfb      	ldrb	r3, [r7, #15]
 80173dc:	f023 0302 	bic.w	r3, r3, #2
 80173e0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173e8:	2205      	movs	r2, #5
 80173ea:	2100      	movs	r1, #0
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7fe fb4c 	bl	8015a8a <RegionCommonValueInRange>
 80173f2:	4603      	mov	r3, r0
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d103      	bne.n	8017400 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80173f8:	7bfb      	ldrb	r3, [r7, #15]
 80173fa:	f023 0304 	bic.w	r3, r3, #4
 80173fe:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017400:	7bfb      	ldrb	r3, [r7, #15]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3710      	adds	r7, #16
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
	...

0801740c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017414:	2303      	movs	r3, #3
 8017416:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d114      	bne.n	801744c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017428:	b2db      	uxtb	r3, r3
 801742a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801742c:	f107 0308 	add.w	r3, r7, #8
 8017430:	4618      	mov	r0, r3
 8017432:	f000 f9f9 	bl	8017828 <RegionEU868ChannelsRemove>
 8017436:	4603      	mov	r3, r0
 8017438:	f083 0301 	eor.w	r3, r3, #1
 801743c:	b2db      	uxtb	r3, r3
 801743e:	2b00      	cmp	r3, #0
 8017440:	d03b      	beq.n	80174ba <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017442:	7dfb      	ldrb	r3, [r7, #23]
 8017444:	f023 0303 	bic.w	r3, r3, #3
 8017448:	75fb      	strb	r3, [r7, #23]
 801744a:	e036      	b.n	80174ba <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017458:	b2db      	uxtb	r3, r3
 801745a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801745c:	f107 030c 	add.w	r3, r7, #12
 8017460:	4618      	mov	r0, r3
 8017462:	f000 f93f 	bl	80176e4 <RegionEU868ChannelAdd>
 8017466:	4603      	mov	r3, r0
 8017468:	2b06      	cmp	r3, #6
 801746a:	d820      	bhi.n	80174ae <RegionEU868NewChannelReq+0xa2>
 801746c:	a201      	add	r2, pc, #4	; (adr r2, 8017474 <RegionEU868NewChannelReq+0x68>)
 801746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017472:	bf00      	nop
 8017474:	080174b9 	.word	0x080174b9
 8017478:	080174af 	.word	0x080174af
 801747c:	080174af 	.word	0x080174af
 8017480:	080174af 	.word	0x080174af
 8017484:	08017491 	.word	0x08017491
 8017488:	0801749b 	.word	0x0801749b
 801748c:	080174a5 	.word	0x080174a5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017490:	7dfb      	ldrb	r3, [r7, #23]
 8017492:	f023 0301 	bic.w	r3, r3, #1
 8017496:	75fb      	strb	r3, [r7, #23]
                break;
 8017498:	e00f      	b.n	80174ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801749a:	7dfb      	ldrb	r3, [r7, #23]
 801749c:	f023 0302 	bic.w	r3, r3, #2
 80174a0:	75fb      	strb	r3, [r7, #23]
                break;
 80174a2:	e00a      	b.n	80174ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80174a4:	7dfb      	ldrb	r3, [r7, #23]
 80174a6:	f023 0303 	bic.w	r3, r3, #3
 80174aa:	75fb      	strb	r3, [r7, #23]
                break;
 80174ac:	e005      	b.n	80174ba <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80174ae:	7dfb      	ldrb	r3, [r7, #23]
 80174b0:	f023 0303 	bic.w	r3, r3, #3
 80174b4:	75fb      	strb	r3, [r7, #23]
                break;
 80174b6:	e000      	b.n	80174ba <RegionEU868NewChannelReq+0xae>
                break;
 80174b8:	bf00      	nop
            }
        }
    }

    return status;
 80174ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3718      	adds	r7, #24
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
 80174c6:	bf00      	nop

080174c8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80174c8:	b480      	push	{r7}
 80174ca:	b083      	sub	sp, #12
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80174d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	370c      	adds	r7, #12
 80174d8:	46bd      	mov	sp, r7
 80174da:	bc80      	pop	{r7}
 80174dc:	4770      	bx	lr
	...

080174e0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80174e8:	2303      	movs	r3, #3
 80174ea:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80174ec:	2300      	movs	r3, #0
 80174ee:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	f107 020e 	add.w	r2, r7, #14
 80174f8:	4611      	mov	r1, r2
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7ff f846 	bl	801658c <VerifyRfFreq>
 8017500:	4603      	mov	r3, r0
 8017502:	f083 0301 	eor.w	r3, r3, #1
 8017506:	b2db      	uxtb	r3, r3
 8017508:	2b00      	cmp	r3, #0
 801750a:	d003      	beq.n	8017514 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801750c:	7bfb      	ldrb	r3, [r7, #15]
 801750e:	f023 0301 	bic.w	r3, r3, #1
 8017512:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017514:	4b13      	ldr	r3, [pc, #76]	; (8017564 <RegionEU868DlChannelReq+0x84>)
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	4619      	mov	r1, r3
 801751e:	460b      	mov	r3, r1
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	440b      	add	r3, r1
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	4413      	add	r3, r2
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d103      	bne.n	8017536 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801752e:	7bfb      	ldrb	r3, [r7, #15]
 8017530:	f023 0302 	bic.w	r3, r3, #2
 8017534:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017536:	7bfb      	ldrb	r3, [r7, #15]
 8017538:	2b03      	cmp	r3, #3
 801753a:	d10d      	bne.n	8017558 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801753c:	4b09      	ldr	r3, [pc, #36]	; (8017564 <RegionEU868DlChannelReq+0x84>)
 801753e:	6819      	ldr	r1, [r3, #0]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	4618      	mov	r0, r3
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	685a      	ldr	r2, [r3, #4]
 801754a:	4603      	mov	r3, r0
 801754c:	005b      	lsls	r3, r3, #1
 801754e:	4403      	add	r3, r0
 8017550:	009b      	lsls	r3, r3, #2
 8017552:	440b      	add	r3, r1
 8017554:	3304      	adds	r3, #4
 8017556:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8017558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801755c:	4618      	mov	r0, r3
 801755e:	3710      	adds	r7, #16
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}
 8017564:	20003c84 	.word	0x20003c84

08017568 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017568:	b480      	push	{r7}
 801756a:	b083      	sub	sp, #12
 801756c:	af00      	add	r7, sp, #0
 801756e:	4603      	mov	r3, r0
 8017570:	460a      	mov	r2, r1
 8017572:	71fb      	strb	r3, [r7, #7]
 8017574:	4613      	mov	r3, r2
 8017576:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017578:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801757c:	4618      	mov	r0, r3
 801757e:	370c      	adds	r7, #12
 8017580:	46bd      	mov	sp, r7
 8017582:	bc80      	pop	{r7}
 8017584:	4770      	bx	lr
	...

08017588 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b09a      	sub	sp, #104	; 0x68
 801758c:	af02      	add	r7, sp, #8
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017596:	2300      	movs	r3, #0
 8017598:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801759c:	2300      	movs	r3, #0
 801759e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80175a2:	2300      	movs	r3, #0
 80175a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80175a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80175aa:	2200      	movs	r2, #0
 80175ac:	601a      	str	r2, [r3, #0]
 80175ae:	605a      	str	r2, [r3, #4]
 80175b0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80175b2:	230c      	movs	r3, #12
 80175b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80175b8:	2307      	movs	r3, #7
 80175ba:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80175bc:	4b47      	ldr	r3, [pc, #284]	; (80176dc <RegionEU868NextChannel+0x154>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80175c4:	2201      	movs	r2, #1
 80175c6:	2100      	movs	r1, #0
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7fe faaf 	bl	8015b2c <RegionCommonCountChannels>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d10a      	bne.n	80175ea <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80175d4:	4b41      	ldr	r3, [pc, #260]	; (80176dc <RegionEU868NextChannel+0x154>)
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80175dc:	4b3f      	ldr	r3, [pc, #252]	; (80176dc <RegionEU868NextChannel+0x154>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f042 0207 	orr.w	r2, r2, #7
 80175e4:	b292      	uxth	r2, r2
 80175e6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	7a5b      	ldrb	r3, [r3, #9]
 80175ee:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80175fa:	4b38      	ldr	r3, [pc, #224]	; (80176dc <RegionEU868NextChannel+0x154>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017602:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017604:	4b35      	ldr	r3, [pc, #212]	; (80176dc <RegionEU868NextChannel+0x154>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801760a:	4b35      	ldr	r3, [pc, #212]	; (80176e0 <RegionEU868NextChannel+0x158>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017610:	2310      	movs	r3, #16
 8017612:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017614:	f107 0312 	add.w	r3, r7, #18
 8017618:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	7a9b      	ldrb	r3, [r3, #10]
 801762a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801762e:	2306      	movs	r3, #6
 8017630:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017634:	68fa      	ldr	r2, [r7, #12]
 8017636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801763a:	320c      	adds	r2, #12
 801763c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017640:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	7d1b      	ldrb	r3, [r3, #20]
 8017648:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	8adb      	ldrh	r3, [r3, #22]
 8017656:	4619      	mov	r1, r3
 8017658:	4610      	mov	r0, r2
 801765a:	f7ff f80d 	bl	8016678 <GetTimeOnAir>
 801765e:	4603      	mov	r3, r0
 8017660:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017662:	f107 0314 	add.w	r3, r7, #20
 8017666:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017668:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801766c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017670:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	9301      	str	r3, [sp, #4]
 8017678:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801767c:	9300      	str	r3, [sp, #0]
 801767e:	460b      	mov	r3, r1
 8017680:	6839      	ldr	r1, [r7, #0]
 8017682:	f7fe fe5a 	bl	801633a <RegionCommonIdentifyChannels>
 8017686:	4603      	mov	r3, r0
 8017688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801768c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017690:	2b00      	cmp	r3, #0
 8017692:	d10e      	bne.n	80176b2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017694:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017698:	3b01      	subs	r3, #1
 801769a:	4619      	mov	r1, r3
 801769c:	2000      	movs	r0, #0
 801769e:	f001 fbeb 	bl	8018e78 <randr>
 80176a2:	4603      	mov	r3, r0
 80176a4:	3360      	adds	r3, #96	; 0x60
 80176a6:	443b      	add	r3, r7
 80176a8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	701a      	strb	r2, [r3, #0]
 80176b0:	e00e      	b.n	80176d0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80176b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80176b6:	2b0c      	cmp	r3, #12
 80176b8:	d10a      	bne.n	80176d0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80176ba:	4b08      	ldr	r3, [pc, #32]	; (80176dc <RegionEU868NextChannel+0x154>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80176c2:	4b06      	ldr	r3, [pc, #24]	; (80176dc <RegionEU868NextChannel+0x154>)
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f042 0207 	orr.w	r2, r2, #7
 80176ca:	b292      	uxth	r2, r2
 80176cc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 80176d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3760      	adds	r7, #96	; 0x60
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	20003c84 	.word	0x20003c84
 80176e0:	20003c80 	.word	0x20003c80

080176e4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80176ec:	2300      	movs	r3, #0
 80176ee:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80176f0:	2300      	movs	r3, #0
 80176f2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80176f4:	2300      	movs	r3, #0
 80176f6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	791b      	ldrb	r3, [r3, #4]
 80176fc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80176fe:	7b7b      	ldrb	r3, [r7, #13]
 8017700:	2b02      	cmp	r3, #2
 8017702:	d801      	bhi.n	8017708 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017704:	2306      	movs	r3, #6
 8017706:	e089      	b.n	801781c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017708:	7b7b      	ldrb	r3, [r7, #13]
 801770a:	2b0f      	cmp	r3, #15
 801770c:	d901      	bls.n	8017712 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801770e:	2303      	movs	r3, #3
 8017710:	e084      	b.n	801781c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	7a1b      	ldrb	r3, [r3, #8]
 8017718:	f343 0303 	sbfx	r3, r3, #0, #4
 801771c:	b25b      	sxtb	r3, r3
 801771e:	2207      	movs	r2, #7
 8017720:	2100      	movs	r1, #0
 8017722:	4618      	mov	r0, r3
 8017724:	f7fe f9b1 	bl	8015a8a <RegionCommonValueInRange>
 8017728:	4603      	mov	r3, r0
 801772a:	2b00      	cmp	r3, #0
 801772c:	d101      	bne.n	8017732 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801772e:	2301      	movs	r3, #1
 8017730:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	7a1b      	ldrb	r3, [r3, #8]
 8017738:	f343 1303 	sbfx	r3, r3, #4, #4
 801773c:	b25b      	sxtb	r3, r3
 801773e:	2207      	movs	r2, #7
 8017740:	2100      	movs	r1, #0
 8017742:	4618      	mov	r0, r3
 8017744:	f7fe f9a1 	bl	8015a8a <RegionCommonValueInRange>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d101      	bne.n	8017752 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801774e:	2301      	movs	r3, #1
 8017750:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	7a1b      	ldrb	r3, [r3, #8]
 8017758:	f343 0303 	sbfx	r3, r3, #0, #4
 801775c:	b25a      	sxtb	r2, r3
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	7a1b      	ldrb	r3, [r3, #8]
 8017764:	f343 1303 	sbfx	r3, r3, #4, #4
 8017768:	b25b      	sxtb	r3, r3
 801776a:	429a      	cmp	r2, r3
 801776c:	dd01      	ble.n	8017772 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801776e:	2301      	movs	r3, #1
 8017770:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017772:	7bbb      	ldrb	r3, [r7, #14]
 8017774:	f083 0301 	eor.w	r3, r3, #1
 8017778:	b2db      	uxtb	r3, r3
 801777a:	2b00      	cmp	r3, #0
 801777c:	d010      	beq.n	80177a0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f107 020c 	add.w	r2, r7, #12
 8017788:	4611      	mov	r1, r2
 801778a:	4618      	mov	r0, r3
 801778c:	f7fe fefe 	bl	801658c <VerifyRfFreq>
 8017790:	4603      	mov	r3, r0
 8017792:	f083 0301 	eor.w	r3, r3, #1
 8017796:	b2db      	uxtb	r3, r3
 8017798:	2b00      	cmp	r3, #0
 801779a:	d001      	beq.n	80177a0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801779c:	2301      	movs	r3, #1
 801779e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80177a0:	7bfb      	ldrb	r3, [r7, #15]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d004      	beq.n	80177b0 <RegionEU868ChannelAdd+0xcc>
 80177a6:	7bbb      	ldrb	r3, [r7, #14]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d001      	beq.n	80177b0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80177ac:	2306      	movs	r3, #6
 80177ae:	e035      	b.n	801781c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80177b0:	7bfb      	ldrb	r3, [r7, #15]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d001      	beq.n	80177ba <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80177b6:	2305      	movs	r3, #5
 80177b8:	e030      	b.n	801781c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80177ba:	7bbb      	ldrb	r3, [r7, #14]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80177c0:	2304      	movs	r3, #4
 80177c2:	e02b      	b.n	801781c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80177c4:	4b17      	ldr	r3, [pc, #92]	; (8017824 <RegionEU868ChannelAdd+0x140>)
 80177c6:	6819      	ldr	r1, [r3, #0]
 80177c8:	7b7a      	ldrb	r2, [r7, #13]
 80177ca:	4613      	mov	r3, r2
 80177cc:	005b      	lsls	r3, r3, #1
 80177ce:	4413      	add	r3, r2
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	18c8      	adds	r0, r1, r3
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	220c      	movs	r2, #12
 80177da:	4619      	mov	r1, r3
 80177dc:	f001 fb63 	bl	8018ea6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80177e0:	4b10      	ldr	r3, [pc, #64]	; (8017824 <RegionEU868ChannelAdd+0x140>)
 80177e2:	6819      	ldr	r1, [r3, #0]
 80177e4:	7b7a      	ldrb	r2, [r7, #13]
 80177e6:	7b38      	ldrb	r0, [r7, #12]
 80177e8:	4613      	mov	r3, r2
 80177ea:	005b      	lsls	r3, r3, #1
 80177ec:	4413      	add	r3, r2
 80177ee:	009b      	lsls	r3, r3, #2
 80177f0:	440b      	add	r3, r1
 80177f2:	3309      	adds	r3, #9
 80177f4:	4602      	mov	r2, r0
 80177f6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80177f8:	4b0a      	ldr	r3, [pc, #40]	; (8017824 <RegionEU868ChannelAdd+0x140>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017800:	b21a      	sxth	r2, r3
 8017802:	7b7b      	ldrb	r3, [r7, #13]
 8017804:	2101      	movs	r1, #1
 8017806:	fa01 f303 	lsl.w	r3, r1, r3
 801780a:	b21b      	sxth	r3, r3
 801780c:	4313      	orrs	r3, r2
 801780e:	b21a      	sxth	r2, r3
 8017810:	4b04      	ldr	r3, [pc, #16]	; (8017824 <RegionEU868ChannelAdd+0x140>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	b292      	uxth	r2, r2
 8017816:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801781a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801781c:	4618      	mov	r0, r3
 801781e:	3710      	adds	r7, #16
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	20003c84 	.word	0x20003c84

08017828 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b086      	sub	sp, #24
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017836:	7dfb      	ldrb	r3, [r7, #23]
 8017838:	2b02      	cmp	r3, #2
 801783a:	d801      	bhi.n	8017840 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801783c:	2300      	movs	r3, #0
 801783e:	e016      	b.n	801786e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017840:	4b0d      	ldr	r3, [pc, #52]	; (8017878 <RegionEU868ChannelsRemove+0x50>)
 8017842:	6819      	ldr	r1, [r3, #0]
 8017844:	7dfa      	ldrb	r2, [r7, #23]
 8017846:	4613      	mov	r3, r2
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	4413      	add	r3, r2
 801784c:	009b      	lsls	r3, r3, #2
 801784e:	440b      	add	r3, r1
 8017850:	461a      	mov	r2, r3
 8017852:	2300      	movs	r3, #0
 8017854:	6013      	str	r3, [r2, #0]
 8017856:	6053      	str	r3, [r2, #4]
 8017858:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801785a:	4b07      	ldr	r3, [pc, #28]	; (8017878 <RegionEU868ChannelsRemove+0x50>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017862:	7df9      	ldrb	r1, [r7, #23]
 8017864:	2210      	movs	r2, #16
 8017866:	4618      	mov	r0, r3
 8017868:	f7fe f92c 	bl	8015ac4 <RegionCommonChanDisable>
 801786c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801786e:	4618      	mov	r0, r3
 8017870:	3718      	adds	r7, #24
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}
 8017876:	bf00      	nop
 8017878:	20003c84 	.word	0x20003c84

0801787c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801787c:	b590      	push	{r4, r7, lr}
 801787e:	b085      	sub	sp, #20
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801788a:	4b20      	ldr	r3, [pc, #128]	; (801790c <RegionEU868SetContinuousWave+0x90>)
 801788c:	681a      	ldr	r2, [r3, #0]
 801788e:	4b20      	ldr	r3, [pc, #128]	; (8017910 <RegionEU868SetContinuousWave+0x94>)
 8017890:	6819      	ldr	r1, [r3, #0]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	461c      	mov	r4, r3
 8017898:	4623      	mov	r3, r4
 801789a:	005b      	lsls	r3, r3, #1
 801789c:	4423      	add	r3, r4
 801789e:	009b      	lsls	r3, r3, #2
 80178a0:	440b      	add	r3, r1
 80178a2:	3309      	adds	r3, #9
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	4619      	mov	r1, r3
 80178a8:	460b      	mov	r3, r1
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	440b      	add	r3, r1
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	4413      	add	r3, r2
 80178b2:	3302      	adds	r3, #2
 80178b4:	f993 3000 	ldrsb.w	r3, [r3]
 80178b8:	4619      	mov	r1, r3
 80178ba:	f7fe fdde 	bl	801647a <RegionCommonLimitTxPower>
 80178be:	4603      	mov	r3, r0
 80178c0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80178c2:	2300      	movs	r3, #0
 80178c4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80178c6:	4b12      	ldr	r3, [pc, #72]	; (8017910 <RegionEU868SetContinuousWave+0x94>)
 80178c8:	681a      	ldr	r2, [r3, #0]
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	4619      	mov	r1, r3
 80178d0:	460b      	mov	r3, r1
 80178d2:	005b      	lsls	r3, r3, #1
 80178d4:	440b      	add	r3, r1
 80178d6:	009b      	lsls	r3, r3, #2
 80178d8:	4413      	add	r3, r2
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6859      	ldr	r1, [r3, #4]
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	689a      	ldr	r2, [r3, #8]
 80178e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fe fc36 	bl	801615c <RegionCommonComputeTxPower>
 80178f0:	4603      	mov	r3, r0
 80178f2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80178f4:	4b07      	ldr	r3, [pc, #28]	; (8017914 <RegionEU868SetContinuousWave+0x98>)
 80178f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178f8:	687a      	ldr	r2, [r7, #4]
 80178fa:	8992      	ldrh	r2, [r2, #12]
 80178fc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017900:	68b8      	ldr	r0, [r7, #8]
 8017902:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8017904:	bf00      	nop
 8017906:	3714      	adds	r7, #20
 8017908:	46bd      	mov	sp, r7
 801790a:	bd90      	pop	{r4, r7, pc}
 801790c:	20003c80 	.word	0x20003c80
 8017910:	20003c84 	.word	0x20003c84
 8017914:	0801e6b8 	.word	0x0801e6b8

08017918 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017918:	b480      	push	{r7}
 801791a:	b085      	sub	sp, #20
 801791c:	af00      	add	r7, sp, #0
 801791e:	4603      	mov	r3, r0
 8017920:	71fb      	strb	r3, [r7, #7]
 8017922:	460b      	mov	r3, r1
 8017924:	71bb      	strb	r3, [r7, #6]
 8017926:	4613      	mov	r3, r2
 8017928:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801792a:	79ba      	ldrb	r2, [r7, #6]
 801792c:	797b      	ldrb	r3, [r7, #5]
 801792e:	1ad3      	subs	r3, r2, r3
 8017930:	b2db      	uxtb	r3, r3
 8017932:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017938:	2b00      	cmp	r3, #0
 801793a:	da01      	bge.n	8017940 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801793c:	2300      	movs	r3, #0
 801793e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017940:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017942:	4618      	mov	r0, r3
 8017944:	3714      	adds	r7, #20
 8017946:	46bd      	mov	sp, r7
 8017948:	bc80      	pop	{r7}
 801794a:	4770      	bx	lr

0801794c <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	603b      	str	r3, [r7, #0]
 8017954:	4603      	mov	r3, r0
 8017956:	71fb      	strb	r3, [r7, #7]
 8017958:	460b      	mov	r3, r1
 801795a:	71bb      	strb	r3, [r7, #6]
 801795c:	4613      	mov	r3, r2
 801795e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017960:	79fb      	ldrb	r3, [r7, #7]
 8017962:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017964:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801796c:	4611      	mov	r1, r2
 801796e:	4618      	mov	r0, r3
 8017970:	f7fe fd83 	bl	801647a <RegionCommonLimitTxPower>
 8017974:	4603      	mov	r3, r0
 8017976:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017978:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801797c:	2b04      	cmp	r3, #4
 801797e:	d106      	bne.n	801798e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017984:	2b02      	cmp	r3, #2
 8017986:	bfb8      	it	lt
 8017988:	2302      	movlt	r3, #2
 801798a:	73fb      	strb	r3, [r7, #15]
 801798c:	e00d      	b.n	80179aa <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801798e:	2204      	movs	r2, #4
 8017990:	2100      	movs	r1, #0
 8017992:	6838      	ldr	r0, [r7, #0]
 8017994:	f7fe f8ca 	bl	8015b2c <RegionCommonCountChannels>
 8017998:	4603      	mov	r3, r0
 801799a:	2b31      	cmp	r3, #49	; 0x31
 801799c:	d805      	bhi.n	80179aa <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801799e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179a2:	2b05      	cmp	r3, #5
 80179a4:	bfb8      	it	lt
 80179a6:	2305      	movlt	r3, #5
 80179a8:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 80179aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
	...

080179b8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80179c0:	4b18      	ldr	r3, [pc, #96]	; (8017a24 <VerifyRfFreq+0x6c>)
 80179c2:	6a1b      	ldr	r3, [r3, #32]
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	4798      	blx	r3
 80179c8:	4603      	mov	r3, r0
 80179ca:	f083 0301 	eor.w	r3, r3, #1
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d001      	beq.n	80179d8 <VerifyRfFreq+0x20>
    {
        return false;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e021      	b.n	8017a1c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	4a13      	ldr	r2, [pc, #76]	; (8017a28 <VerifyRfFreq+0x70>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d910      	bls.n	8017a02 <VerifyRfFreq+0x4a>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	4a12      	ldr	r2, [pc, #72]	; (8017a2c <VerifyRfFreq+0x74>)
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d80c      	bhi.n	8017a02 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	4b11      	ldr	r3, [pc, #68]	; (8017a30 <VerifyRfFreq+0x78>)
 80179ec:	4413      	add	r3, r2
 80179ee:	4a11      	ldr	r2, [pc, #68]	; (8017a34 <VerifyRfFreq+0x7c>)
 80179f0:	fba2 1203 	umull	r1, r2, r2, r3
 80179f4:	0c92      	lsrs	r2, r2, #18
 80179f6:	4910      	ldr	r1, [pc, #64]	; (8017a38 <VerifyRfFreq+0x80>)
 80179f8:	fb01 f202 	mul.w	r2, r1, r2
 80179fc:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80179fe:	2a00      	cmp	r2, #0
 8017a00:	d001      	beq.n	8017a06 <VerifyRfFreq+0x4e>
    {
        return false;
 8017a02:	2300      	movs	r3, #0
 8017a04:	e00a      	b.n	8017a1c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4a0c      	ldr	r2, [pc, #48]	; (8017a3c <VerifyRfFreq+0x84>)
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d903      	bls.n	8017a16 <VerifyRfFreq+0x5e>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	4a06      	ldr	r2, [pc, #24]	; (8017a2c <VerifyRfFreq+0x74>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d901      	bls.n	8017a1a <VerifyRfFreq+0x62>
    {
        return false;
 8017a16:	2300      	movs	r3, #0
 8017a18:	e000      	b.n	8017a1c <VerifyRfFreq+0x64>
    }
    return true;
 8017a1a:	2301      	movs	r3, #1
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	0801e6b8 	.word	0x0801e6b8
 8017a28:	3708709f 	.word	0x3708709f
 8017a2c:	374886e0 	.word	0x374886e0
 8017a30:	c8f78f60 	.word	0xc8f78f60
 8017a34:	6fd91d85 	.word	0x6fd91d85
 8017a38:	000927c0 	.word	0x000927c0
 8017a3c:	35c8015f 	.word	0x35c8015f

08017a40 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017a40:	b590      	push	{r4, r7, lr}
 8017a42:	b089      	sub	sp, #36	; 0x24
 8017a44:	af04      	add	r7, sp, #16
 8017a46:	4603      	mov	r3, r0
 8017a48:	460a      	mov	r2, r1
 8017a4a:	71fb      	strb	r3, [r7, #7]
 8017a4c:	4613      	mov	r3, r2
 8017a4e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a54:	4a0f      	ldr	r2, [pc, #60]	; (8017a94 <GetTimeOnAir+0x54>)
 8017a56:	5cd3      	ldrb	r3, [r2, r3]
 8017a58:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a5e:	490e      	ldr	r1, [pc, #56]	; (8017a98 <GetTimeOnAir+0x58>)
 8017a60:	4618      	mov	r0, r3
 8017a62:	f7fe fd1f 	bl	80164a4 <RegionCommonGetBandwidth>
 8017a66:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017a68:	4b0c      	ldr	r3, [pc, #48]	; (8017a9c <GetTimeOnAir+0x5c>)
 8017a6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017a70:	88bb      	ldrh	r3, [r7, #4]
 8017a72:	b2db      	uxtb	r3, r3
 8017a74:	2101      	movs	r1, #1
 8017a76:	9103      	str	r1, [sp, #12]
 8017a78:	9302      	str	r3, [sp, #8]
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	9301      	str	r3, [sp, #4]
 8017a7e:	2308      	movs	r3, #8
 8017a80:	9300      	str	r3, [sp, #0]
 8017a82:	2301      	movs	r3, #1
 8017a84:	68b9      	ldr	r1, [r7, #8]
 8017a86:	2001      	movs	r0, #1
 8017a88:	47a0      	blx	r4
 8017a8a:	4603      	mov	r3, r0
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3714      	adds	r7, #20
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd90      	pop	{r4, r7, pc}
 8017a94:	0801e634 	.word	0x0801e634
 8017a98:	0801e644 	.word	0x0801e644
 8017a9c:	0801e6b8 	.word	0x0801e6b8

08017aa0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b088      	sub	sp, #32
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	3b01      	subs	r3, #1
 8017ab2:	2b38      	cmp	r3, #56	; 0x38
 8017ab4:	f200 813c 	bhi.w	8017d30 <RegionUS915GetPhyParam+0x290>
 8017ab8:	a201      	add	r2, pc, #4	; (adr r2, 8017ac0 <RegionUS915GetPhyParam+0x20>)
 8017aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017abe:	bf00      	nop
 8017ac0:	08017ba5 	.word	0x08017ba5
 8017ac4:	08017bab 	.word	0x08017bab
 8017ac8:	08017d31 	.word	0x08017d31
 8017acc:	08017d31 	.word	0x08017d31
 8017ad0:	08017d31 	.word	0x08017d31
 8017ad4:	08017bb1 	.word	0x08017bb1
 8017ad8:	08017d31 	.word	0x08017d31
 8017adc:	08017beb 	.word	0x08017beb
 8017ae0:	08017d31 	.word	0x08017d31
 8017ae4:	08017bf1 	.word	0x08017bf1
 8017ae8:	08017bf7 	.word	0x08017bf7
 8017aec:	08017bfd 	.word	0x08017bfd
 8017af0:	08017c03 	.word	0x08017c03
 8017af4:	08017c13 	.word	0x08017c13
 8017af8:	08017c23 	.word	0x08017c23
 8017afc:	08017c29 	.word	0x08017c29
 8017b00:	08017c31 	.word	0x08017c31
 8017b04:	08017c39 	.word	0x08017c39
 8017b08:	08017c41 	.word	0x08017c41
 8017b0c:	08017c49 	.word	0x08017c49
 8017b10:	08017c51 	.word	0x08017c51
 8017b14:	08017c59 	.word	0x08017c59
 8017b18:	08017c6d 	.word	0x08017c6d
 8017b1c:	08017c73 	.word	0x08017c73
 8017b20:	08017c79 	.word	0x08017c79
 8017b24:	08017c7f 	.word	0x08017c7f
 8017b28:	08017c8b 	.word	0x08017c8b
 8017b2c:	08017c97 	.word	0x08017c97
 8017b30:	08017c9d 	.word	0x08017c9d
 8017b34:	08017ca5 	.word	0x08017ca5
 8017b38:	08017cab 	.word	0x08017cab
 8017b3c:	08017cb1 	.word	0x08017cb1
 8017b40:	08017cb7 	.word	0x08017cb7
 8017b44:	08017bb7 	.word	0x08017bb7
 8017b48:	08017d31 	.word	0x08017d31
 8017b4c:	08017d31 	.word	0x08017d31
 8017b50:	08017d31 	.word	0x08017d31
 8017b54:	08017d31 	.word	0x08017d31
 8017b58:	08017d31 	.word	0x08017d31
 8017b5c:	08017d31 	.word	0x08017d31
 8017b60:	08017d31 	.word	0x08017d31
 8017b64:	08017d31 	.word	0x08017d31
 8017b68:	08017d31 	.word	0x08017d31
 8017b6c:	08017d31 	.word	0x08017d31
 8017b70:	08017d31 	.word	0x08017d31
 8017b74:	08017d31 	.word	0x08017d31
 8017b78:	08017d31 	.word	0x08017d31
 8017b7c:	08017cbf 	.word	0x08017cbf
 8017b80:	08017cd3 	.word	0x08017cd3
 8017b84:	08017ce1 	.word	0x08017ce1
 8017b88:	08017ce7 	.word	0x08017ce7
 8017b8c:	08017d31 	.word	0x08017d31
 8017b90:	08017ced 	.word	0x08017ced
 8017b94:	08017d01 	.word	0x08017d01
 8017b98:	08017d07 	.word	0x08017d07
 8017b9c:	08017d0d 	.word	0x08017d0d
 8017ba0:	08017d1d 	.word	0x08017d1d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017ba4:	2308      	movs	r3, #8
 8017ba6:	61bb      	str	r3, [r7, #24]
            break;
 8017ba8:	e0c3      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017baa:	2300      	movs	r3, #0
 8017bac:	61bb      	str	r3, [r7, #24]
            break;
 8017bae:	e0c0      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	61bb      	str	r3, [r7, #24]
            break;
 8017bb4:	e0bd      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017bbc:	733b      	strb	r3, [r7, #12]
 8017bbe:	2304      	movs	r3, #4
 8017bc0:	737b      	strb	r3, [r7, #13]
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	73bb      	strb	r3, [r7, #14]
 8017bc6:	2348      	movs	r3, #72	; 0x48
 8017bc8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017bca:	4b5d      	ldr	r3, [pc, #372]	; (8017d40 <RegionUS915GetPhyParam+0x2a0>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017bd2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017bd4:	4b5a      	ldr	r3, [pc, #360]	; (8017d40 <RegionUS915GetPhyParam+0x2a0>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017bd8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017bda:	f107 030c 	add.w	r3, r7, #12
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7fe fc0d 	bl	80163fe <RegionCommonGetNextLowerTxDr>
 8017be4:	4603      	mov	r3, r0
 8017be6:	61bb      	str	r3, [r7, #24]
            break;
 8017be8:	e0a3      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017bea:	2300      	movs	r3, #0
 8017bec:	61bb      	str	r3, [r7, #24]
            break;
 8017bee:	e0a0      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	61bb      	str	r3, [r7, #24]
            break;
 8017bf4:	e09d      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017bf6:	2340      	movs	r3, #64	; 0x40
 8017bf8:	61bb      	str	r3, [r7, #24]
            break;
 8017bfa:	e09a      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017bfc:	2320      	movs	r3, #32
 8017bfe:	61bb      	str	r3, [r7, #24]
            break;
 8017c00:	e097      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c08:	461a      	mov	r2, r3
 8017c0a:	4b4e      	ldr	r3, [pc, #312]	; (8017d44 <RegionUS915GetPhyParam+0x2a4>)
 8017c0c:	5c9b      	ldrb	r3, [r3, r2]
 8017c0e:	61bb      	str	r3, [r7, #24]
            break;
 8017c10:	e08f      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	4b4b      	ldr	r3, [pc, #300]	; (8017d48 <RegionUS915GetPhyParam+0x2a8>)
 8017c1c:	5c9b      	ldrb	r3, [r3, r2]
 8017c1e:	61bb      	str	r3, [r7, #24]
            break;
 8017c20:	e087      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017c22:	2300      	movs	r3, #0
 8017c24:	61bb      	str	r3, [r7, #24]
            break;
 8017c26:	e084      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017c28:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017c2c:	61bb      	str	r3, [r7, #24]
            break;
 8017c2e:	e080      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c34:	61bb      	str	r3, [r7, #24]
            break;
 8017c36:	e07c      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017c38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017c3c:	61bb      	str	r3, [r7, #24]
            break;
 8017c3e:	e078      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017c40:	f241 3388 	movw	r3, #5000	; 0x1388
 8017c44:	61bb      	str	r3, [r7, #24]
            break;
 8017c46:	e074      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017c48:	f241 7370 	movw	r3, #6000	; 0x1770
 8017c4c:	61bb      	str	r3, [r7, #24]
            break;
 8017c4e:	e070      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8017c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017c54:	61bb      	str	r3, [r7, #24]
            break;
 8017c56:	e06c      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8017c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017c5c:	483b      	ldr	r0, [pc, #236]	; (8017d4c <RegionUS915GetPhyParam+0x2ac>)
 8017c5e:	f001 f90b 	bl	8018e78 <randr>
 8017c62:	4603      	mov	r3, r0
 8017c64:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017c68:	61bb      	str	r3, [r7, #24]
            break;
 8017c6a:	e062      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	61bb      	str	r3, [r7, #24]
            break;
 8017c70:	e05f      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017c72:	4b37      	ldr	r3, [pc, #220]	; (8017d50 <RegionUS915GetPhyParam+0x2b0>)
 8017c74:	61bb      	str	r3, [r7, #24]
            break;
 8017c76:	e05c      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017c78:	2308      	movs	r3, #8
 8017c7a:	61bb      	str	r3, [r7, #24]
            break;
 8017c7c:	e059      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017c7e:	4b30      	ldr	r3, [pc, #192]	; (8017d40 <RegionUS915GetPhyParam+0x2a0>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c86:	61bb      	str	r3, [r7, #24]
            break;
 8017c88:	e053      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017c8a:	4b2d      	ldr	r3, [pc, #180]	; (8017d40 <RegionUS915GetPhyParam+0x2a0>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017c92:	61bb      	str	r3, [r7, #24]
            break;
 8017c94:	e04d      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017c96:	2348      	movs	r3, #72	; 0x48
 8017c98:	61bb      	str	r3, [r7, #24]
            break;
 8017c9a:	e04a      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017c9c:	4b28      	ldr	r3, [pc, #160]	; (8017d40 <RegionUS915GetPhyParam+0x2a0>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	61bb      	str	r3, [r7, #24]
            break;
 8017ca2:	e046      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	61bb      	str	r3, [r7, #24]
            break;
 8017ca8:	e043      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017caa:	2300      	movs	r3, #0
 8017cac:	61bb      	str	r3, [r7, #24]
            break;
 8017cae:	e040      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017cb0:	4b28      	ldr	r3, [pc, #160]	; (8017d54 <RegionUS915GetPhyParam+0x2b4>)
 8017cb2:	61bb      	str	r3, [r7, #24]
            break;
 8017cb4:	e03d      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017cb6:	f04f 0300 	mov.w	r3, #0
 8017cba:	61bb      	str	r3, [r7, #24]
            break;
 8017cbc:	e039      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	791b      	ldrb	r3, [r3, #4]
 8017cc2:	4a25      	ldr	r2, [pc, #148]	; (8017d58 <RegionUS915GetPhyParam+0x2b8>)
 8017cc4:	4922      	ldr	r1, [pc, #136]	; (8017d50 <RegionUS915GetPhyParam+0x2b0>)
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f7fd fd0b 	bl	80156e2 <RegionBaseUSCalcDownlinkFrequency>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017cd0:	e02f      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017cd2:	2317      	movs	r3, #23
 8017cd4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017cd6:	2305      	movs	r3, #5
 8017cd8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017cda:	2303      	movs	r3, #3
 8017cdc:	76bb      	strb	r3, [r7, #26]
            break;
 8017cde:	e028      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017ce0:	2308      	movs	r3, #8
 8017ce2:	61bb      	str	r3, [r7, #24]
            break;
 8017ce4:	e025      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017ce6:	2308      	movs	r3, #8
 8017ce8:	61bb      	str	r3, [r7, #24]
            break;
 8017cea:	e022      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	791b      	ldrb	r3, [r3, #4]
 8017cf0:	4a19      	ldr	r2, [pc, #100]	; (8017d58 <RegionUS915GetPhyParam+0x2b8>)
 8017cf2:	4917      	ldr	r1, [pc, #92]	; (8017d50 <RegionUS915GetPhyParam+0x2b0>)
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7fd fcf4 	bl	80156e2 <RegionBaseUSCalcDownlinkFrequency>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017cfe:	e018      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017d00:	2308      	movs	r3, #8
 8017d02:	61bb      	str	r3, [r7, #24]
            break;
 8017d04:	e015      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017d06:	2308      	movs	r3, #8
 8017d08:	61bb      	str	r3, [r7, #24]
            break;
 8017d0a:	e012      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d12:	461a      	mov	r2, r3
 8017d14:	4b11      	ldr	r3, [pc, #68]	; (8017d5c <RegionUS915GetPhyParam+0x2bc>)
 8017d16:	5c9b      	ldrb	r3, [r3, r2]
 8017d18:	61bb      	str	r3, [r7, #24]
            break;
 8017d1a:	e00a      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d22:	490f      	ldr	r1, [pc, #60]	; (8017d60 <RegionUS915GetPhyParam+0x2c0>)
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7fe fbbd 	bl	80164a4 <RegionCommonGetBandwidth>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	61bb      	str	r3, [r7, #24]
            break;
 8017d2e:	e000      	b.n	8017d32 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8017d30:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017d32:	69bb      	ldr	r3, [r7, #24]
 8017d34:	61fb      	str	r3, [r7, #28]
 8017d36:	69fb      	ldr	r3, [r7, #28]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3720      	adds	r7, #32
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	20003c8c 	.word	0x20003c8c
 8017d44:	0801e698 	.word	0x0801e698
 8017d48:	0801e6a8 	.word	0x0801e6a8
 8017d4c:	fffffc18 	.word	0xfffffc18
 8017d50:	370870a0 	.word	0x370870a0
 8017d54:	4200999a 	.word	0x4200999a
 8017d58:	000927c0 	.word	0x000927c0
 8017d5c:	0801e634 	.word	0x0801e634
 8017d60:	0801e644 	.word	0x0801e644

08017d64 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017d64:	b590      	push	{r4, r7, lr}
 8017d66:	b085      	sub	sp, #20
 8017d68:	af02      	add	r7, sp, #8
 8017d6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017d6c:	4b11      	ldr	r3, [pc, #68]	; (8017db4 <RegionUS915SetBandTxDone+0x50>)
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	4b11      	ldr	r3, [pc, #68]	; (8017db8 <RegionUS915SetBandTxDone+0x54>)
 8017d72:	6819      	ldr	r1, [r3, #0]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	005b      	lsls	r3, r3, #1
 8017d7e:	4403      	add	r3, r0
 8017d80:	009b      	lsls	r3, r3, #2
 8017d82:	440b      	add	r3, r1
 8017d84:	3309      	adds	r3, #9
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	4619      	mov	r1, r3
 8017d8a:	460b      	mov	r3, r1
 8017d8c:	005b      	lsls	r3, r3, #1
 8017d8e:	440b      	add	r3, r1
 8017d90:	00db      	lsls	r3, r3, #3
 8017d92:	18d0      	adds	r0, r2, r3
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6899      	ldr	r1, [r3, #8]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	785c      	ldrb	r4, [r3, #1]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	691a      	ldr	r2, [r3, #16]
 8017da0:	9200      	str	r2, [sp, #0]
 8017da2:	68db      	ldr	r3, [r3, #12]
 8017da4:	4622      	mov	r2, r4
 8017da6:	f7fd ff13 	bl	8015bd0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8017daa:	bf00      	nop
 8017dac:	370c      	adds	r7, #12
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd90      	pop	{r4, r7, pc}
 8017db2:	bf00      	nop
 8017db4:	20003c88 	.word	0x20003c88
 8017db8:	20003c8c 	.word	0x20003c8c

08017dbc <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b08a      	sub	sp, #40	; 0x28
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	81bb      	strh	r3, [r7, #12]
 8017dc8:	2300      	movs	r3, #0
 8017dca:	73bb      	strb	r3, [r7, #14]
 8017dcc:	2300      	movs	r3, #0
 8017dce:	613b      	str	r3, [r7, #16]
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	617b      	str	r3, [r7, #20]
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	61bb      	str	r3, [r7, #24]
 8017dd8:	2300      	movs	r3, #0
 8017dda:	61fb      	str	r3, [r7, #28]
 8017ddc:	2300      	movs	r3, #0
 8017dde:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	7a1b      	ldrb	r3, [r3, #8]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d007      	beq.n	8017dfa <RegionUS915InitDefaults+0x3e>
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	f2c0 8106 	blt.w	8017ffc <RegionUS915InitDefaults+0x240>
 8017df0:	3b01      	subs	r3, #1
 8017df2:	2b01      	cmp	r3, #1
 8017df4:	f200 8102 	bhi.w	8017ffc <RegionUS915InitDefaults+0x240>
 8017df8:	e0ce      	b.n	8017f98 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	f000 80fe 	beq.w	8018000 <RegionUS915InitDefaults+0x244>
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 80f9 	beq.w	8018000 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4a7d      	ldr	r2, [pc, #500]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017e14:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	685b      	ldr	r3, [r3, #4]
 8017e1a:	4a7c      	ldr	r2, [pc, #496]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017e1c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017e1e:	4b7a      	ldr	r3, [pc, #488]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	2200      	movs	r2, #0
 8017e24:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017e28:	4b77      	ldr	r3, [pc, #476]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017e32:	4b75      	ldr	r3, [pc, #468]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f107 030c 	add.w	r3, r7, #12
 8017e3c:	2218      	movs	r2, #24
 8017e3e:	4619      	mov	r1, r3
 8017e40:	f001 f831 	bl	8018ea6 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017e44:	2300      	movs	r3, #0
 8017e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e4a:	e02e      	b.n	8017eaa <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e50:	4a6f      	ldr	r2, [pc, #444]	; (8018010 <RegionUS915InitDefaults+0x254>)
 8017e52:	fb03 f202 	mul.w	r2, r3, r2
 8017e56:	4b6f      	ldr	r3, [pc, #444]	; (8018014 <RegionUS915InitDefaults+0x258>)
 8017e58:	4413      	add	r3, r2
 8017e5a:	4a6c      	ldr	r2, [pc, #432]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017e5c:	6811      	ldr	r1, [r2, #0]
 8017e5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e62:	4618      	mov	r0, r3
 8017e64:	4613      	mov	r3, r2
 8017e66:	005b      	lsls	r3, r3, #1
 8017e68:	4413      	add	r3, r2
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	440b      	add	r3, r1
 8017e6e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017e70:	4b66      	ldr	r3, [pc, #408]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017e72:	6819      	ldr	r1, [r3, #0]
 8017e74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e78:	4613      	mov	r3, r2
 8017e7a:	005b      	lsls	r3, r3, #1
 8017e7c:	4413      	add	r3, r2
 8017e7e:	009b      	lsls	r3, r3, #2
 8017e80:	440b      	add	r3, r1
 8017e82:	3308      	adds	r3, #8
 8017e84:	2230      	movs	r2, #48	; 0x30
 8017e86:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017e88:	4b60      	ldr	r3, [pc, #384]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017e8a:	6819      	ldr	r1, [r3, #0]
 8017e8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e90:	4613      	mov	r3, r2
 8017e92:	005b      	lsls	r3, r3, #1
 8017e94:	4413      	add	r3, r2
 8017e96:	009b      	lsls	r3, r3, #2
 8017e98:	440b      	add	r3, r1
 8017e9a:	3309      	adds	r3, #9
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eae:	2b3f      	cmp	r3, #63	; 0x3f
 8017eb0:	d9cc      	bls.n	8017e4c <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017eb2:	2340      	movs	r3, #64	; 0x40
 8017eb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017eb8:	e02f      	b.n	8017f1a <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017eba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ebe:	3b40      	subs	r3, #64	; 0x40
 8017ec0:	4a55      	ldr	r2, [pc, #340]	; (8018018 <RegionUS915InitDefaults+0x25c>)
 8017ec2:	fb03 f202 	mul.w	r2, r3, r2
 8017ec6:	4b55      	ldr	r3, [pc, #340]	; (801801c <RegionUS915InitDefaults+0x260>)
 8017ec8:	4413      	add	r3, r2
 8017eca:	4a50      	ldr	r2, [pc, #320]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017ecc:	6811      	ldr	r1, [r2, #0]
 8017ece:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	4613      	mov	r3, r2
 8017ed6:	005b      	lsls	r3, r3, #1
 8017ed8:	4413      	add	r3, r2
 8017eda:	009b      	lsls	r3, r3, #2
 8017edc:	440b      	add	r3, r1
 8017ede:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017ee0:	4b4a      	ldr	r3, [pc, #296]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017ee2:	6819      	ldr	r1, [r3, #0]
 8017ee4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017ee8:	4613      	mov	r3, r2
 8017eea:	005b      	lsls	r3, r3, #1
 8017eec:	4413      	add	r3, r2
 8017eee:	009b      	lsls	r3, r3, #2
 8017ef0:	440b      	add	r3, r1
 8017ef2:	3308      	adds	r3, #8
 8017ef4:	2244      	movs	r2, #68	; 0x44
 8017ef6:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017ef8:	4b44      	ldr	r3, [pc, #272]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017efa:	6819      	ldr	r1, [r3, #0]
 8017efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f00:	4613      	mov	r3, r2
 8017f02:	005b      	lsls	r3, r3, #1
 8017f04:	4413      	add	r3, r2
 8017f06:	009b      	lsls	r3, r3, #2
 8017f08:	440b      	add	r3, r1
 8017f0a:	3309      	adds	r3, #9
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f14:	3301      	adds	r3, #1
 8017f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f1e:	2b47      	cmp	r3, #71	; 0x47
 8017f20:	d9cb      	bls.n	8017eba <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017f22:	4b3a      	ldr	r3, [pc, #232]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f2a:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017f2e:	4b37      	ldr	r3, [pc, #220]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f36:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017f3a:	4b34      	ldr	r3, [pc, #208]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f42:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017f46:	4b31      	ldr	r3, [pc, #196]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f4e:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017f52:	4b2e      	ldr	r3, [pc, #184]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	22ff      	movs	r2, #255	; 0xff
 8017f58:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017f5c:	4b2b      	ldr	r3, [pc, #172]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	2200      	movs	r2, #0
 8017f62:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017f66:	4b29      	ldr	r3, [pc, #164]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017f6e:	4b27      	ldr	r3, [pc, #156]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017f76:	2206      	movs	r2, #6
 8017f78:	4619      	mov	r1, r3
 8017f7a:	f7fd fe03 	bl	8015b84 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017f7e:	4b22      	ldr	r3, [pc, #136]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8017f86:	4b21      	ldr	r3, [pc, #132]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017f8e:	2206      	movs	r2, #6
 8017f90:	4619      	mov	r1, r3
 8017f92:	f7fd fdf7 	bl	8015b84 <RegionCommonChanMaskCopy>
            break;
 8017f96:	e034      	b.n	8018002 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017f98:	4b1c      	ldr	r3, [pc, #112]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017fa0:	4b1a      	ldr	r3, [pc, #104]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017fa8:	2206      	movs	r2, #6
 8017faa:	4619      	mov	r1, r3
 8017fac:	f7fd fdea 	bl	8015b84 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017fb6:	e01c      	b.n	8017ff2 <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017fb8:	4b13      	ldr	r3, [pc, #76]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017fc0:	3248      	adds	r2, #72	; 0x48
 8017fc2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017fc6:	4b11      	ldr	r3, [pc, #68]	; (801800c <RegionUS915InitDefaults+0x250>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017fce:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017fd2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017fd6:	4b0c      	ldr	r3, [pc, #48]	; (8018008 <RegionUS915InitDefaults+0x24c>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017fde:	4001      	ands	r1, r0
 8017fe0:	b289      	uxth	r1, r1
 8017fe2:	3248      	adds	r2, #72	; 0x48
 8017fe4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017fec:	3301      	adds	r3, #1
 8017fee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ff6:	2b05      	cmp	r3, #5
 8017ff8:	d9de      	bls.n	8017fb8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017ffa:	e002      	b.n	8018002 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8017ffc:	bf00      	nop
 8017ffe:	e000      	b.n	8018002 <RegionUS915InitDefaults+0x246>
                return;
 8018000:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8018002:	3728      	adds	r7, #40	; 0x28
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}
 8018008:	20003c88 	.word	0x20003c88
 801800c:	20003c8c 	.word	0x20003c8c
 8018010:	00030d40 	.word	0x00030d40
 8018014:	35c80160 	.word	0x35c80160
 8018018:	00186a00 	.word	0x00186a00
 801801c:	35d2afc0 	.word	0x35d2afc0

08018020 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	460b      	mov	r3, r1
 801802a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801802c:	78fb      	ldrb	r3, [r7, #3]
 801802e:	2b0f      	cmp	r3, #15
 8018030:	d858      	bhi.n	80180e4 <RegionUS915Verify+0xc4>
 8018032:	a201      	add	r2, pc, #4	; (adr r2, 8018038 <RegionUS915Verify+0x18>)
 8018034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018038:	08018079 	.word	0x08018079
 801803c:	080180e5 	.word	0x080180e5
 8018040:	080180e5 	.word	0x080180e5
 8018044:	080180e5 	.word	0x080180e5
 8018048:	080180e5 	.word	0x080180e5
 801804c:	08018087 	.word	0x08018087
 8018050:	08018087 	.word	0x08018087
 8018054:	080180a5 	.word	0x080180a5
 8018058:	080180e5 	.word	0x080180e5
 801805c:	080180c3 	.word	0x080180c3
 8018060:	080180c3 	.word	0x080180c3
 8018064:	080180e5 	.word	0x080180e5
 8018068:	080180e5 	.word	0x080180e5
 801806c:	080180e5 	.word	0x080180e5
 8018070:	080180e5 	.word	0x080180e5
 8018074:	080180e1 	.word	0x080180e1
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4618      	mov	r0, r3
 801807e:	f7ff fc9b 	bl	80179b8 <VerifyRfFreq>
 8018082:	4603      	mov	r3, r0
 8018084:	e02f      	b.n	80180e6 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f993 3000 	ldrsb.w	r3, [r3]
 801808c:	2204      	movs	r2, #4
 801808e:	2100      	movs	r1, #0
 8018090:	4618      	mov	r0, r3
 8018092:	f7fd fcfa 	bl	8015a8a <RegionCommonValueInRange>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	bf14      	ite	ne
 801809c:	2301      	movne	r3, #1
 801809e:	2300      	moveq	r3, #0
 80180a0:	b2db      	uxtb	r3, r3
 80180a2:	e020      	b.n	80180e6 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f993 3000 	ldrsb.w	r3, [r3]
 80180aa:	220d      	movs	r2, #13
 80180ac:	2108      	movs	r1, #8
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7fd fceb 	bl	8015a8a <RegionCommonValueInRange>
 80180b4:	4603      	mov	r3, r0
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	bf14      	ite	ne
 80180ba:	2301      	movne	r3, #1
 80180bc:	2300      	moveq	r3, #0
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	e011      	b.n	80180e6 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f993 3000 	ldrsb.w	r3, [r3]
 80180c8:	220e      	movs	r2, #14
 80180ca:	2100      	movs	r1, #0
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fd fcdc 	bl	8015a8a <RegionCommonValueInRange>
 80180d2:	4603      	mov	r3, r0
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	bf14      	ite	ne
 80180d8:	2301      	movne	r3, #1
 80180da:	2300      	moveq	r3, #0
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	e002      	b.n	80180e6 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80180e0:	2300      	movs	r3, #0
 80180e2:	e000      	b.n	80180e6 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 80180e4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3708      	adds	r7, #8
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop

080180f0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80180f0:	b480      	push	{r7}
 80180f2:	b085      	sub	sp, #20
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	791b      	ldrb	r3, [r3, #4]
 80180fc:	2b10      	cmp	r3, #16
 80180fe:	d162      	bne.n	80181c6 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	330f      	adds	r3, #15
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	2b01      	cmp	r3, #1
 801810a:	d15e      	bne.n	80181ca <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801810c:	2300      	movs	r3, #0
 801810e:	73fb      	strb	r3, [r7, #15]
 8018110:	2300      	movs	r3, #0
 8018112:	73bb      	strb	r3, [r7, #14]
 8018114:	e053      	b.n	80181be <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	7bbb      	ldrb	r3, [r7, #14]
 801811c:	4413      	add	r3, r2
 801811e:	7819      	ldrb	r1, [r3, #0]
 8018120:	4b2c      	ldr	r3, [pc, #176]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	7bfa      	ldrb	r2, [r7, #15]
 8018126:	b289      	uxth	r1, r1
 8018128:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801812c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8018130:	4b28      	ldr	r3, [pc, #160]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	7bfa      	ldrb	r2, [r7, #15]
 8018136:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801813a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	7bbb      	ldrb	r3, [r7, #14]
 8018144:	3301      	adds	r3, #1
 8018146:	4413      	add	r3, r2
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	b29b      	uxth	r3, r3
 801814c:	021b      	lsls	r3, r3, #8
 801814e:	b299      	uxth	r1, r3
 8018150:	4b20      	ldr	r3, [pc, #128]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	7bfa      	ldrb	r2, [r7, #15]
 8018156:	4301      	orrs	r1, r0
 8018158:	b289      	uxth	r1, r1
 801815a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801815e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8018162:	7bfb      	ldrb	r3, [r7, #15]
 8018164:	2b04      	cmp	r3, #4
 8018166:	d10f      	bne.n	8018188 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018168:	4b1a      	ldr	r3, [pc, #104]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	7bfa      	ldrb	r2, [r7, #15]
 801816e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018172:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018176:	4b17      	ldr	r3, [pc, #92]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	7bfa      	ldrb	r2, [r7, #15]
 801817c:	b2c9      	uxtb	r1, r1
 801817e:	b289      	uxth	r1, r1
 8018180:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018184:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018188:	4b13      	ldr	r3, [pc, #76]	; (80181d8 <RegionUS915ApplyCFList+0xe8>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	7bfa      	ldrb	r2, [r7, #15]
 801818e:	3248      	adds	r2, #72	; 0x48
 8018190:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018194:	4b0f      	ldr	r3, [pc, #60]	; (80181d4 <RegionUS915ApplyCFList+0xe4>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	7bfa      	ldrb	r2, [r7, #15]
 801819a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801819e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80181a2:	4b0d      	ldr	r3, [pc, #52]	; (80181d8 <RegionUS915ApplyCFList+0xe8>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	7bfa      	ldrb	r2, [r7, #15]
 80181a8:	4001      	ands	r1, r0
 80181aa:	b289      	uxth	r1, r1
 80181ac:	3248      	adds	r2, #72	; 0x48
 80181ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80181b2:	7bfb      	ldrb	r3, [r7, #15]
 80181b4:	3301      	adds	r3, #1
 80181b6:	73fb      	strb	r3, [r7, #15]
 80181b8:	7bbb      	ldrb	r3, [r7, #14]
 80181ba:	3302      	adds	r3, #2
 80181bc:	73bb      	strb	r3, [r7, #14]
 80181be:	7bfb      	ldrb	r3, [r7, #15]
 80181c0:	2b04      	cmp	r3, #4
 80181c2:	d9a8      	bls.n	8018116 <RegionUS915ApplyCFList+0x26>
 80181c4:	e002      	b.n	80181cc <RegionUS915ApplyCFList+0xdc>
        return;
 80181c6:	bf00      	nop
 80181c8:	e000      	b.n	80181cc <RegionUS915ApplyCFList+0xdc>
        return;
 80181ca:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80181cc:	3714      	adds	r7, #20
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bc80      	pop	{r7}
 80181d2:	4770      	bx	lr
 80181d4:	20003c8c 	.word	0x20003c8c
 80181d8:	20003c88 	.word	0x20003c88

080181dc <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b084      	sub	sp, #16
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	2204      	movs	r2, #4
 80181ea:	2100      	movs	r1, #0
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fd fc9d 	bl	8015b2c <RegionCommonCountChannels>
 80181f2:	4603      	mov	r3, r0
 80181f4:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80181f6:	7bbb      	ldrb	r3, [r7, #14]
 80181f8:	2b01      	cmp	r3, #1
 80181fa:	d804      	bhi.n	8018206 <RegionUS915ChanMaskSet+0x2a>
 80181fc:	7bbb      	ldrb	r3, [r7, #14]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018202:	2300      	movs	r3, #0
 8018204:	e04c      	b.n	80182a0 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	791b      	ldrb	r3, [r3, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d002      	beq.n	8018214 <RegionUS915ChanMaskSet+0x38>
 801820e:	2b01      	cmp	r3, #1
 8018210:	d038      	beq.n	8018284 <RegionUS915ChanMaskSet+0xa8>
 8018212:	e042      	b.n	801829a <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018214:	4b24      	ldr	r3, [pc, #144]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2206      	movs	r2, #6
 8018222:	4619      	mov	r1, r3
 8018224:	f7fd fcae 	bl	8015b84 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8018228:	4b1f      	ldr	r3, [pc, #124]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8018230:	4b1d      	ldr	r3, [pc, #116]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	b2d2      	uxtb	r2, r2
 8018236:	b292      	uxth	r2, r2
 8018238:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801823c:	4b1a      	ldr	r3, [pc, #104]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2200      	movs	r2, #0
 8018242:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018246:	2300      	movs	r3, #0
 8018248:	73fb      	strb	r3, [r7, #15]
 801824a:	e017      	b.n	801827c <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801824c:	4b17      	ldr	r3, [pc, #92]	; (80182ac <RegionUS915ChanMaskSet+0xd0>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	7bfa      	ldrb	r2, [r7, #15]
 8018252:	3248      	adds	r2, #72	; 0x48
 8018254:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018258:	4b13      	ldr	r3, [pc, #76]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	7bfa      	ldrb	r2, [r7, #15]
 801825e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018262:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018266:	4b11      	ldr	r3, [pc, #68]	; (80182ac <RegionUS915ChanMaskSet+0xd0>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	7bfa      	ldrb	r2, [r7, #15]
 801826c:	4001      	ands	r1, r0
 801826e:	b289      	uxth	r1, r1
 8018270:	3248      	adds	r2, #72	; 0x48
 8018272:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018276:	7bfb      	ldrb	r3, [r7, #15]
 8018278:	3301      	adds	r3, #1
 801827a:	73fb      	strb	r3, [r7, #15]
 801827c:	7bfb      	ldrb	r3, [r7, #15]
 801827e:	2b05      	cmp	r3, #5
 8018280:	d9e4      	bls.n	801824c <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018282:	e00c      	b.n	801829e <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018284:	4b08      	ldr	r3, [pc, #32]	; (80182a8 <RegionUS915ChanMaskSet+0xcc>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	2206      	movs	r2, #6
 8018292:	4619      	mov	r1, r3
 8018294:	f7fd fc76 	bl	8015b84 <RegionCommonChanMaskCopy>
            break;
 8018298:	e001      	b.n	801829e <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 801829a:	2300      	movs	r3, #0
 801829c:	e000      	b.n	80182a0 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801829e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3710      	adds	r7, #16
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	20003c8c 	.word	0x20003c8c
 80182ac:	20003c88 	.word	0x20003c88

080182b0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b088      	sub	sp, #32
 80182b4:	af02      	add	r7, sp, #8
 80182b6:	60ba      	str	r2, [r7, #8]
 80182b8:	607b      	str	r3, [r7, #4]
 80182ba:	4603      	mov	r3, r0
 80182bc:	73fb      	strb	r3, [r7, #15]
 80182be:	460b      	mov	r3, r1
 80182c0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80182c2:	2300      	movs	r3, #0
 80182c4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80182c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182ca:	2b0d      	cmp	r3, #13
 80182cc:	bfa8      	it	ge
 80182ce:	230d      	movge	r3, #13
 80182d0:	b25a      	sxtb	r2, r3
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182dc:	4916      	ldr	r1, [pc, #88]	; (8018338 <RegionUS915ComputeRxWindowParameters+0x88>)
 80182de:	4618      	mov	r0, r3
 80182e0:	f7fe f8e0 	bl	80164a4 <RegionCommonGetBandwidth>
 80182e4:	4603      	mov	r3, r0
 80182e6:	b2da      	uxtb	r2, r3
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182f2:	461a      	mov	r2, r3
 80182f4:	4b11      	ldr	r3, [pc, #68]	; (801833c <RegionUS915ComputeRxWindowParameters+0x8c>)
 80182f6:	5c9a      	ldrb	r2, [r3, r2]
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182fe:	4619      	mov	r1, r3
 8018300:	4b0d      	ldr	r3, [pc, #52]	; (8018338 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018306:	4619      	mov	r1, r3
 8018308:	4610      	mov	r0, r2
 801830a:	f7fd fe49 	bl	8015fa0 <RegionCommonComputeSymbolTimeLoRa>
 801830e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018310:	4b0b      	ldr	r3, [pc, #44]	; (8018340 <RegionUS915ComputeRxWindowParameters+0x90>)
 8018312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018314:	4798      	blx	r3
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	3308      	adds	r3, #8
 801831a:	687a      	ldr	r2, [r7, #4]
 801831c:	320c      	adds	r2, #12
 801831e:	7bb9      	ldrb	r1, [r7, #14]
 8018320:	9201      	str	r2, [sp, #4]
 8018322:	9300      	str	r3, [sp, #0]
 8018324:	4603      	mov	r3, r0
 8018326:	68ba      	ldr	r2, [r7, #8]
 8018328:	6978      	ldr	r0, [r7, #20]
 801832a:	f7fd fe5f 	bl	8015fec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801832e:	bf00      	nop
 8018330:	3718      	adds	r7, #24
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	0801e644 	.word	0x0801e644
 801833c:	0801e634 	.word	0x0801e634
 8018340:	0801e6b8 	.word	0x0801e6b8

08018344 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018344:	b590      	push	{r4, r7, lr}
 8018346:	b091      	sub	sp, #68	; 0x44
 8018348:	af0a      	add	r7, sp, #40	; 0x28
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	785b      	ldrb	r3, [r3, #1]
 8018352:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018354:	2300      	movs	r3, #0
 8018356:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	685b      	ldr	r3, [r3, #4]
 8018360:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018362:	4b34      	ldr	r3, [pc, #208]	; (8018434 <RegionUS915RxConfig+0xf0>)
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	4798      	blx	r3
 8018368:	4603      	mov	r3, r0
 801836a:	2b00      	cmp	r3, #0
 801836c:	d001      	beq.n	8018372 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801836e:	2300      	movs	r3, #0
 8018370:	e05c      	b.n	801842c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	7cdb      	ldrb	r3, [r3, #19]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d109      	bne.n	801838e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	f003 0307 	and.w	r3, r3, #7
 8018382:	4a2d      	ldr	r2, [pc, #180]	; (8018438 <RegionUS915RxConfig+0xf4>)
 8018384:	fb03 f202 	mul.w	r2, r3, r2
 8018388:	4b2c      	ldr	r3, [pc, #176]	; (801843c <RegionUS915RxConfig+0xf8>)
 801838a:	4413      	add	r3, r2
 801838c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018392:	4a2b      	ldr	r2, [pc, #172]	; (8018440 <RegionUS915RxConfig+0xfc>)
 8018394:	5cd3      	ldrb	r3, [r2, r3]
 8018396:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018398:	4b26      	ldr	r3, [pc, #152]	; (8018434 <RegionUS915RxConfig+0xf0>)
 801839a:	68db      	ldr	r3, [r3, #12]
 801839c:	6938      	ldr	r0, [r7, #16]
 801839e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80183a0:	4b24      	ldr	r3, [pc, #144]	; (8018434 <RegionUS915RxConfig+0xf0>)
 80183a2:	699c      	ldr	r4, [r3, #24]
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	789b      	ldrb	r3, [r3, #2]
 80183a8:	4618      	mov	r0, r3
 80183aa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	689b      	ldr	r3, [r3, #8]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	687a      	ldr	r2, [r7, #4]
 80183b6:	7c92      	ldrb	r2, [r2, #18]
 80183b8:	9209      	str	r2, [sp, #36]	; 0x24
 80183ba:	2201      	movs	r2, #1
 80183bc:	9208      	str	r2, [sp, #32]
 80183be:	2200      	movs	r2, #0
 80183c0:	9207      	str	r2, [sp, #28]
 80183c2:	2200      	movs	r2, #0
 80183c4:	9206      	str	r2, [sp, #24]
 80183c6:	2200      	movs	r2, #0
 80183c8:	9205      	str	r2, [sp, #20]
 80183ca:	2200      	movs	r2, #0
 80183cc:	9204      	str	r2, [sp, #16]
 80183ce:	2200      	movs	r2, #0
 80183d0:	9203      	str	r2, [sp, #12]
 80183d2:	9302      	str	r3, [sp, #8]
 80183d4:	2308      	movs	r3, #8
 80183d6:	9301      	str	r3, [sp, #4]
 80183d8:	2300      	movs	r3, #0
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	2301      	movs	r3, #1
 80183de:	460a      	mov	r2, r1
 80183e0:	4601      	mov	r1, r0
 80183e2:	2001      	movs	r0, #1
 80183e4:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	7c5b      	ldrb	r3, [r3, #17]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d005      	beq.n	80183fa <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80183ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183f2:	4a14      	ldr	r2, [pc, #80]	; (8018444 <RegionUS915RxConfig+0x100>)
 80183f4:	5cd3      	ldrb	r3, [r2, r3]
 80183f6:	75fb      	strb	r3, [r7, #23]
 80183f8:	e004      	b.n	8018404 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80183fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183fe:	4a12      	ldr	r2, [pc, #72]	; (8018448 <RegionUS915RxConfig+0x104>)
 8018400:	5cd3      	ldrb	r3, [r2, r3]
 8018402:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018404:	4b0b      	ldr	r3, [pc, #44]	; (8018434 <RegionUS915RxConfig+0xf0>)
 8018406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018408:	7dfa      	ldrb	r2, [r7, #23]
 801840a:	320d      	adds	r2, #13
 801840c:	b2d2      	uxtb	r2, r2
 801840e:	4611      	mov	r1, r2
 8018410:	2001      	movs	r0, #1
 8018412:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	7cdb      	ldrb	r3, [r3, #19]
 8018418:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801841c:	6939      	ldr	r1, [r7, #16]
 801841e:	4618      	mov	r0, r3
 8018420:	f7fe f85e 	bl	80164e0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018424:	683b      	ldr	r3, [r7, #0]
 8018426:	7bfa      	ldrb	r2, [r7, #15]
 8018428:	701a      	strb	r2, [r3, #0]
    return true;
 801842a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801842c:	4618      	mov	r0, r3
 801842e:	371c      	adds	r7, #28
 8018430:	46bd      	mov	sp, r7
 8018432:	bd90      	pop	{r4, r7, pc}
 8018434:	0801e6b8 	.word	0x0801e6b8
 8018438:	000927c0 	.word	0x000927c0
 801843c:	370870a0 	.word	0x370870a0
 8018440:	0801e634 	.word	0x0801e634
 8018444:	0801e6a8 	.word	0x0801e6a8
 8018448:	0801e698 	.word	0x0801e698

0801844c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801844c:	b590      	push	{r4, r7, lr}
 801844e:	b093      	sub	sp, #76	; 0x4c
 8018450:	af0a      	add	r7, sp, #40	; 0x28
 8018452:	60f8      	str	r0, [r7, #12]
 8018454:	60b9      	str	r1, [r7, #8]
 8018456:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801845e:	461a      	mov	r2, r3
 8018460:	4b4a      	ldr	r3, [pc, #296]	; (801858c <RegionUS915TxConfig+0x140>)
 8018462:	5c9b      	ldrb	r3, [r3, r2]
 8018464:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801846c:	4b48      	ldr	r3, [pc, #288]	; (8018590 <RegionUS915TxConfig+0x144>)
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	4b48      	ldr	r3, [pc, #288]	; (8018594 <RegionUS915TxConfig+0x148>)
 8018472:	6819      	ldr	r1, [r3, #0]
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	461c      	mov	r4, r3
 801847a:	4623      	mov	r3, r4
 801847c:	005b      	lsls	r3, r3, #1
 801847e:	4423      	add	r3, r4
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	440b      	add	r3, r1
 8018484:	3309      	adds	r3, #9
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	4619      	mov	r1, r3
 801848a:	460b      	mov	r3, r1
 801848c:	005b      	lsls	r3, r3, #1
 801848e:	440b      	add	r3, r1
 8018490:	00db      	lsls	r3, r3, #3
 8018492:	4413      	add	r3, r2
 8018494:	3302      	adds	r3, #2
 8018496:	f993 1000 	ldrsb.w	r1, [r3]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80184a0:	4b3c      	ldr	r3, [pc, #240]	; (8018594 <RegionUS915TxConfig+0x148>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80184a8:	f7ff fa50 	bl	801794c <LimitTxPower>
 80184ac:	4603      	mov	r3, r0
 80184ae:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184b6:	4938      	ldr	r1, [pc, #224]	; (8018598 <RegionUS915TxConfig+0x14c>)
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7fd fff3 	bl	80164a4 <RegionCommonGetBandwidth>
 80184be:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80184c0:	2300      	movs	r3, #0
 80184c2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80184c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80184c8:	f04f 0200 	mov.w	r2, #0
 80184cc:	4933      	ldr	r1, [pc, #204]	; (801859c <RegionUS915TxConfig+0x150>)
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7fd fe44 	bl	801615c <RegionCommonComputeTxPower>
 80184d4:	4603      	mov	r3, r0
 80184d6:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80184d8:	4b31      	ldr	r3, [pc, #196]	; (80185a0 <RegionUS915TxConfig+0x154>)
 80184da:	68da      	ldr	r2, [r3, #12]
 80184dc:	4b2d      	ldr	r3, [pc, #180]	; (8018594 <RegionUS915TxConfig+0x148>)
 80184de:	6819      	ldr	r1, [r3, #0]
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	4618      	mov	r0, r3
 80184e6:	4603      	mov	r3, r0
 80184e8:	005b      	lsls	r3, r3, #1
 80184ea:	4403      	add	r3, r0
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	440b      	add	r3, r1
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	4618      	mov	r0, r3
 80184f4:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80184f6:	4b2a      	ldr	r3, [pc, #168]	; (80185a0 <RegionUS915TxConfig+0x154>)
 80184f8:	69dc      	ldr	r4, [r3, #28]
 80184fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80184fe:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018502:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018506:	9208      	str	r2, [sp, #32]
 8018508:	2200      	movs	r2, #0
 801850a:	9207      	str	r2, [sp, #28]
 801850c:	2200      	movs	r2, #0
 801850e:	9206      	str	r2, [sp, #24]
 8018510:	2200      	movs	r2, #0
 8018512:	9205      	str	r2, [sp, #20]
 8018514:	2201      	movs	r2, #1
 8018516:	9204      	str	r2, [sp, #16]
 8018518:	2200      	movs	r2, #0
 801851a:	9203      	str	r2, [sp, #12]
 801851c:	2208      	movs	r2, #8
 801851e:	9202      	str	r2, [sp, #8]
 8018520:	2201      	movs	r2, #1
 8018522:	9201      	str	r2, [sp, #4]
 8018524:	9300      	str	r3, [sp, #0]
 8018526:	69bb      	ldr	r3, [r7, #24]
 8018528:	2200      	movs	r2, #0
 801852a:	2001      	movs	r0, #1
 801852c:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801852e:	4b19      	ldr	r3, [pc, #100]	; (8018594 <RegionUS915TxConfig+0x148>)
 8018530:	681a      	ldr	r2, [r3, #0]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	4619      	mov	r1, r3
 8018538:	460b      	mov	r3, r1
 801853a:	005b      	lsls	r3, r3, #1
 801853c:	440b      	add	r3, r1
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	4413      	add	r3, r2
 8018542:	681a      	ldr	r2, [r3, #0]
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801854a:	4619      	mov	r1, r3
 801854c:	4610      	mov	r0, r2
 801854e:	f7fe f805 	bl	801655c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8018552:	4b13      	ldr	r3, [pc, #76]	; (80185a0 <RegionUS915TxConfig+0x154>)
 8018554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018556:	68fa      	ldr	r2, [r7, #12]
 8018558:	8992      	ldrh	r2, [r2, #12]
 801855a:	b2d2      	uxtb	r2, r2
 801855c:	4611      	mov	r1, r2
 801855e:	2001      	movs	r0, #1
 8018560:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	899b      	ldrh	r3, [r3, #12]
 801856c:	4619      	mov	r1, r3
 801856e:	4610      	mov	r0, r2
 8018570:	f7ff fa66 	bl	8017a40 <GetTimeOnAir>
 8018574:	4602      	mov	r2, r0
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	7fba      	ldrb	r2, [r7, #30]
 801857e:	701a      	strb	r2, [r3, #0]
    return true;
 8018580:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018582:	4618      	mov	r0, r3
 8018584:	3724      	adds	r7, #36	; 0x24
 8018586:	46bd      	mov	sp, r7
 8018588:	bd90      	pop	{r4, r7, pc}
 801858a:	bf00      	nop
 801858c:	0801e634 	.word	0x0801e634
 8018590:	20003c88 	.word	0x20003c88
 8018594:	20003c8c 	.word	0x20003c8c
 8018598:	0801e644 	.word	0x0801e644
 801859c:	41f00000 	.word	0x41f00000
 80185a0:	0801e6b8 	.word	0x0801e6b8

080185a4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80185a4:	b590      	push	{r4, r7, lr}
 80185a6:	b097      	sub	sp, #92	; 0x5c
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	60f8      	str	r0, [r7, #12]
 80185ac:	60b9      	str	r1, [r7, #8]
 80185ae:	607a      	str	r2, [r7, #4]
 80185b0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80185b2:	2307      	movs	r3, #7
 80185b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80185b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80185bc:	2200      	movs	r2, #0
 80185be:	601a      	str	r2, [r3, #0]
 80185c0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80185c2:	2300      	movs	r3, #0
 80185c4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 80185c8:	2300      	movs	r3, #0
 80185ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 80185ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185d2:	2200      	movs	r2, #0
 80185d4:	601a      	str	r2, [r3, #0]
 80185d6:	605a      	str	r2, [r3, #4]
 80185d8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80185da:	4b97      	ldr	r3, [pc, #604]	; (8018838 <RegionUS915LinkAdrReq+0x294>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80185e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185e6:	2206      	movs	r2, #6
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7fd facb 	bl	8015b84 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80185ee:	e11b      	b.n	8018828 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	685a      	ldr	r2, [r3, #4]
 80185f4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80185f8:	4413      	add	r3, r2
 80185fa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80185fe:	4611      	mov	r1, r2
 8018600:	4618      	mov	r0, r3
 8018602:	f7fd fc03 	bl	8015e0c <RegionCommonParseLinkAdrReq>
 8018606:	4603      	mov	r3, r0
 8018608:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801860c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018610:	2b00      	cmp	r3, #0
 8018612:	f000 8113 	beq.w	801883c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018616:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801861a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801861e:	4413      	add	r3, r2
 8018620:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018624:	2307      	movs	r3, #7
 8018626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801862a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801862e:	2b06      	cmp	r3, #6
 8018630:	d116      	bne.n	8018660 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8018632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018636:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801863a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801863e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8018642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018646:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801864a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801864e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018652:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018656:	b2db      	uxtb	r3, r3
 8018658:	b29b      	uxth	r3, r3
 801865a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801865e:	e0e3      	b.n	8018828 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8018660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018664:	2b07      	cmp	r3, #7
 8018666:	d112      	bne.n	801868e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8018668:	2300      	movs	r3, #0
 801866a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801866e:	2300      	movs	r3, #0
 8018670:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018674:	2300      	movs	r3, #0
 8018676:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801867a:	2300      	movs	r3, #0
 801867c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018680:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018684:	b2db      	uxtb	r3, r3
 8018686:	b29b      	uxth	r3, r3
 8018688:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801868c:	e0cc      	b.n	8018828 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801868e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018692:	2b05      	cmp	r3, #5
 8018694:	f040 80bf 	bne.w	8018816 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018698:	2301      	movs	r3, #1
 801869a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801869e:	2300      	movs	r3, #0
 80186a0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80186a4:	2300      	movs	r3, #0
 80186a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80186aa:	e0ae      	b.n	801880a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80186ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80186b0:	b2da      	uxtb	r2, r3
 80186b2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80186b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186ba:	fa01 f303 	lsl.w	r3, r1, r3
 80186be:	4013      	ands	r3, r2
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d04d      	beq.n	8018760 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 80186c4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d120      	bne.n	8018714 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80186d2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	3358      	adds	r3, #88	; 0x58
 80186da:	443b      	add	r3, r7
 80186dc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80186e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186e4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80186e8:	b292      	uxth	r2, r2
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	3358      	adds	r3, #88	; 0x58
 80186ee:	443b      	add	r3, r7
 80186f0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80186f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80186f8:	b21a      	sxth	r2, r3
 80186fa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80186fe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018702:	fa01 f303 	lsl.w	r3, r1, r3
 8018706:	b21b      	sxth	r3, r3
 8018708:	4313      	orrs	r3, r2
 801870a:	b21b      	sxth	r3, r3
 801870c:	b29b      	uxth	r3, r3
 801870e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018712:	e075      	b.n	8018800 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8018714:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018718:	005b      	lsls	r3, r3, #1
 801871a:	3358      	adds	r3, #88	; 0x58
 801871c:	443b      	add	r3, r7
 801871e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018722:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018726:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801872a:	b292      	uxth	r2, r2
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	3358      	adds	r3, #88	; 0x58
 8018730:	443b      	add	r3, r7
 8018732:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018736:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801873a:	b21a      	sxth	r2, r3
 801873c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018740:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018744:	fa01 f303 	lsl.w	r3, r1, r3
 8018748:	b21b      	sxth	r3, r3
 801874a:	4313      	orrs	r3, r2
 801874c:	b21b      	sxth	r3, r3
 801874e:	b29b      	uxth	r3, r3
 8018750:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018754:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018758:	3301      	adds	r3, #1
 801875a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801875e:	e04f      	b.n	8018800 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8018760:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018764:	f003 0301 	and.w	r3, r3, #1
 8018768:	b2db      	uxtb	r3, r3
 801876a:	2b00      	cmp	r3, #0
 801876c:	d122      	bne.n	80187b4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801876e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018772:	005b      	lsls	r3, r3, #1
 8018774:	3358      	adds	r3, #88	; 0x58
 8018776:	443b      	add	r3, r7
 8018778:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801877c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018780:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018784:	b292      	uxth	r2, r2
 8018786:	005b      	lsls	r3, r3, #1
 8018788:	3358      	adds	r3, #88	; 0x58
 801878a:	443b      	add	r3, r7
 801878c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018790:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018794:	b21a      	sxth	r2, r3
 8018796:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801879a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801879e:	fa01 f303 	lsl.w	r3, r1, r3
 80187a2:	b21b      	sxth	r3, r3
 80187a4:	43db      	mvns	r3, r3
 80187a6:	b21b      	sxth	r3, r3
 80187a8:	4013      	ands	r3, r2
 80187aa:	b21b      	sxth	r3, r3
 80187ac:	b29b      	uxth	r3, r3
 80187ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80187b2:	e025      	b.n	8018800 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80187b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187b8:	005b      	lsls	r3, r3, #1
 80187ba:	3358      	adds	r3, #88	; 0x58
 80187bc:	443b      	add	r3, r7
 80187be:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80187c2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187c6:	b2d2      	uxtb	r2, r2
 80187c8:	b292      	uxth	r2, r2
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	3358      	adds	r3, #88	; 0x58
 80187ce:	443b      	add	r3, r7
 80187d0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80187d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80187d8:	b21a      	sxth	r2, r3
 80187da:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80187de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80187e2:	fa01 f303 	lsl.w	r3, r1, r3
 80187e6:	b21b      	sxth	r3, r3
 80187e8:	43db      	mvns	r3, r3
 80187ea:	b21b      	sxth	r3, r3
 80187ec:	4013      	ands	r3, r2
 80187ee:	b21b      	sxth	r3, r3
 80187f0:	b29b      	uxth	r3, r3
 80187f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80187f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187fa:	3301      	adds	r3, #1
 80187fc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8018800:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018804:	3301      	adds	r3, #1
 8018806:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801880a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801880e:	2b07      	cmp	r3, #7
 8018810:	f67f af4c 	bls.w	80186ac <RegionUS915LinkAdrReq+0x108>
 8018814:	e008      	b.n	8018828 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8018816:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801881a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801881e:	005b      	lsls	r3, r3, #1
 8018820:	3358      	adds	r3, #88	; 0x58
 8018822:	443b      	add	r3, r7
 8018824:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	7a1b      	ldrb	r3, [r3, #8]
 801882c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018830:	429a      	cmp	r2, r3
 8018832:	f4ff aedd 	bcc.w	80185f0 <RegionUS915LinkAdrReq+0x4c>
 8018836:	e002      	b.n	801883e <RegionUS915LinkAdrReq+0x29a>
 8018838:	20003c8c 	.word	0x20003c8c
            break; // break loop, since no more request has been found
 801883c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801883e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018842:	2b03      	cmp	r3, #3
 8018844:	dc0f      	bgt.n	8018866 <RegionUS915LinkAdrReq+0x2c2>
 8018846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801884a:	2204      	movs	r2, #4
 801884c:	2100      	movs	r1, #0
 801884e:	4618      	mov	r0, r3
 8018850:	f7fd f96c 	bl	8015b2c <RegionCommonCountChannels>
 8018854:	4603      	mov	r3, r0
 8018856:	2b01      	cmp	r3, #1
 8018858:	d805      	bhi.n	8018866 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801885a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801885e:	f023 0301 	bic.w	r3, r3, #1
 8018862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018866:	2302      	movs	r3, #2
 8018868:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	7a5b      	ldrb	r3, [r3, #9]
 8018870:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018878:	4618      	mov	r0, r3
 801887a:	f7ff f911 	bl	8017aa0 <RegionUS915GetPhyParam>
 801887e:	4603      	mov	r3, r0
 8018880:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018886:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	7a9b      	ldrb	r3, [r3, #10]
 801888c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801888e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018892:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018894:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018898:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801889a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801889e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80188a6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80188ae:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	7b5b      	ldrb	r3, [r3, #13]
 80188b4:	b25b      	sxtb	r3, r3
 80188b6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80188b8:	2348      	movs	r3, #72	; 0x48
 80188ba:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80188be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188c2:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80188c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c6:	b25b      	sxtb	r3, r3
 80188c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80188cc:	2304      	movs	r3, #4
 80188ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80188d2:	4b44      	ldr	r3, [pc, #272]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80188d8:	230e      	movs	r3, #14
 80188da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80188de:	2300      	movs	r3, #0
 80188e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80188ea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80188ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80188f2:	1c9a      	adds	r2, r3, #2
 80188f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80188f8:	1c59      	adds	r1, r3, #1
 80188fa:	f107 0014 	add.w	r0, r7, #20
 80188fe:	4623      	mov	r3, r4
 8018900:	f7fd fad5 	bl	8015eae <RegionCommonLinkAdrReqVerifyParams>
 8018904:	4603      	mov	r3, r0
 8018906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801890a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801890e:	2b07      	cmp	r3, #7
 8018910:	d151      	bne.n	80189b6 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8018912:	4b34      	ldr	r3, [pc, #208]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801891a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801891e:	2206      	movs	r2, #6
 8018920:	4618      	mov	r0, r3
 8018922:	f7fd f92f 	bl	8015b84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018926:	4b30      	ldr	r3, [pc, #192]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 801892e:	4b2d      	ldr	r3, [pc, #180]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018936:	4b2c      	ldr	r3, [pc, #176]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	400a      	ands	r2, r1
 801893c:	b292      	uxth	r2, r2
 801893e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018942:	4b29      	ldr	r3, [pc, #164]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 801894a:	4b26      	ldr	r3, [pc, #152]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018952:	4b25      	ldr	r3, [pc, #148]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	400a      	ands	r2, r1
 8018958:	b292      	uxth	r2, r2
 801895a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801895e:	4b22      	ldr	r3, [pc, #136]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 8018966:	4b1f      	ldr	r3, [pc, #124]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801896e:	4b1e      	ldr	r3, [pc, #120]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	400a      	ands	r2, r1
 8018974:	b292      	uxth	r2, r2
 8018976:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801897a:	4b1b      	ldr	r3, [pc, #108]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 8018982:	4b18      	ldr	r3, [pc, #96]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801898a:	4b17      	ldr	r3, [pc, #92]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	400a      	ands	r2, r1
 8018990:	b292      	uxth	r2, r2
 8018992:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018996:	4b13      	ldr	r3, [pc, #76]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 8018998:	681a      	ldr	r2, [r3, #0]
 801899a:	4b13      	ldr	r3, [pc, #76]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 80189a2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80189a6:	4b0f      	ldr	r3, [pc, #60]	; (80189e4 <RegionUS915LinkAdrReq+0x440>)
 80189a8:	681a      	ldr	r2, [r3, #0]
 80189aa:	4b0f      	ldr	r3, [pc, #60]	; (80189e8 <RegionUS915LinkAdrReq+0x444>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 80189b2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80189b6:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80189be:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80189c6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80189ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80189d0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80189d4:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 80189d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80189da:	4618      	mov	r0, r3
 80189dc:	375c      	adds	r7, #92	; 0x5c
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd90      	pop	{r4, r7, pc}
 80189e2:	bf00      	nop
 80189e4:	20003c8c 	.word	0x20003c8c
 80189e8:	20003c88 	.word	0x20003c88

080189ec <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80189f4:	2307      	movs	r3, #7
 80189f6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7fe ffdb 	bl	80179b8 <VerifyRfFreq>
 8018a02:	4603      	mov	r3, r0
 8018a04:	f083 0301 	eor.w	r3, r3, #1
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d003      	beq.n	8018a16 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018a0e:	7bfb      	ldrb	r3, [r7, #15]
 8018a10:	f023 0301 	bic.w	r3, r3, #1
 8018a14:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	f993 3000 	ldrsb.w	r3, [r3]
 8018a1c:	220d      	movs	r2, #13
 8018a1e:	2108      	movs	r1, #8
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7fd f832 	bl	8015a8a <RegionCommonValueInRange>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d103      	bne.n	8018a34 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018a2c:	7bfb      	ldrb	r3, [r7, #15]
 8018a2e:	f023 0302 	bic.w	r3, r3, #2
 8018a32:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f993 3000 	ldrsb.w	r3, [r3]
 8018a3a:	2207      	movs	r2, #7
 8018a3c:	2105      	movs	r1, #5
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7fd f823 	bl	8015a8a <RegionCommonValueInRange>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b01      	cmp	r3, #1
 8018a48:	d004      	beq.n	8018a54 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018a50:	2b0d      	cmp	r3, #13
 8018a52:	dd03      	ble.n	8018a5c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018a54:	7bfb      	ldrb	r3, [r7, #15]
 8018a56:	f023 0302 	bic.w	r3, r3, #2
 8018a5a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018a62:	2203      	movs	r2, #3
 8018a64:	2100      	movs	r1, #0
 8018a66:	4618      	mov	r0, r3
 8018a68:	f7fd f80f 	bl	8015a8a <RegionCommonValueInRange>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d103      	bne.n	8018a7a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018a72:	7bfb      	ldrb	r3, [r7, #15]
 8018a74:	f023 0304 	bic.w	r3, r3, #4
 8018a78:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3710      	adds	r7, #16
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}

08018a84 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018a84:	b480      	push	{r7}
 8018a86:	b083      	sub	sp, #12
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	370c      	adds	r7, #12
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bc80      	pop	{r7}
 8018a98:	4770      	bx	lr

08018a9a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018a9a:	b480      	push	{r7}
 8018a9c:	b083      	sub	sp, #12
 8018a9e:	af00      	add	r7, sp, #0
 8018aa0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	370c      	adds	r7, #12
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bc80      	pop	{r7}
 8018aae:	4770      	bx	lr

08018ab0 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018abc:	4618      	mov	r0, r3
 8018abe:	370c      	adds	r7, #12
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bc80      	pop	{r7}
 8018ac4:	4770      	bx	lr
	...

08018ac8 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018ac8:	b480      	push	{r7}
 8018aca:	b083      	sub	sp, #12
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4603      	mov	r3, r0
 8018ad0:	460a      	mov	r2, r1
 8018ad2:	71fb      	strb	r3, [r7, #7]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018ad8:	79bb      	ldrb	r3, [r7, #6]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d108      	bne.n	8018af0 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018ade:	4b16      	ldr	r3, [pc, #88]	; (8018b38 <RegionUS915AlternateDr+0x70>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018ae6:	3201      	adds	r2, #1
 8018ae8:	b2d2      	uxtb	r2, r2
 8018aea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8018aee:	e007      	b.n	8018b00 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018af0:	4b11      	ldr	r3, [pc, #68]	; (8018b38 <RegionUS915AlternateDr+0x70>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018af8:	3a01      	subs	r2, #1
 8018afa:	b2d2      	uxtb	r2, r2
 8018afc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018b00:	4b0d      	ldr	r3, [pc, #52]	; (8018b38 <RegionUS915AlternateDr+0x70>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018b08:	4b0c      	ldr	r3, [pc, #48]	; (8018b3c <RegionUS915AlternateDr+0x74>)
 8018b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8018b0e:	0859      	lsrs	r1, r3, #1
 8018b10:	460b      	mov	r3, r1
 8018b12:	00db      	lsls	r3, r3, #3
 8018b14:	440b      	add	r3, r1
 8018b16:	1ad3      	subs	r3, r2, r3
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d102      	bne.n	8018b24 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018b1e:	2304      	movs	r3, #4
 8018b20:	71fb      	strb	r3, [r7, #7]
 8018b22:	e001      	b.n	8018b28 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8018b24:	2300      	movs	r3, #0
 8018b26:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	370c      	adds	r7, #12
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bc80      	pop	{r7}
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop
 8018b38:	20003c88 	.word	0x20003c88
 8018b3c:	38e38e39 	.word	0x38e38e39

08018b40 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b0a8      	sub	sp, #160	; 0xa0
 8018b44:	af02      	add	r7, sp, #8
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
 8018b4c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018b54:	2300      	movs	r3, #0
 8018b56:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018b62:	2244      	movs	r2, #68	; 0x44
 8018b64:	2100      	movs	r1, #0
 8018b66:	4618      	mov	r0, r3
 8018b68:	f004 fe48 	bl	801d7fc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018b6c:	230c      	movs	r3, #12
 8018b6e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018b72:	4b6b      	ldr	r3, [pc, #428]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	3390      	adds	r3, #144	; 0x90
 8018b78:	2204      	movs	r2, #4
 8018b7a:	2100      	movs	r1, #0
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f7fc ffd5 	bl	8015b2c <RegionCommonCountChannels>
 8018b82:	4603      	mov	r3, r0
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d110      	bne.n	8018baa <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018b88:	4b65      	ldr	r3, [pc, #404]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018b90:	4b64      	ldr	r3, [pc, #400]	; (8018d24 <RegionUS915NextChannel+0x1e4>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b98:	2204      	movs	r2, #4
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	f7fc fff2 	bl	8015b84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018ba0:	4b5f      	ldr	r3, [pc, #380]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018bb0:	2b03      	cmp	r3, #3
 8018bb2:	dd0e      	ble.n	8018bd2 <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018bb4:	4b5a      	ldr	r3, [pc, #360]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d107      	bne.n	8018bd2 <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018bc2:	4b58      	ldr	r3, [pc, #352]	; (8018d24 <RegionUS915NextChannel+0x1e4>)
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	4b56      	ldr	r3, [pc, #344]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018bce:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	7a5b      	ldrb	r3, [r3, #9]
 8018bd6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018be2:	4b4f      	ldr	r3, [pc, #316]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	3390      	adds	r3, #144	; 0x90
 8018be8:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018bea:	4b4e      	ldr	r3, [pc, #312]	; (8018d24 <RegionUS915NextChannel+0x1e4>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018bf0:	4b4b      	ldr	r3, [pc, #300]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018bf6:	2348      	movs	r3, #72	; 0x48
 8018bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	7a9b      	ldrb	r3, [r3, #10]
 8018c0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018c12:	2301      	movs	r3, #1
 8018c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018c18:	68fa      	ldr	r2, [r7, #12]
 8018c1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018c1e:	320c      	adds	r2, #12
 8018c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c24:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	7d1b      	ldrb	r3, [r3, #20]
 8018c2c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	8adb      	ldrh	r3, [r3, #22]
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	4610      	mov	r0, r2
 8018c3e:	f7fe feff 	bl	8017a40 <GetTimeOnAir>
 8018c42:	4603      	mov	r3, r0
 8018c44:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018c46:	f107 0314 	add.w	r3, r7, #20
 8018c4a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018c4c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018c50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018c54:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	9301      	str	r3, [sp, #4]
 8018c5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018c60:	9300      	str	r3, [sp, #0]
 8018c62:	460b      	mov	r3, r1
 8018c64:	6839      	ldr	r1, [r7, #0]
 8018c66:	f7fd fb68 	bl	801633a <RegionCommonIdentifyChannels>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018c70:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d14d      	bne.n	8018d14 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	7a5b      	ldrb	r3, [r3, #9]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00e      	beq.n	8018c9e <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018c80:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018c84:	3b01      	subs	r3, #1
 8018c86:	4619      	mov	r1, r3
 8018c88:	2000      	movs	r0, #0
 8018c8a:	f000 f8f5 	bl	8018e78 <randr>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	3398      	adds	r3, #152	; 0x98
 8018c92:	443b      	add	r3, r7
 8018c94:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	701a      	strb	r2, [r3, #0]
 8018c9c:	e030      	b.n	8018d00 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d10f      	bne.n	8018cc8 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018ca8:	4b1d      	ldr	r3, [pc, #116]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018cb0:	4b1b      	ldr	r3, [pc, #108]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018cb4:	339c      	adds	r3, #156	; 0x9c
 8018cb6:	68ba      	ldr	r2, [r7, #8]
 8018cb8:	4619      	mov	r1, r3
 8018cba:	f7fc fca1 	bl	8015600 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	2b03      	cmp	r3, #3
 8018cc2:	d11d      	bne.n	8018d00 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018cc4:	2303      	movs	r3, #3
 8018cc6:	e027      	b.n	8018d18 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018cc8:	2300      	movs	r3, #0
 8018cca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018cce:	e004      	b.n	8018cda <RegionUS915NextChannel+0x19a>
                {
                    i++;
 8018cd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018cda:	4b11      	ldr	r3, [pc, #68]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018ce2:	b2da      	uxtb	r2, r3
 8018ce4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018ce8:	fa42 f303 	asr.w	r3, r2, r3
 8018cec:	f003 0301 	and.w	r3, r3, #1
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d0ed      	beq.n	8018cd0 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 8018cf4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018cf8:	3340      	adds	r3, #64	; 0x40
 8018cfa:	b2da      	uxtb	r2, r3
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018d00:	4b07      	ldr	r3, [pc, #28]	; (8018d20 <RegionUS915NextChannel+0x1e0>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2248      	movs	r2, #72	; 0x48
 8018d0e:	4619      	mov	r1, r3
 8018d10:	f7fc fed8 	bl	8015ac4 <RegionCommonChanDisable>
    }
    return status;
 8018d14:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3798      	adds	r7, #152	; 0x98
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}
 8018d20:	20003c88 	.word	0x20003c88
 8018d24:	20003c8c 	.word	0x20003c8c

08018d28 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018d28:	b590      	push	{r4, r7, lr}
 8018d2a:	b085      	sub	sp, #20
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018d36:	4b23      	ldr	r3, [pc, #140]	; (8018dc4 <RegionUS915SetContinuousWave+0x9c>)
 8018d38:	681a      	ldr	r2, [r3, #0]
 8018d3a:	4b23      	ldr	r3, [pc, #140]	; (8018dc8 <RegionUS915SetContinuousWave+0xa0>)
 8018d3c:	6819      	ldr	r1, [r3, #0]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	781b      	ldrb	r3, [r3, #0]
 8018d42:	461c      	mov	r4, r3
 8018d44:	4623      	mov	r3, r4
 8018d46:	005b      	lsls	r3, r3, #1
 8018d48:	4423      	add	r3, r4
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	440b      	add	r3, r1
 8018d4e:	3309      	adds	r3, #9
 8018d50:	781b      	ldrb	r3, [r3, #0]
 8018d52:	4619      	mov	r1, r3
 8018d54:	460b      	mov	r3, r1
 8018d56:	005b      	lsls	r3, r3, #1
 8018d58:	440b      	add	r3, r1
 8018d5a:	00db      	lsls	r3, r3, #3
 8018d5c:	4413      	add	r3, r2
 8018d5e:	3302      	adds	r3, #2
 8018d60:	f993 1000 	ldrsb.w	r1, [r3]
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018d6a:	4b17      	ldr	r3, [pc, #92]	; (8018dc8 <RegionUS915SetContinuousWave+0xa0>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018d72:	f7fe fdeb 	bl	801794c <LimitTxPower>
 8018d76:	4603      	mov	r3, r0
 8018d78:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8018d7e:	4b12      	ldr	r3, [pc, #72]	; (8018dc8 <RegionUS915SetContinuousWave+0xa0>)
 8018d80:	681a      	ldr	r2, [r3, #0]
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	4619      	mov	r1, r3
 8018d88:	460b      	mov	r3, r1
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	440b      	add	r3, r1
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	4413      	add	r3, r2
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d9a:	f04f 0200 	mov.w	r2, #0
 8018d9e:	490b      	ldr	r1, [pc, #44]	; (8018dcc <RegionUS915SetContinuousWave+0xa4>)
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7fd f9db 	bl	801615c <RegionCommonComputeTxPower>
 8018da6:	4603      	mov	r3, r0
 8018da8:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018daa:	4b09      	ldr	r3, [pc, #36]	; (8018dd0 <RegionUS915SetContinuousWave+0xa8>)
 8018dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dae:	687a      	ldr	r2, [r7, #4]
 8018db0:	8992      	ldrh	r2, [r2, #12]
 8018db2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018db6:	68b8      	ldr	r0, [r7, #8]
 8018db8:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8018dba:	bf00      	nop
 8018dbc:	3714      	adds	r7, #20
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd90      	pop	{r4, r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	20003c88 	.word	0x20003c88
 8018dc8:	20003c8c 	.word	0x20003c8c
 8018dcc:	41f00000 	.word	0x41f00000
 8018dd0:	0801e6b8 	.word	0x0801e6b8

08018dd4 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b085      	sub	sp, #20
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	4603      	mov	r3, r0
 8018ddc:	71fb      	strb	r3, [r7, #7]
 8018dde:	460b      	mov	r3, r1
 8018de0:	71bb      	strb	r3, [r7, #6]
 8018de2:	4613      	mov	r3, r2
 8018de4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018de6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018dea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018dee:	4909      	ldr	r1, [pc, #36]	; (8018e14 <RegionUS915ApplyDrOffset+0x40>)
 8018df0:	0092      	lsls	r2, r2, #2
 8018df2:	440a      	add	r2, r1
 8018df4:	4413      	add	r3, r2
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	da01      	bge.n	8018e06 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018e02:	2300      	movs	r3, #0
 8018e04:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018e06:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3714      	adds	r7, #20
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bc80      	pop	{r7}
 8018e10:	4770      	bx	lr
 8018e12:	bf00      	nop
 8018e14:	0801e684 	.word	0x0801e684

08018e18 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018e18:	b480      	push	{r7}
 8018e1a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018e1c:	4b0d      	ldr	r3, [pc, #52]	; (8018e54 <rand1+0x3c>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a0d      	ldr	r2, [pc, #52]	; (8018e58 <rand1+0x40>)
 8018e22:	fb02 f303 	mul.w	r3, r2, r3
 8018e26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018e2a:	3339      	adds	r3, #57	; 0x39
 8018e2c:	4a09      	ldr	r2, [pc, #36]	; (8018e54 <rand1+0x3c>)
 8018e2e:	6013      	str	r3, [r2, #0]
 8018e30:	4b08      	ldr	r3, [pc, #32]	; (8018e54 <rand1+0x3c>)
 8018e32:	681a      	ldr	r2, [r3, #0]
 8018e34:	2303      	movs	r3, #3
 8018e36:	fba3 1302 	umull	r1, r3, r3, r2
 8018e3a:	1ad1      	subs	r1, r2, r3
 8018e3c:	0849      	lsrs	r1, r1, #1
 8018e3e:	440b      	add	r3, r1
 8018e40:	0f99      	lsrs	r1, r3, #30
 8018e42:	460b      	mov	r3, r1
 8018e44:	07db      	lsls	r3, r3, #31
 8018e46:	1a5b      	subs	r3, r3, r1
 8018e48:	1ad1      	subs	r1, r2, r3
 8018e4a:	460b      	mov	r3, r1
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bc80      	pop	{r7}
 8018e52:	4770      	bx	lr
 8018e54:	20000100 	.word	0x20000100
 8018e58:	41c64e6d 	.word	0x41c64e6d

08018e5c <srand1>:

void srand1( uint32_t seed )
{
 8018e5c:	b480      	push	{r7}
 8018e5e:	b083      	sub	sp, #12
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
    next = seed;
 8018e64:	4a03      	ldr	r2, [pc, #12]	; (8018e74 <srand1+0x18>)
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	6013      	str	r3, [r2, #0]
}
 8018e6a:	bf00      	nop
 8018e6c:	370c      	adds	r7, #12
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bc80      	pop	{r7}
 8018e72:	4770      	bx	lr
 8018e74:	20000100 	.word	0x20000100

08018e78 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b082      	sub	sp, #8
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
 8018e80:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018e82:	f7ff ffc9 	bl	8018e18 <rand1>
 8018e86:	4602      	mov	r2, r0
 8018e88:	6839      	ldr	r1, [r7, #0]
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	1acb      	subs	r3, r1, r3
 8018e8e:	3301      	adds	r3, #1
 8018e90:	fb92 f1f3 	sdiv	r1, r2, r3
 8018e94:	fb01 f303 	mul.w	r3, r1, r3
 8018e98:	1ad2      	subs	r2, r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	4413      	add	r3, r2
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	3708      	adds	r7, #8
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}

08018ea6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018ea6:	b480      	push	{r7}
 8018ea8:	b085      	sub	sp, #20
 8018eaa:	af00      	add	r7, sp, #0
 8018eac:	60f8      	str	r0, [r7, #12]
 8018eae:	60b9      	str	r1, [r7, #8]
 8018eb0:	4613      	mov	r3, r2
 8018eb2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018eb4:	e007      	b.n	8018ec6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018eb6:	68ba      	ldr	r2, [r7, #8]
 8018eb8:	1c53      	adds	r3, r2, #1
 8018eba:	60bb      	str	r3, [r7, #8]
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	1c59      	adds	r1, r3, #1
 8018ec0:	60f9      	str	r1, [r7, #12]
 8018ec2:	7812      	ldrb	r2, [r2, #0]
 8018ec4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ec6:	88fb      	ldrh	r3, [r7, #6]
 8018ec8:	1e5a      	subs	r2, r3, #1
 8018eca:	80fa      	strh	r2, [r7, #6]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d1f2      	bne.n	8018eb6 <memcpy1+0x10>
    }
}
 8018ed0:	bf00      	nop
 8018ed2:	bf00      	nop
 8018ed4:	3714      	adds	r7, #20
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bc80      	pop	{r7}
 8018eda:	4770      	bx	lr

08018edc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018edc:	b480      	push	{r7}
 8018ede:	b085      	sub	sp, #20
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	60f8      	str	r0, [r7, #12]
 8018ee4:	60b9      	str	r1, [r7, #8]
 8018ee6:	4613      	mov	r3, r2
 8018ee8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018eea:	88fb      	ldrh	r3, [r7, #6]
 8018eec:	3b01      	subs	r3, #1
 8018eee:	68fa      	ldr	r2, [r7, #12]
 8018ef0:	4413      	add	r3, r2
 8018ef2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018ef4:	e007      	b.n	8018f06 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018ef6:	68ba      	ldr	r2, [r7, #8]
 8018ef8:	1c53      	adds	r3, r2, #1
 8018efa:	60bb      	str	r3, [r7, #8]
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	1e59      	subs	r1, r3, #1
 8018f00:	60f9      	str	r1, [r7, #12]
 8018f02:	7812      	ldrb	r2, [r2, #0]
 8018f04:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f06:	88fb      	ldrh	r3, [r7, #6]
 8018f08:	1e5a      	subs	r2, r3, #1
 8018f0a:	80fa      	strh	r2, [r7, #6]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d1f2      	bne.n	8018ef6 <memcpyr+0x1a>
    }
}
 8018f10:	bf00      	nop
 8018f12:	bf00      	nop
 8018f14:	3714      	adds	r7, #20
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bc80      	pop	{r7}
 8018f1a:	4770      	bx	lr

08018f1c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b083      	sub	sp, #12
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	460b      	mov	r3, r1
 8018f26:	70fb      	strb	r3, [r7, #3]
 8018f28:	4613      	mov	r3, r2
 8018f2a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018f2c:	e004      	b.n	8018f38 <memset1+0x1c>
    {
        *dst++ = value;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	1c5a      	adds	r2, r3, #1
 8018f32:	607a      	str	r2, [r7, #4]
 8018f34:	78fa      	ldrb	r2, [r7, #3]
 8018f36:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f38:	883b      	ldrh	r3, [r7, #0]
 8018f3a:	1e5a      	subs	r2, r3, #1
 8018f3c:	803a      	strh	r2, [r7, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d1f5      	bne.n	8018f2e <memset1+0x12>
    }
}
 8018f42:	bf00      	nop
 8018f44:	bf00      	nop
 8018f46:	370c      	adds	r7, #12
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bc80      	pop	{r7}
 8018f4c:	4770      	bx	lr
	...

08018f50 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018f50:	b480      	push	{r7}
 8018f52:	b087      	sub	sp, #28
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8018f5c:	4b1a      	ldr	r3, [pc, #104]	; (8018fc8 <Crc32+0x78>)
 8018f5e:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018f60:	f04f 33ff 	mov.w	r3, #4294967295
 8018f64:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d101      	bne.n	8018f70 <Crc32+0x20>
    {
        return 0;
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	e026      	b.n	8018fbe <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018f70:	2300      	movs	r3, #0
 8018f72:	827b      	strh	r3, [r7, #18]
 8018f74:	e01d      	b.n	8018fb2 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8018f76:	8a7b      	ldrh	r3, [r7, #18]
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	781b      	ldrb	r3, [r3, #0]
 8018f7e:	461a      	mov	r2, r3
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	4053      	eors	r3, r2
 8018f84:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8018f86:	2300      	movs	r3, #0
 8018f88:	823b      	strh	r3, [r7, #16]
 8018f8a:	e00c      	b.n	8018fa6 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	085a      	lsrs	r2, r3, #1
 8018f90:	697b      	ldr	r3, [r7, #20]
 8018f92:	f003 0301 	and.w	r3, r3, #1
 8018f96:	4259      	negs	r1, r3
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	400b      	ands	r3, r1
 8018f9c:	4053      	eors	r3, r2
 8018f9e:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8018fa0:	8a3b      	ldrh	r3, [r7, #16]
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	823b      	strh	r3, [r7, #16]
 8018fa6:	8a3b      	ldrh	r3, [r7, #16]
 8018fa8:	2b07      	cmp	r3, #7
 8018faa:	d9ef      	bls.n	8018f8c <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8018fac:	8a7b      	ldrh	r3, [r7, #18]
 8018fae:	3301      	adds	r3, #1
 8018fb0:	827b      	strh	r3, [r7, #18]
 8018fb2:	8a7a      	ldrh	r2, [r7, #18]
 8018fb4:	887b      	ldrh	r3, [r7, #2]
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d3dd      	bcc.n	8018f76 <Crc32+0x26>
        }
    }

    return ~crc;
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	43db      	mvns	r3, r3
}
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	371c      	adds	r7, #28
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bc80      	pop	{r7}
 8018fc6:	4770      	bx	lr
 8018fc8:	edb88320 	.word	0xedb88320

08018fcc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af02      	add	r7, sp, #8
 8018fd2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018fd4:	4a21      	ldr	r2, [pc, #132]	; (801905c <RadioInit+0x90>)
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018fda:	4b21      	ldr	r3, [pc, #132]	; (8019060 <RadioInit+0x94>)
 8018fdc:	2200      	movs	r2, #0
 8018fde:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018fe0:	4b1f      	ldr	r3, [pc, #124]	; (8019060 <RadioInit+0x94>)
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018fe6:	4b1e      	ldr	r3, [pc, #120]	; (8019060 <RadioInit+0x94>)
 8018fe8:	2200      	movs	r2, #0
 8018fea:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8018fec:	481d      	ldr	r0, [pc, #116]	; (8019064 <RadioInit+0x98>)
 8018fee:	f001 feb7 	bl	801ad60 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8018ff2:	2000      	movs	r0, #0
 8018ff4:	f001 f81e 	bl	801a034 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8018ff8:	f002 f948 	bl	801b28c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018ffc:	2100      	movs	r1, #0
 8018ffe:	2000      	movs	r0, #0
 8019000:	f002 fca8 	bl	801b954 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8019004:	2204      	movs	r2, #4
 8019006:	2100      	movs	r1, #0
 8019008:	2001      	movs	r0, #1
 801900a:	f002 facd 	bl	801b5a8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801900e:	2300      	movs	r3, #0
 8019010:	2200      	movs	r2, #0
 8019012:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019016:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801901a:	f002 f9fd 	bl	801b418 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801901e:	f000 fe9b 	bl	8019d58 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019022:	2300      	movs	r3, #0
 8019024:	9300      	str	r3, [sp, #0]
 8019026:	4b10      	ldr	r3, [pc, #64]	; (8019068 <RadioInit+0x9c>)
 8019028:	2200      	movs	r2, #0
 801902a:	f04f 31ff 	mov.w	r1, #4294967295
 801902e:	480f      	ldr	r0, [pc, #60]	; (801906c <RadioInit+0xa0>)
 8019030:	f003 fec8 	bl	801cdc4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019034:	2300      	movs	r3, #0
 8019036:	9300      	str	r3, [sp, #0]
 8019038:	4b0d      	ldr	r3, [pc, #52]	; (8019070 <RadioInit+0xa4>)
 801903a:	2200      	movs	r2, #0
 801903c:	f04f 31ff 	mov.w	r1, #4294967295
 8019040:	480c      	ldr	r0, [pc, #48]	; (8019074 <RadioInit+0xa8>)
 8019042:	f003 febf 	bl	801cdc4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019046:	4809      	ldr	r0, [pc, #36]	; (801906c <RadioInit+0xa0>)
 8019048:	f003 ff60 	bl	801cf0c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801904c:	4809      	ldr	r0, [pc, #36]	; (8019074 <RadioInit+0xa8>)
 801904e:	f003 ff5d 	bl	801cf0c <UTIL_TIMER_Stop>
}
 8019052:	bf00      	nop
 8019054:	3708      	adds	r7, #8
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop
 801905c:	20003d90 	.word	0x20003d90
 8019060:	20003d94 	.word	0x20003d94
 8019064:	0801a119 	.word	0x0801a119
 8019068:	0801a0a1 	.word	0x0801a0a1
 801906c:	20003dec 	.word	0x20003dec
 8019070:	0801a0b5 	.word	0x0801a0b5
 8019074:	20003e04 	.word	0x20003e04

08019078 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801907c:	f001 feb2 	bl	801ade4 <SUBGRF_GetOperatingMode>
 8019080:	4603      	mov	r3, r0
 8019082:	2b07      	cmp	r3, #7
 8019084:	d00a      	beq.n	801909c <RadioGetStatus+0x24>
 8019086:	2b07      	cmp	r3, #7
 8019088:	dc0a      	bgt.n	80190a0 <RadioGetStatus+0x28>
 801908a:	2b04      	cmp	r3, #4
 801908c:	d002      	beq.n	8019094 <RadioGetStatus+0x1c>
 801908e:	2b05      	cmp	r3, #5
 8019090:	d002      	beq.n	8019098 <RadioGetStatus+0x20>
 8019092:	e005      	b.n	80190a0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019094:	2302      	movs	r3, #2
 8019096:	e004      	b.n	80190a2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019098:	2301      	movs	r3, #1
 801909a:	e002      	b.n	80190a2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801909c:	2303      	movs	r3, #3
 801909e:	e000      	b.n	80190a2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80190a0:	2300      	movs	r3, #0
    }
}
 80190a2:	4618      	mov	r0, r3
 80190a4:	bd80      	pop	{r7, pc}
	...

080190a8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	4603      	mov	r3, r0
 80190b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80190b2:	4a25      	ldr	r2, [pc, #148]	; (8019148 <RadioSetModem+0xa0>)
 80190b4:	79fb      	ldrb	r3, [r7, #7]
 80190b6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80190b8:	79fb      	ldrb	r3, [r7, #7]
 80190ba:	4618      	mov	r0, r3
 80190bc:	f003 f80d 	bl	801c0da <RFW_SetRadioModem>
    switch( modem )
 80190c0:	79fb      	ldrb	r3, [r7, #7]
 80190c2:	3b01      	subs	r3, #1
 80190c4:	2b03      	cmp	r3, #3
 80190c6:	d80b      	bhi.n	80190e0 <RadioSetModem+0x38>
 80190c8:	a201      	add	r2, pc, #4	; (adr r2, 80190d0 <RadioSetModem+0x28>)
 80190ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190ce:	bf00      	nop
 80190d0:	080190ef 	.word	0x080190ef
 80190d4:	08019115 	.word	0x08019115
 80190d8:	08019123 	.word	0x08019123
 80190dc:	08019131 	.word	0x08019131
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80190e0:	2000      	movs	r0, #0
 80190e2:	f002 fa3b 	bl	801b55c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190e6:	4b18      	ldr	r3, [pc, #96]	; (8019148 <RadioSetModem+0xa0>)
 80190e8:	2200      	movs	r2, #0
 80190ea:	735a      	strb	r2, [r3, #13]
        break;
 80190ec:	e028      	b.n	8019140 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80190ee:	2001      	movs	r0, #1
 80190f0:	f002 fa34 	bl	801b55c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80190f4:	4b14      	ldr	r3, [pc, #80]	; (8019148 <RadioSetModem+0xa0>)
 80190f6:	7b5a      	ldrb	r2, [r3, #13]
 80190f8:	4b13      	ldr	r3, [pc, #76]	; (8019148 <RadioSetModem+0xa0>)
 80190fa:	7b1b      	ldrb	r3, [r3, #12]
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d01e      	beq.n	801913e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019100:	4b11      	ldr	r3, [pc, #68]	; (8019148 <RadioSetModem+0xa0>)
 8019102:	7b1a      	ldrb	r2, [r3, #12]
 8019104:	4b10      	ldr	r3, [pc, #64]	; (8019148 <RadioSetModem+0xa0>)
 8019106:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019108:	4b0f      	ldr	r3, [pc, #60]	; (8019148 <RadioSetModem+0xa0>)
 801910a:	7b5b      	ldrb	r3, [r3, #13]
 801910c:	4618      	mov	r0, r3
 801910e:	f000 ff91 	bl	801a034 <RadioSetPublicNetwork>
        }
        break;
 8019112:	e014      	b.n	801913e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019114:	2002      	movs	r0, #2
 8019116:	f002 fa21 	bl	801b55c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801911a:	4b0b      	ldr	r3, [pc, #44]	; (8019148 <RadioSetModem+0xa0>)
 801911c:	2200      	movs	r2, #0
 801911e:	735a      	strb	r2, [r3, #13]
        break;
 8019120:	e00e      	b.n	8019140 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019122:	2002      	movs	r0, #2
 8019124:	f002 fa1a 	bl	801b55c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019128:	4b07      	ldr	r3, [pc, #28]	; (8019148 <RadioSetModem+0xa0>)
 801912a:	2200      	movs	r2, #0
 801912c:	735a      	strb	r2, [r3, #13]
        break;
 801912e:	e007      	b.n	8019140 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019130:	2000      	movs	r0, #0
 8019132:	f002 fa13 	bl	801b55c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019136:	4b04      	ldr	r3, [pc, #16]	; (8019148 <RadioSetModem+0xa0>)
 8019138:	2200      	movs	r2, #0
 801913a:	735a      	strb	r2, [r3, #13]
        break;
 801913c:	e000      	b.n	8019140 <RadioSetModem+0x98>
        break;
 801913e:	bf00      	nop
    }
}
 8019140:	bf00      	nop
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}
 8019148:	20003d94 	.word	0x20003d94

0801914c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b082      	sub	sp, #8
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019154:	6878      	ldr	r0, [r7, #4]
 8019156:	f002 f9bb 	bl	801b4d0 <SUBGRF_SetRfFrequency>
}
 801915a:	bf00      	nop
 801915c:	3708      	adds	r7, #8
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}

08019162 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019162:	b580      	push	{r7, lr}
 8019164:	b090      	sub	sp, #64	; 0x40
 8019166:	af0a      	add	r7, sp, #40	; 0x28
 8019168:	60f8      	str	r0, [r7, #12]
 801916a:	60b9      	str	r1, [r7, #8]
 801916c:	603b      	str	r3, [r7, #0]
 801916e:	4613      	mov	r3, r2
 8019170:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019172:	2301      	movs	r3, #1
 8019174:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019176:	2300      	movs	r3, #0
 8019178:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801917a:	2300      	movs	r3, #0
 801917c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801917e:	f000 fdfe 	bl	8019d7e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8019182:	2000      	movs	r0, #0
 8019184:	f7ff ff90 	bl	80190a8 <RadioSetModem>

    RadioSetChannel( freq );
 8019188:	68f8      	ldr	r0, [r7, #12]
 801918a:	f7ff ffdf 	bl	801914c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801918e:	2301      	movs	r3, #1
 8019190:	9309      	str	r3, [sp, #36]	; 0x24
 8019192:	2300      	movs	r3, #0
 8019194:	9308      	str	r3, [sp, #32]
 8019196:	2300      	movs	r3, #0
 8019198:	9307      	str	r3, [sp, #28]
 801919a:	2300      	movs	r3, #0
 801919c:	9306      	str	r3, [sp, #24]
 801919e:	2300      	movs	r3, #0
 80191a0:	9305      	str	r3, [sp, #20]
 80191a2:	2300      	movs	r3, #0
 80191a4:	9304      	str	r3, [sp, #16]
 80191a6:	2300      	movs	r3, #0
 80191a8:	9303      	str	r3, [sp, #12]
 80191aa:	2300      	movs	r3, #0
 80191ac:	9302      	str	r3, [sp, #8]
 80191ae:	2303      	movs	r3, #3
 80191b0:	9301      	str	r3, [sp, #4]
 80191b2:	68bb      	ldr	r3, [r7, #8]
 80191b4:	9300      	str	r3, [sp, #0]
 80191b6:	2300      	movs	r3, #0
 80191b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80191bc:	68b9      	ldr	r1, [r7, #8]
 80191be:	2000      	movs	r0, #0
 80191c0:	f000 f840 	bl	8019244 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80191c4:	2000      	movs	r0, #0
 80191c6:	f000 fde1 	bl	8019d8c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80191ca:	f000 ff61 	bl	801a090 <RadioGetWakeupTime>
 80191ce:	4603      	mov	r3, r0
 80191d0:	4618      	mov	r0, r3
 80191d2:	f7e8 fd38 	bl	8001c46 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80191d6:	f003 ffb3 	bl	801d140 <UTIL_TIMER_GetCurrentTime>
 80191da:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191dc:	e00d      	b.n	80191fa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80191de:	2000      	movs	r0, #0
 80191e0:	f000 fea6 	bl	8019f30 <RadioRssi>
 80191e4:	4603      	mov	r3, r0
 80191e6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80191e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80191ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191f0:	429a      	cmp	r2, r3
 80191f2:	dd02      	ble.n	80191fa <RadioIsChannelFree+0x98>
        {
            status = false;
 80191f4:	2300      	movs	r3, #0
 80191f6:	75fb      	strb	r3, [r7, #23]
            break;
 80191f8:	e006      	b.n	8019208 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191fa:	6938      	ldr	r0, [r7, #16]
 80191fc:	f003 ffb2 	bl	801d164 <UTIL_TIMER_GetElapsedTime>
 8019200:	4602      	mov	r2, r0
 8019202:	683b      	ldr	r3, [r7, #0]
 8019204:	4293      	cmp	r3, r2
 8019206:	d8ea      	bhi.n	80191de <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8019208:	f000 fdb9 	bl	8019d7e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801920c:	7dfb      	ldrb	r3, [r7, #23]
}
 801920e:	4618      	mov	r0, r3
 8019210:	3718      	adds	r7, #24
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}

08019216 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019216:	b580      	push	{r7, lr}
 8019218:	b082      	sub	sp, #8
 801921a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801921c:	2300      	movs	r3, #0
 801921e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8019220:	2001      	movs	r0, #1
 8019222:	f7ff ff41 	bl	80190a8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019226:	2300      	movs	r3, #0
 8019228:	2200      	movs	r2, #0
 801922a:	2100      	movs	r1, #0
 801922c:	2000      	movs	r0, #0
 801922e:	f002 f8f3 	bl	801b418 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019232:	f001 fea8 	bl	801af86 <SUBGRF_GetRandom>
 8019236:	6078      	str	r0, [r7, #4]

    return rnd;
 8019238:	687b      	ldr	r3, [r7, #4]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3708      	adds	r7, #8
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}
	...

08019244 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b08a      	sub	sp, #40	; 0x28
 8019248:	af00      	add	r7, sp, #0
 801924a:	60b9      	str	r1, [r7, #8]
 801924c:	607a      	str	r2, [r7, #4]
 801924e:	461a      	mov	r2, r3
 8019250:	4603      	mov	r3, r0
 8019252:	73fb      	strb	r3, [r7, #15]
 8019254:	4613      	mov	r3, r2
 8019256:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8019258:	4abd      	ldr	r2, [pc, #756]	; (8019550 <RadioSetRxConfig+0x30c>)
 801925a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801925e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019260:	f002 fef9 	bl	801c056 <RFW_DeInit>
    if( rxContinuous == true )
 8019264:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019268:	2b00      	cmp	r3, #0
 801926a:	d001      	beq.n	8019270 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801926c:	2300      	movs	r3, #0
 801926e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019270:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019274:	2b00      	cmp	r3, #0
 8019276:	d004      	beq.n	8019282 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019278:	4ab6      	ldr	r2, [pc, #728]	; (8019554 <RadioSetRxConfig+0x310>)
 801927a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801927e:	7013      	strb	r3, [r2, #0]
 8019280:	e002      	b.n	8019288 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019282:	4bb4      	ldr	r3, [pc, #720]	; (8019554 <RadioSetRxConfig+0x310>)
 8019284:	22ff      	movs	r2, #255	; 0xff
 8019286:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019288:	7bfb      	ldrb	r3, [r7, #15]
 801928a:	2b04      	cmp	r3, #4
 801928c:	d009      	beq.n	80192a2 <RadioSetRxConfig+0x5e>
 801928e:	2b04      	cmp	r3, #4
 8019290:	f300 81da 	bgt.w	8019648 <RadioSetRxConfig+0x404>
 8019294:	2b00      	cmp	r3, #0
 8019296:	f000 80bf 	beq.w	8019418 <RadioSetRxConfig+0x1d4>
 801929a:	2b01      	cmp	r3, #1
 801929c:	f000 812c 	beq.w	80194f8 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80192a0:	e1d2      	b.n	8019648 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80192a2:	2001      	movs	r0, #1
 80192a4:	f001 ffb4 	bl	801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192a8:	4ba9      	ldr	r3, [pc, #676]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192aa:	2200      	movs	r2, #0
 80192ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192b0:	4aa7      	ldr	r2, [pc, #668]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80192b6:	4ba6      	ldr	r3, [pc, #664]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192b8:	2209      	movs	r2, #9
 80192ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80192be:	4ba4      	ldr	r3, [pc, #656]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80192c4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80192c6:	68b8      	ldr	r0, [r7, #8]
 80192c8:	f002 fdf8 	bl	801bebc <SUBGRF_GetFskBandwidthRegValue>
 80192cc:	4603      	mov	r3, r0
 80192ce:	461a      	mov	r2, r3
 80192d0:	4b9f      	ldr	r3, [pc, #636]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192d6:	4b9e      	ldr	r3, [pc, #632]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192d8:	2200      	movs	r2, #0
 80192da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80192dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80192de:	00db      	lsls	r3, r3, #3
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	4b9b      	ldr	r3, [pc, #620]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80192e6:	4b9a      	ldr	r3, [pc, #616]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192e8:	2200      	movs	r2, #0
 80192ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80192ec:	4b98      	ldr	r3, [pc, #608]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192ee:	2210      	movs	r2, #16
 80192f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80192f2:	4b97      	ldr	r3, [pc, #604]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192f4:	2200      	movs	r2, #0
 80192f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80192f8:	4b95      	ldr	r3, [pc, #596]	; (8019550 <RadioSetRxConfig+0x30c>)
 80192fa:	2200      	movs	r2, #0
 80192fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80192fe:	4b95      	ldr	r3, [pc, #596]	; (8019554 <RadioSetRxConfig+0x310>)
 8019300:	781a      	ldrb	r2, [r3, #0]
 8019302:	4b93      	ldr	r3, [pc, #588]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019304:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019306:	4b92      	ldr	r3, [pc, #584]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019308:	2201      	movs	r2, #1
 801930a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801930c:	4b90      	ldr	r3, [pc, #576]	; (8019550 <RadioSetRxConfig+0x30c>)
 801930e:	2200      	movs	r2, #0
 8019310:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019312:	2004      	movs	r0, #4
 8019314:	f7ff fec8 	bl	80190a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019318:	488f      	ldr	r0, [pc, #572]	; (8019558 <RadioSetRxConfig+0x314>)
 801931a:	f002 f9ab 	bl	801b674 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801931e:	488f      	ldr	r0, [pc, #572]	; (801955c <RadioSetRxConfig+0x318>)
 8019320:	f002 fa7a 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019324:	4a8e      	ldr	r2, [pc, #568]	; (8019560 <RadioSetRxConfig+0x31c>)
 8019326:	f107 031c 	add.w	r3, r7, #28
 801932a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801932e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019332:	f107 031c 	add.w	r3, r7, #28
 8019336:	4618      	mov	r0, r3
 8019338:	f001 fda3 	bl	801ae82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801933c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019340:	f001 fdee 	bl	801af20 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8019344:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019348:	f000 fe11 	bl	8019f6e <RadioRead>
 801934c:	4603      	mov	r3, r0
 801934e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019356:	f023 0310 	bic.w	r3, r3, #16
 801935a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801935e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019362:	4619      	mov	r1, r3
 8019364:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019368:	f000 fdef 	bl	8019f4a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801936c:	2104      	movs	r1, #4
 801936e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019372:	f000 fdea 	bl	8019f4a <RadioWrite>
            modReg= RadioRead(0x89b);
 8019376:	f640 009b 	movw	r0, #2203	; 0x89b
 801937a:	f000 fdf8 	bl	8019f6e <RadioRead>
 801937e:	4603      	mov	r3, r0
 8019380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019388:	f023 031c 	bic.w	r3, r3, #28
 801938c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8019390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019394:	f043 0308 	orr.w	r3, r3, #8
 8019398:	b2db      	uxtb	r3, r3
 801939a:	4619      	mov	r1, r3
 801939c:	f640 009b 	movw	r0, #2203	; 0x89b
 80193a0:	f000 fdd3 	bl	8019f4a <RadioWrite>
            modReg= RadioRead(0x6d1);
 80193a4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80193a8:	f000 fde1 	bl	8019f6e <RadioRead>
 80193ac:	4603      	mov	r3, r0
 80193ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80193b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193b6:	f023 0318 	bic.w	r3, r3, #24
 80193ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80193be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193c2:	f043 0318 	orr.w	r3, r3, #24
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	4619      	mov	r1, r3
 80193ca:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80193ce:	f000 fdbc 	bl	8019f4a <RadioWrite>
            modReg= RadioRead(0x6ac);
 80193d2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80193d6:	f000 fdca 	bl	8019f6e <RadioRead>
 80193da:	4603      	mov	r3, r0
 80193dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80193e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80193e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80193ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193f0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	4619      	mov	r1, r3
 80193f8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80193fc:	f000 fda5 	bl	8019f4a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019400:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019402:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019406:	fb02 f303 	mul.w	r3, r2, r3
 801940a:	461a      	mov	r2, r3
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019412:	4a4f      	ldr	r2, [pc, #316]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019414:	6093      	str	r3, [r2, #8]
            break;
 8019416:	e118      	b.n	801964a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019418:	2000      	movs	r0, #0
 801941a:	f001 fef9 	bl	801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801941e:	4b4c      	ldr	r3, [pc, #304]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019420:	2200      	movs	r2, #0
 8019422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019426:	4a4a      	ldr	r2, [pc, #296]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801942c:	4b48      	ldr	r3, [pc, #288]	; (8019550 <RadioSetRxConfig+0x30c>)
 801942e:	220b      	movs	r2, #11
 8019430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019434:	68b8      	ldr	r0, [r7, #8]
 8019436:	f002 fd41 	bl	801bebc <SUBGRF_GetFskBandwidthRegValue>
 801943a:	4603      	mov	r3, r0
 801943c:	461a      	mov	r2, r3
 801943e:	4b44      	ldr	r3, [pc, #272]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019444:	4b42      	ldr	r3, [pc, #264]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019446:	2200      	movs	r2, #0
 8019448:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801944a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801944c:	00db      	lsls	r3, r3, #3
 801944e:	b29a      	uxth	r2, r3
 8019450:	4b3f      	ldr	r3, [pc, #252]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019452:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019454:	4b3e      	ldr	r3, [pc, #248]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019456:	2204      	movs	r2, #4
 8019458:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801945a:	4b3d      	ldr	r3, [pc, #244]	; (8019550 <RadioSetRxConfig+0x30c>)
 801945c:	2218      	movs	r2, #24
 801945e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019460:	4b3b      	ldr	r3, [pc, #236]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019462:	2200      	movs	r2, #0
 8019464:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019466:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801946a:	f083 0301 	eor.w	r3, r3, #1
 801946e:	b2db      	uxtb	r3, r3
 8019470:	461a      	mov	r2, r3
 8019472:	4b37      	ldr	r3, [pc, #220]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019474:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019476:	4b37      	ldr	r3, [pc, #220]	; (8019554 <RadioSetRxConfig+0x310>)
 8019478:	781a      	ldrb	r2, [r3, #0]
 801947a:	4b35      	ldr	r3, [pc, #212]	; (8019550 <RadioSetRxConfig+0x30c>)
 801947c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801947e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019482:	2b00      	cmp	r3, #0
 8019484:	d003      	beq.n	801948e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019486:	4b32      	ldr	r3, [pc, #200]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019488:	22f2      	movs	r2, #242	; 0xf2
 801948a:	75da      	strb	r2, [r3, #23]
 801948c:	e002      	b.n	8019494 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801948e:	4b30      	ldr	r3, [pc, #192]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019490:	2201      	movs	r2, #1
 8019492:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019494:	4b2e      	ldr	r3, [pc, #184]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019496:	2201      	movs	r2, #1
 8019498:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801949a:	f000 fc70 	bl	8019d7e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801949e:	4b2c      	ldr	r3, [pc, #176]	; (8019550 <RadioSetRxConfig+0x30c>)
 80194a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	bf14      	ite	ne
 80194a8:	2301      	movne	r3, #1
 80194aa:	2300      	moveq	r3, #0
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	4618      	mov	r0, r3
 80194b0:	f7ff fdfa 	bl	80190a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80194b4:	4828      	ldr	r0, [pc, #160]	; (8019558 <RadioSetRxConfig+0x314>)
 80194b6:	f002 f8dd 	bl	801b674 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ba:	4828      	ldr	r0, [pc, #160]	; (801955c <RadioSetRxConfig+0x318>)
 80194bc:	f002 f9ac 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80194c0:	4a28      	ldr	r2, [pc, #160]	; (8019564 <RadioSetRxConfig+0x320>)
 80194c2:	f107 0314 	add.w	r3, r7, #20
 80194c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80194ce:	f107 0314 	add.w	r3, r7, #20
 80194d2:	4618      	mov	r0, r3
 80194d4:	f001 fcd5 	bl	801ae82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80194d8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80194dc:	f001 fd20 	bl	801af20 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80194e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80194e2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80194e6:	fb02 f303 	mul.w	r3, r2, r3
 80194ea:	461a      	mov	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80194f2:	4a17      	ldr	r2, [pc, #92]	; (8019550 <RadioSetRxConfig+0x30c>)
 80194f4:	6093      	str	r3, [r2, #8]
            break;
 80194f6:	e0a8      	b.n	801964a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80194f8:	2000      	movs	r0, #0
 80194fa:	f001 fe89 	bl	801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80194fe:	4b14      	ldr	r3, [pc, #80]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019500:	2201      	movs	r2, #1
 8019502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	b2da      	uxtb	r2, r3
 801950a:	4b11      	ldr	r3, [pc, #68]	; (8019550 <RadioSetRxConfig+0x30c>)
 801950c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019510:	4a15      	ldr	r2, [pc, #84]	; (8019568 <RadioSetRxConfig+0x324>)
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	4413      	add	r3, r2
 8019516:	781a      	ldrb	r2, [r3, #0]
 8019518:	4b0d      	ldr	r3, [pc, #52]	; (8019550 <RadioSetRxConfig+0x30c>)
 801951a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801951e:	4a0c      	ldr	r2, [pc, #48]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019520:	7bbb      	ldrb	r3, [r7, #14]
 8019522:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d105      	bne.n	8019538 <RadioSetRxConfig+0x2f4>
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2b0b      	cmp	r3, #11
 8019530:	d008      	beq.n	8019544 <RadioSetRxConfig+0x300>
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2b0c      	cmp	r3, #12
 8019536:	d005      	beq.n	8019544 <RadioSetRxConfig+0x300>
 8019538:	68bb      	ldr	r3, [r7, #8]
 801953a:	2b01      	cmp	r3, #1
 801953c:	d116      	bne.n	801956c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2b0c      	cmp	r3, #12
 8019542:	d113      	bne.n	801956c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019544:	4b02      	ldr	r3, [pc, #8]	; (8019550 <RadioSetRxConfig+0x30c>)
 8019546:	2201      	movs	r2, #1
 8019548:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801954c:	e012      	b.n	8019574 <RadioSetRxConfig+0x330>
 801954e:	bf00      	nop
 8019550:	20003d94 	.word	0x20003d94
 8019554:	20000104 	.word	0x20000104
 8019558:	20003dcc 	.word	0x20003dcc
 801955c:	20003da2 	.word	0x20003da2
 8019560:	0801e0d0 	.word	0x0801e0d0
 8019564:	0801e0d8 	.word	0x0801e0d8
 8019568:	0801e73c 	.word	0x0801e73c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801956c:	4b39      	ldr	r3, [pc, #228]	; (8019654 <RadioSetRxConfig+0x410>)
 801956e:	2200      	movs	r2, #0
 8019570:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019574:	4b37      	ldr	r3, [pc, #220]	; (8019654 <RadioSetRxConfig+0x410>)
 8019576:	2201      	movs	r2, #1
 8019578:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801957a:	4b36      	ldr	r3, [pc, #216]	; (8019654 <RadioSetRxConfig+0x410>)
 801957c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019580:	2b05      	cmp	r3, #5
 8019582:	d004      	beq.n	801958e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019584:	4b33      	ldr	r3, [pc, #204]	; (8019654 <RadioSetRxConfig+0x410>)
 8019586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801958a:	2b06      	cmp	r3, #6
 801958c:	d10a      	bne.n	80195a4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 801958e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019590:	2b0b      	cmp	r3, #11
 8019592:	d803      	bhi.n	801959c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019594:	4b2f      	ldr	r3, [pc, #188]	; (8019654 <RadioSetRxConfig+0x410>)
 8019596:	220c      	movs	r2, #12
 8019598:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801959a:	e006      	b.n	80195aa <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801959c:	4a2d      	ldr	r2, [pc, #180]	; (8019654 <RadioSetRxConfig+0x410>)
 801959e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80195a0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80195a2:	e002      	b.n	80195aa <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80195a4:	4a2b      	ldr	r2, [pc, #172]	; (8019654 <RadioSetRxConfig+0x410>)
 80195a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80195a8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80195aa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80195ae:	4b29      	ldr	r3, [pc, #164]	; (8019654 <RadioSetRxConfig+0x410>)
 80195b0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80195b2:	4b29      	ldr	r3, [pc, #164]	; (8019658 <RadioSetRxConfig+0x414>)
 80195b4:	781a      	ldrb	r2, [r3, #0]
 80195b6:	4b27      	ldr	r3, [pc, #156]	; (8019654 <RadioSetRxConfig+0x410>)
 80195b8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80195ba:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80195be:	4b25      	ldr	r3, [pc, #148]	; (8019654 <RadioSetRxConfig+0x410>)
 80195c0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80195c4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80195c8:	4b22      	ldr	r3, [pc, #136]	; (8019654 <RadioSetRxConfig+0x410>)
 80195ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80195ce:	f000 fbd6 	bl	8019d7e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80195d2:	4b20      	ldr	r3, [pc, #128]	; (8019654 <RadioSetRxConfig+0x410>)
 80195d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80195d8:	2b00      	cmp	r3, #0
 80195da:	bf14      	ite	ne
 80195dc:	2301      	movne	r3, #1
 80195de:	2300      	moveq	r3, #0
 80195e0:	b2db      	uxtb	r3, r3
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7ff fd60 	bl	80190a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195e8:	481c      	ldr	r0, [pc, #112]	; (801965c <RadioSetRxConfig+0x418>)
 80195ea:	f002 f843 	bl	801b674 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195ee:	481c      	ldr	r0, [pc, #112]	; (8019660 <RadioSetRxConfig+0x41c>)
 80195f0:	f002 f912 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80195f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	4618      	mov	r0, r3
 80195fa:	f001 fe18 	bl	801b22e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80195fe:	4b15      	ldr	r3, [pc, #84]	; (8019654 <RadioSetRxConfig+0x410>)
 8019600:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019604:	2b01      	cmp	r3, #1
 8019606:	d10d      	bne.n	8019624 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8019608:	f240 7036 	movw	r0, #1846	; 0x736
 801960c:	f002 fa60 	bl	801bad0 <SUBGRF_ReadRegister>
 8019610:	4603      	mov	r3, r0
 8019612:	f023 0304 	bic.w	r3, r3, #4
 8019616:	b2db      	uxtb	r3, r3
 8019618:	4619      	mov	r1, r3
 801961a:	f240 7036 	movw	r0, #1846	; 0x736
 801961e:	f002 fa43 	bl	801baa8 <SUBGRF_WriteRegister>
 8019622:	e00c      	b.n	801963e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8019624:	f240 7036 	movw	r0, #1846	; 0x736
 8019628:	f002 fa52 	bl	801bad0 <SUBGRF_ReadRegister>
 801962c:	4603      	mov	r3, r0
 801962e:	f043 0304 	orr.w	r3, r3, #4
 8019632:	b2db      	uxtb	r3, r3
 8019634:	4619      	mov	r1, r3
 8019636:	f240 7036 	movw	r0, #1846	; 0x736
 801963a:	f002 fa35 	bl	801baa8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801963e:	4b05      	ldr	r3, [pc, #20]	; (8019654 <RadioSetRxConfig+0x410>)
 8019640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019644:	609a      	str	r2, [r3, #8]
            break;
 8019646:	e000      	b.n	801964a <RadioSetRxConfig+0x406>
            break;
 8019648:	bf00      	nop
    }
}
 801964a:	bf00      	nop
 801964c:	3728      	adds	r7, #40	; 0x28
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	20003d94 	.word	0x20003d94
 8019658:	20000104 	.word	0x20000104
 801965c:	20003dcc 	.word	0x20003dcc
 8019660:	20003da2 	.word	0x20003da2

08019664 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b086      	sub	sp, #24
 8019668:	af00      	add	r7, sp, #0
 801966a:	60ba      	str	r2, [r7, #8]
 801966c:	607b      	str	r3, [r7, #4]
 801966e:	4603      	mov	r3, r0
 8019670:	73fb      	strb	r3, [r7, #15]
 8019672:	460b      	mov	r3, r1
 8019674:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019676:	f002 fcee 	bl	801c056 <RFW_DeInit>
    switch( modem )
 801967a:	7bfb      	ldrb	r3, [r7, #15]
 801967c:	2b03      	cmp	r3, #3
 801967e:	f000 80d7 	beq.w	8019830 <RadioSetTxConfig+0x1cc>
 8019682:	2b03      	cmp	r3, #3
 8019684:	f300 80e6 	bgt.w	8019854 <RadioSetTxConfig+0x1f0>
 8019688:	2b00      	cmp	r3, #0
 801968a:	d002      	beq.n	8019692 <RadioSetTxConfig+0x2e>
 801968c:	2b01      	cmp	r3, #1
 801968e:	d061      	beq.n	8019754 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8019690:	e0e0      	b.n	8019854 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019692:	4b7c      	ldr	r3, [pc, #496]	; (8019884 <RadioSetTxConfig+0x220>)
 8019694:	2200      	movs	r2, #0
 8019696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801969a:	4a7a      	ldr	r2, [pc, #488]	; (8019884 <RadioSetTxConfig+0x220>)
 801969c:	6a3b      	ldr	r3, [r7, #32]
 801969e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80196a0:	4b78      	ldr	r3, [pc, #480]	; (8019884 <RadioSetTxConfig+0x220>)
 80196a2:	220b      	movs	r2, #11
 80196a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80196a8:	6878      	ldr	r0, [r7, #4]
 80196aa:	f002 fc07 	bl	801bebc <SUBGRF_GetFskBandwidthRegValue>
 80196ae:	4603      	mov	r3, r0
 80196b0:	461a      	mov	r2, r3
 80196b2:	4b74      	ldr	r3, [pc, #464]	; (8019884 <RadioSetTxConfig+0x220>)
 80196b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80196b8:	4a72      	ldr	r2, [pc, #456]	; (8019884 <RadioSetTxConfig+0x220>)
 80196ba:	68bb      	ldr	r3, [r7, #8]
 80196bc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80196be:	4b71      	ldr	r3, [pc, #452]	; (8019884 <RadioSetTxConfig+0x220>)
 80196c0:	2200      	movs	r2, #0
 80196c2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80196c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80196c6:	00db      	lsls	r3, r3, #3
 80196c8:	b29a      	uxth	r2, r3
 80196ca:	4b6e      	ldr	r3, [pc, #440]	; (8019884 <RadioSetTxConfig+0x220>)
 80196cc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80196ce:	4b6d      	ldr	r3, [pc, #436]	; (8019884 <RadioSetTxConfig+0x220>)
 80196d0:	2204      	movs	r2, #4
 80196d2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80196d4:	4b6b      	ldr	r3, [pc, #428]	; (8019884 <RadioSetTxConfig+0x220>)
 80196d6:	2218      	movs	r2, #24
 80196d8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80196da:	4b6a      	ldr	r3, [pc, #424]	; (8019884 <RadioSetTxConfig+0x220>)
 80196dc:	2200      	movs	r2, #0
 80196de:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80196e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80196e4:	f083 0301 	eor.w	r3, r3, #1
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	461a      	mov	r2, r3
 80196ec:	4b65      	ldr	r3, [pc, #404]	; (8019884 <RadioSetTxConfig+0x220>)
 80196ee:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80196f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d003      	beq.n	8019700 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80196f8:	4b62      	ldr	r3, [pc, #392]	; (8019884 <RadioSetTxConfig+0x220>)
 80196fa:	22f2      	movs	r2, #242	; 0xf2
 80196fc:	75da      	strb	r2, [r3, #23]
 80196fe:	e002      	b.n	8019706 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019700:	4b60      	ldr	r3, [pc, #384]	; (8019884 <RadioSetTxConfig+0x220>)
 8019702:	2201      	movs	r2, #1
 8019704:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019706:	4b5f      	ldr	r3, [pc, #380]	; (8019884 <RadioSetTxConfig+0x220>)
 8019708:	2201      	movs	r2, #1
 801970a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801970c:	f000 fb37 	bl	8019d7e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8019710:	4b5c      	ldr	r3, [pc, #368]	; (8019884 <RadioSetTxConfig+0x220>)
 8019712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019716:	2b00      	cmp	r3, #0
 8019718:	bf14      	ite	ne
 801971a:	2301      	movne	r3, #1
 801971c:	2300      	moveq	r3, #0
 801971e:	b2db      	uxtb	r3, r3
 8019720:	4618      	mov	r0, r3
 8019722:	f7ff fcc1 	bl	80190a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019726:	4858      	ldr	r0, [pc, #352]	; (8019888 <RadioSetTxConfig+0x224>)
 8019728:	f001 ffa4 	bl	801b674 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801972c:	4857      	ldr	r0, [pc, #348]	; (801988c <RadioSetTxConfig+0x228>)
 801972e:	f002 f873 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019732:	4a57      	ldr	r2, [pc, #348]	; (8019890 <RadioSetTxConfig+0x22c>)
 8019734:	f107 0310 	add.w	r3, r7, #16
 8019738:	e892 0003 	ldmia.w	r2, {r0, r1}
 801973c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019740:	f107 0310 	add.w	r3, r7, #16
 8019744:	4618      	mov	r0, r3
 8019746:	f001 fb9c 	bl	801ae82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801974a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801974e:	f001 fbe7 	bl	801af20 <SUBGRF_SetWhiteningSeed>
            break;
 8019752:	e080      	b.n	8019856 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019754:	4b4b      	ldr	r3, [pc, #300]	; (8019884 <RadioSetTxConfig+0x220>)
 8019756:	2201      	movs	r2, #1
 8019758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801975c:	6a3b      	ldr	r3, [r7, #32]
 801975e:	b2da      	uxtb	r2, r3
 8019760:	4b48      	ldr	r3, [pc, #288]	; (8019884 <RadioSetTxConfig+0x220>)
 8019762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019766:	4a4b      	ldr	r2, [pc, #300]	; (8019894 <RadioSetTxConfig+0x230>)
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	4413      	add	r3, r2
 801976c:	781a      	ldrb	r2, [r3, #0]
 801976e:	4b45      	ldr	r3, [pc, #276]	; (8019884 <RadioSetTxConfig+0x220>)
 8019770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019774:	4a43      	ldr	r2, [pc, #268]	; (8019884 <RadioSetTxConfig+0x220>)
 8019776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801977a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d105      	bne.n	8019790 <RadioSetTxConfig+0x12c>
 8019784:	6a3b      	ldr	r3, [r7, #32]
 8019786:	2b0b      	cmp	r3, #11
 8019788:	d008      	beq.n	801979c <RadioSetTxConfig+0x138>
 801978a:	6a3b      	ldr	r3, [r7, #32]
 801978c:	2b0c      	cmp	r3, #12
 801978e:	d005      	beq.n	801979c <RadioSetTxConfig+0x138>
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b01      	cmp	r3, #1
 8019794:	d107      	bne.n	80197a6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019796:	6a3b      	ldr	r3, [r7, #32]
 8019798:	2b0c      	cmp	r3, #12
 801979a:	d104      	bne.n	80197a6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801979c:	4b39      	ldr	r3, [pc, #228]	; (8019884 <RadioSetTxConfig+0x220>)
 801979e:	2201      	movs	r2, #1
 80197a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80197a4:	e003      	b.n	80197ae <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80197a6:	4b37      	ldr	r3, [pc, #220]	; (8019884 <RadioSetTxConfig+0x220>)
 80197a8:	2200      	movs	r2, #0
 80197aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80197ae:	4b35      	ldr	r3, [pc, #212]	; (8019884 <RadioSetTxConfig+0x220>)
 80197b0:	2201      	movs	r2, #1
 80197b2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197b4:	4b33      	ldr	r3, [pc, #204]	; (8019884 <RadioSetTxConfig+0x220>)
 80197b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80197ba:	2b05      	cmp	r3, #5
 80197bc:	d004      	beq.n	80197c8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80197be:	4b31      	ldr	r3, [pc, #196]	; (8019884 <RadioSetTxConfig+0x220>)
 80197c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197c4:	2b06      	cmp	r3, #6
 80197c6:	d10a      	bne.n	80197de <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80197c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197ca:	2b0b      	cmp	r3, #11
 80197cc:	d803      	bhi.n	80197d6 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80197ce:	4b2d      	ldr	r3, [pc, #180]	; (8019884 <RadioSetTxConfig+0x220>)
 80197d0:	220c      	movs	r2, #12
 80197d2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80197d4:	e006      	b.n	80197e4 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197d6:	4a2b      	ldr	r2, [pc, #172]	; (8019884 <RadioSetTxConfig+0x220>)
 80197d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197da:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80197dc:	e002      	b.n	80197e4 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197de:	4a29      	ldr	r2, [pc, #164]	; (8019884 <RadioSetTxConfig+0x220>)
 80197e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197e2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80197e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80197e8:	4b26      	ldr	r3, [pc, #152]	; (8019884 <RadioSetTxConfig+0x220>)
 80197ea:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80197ec:	4b2a      	ldr	r3, [pc, #168]	; (8019898 <RadioSetTxConfig+0x234>)
 80197ee:	781a      	ldrb	r2, [r3, #0]
 80197f0:	4b24      	ldr	r3, [pc, #144]	; (8019884 <RadioSetTxConfig+0x220>)
 80197f2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80197f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80197f8:	4b22      	ldr	r3, [pc, #136]	; (8019884 <RadioSetTxConfig+0x220>)
 80197fa:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80197fe:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019802:	4b20      	ldr	r3, [pc, #128]	; (8019884 <RadioSetTxConfig+0x220>)
 8019804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019808:	f000 fab9 	bl	8019d7e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801980c:	4b1d      	ldr	r3, [pc, #116]	; (8019884 <RadioSetTxConfig+0x220>)
 801980e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019812:	2b00      	cmp	r3, #0
 8019814:	bf14      	ite	ne
 8019816:	2301      	movne	r3, #1
 8019818:	2300      	moveq	r3, #0
 801981a:	b2db      	uxtb	r3, r3
 801981c:	4618      	mov	r0, r3
 801981e:	f7ff fc43 	bl	80190a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019822:	4819      	ldr	r0, [pc, #100]	; (8019888 <RadioSetTxConfig+0x224>)
 8019824:	f001 ff26 	bl	801b674 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019828:	4818      	ldr	r0, [pc, #96]	; (801988c <RadioSetTxConfig+0x228>)
 801982a:	f001 fff5 	bl	801b818 <SUBGRF_SetPacketParams>
            break;
 801982e:	e012      	b.n	8019856 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019830:	2003      	movs	r0, #3
 8019832:	f7ff fc39 	bl	80190a8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019836:	4b13      	ldr	r3, [pc, #76]	; (8019884 <RadioSetTxConfig+0x220>)
 8019838:	2202      	movs	r2, #2
 801983a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801983e:	4a11      	ldr	r2, [pc, #68]	; (8019884 <RadioSetTxConfig+0x220>)
 8019840:	6a3b      	ldr	r3, [r7, #32]
 8019842:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019844:	4b0f      	ldr	r3, [pc, #60]	; (8019884 <RadioSetTxConfig+0x220>)
 8019846:	2216      	movs	r2, #22
 8019848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801984c:	480e      	ldr	r0, [pc, #56]	; (8019888 <RadioSetTxConfig+0x224>)
 801984e:	f001 ff11 	bl	801b674 <SUBGRF_SetModulationParams>
            break;
 8019852:	e000      	b.n	8019856 <RadioSetTxConfig+0x1f2>
            break;
 8019854:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801985a:	4618      	mov	r0, r3
 801985c:	f002 fa40 	bl	801bce0 <SUBGRF_SetRfTxPower>
 8019860:	4603      	mov	r3, r0
 8019862:	461a      	mov	r2, r3
 8019864:	4b07      	ldr	r3, [pc, #28]	; (8019884 <RadioSetTxConfig+0x220>)
 8019866:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801986a:	4b06      	ldr	r3, [pc, #24]	; (8019884 <RadioSetTxConfig+0x220>)
 801986c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019870:	4618      	mov	r0, r3
 8019872:	f002 fc04 	bl	801c07e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019876:	4a03      	ldr	r2, [pc, #12]	; (8019884 <RadioSetTxConfig+0x220>)
 8019878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801987a:	6053      	str	r3, [r2, #4]
}
 801987c:	bf00      	nop
 801987e:	3718      	adds	r7, #24
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	20003d94 	.word	0x20003d94
 8019888:	20003dcc 	.word	0x20003dcc
 801988c:	20003da2 	.word	0x20003da2
 8019890:	0801e0d8 	.word	0x0801e0d8
 8019894:	0801e73c 	.word	0x0801e73c
 8019898:	20000104 	.word	0x20000104

0801989c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801989c:	b480      	push	{r7}
 801989e:	b083      	sub	sp, #12
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
    return true;
 80198a4:	2301      	movs	r3, #1
}
 80198a6:	4618      	mov	r0, r3
 80198a8:	370c      	adds	r7, #12
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bc80      	pop	{r7}
 80198ae:	4770      	bx	lr

080198b0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80198b0:	b480      	push	{r7}
 80198b2:	b085      	sub	sp, #20
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	4603      	mov	r3, r0
 80198b8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80198ba:	2300      	movs	r3, #0
 80198bc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80198be:	79fb      	ldrb	r3, [r7, #7]
 80198c0:	2b0a      	cmp	r3, #10
 80198c2:	d83e      	bhi.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
 80198c4:	a201      	add	r2, pc, #4	; (adr r2, 80198cc <RadioGetLoRaBandwidthInHz+0x1c>)
 80198c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198ca:	bf00      	nop
 80198cc:	080198f9 	.word	0x080198f9
 80198d0:	08019909 	.word	0x08019909
 80198d4:	08019919 	.word	0x08019919
 80198d8:	08019929 	.word	0x08019929
 80198dc:	08019931 	.word	0x08019931
 80198e0:	08019937 	.word	0x08019937
 80198e4:	0801993d 	.word	0x0801993d
 80198e8:	08019943 	.word	0x08019943
 80198ec:	08019901 	.word	0x08019901
 80198f0:	08019911 	.word	0x08019911
 80198f4:	08019921 	.word	0x08019921
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80198f8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80198fc:	60fb      	str	r3, [r7, #12]
        break;
 80198fe:	e020      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019900:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019904:	60fb      	str	r3, [r7, #12]
        break;
 8019906:	e01c      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019908:	f643 5309 	movw	r3, #15625	; 0x3d09
 801990c:	60fb      	str	r3, [r7, #12]
        break;
 801990e:	e018      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019910:	f245 1361 	movw	r3, #20833	; 0x5161
 8019914:	60fb      	str	r3, [r7, #12]
        break;
 8019916:	e014      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019918:	f647 2312 	movw	r3, #31250	; 0x7a12
 801991c:	60fb      	str	r3, [r7, #12]
        break;
 801991e:	e010      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019920:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019924:	60fb      	str	r3, [r7, #12]
        break;
 8019926:	e00c      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019928:	f24f 4324 	movw	r3, #62500	; 0xf424
 801992c:	60fb      	str	r3, [r7, #12]
        break;
 801992e:	e008      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019930:	4b07      	ldr	r3, [pc, #28]	; (8019950 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019932:	60fb      	str	r3, [r7, #12]
        break;
 8019934:	e005      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019936:	4b07      	ldr	r3, [pc, #28]	; (8019954 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019938:	60fb      	str	r3, [r7, #12]
        break;
 801993a:	e002      	b.n	8019942 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801993c:	4b06      	ldr	r3, [pc, #24]	; (8019958 <RadioGetLoRaBandwidthInHz+0xa8>)
 801993e:	60fb      	str	r3, [r7, #12]
        break;
 8019940:	bf00      	nop
    }

    return bandwidthInHz;
 8019942:	68fb      	ldr	r3, [r7, #12]
}
 8019944:	4618      	mov	r0, r3
 8019946:	3714      	adds	r7, #20
 8019948:	46bd      	mov	sp, r7
 801994a:	bc80      	pop	{r7}
 801994c:	4770      	bx	lr
 801994e:	bf00      	nop
 8019950:	0001e848 	.word	0x0001e848
 8019954:	0003d090 	.word	0x0003d090
 8019958:	0007a120 	.word	0x0007a120

0801995c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801995c:	b480      	push	{r7}
 801995e:	b083      	sub	sp, #12
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
 8019964:	4608      	mov	r0, r1
 8019966:	4611      	mov	r1, r2
 8019968:	461a      	mov	r2, r3
 801996a:	4603      	mov	r3, r0
 801996c:	70fb      	strb	r3, [r7, #3]
 801996e:	460b      	mov	r3, r1
 8019970:	803b      	strh	r3, [r7, #0]
 8019972:	4613      	mov	r3, r2
 8019974:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8019976:	883b      	ldrh	r3, [r7, #0]
 8019978:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801997a:	78ba      	ldrb	r2, [r7, #2]
 801997c:	f082 0201 	eor.w	r2, r2, #1
 8019980:	b2d2      	uxtb	r2, r2
 8019982:	2a00      	cmp	r2, #0
 8019984:	d001      	beq.n	801998a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019986:	2208      	movs	r2, #8
 8019988:	e000      	b.n	801998c <RadioGetGfskTimeOnAirNumerator+0x30>
 801998a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801998c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801998e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019992:	7c3b      	ldrb	r3, [r7, #16]
 8019994:	7d39      	ldrb	r1, [r7, #20]
 8019996:	2900      	cmp	r1, #0
 8019998:	d001      	beq.n	801999e <RadioGetGfskTimeOnAirNumerator+0x42>
 801999a:	2102      	movs	r1, #2
 801999c:	e000      	b.n	80199a0 <RadioGetGfskTimeOnAirNumerator+0x44>
 801999e:	2100      	movs	r1, #0
 80199a0:	440b      	add	r3, r1
 80199a2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80199a4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80199a6:	4618      	mov	r0, r3
 80199a8:	370c      	adds	r7, #12
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bc80      	pop	{r7}
 80199ae:	4770      	bx	lr

080199b0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80199b0:	b480      	push	{r7}
 80199b2:	b08b      	sub	sp, #44	; 0x2c
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	60f8      	str	r0, [r7, #12]
 80199b8:	60b9      	str	r1, [r7, #8]
 80199ba:	4611      	mov	r1, r2
 80199bc:	461a      	mov	r2, r3
 80199be:	460b      	mov	r3, r1
 80199c0:	71fb      	strb	r3, [r7, #7]
 80199c2:	4613      	mov	r3, r2
 80199c4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80199c6:	79fb      	ldrb	r3, [r7, #7]
 80199c8:	3304      	adds	r3, #4
 80199ca:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80199cc:	2300      	movs	r3, #0
 80199ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80199d2:	68bb      	ldr	r3, [r7, #8]
 80199d4:	2b05      	cmp	r3, #5
 80199d6:	d002      	beq.n	80199de <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	2b06      	cmp	r3, #6
 80199dc:	d104      	bne.n	80199e8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80199de:	88bb      	ldrh	r3, [r7, #4]
 80199e0:	2b0b      	cmp	r3, #11
 80199e2:	d801      	bhi.n	80199e8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80199e4:	230c      	movs	r3, #12
 80199e6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d105      	bne.n	80199fa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80199ee:	68bb      	ldr	r3, [r7, #8]
 80199f0:	2b0b      	cmp	r3, #11
 80199f2:	d008      	beq.n	8019a06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199f4:	68bb      	ldr	r3, [r7, #8]
 80199f6:	2b0c      	cmp	r3, #12
 80199f8:	d005      	beq.n	8019a06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2b01      	cmp	r3, #1
 80199fe:	d105      	bne.n	8019a0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019a00:	68bb      	ldr	r3, [r7, #8]
 8019a02:	2b0c      	cmp	r3, #12
 8019a04:	d102      	bne.n	8019a0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019a06:	2301      	movs	r3, #1
 8019a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019a10:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019a16:	2a00      	cmp	r2, #0
 8019a18:	d001      	beq.n	8019a1e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019a1a:	2210      	movs	r2, #16
 8019a1c:	e000      	b.n	8019a20 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019a1e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a20:	4413      	add	r3, r2
 8019a22:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019a24:	68bb      	ldr	r3, [r7, #8]
 8019a26:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019a28:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019a2a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019a2e:	2a00      	cmp	r2, #0
 8019a30:	d001      	beq.n	8019a36 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019a32:	2200      	movs	r2, #0
 8019a34:	e000      	b.n	8019a38 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019a36:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019a38:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a3a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	2b06      	cmp	r3, #6
 8019a40:	d803      	bhi.n	8019a4a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	009b      	lsls	r3, r3, #2
 8019a46:	623b      	str	r3, [r7, #32]
 8019a48:	e00e      	b.n	8019a68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019a4a:	69fb      	ldr	r3, [r7, #28]
 8019a4c:	3308      	adds	r3, #8
 8019a4e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d004      	beq.n	8019a62 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	3b02      	subs	r3, #2
 8019a5c:	009b      	lsls	r3, r3, #2
 8019a5e:	623b      	str	r3, [r7, #32]
 8019a60:	e002      	b.n	8019a68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	009b      	lsls	r3, r3, #2
 8019a66:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	da01      	bge.n	8019a72 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019a6e:	2300      	movs	r3, #0
 8019a70:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019a72:	69fa      	ldr	r2, [r7, #28]
 8019a74:	6a3b      	ldr	r3, [r7, #32]
 8019a76:	4413      	add	r3, r2
 8019a78:	1e5a      	subs	r2, r3, #1
 8019a7a:	6a3b      	ldr	r3, [r7, #32]
 8019a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a80:	697a      	ldr	r2, [r7, #20]
 8019a82:	fb03 f202 	mul.w	r2, r3, r2
 8019a86:	88bb      	ldrh	r3, [r7, #4]
 8019a88:	4413      	add	r3, r2
    int32_t intermediate =
 8019a8a:	330c      	adds	r3, #12
 8019a8c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	2b06      	cmp	r3, #6
 8019a92:	d802      	bhi.n	8019a9a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	3302      	adds	r3, #2
 8019a98:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019a9a:	69bb      	ldr	r3, [r7, #24]
 8019a9c:	009b      	lsls	r3, r3, #2
 8019a9e:	1c5a      	adds	r2, r3, #1
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	3b02      	subs	r3, #2
 8019aa4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	372c      	adds	r7, #44	; 0x2c
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bc80      	pop	{r7}
 8019ab0:	4770      	bx	lr
	...

08019ab4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b08a      	sub	sp, #40	; 0x28
 8019ab8:	af04      	add	r7, sp, #16
 8019aba:	60b9      	str	r1, [r7, #8]
 8019abc:	607a      	str	r2, [r7, #4]
 8019abe:	461a      	mov	r2, r3
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	73fb      	strb	r3, [r7, #15]
 8019ac4:	4613      	mov	r3, r2
 8019ac6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019ac8:	2300      	movs	r3, #0
 8019aca:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019acc:	2301      	movs	r3, #1
 8019ace:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019ad0:	7bfb      	ldrb	r3, [r7, #15]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d002      	beq.n	8019adc <RadioTimeOnAir+0x28>
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	d017      	beq.n	8019b0a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019ada:	e035      	b.n	8019b48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019adc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019ae0:	8c3a      	ldrh	r2, [r7, #32]
 8019ae2:	7bb9      	ldrb	r1, [r7, #14]
 8019ae4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019ae8:	9301      	str	r3, [sp, #4]
 8019aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019aee:	9300      	str	r3, [sp, #0]
 8019af0:	4603      	mov	r3, r0
 8019af2:	6878      	ldr	r0, [r7, #4]
 8019af4:	f7ff ff32 	bl	801995c <RadioGetGfskTimeOnAirNumerator>
 8019af8:	4603      	mov	r3, r0
 8019afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019afe:	fb02 f303 	mul.w	r3, r2, r3
 8019b02:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	613b      	str	r3, [r7, #16]
        break;
 8019b08:	e01e      	b.n	8019b48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019b0a:	8c39      	ldrh	r1, [r7, #32]
 8019b0c:	7bba      	ldrb	r2, [r7, #14]
 8019b0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019b12:	9302      	str	r3, [sp, #8]
 8019b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019b18:	9301      	str	r3, [sp, #4]
 8019b1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b1e:	9300      	str	r3, [sp, #0]
 8019b20:	460b      	mov	r3, r1
 8019b22:	6879      	ldr	r1, [r7, #4]
 8019b24:	68b8      	ldr	r0, [r7, #8]
 8019b26:	f7ff ff43 	bl	80199b0 <RadioGetLoRaTimeOnAirNumerator>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019b30:	fb02 f303 	mul.w	r3, r2, r3
 8019b34:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019b36:	4a0a      	ldr	r2, [pc, #40]	; (8019b60 <RadioTimeOnAir+0xac>)
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	4413      	add	r3, r2
 8019b3c:	781b      	ldrb	r3, [r3, #0]
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7ff feb6 	bl	80198b0 <RadioGetLoRaBandwidthInHz>
 8019b44:	6138      	str	r0, [r7, #16]
        break;
 8019b46:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8019b48:	697a      	ldr	r2, [r7, #20]
 8019b4a:	693b      	ldr	r3, [r7, #16]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	1e5a      	subs	r2, r3, #1
 8019b50:	693b      	ldr	r3, [r7, #16]
 8019b52:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3718      	adds	r7, #24
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	0801e73c 	.word	0x0801e73c

08019b64 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b084      	sub	sp, #16
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	460b      	mov	r3, r1
 8019b6e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019b70:	2300      	movs	r3, #0
 8019b72:	2200      	movs	r2, #0
 8019b74:	f240 2101 	movw	r1, #513	; 0x201
 8019b78:	f240 2001 	movw	r0, #513	; 0x201
 8019b7c:	f001 fc4c 	bl	801b418 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8019b80:	4b70      	ldr	r3, [pc, #448]	; (8019d44 <RadioSend+0x1e0>)
 8019b82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019b86:	2101      	movs	r1, #1
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f002 f881 	bl	801bc90 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8019b8e:	4b6d      	ldr	r3, [pc, #436]	; (8019d44 <RadioSend+0x1e0>)
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	2b01      	cmp	r3, #1
 8019b94:	d112      	bne.n	8019bbc <RadioSend+0x58>
 8019b96:	4b6b      	ldr	r3, [pc, #428]	; (8019d44 <RadioSend+0x1e0>)
 8019b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b9c:	2b06      	cmp	r3, #6
 8019b9e:	d10d      	bne.n	8019bbc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8019ba0:	f640 0089 	movw	r0, #2185	; 0x889
 8019ba4:	f001 ff94 	bl	801bad0 <SUBGRF_ReadRegister>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	f023 0304 	bic.w	r3, r3, #4
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	4619      	mov	r1, r3
 8019bb2:	f640 0089 	movw	r0, #2185	; 0x889
 8019bb6:	f001 ff77 	bl	801baa8 <SUBGRF_WriteRegister>
 8019bba:	e00c      	b.n	8019bd6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8019bbc:	f640 0089 	movw	r0, #2185	; 0x889
 8019bc0:	f001 ff86 	bl	801bad0 <SUBGRF_ReadRegister>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	f043 0304 	orr.w	r3, r3, #4
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	4619      	mov	r1, r3
 8019bce:	f640 0089 	movw	r0, #2185	; 0x889
 8019bd2:	f001 ff69 	bl	801baa8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8019bd6:	4b5b      	ldr	r3, [pc, #364]	; (8019d44 <RadioSend+0x1e0>)
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	2b03      	cmp	r3, #3
 8019bdc:	f200 80a5 	bhi.w	8019d2a <RadioSend+0x1c6>
 8019be0:	a201      	add	r2, pc, #4	; (adr r2, 8019be8 <RadioSend+0x84>)
 8019be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019be6:	bf00      	nop
 8019be8:	08019c13 	.word	0x08019c13
 8019bec:	08019bf9 	.word	0x08019bf9
 8019bf0:	08019c73 	.word	0x08019c73
 8019bf4:	08019c93 	.word	0x08019c93
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019bf8:	4a52      	ldr	r2, [pc, #328]	; (8019d44 <RadioSend+0x1e0>)
 8019bfa:	78fb      	ldrb	r3, [r7, #3]
 8019bfc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bfe:	4852      	ldr	r0, [pc, #328]	; (8019d48 <RadioSend+0x1e4>)
 8019c00:	f001 fe0a 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c04:	78fb      	ldrb	r3, [r7, #3]
 8019c06:	2200      	movs	r2, #0
 8019c08:	4619      	mov	r1, r3
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	f001 f926 	bl	801ae5c <SUBGRF_SendPayload>
            break;
 8019c10:	e08c      	b.n	8019d2c <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019c12:	f002 fa26 	bl	801c062 <RFW_Is_Init>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	d11d      	bne.n	8019c58 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019c1c:	f107 020d 	add.w	r2, r7, #13
 8019c20:	78fb      	ldrb	r3, [r7, #3]
 8019c22:	4619      	mov	r1, r3
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f002 fa34 	bl	801c092 <RFW_TransmitInit>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d10c      	bne.n	8019c4a <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019c30:	7b7a      	ldrb	r2, [r7, #13]
 8019c32:	4b44      	ldr	r3, [pc, #272]	; (8019d44 <RadioSend+0x1e0>)
 8019c34:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c36:	4844      	ldr	r0, [pc, #272]	; (8019d48 <RadioSend+0x1e4>)
 8019c38:	f001 fdee 	bl	801b818 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019c3c:	7b7b      	ldrb	r3, [r7, #13]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	4619      	mov	r1, r3
 8019c42:	6878      	ldr	r0, [r7, #4]
 8019c44:	f001 f90a 	bl	801ae5c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019c48:	e070      	b.n	8019d2c <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8019c4a:	4b40      	ldr	r3, [pc, #256]	; (8019d4c <RadioSend+0x1e8>)
 8019c4c:	2201      	movs	r2, #1
 8019c4e:	2100      	movs	r1, #0
 8019c50:	2002      	movs	r0, #2
 8019c52:	f002 fa7b 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
 8019c56:	e072      	b.n	8019d3e <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019c58:	4a3a      	ldr	r2, [pc, #232]	; (8019d44 <RadioSend+0x1e0>)
 8019c5a:	78fb      	ldrb	r3, [r7, #3]
 8019c5c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c5e:	483a      	ldr	r0, [pc, #232]	; (8019d48 <RadioSend+0x1e4>)
 8019c60:	f001 fdda 	bl	801b818 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8019c64:	78fb      	ldrb	r3, [r7, #3]
 8019c66:	2200      	movs	r2, #0
 8019c68:	4619      	mov	r1, r3
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f001 f8f6 	bl	801ae5c <SUBGRF_SendPayload>
            break;
 8019c70:	e05c      	b.n	8019d2c <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c72:	4b34      	ldr	r3, [pc, #208]	; (8019d44 <RadioSend+0x1e0>)
 8019c74:	2202      	movs	r2, #2
 8019c76:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019c78:	4a32      	ldr	r2, [pc, #200]	; (8019d44 <RadioSend+0x1e0>)
 8019c7a:	78fb      	ldrb	r3, [r7, #3]
 8019c7c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c7e:	4832      	ldr	r0, [pc, #200]	; (8019d48 <RadioSend+0x1e4>)
 8019c80:	f001 fdca 	bl	801b818 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c84:	78fb      	ldrb	r3, [r7, #3]
 8019c86:	2200      	movs	r2, #0
 8019c88:	4619      	mov	r1, r3
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f001 f8e6 	bl	801ae5c <SUBGRF_SendPayload>
            break;
 8019c90:	e04c      	b.n	8019d2c <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019c92:	78fb      	ldrb	r3, [r7, #3]
 8019c94:	461a      	mov	r2, r3
 8019c96:	6879      	ldr	r1, [r7, #4]
 8019c98:	482d      	ldr	r0, [pc, #180]	; (8019d50 <RadioSend+0x1ec>)
 8019c9a:	f000 fc66 	bl	801a56a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c9e:	4b29      	ldr	r3, [pc, #164]	; (8019d44 <RadioSend+0x1e0>)
 8019ca0:	2202      	movs	r2, #2
 8019ca2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019ca4:	78fb      	ldrb	r3, [r7, #3]
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	b2da      	uxtb	r2, r3
 8019caa:	4b26      	ldr	r3, [pc, #152]	; (8019d44 <RadioSend+0x1e0>)
 8019cac:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cae:	4826      	ldr	r0, [pc, #152]	; (8019d48 <RadioSend+0x1e4>)
 8019cb0:	f001 fdb2 	bl	801b818 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8019cb4:	2100      	movs	r1, #0
 8019cb6:	20f1      	movs	r0, #241	; 0xf1
 8019cb8:	f000 f947 	bl	8019f4a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	20f0      	movs	r0, #240	; 0xf0
 8019cc0:	f000 f943 	bl	8019f4a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019cc4:	4b1f      	ldr	r3, [pc, #124]	; (8019d44 <RadioSend+0x1e0>)
 8019cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019cc8:	2b64      	cmp	r3, #100	; 0x64
 8019cca:	d108      	bne.n	8019cde <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8019ccc:	2170      	movs	r1, #112	; 0x70
 8019cce:	20f3      	movs	r0, #243	; 0xf3
 8019cd0:	f000 f93b 	bl	8019f4a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8019cd4:	211d      	movs	r1, #29
 8019cd6:	20f2      	movs	r0, #242	; 0xf2
 8019cd8:	f000 f937 	bl	8019f4a <RadioWrite>
 8019cdc:	e007      	b.n	8019cee <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8019cde:	21e1      	movs	r1, #225	; 0xe1
 8019ce0:	20f3      	movs	r0, #243	; 0xf3
 8019ce2:	f000 f932 	bl	8019f4a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8019ce6:	2104      	movs	r1, #4
 8019ce8:	20f2      	movs	r0, #242	; 0xf2
 8019cea:	f000 f92e 	bl	8019f4a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019cee:	78fb      	ldrb	r3, [r7, #3]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	00db      	lsls	r3, r3, #3
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	3302      	adds	r3, #2
 8019cf8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019cfa:	89fb      	ldrh	r3, [r7, #14]
 8019cfc:	0a1b      	lsrs	r3, r3, #8
 8019cfe:	b29b      	uxth	r3, r3
 8019d00:	b2db      	uxtb	r3, r3
 8019d02:	4619      	mov	r1, r3
 8019d04:	20f4      	movs	r0, #244	; 0xf4
 8019d06:	f000 f920 	bl	8019f4a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8019d0a:	89fb      	ldrh	r3, [r7, #14]
 8019d0c:	b2db      	uxtb	r3, r3
 8019d0e:	4619      	mov	r1, r3
 8019d10:	20f5      	movs	r0, #245	; 0xf5
 8019d12:	f000 f91a 	bl	8019f4a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019d16:	78fb      	ldrb	r3, [r7, #3]
 8019d18:	3301      	adds	r3, #1
 8019d1a:	b2db      	uxtb	r3, r3
 8019d1c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019d20:	4619      	mov	r1, r3
 8019d22:	480b      	ldr	r0, [pc, #44]	; (8019d50 <RadioSend+0x1ec>)
 8019d24:	f001 f89a 	bl	801ae5c <SUBGRF_SendPayload>
            break;
 8019d28:	e000      	b.n	8019d2c <RadioSend+0x1c8>
        }
        default:
            break;
 8019d2a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019d2c:	4b05      	ldr	r3, [pc, #20]	; (8019d44 <RadioSend+0x1e0>)
 8019d2e:	685b      	ldr	r3, [r3, #4]
 8019d30:	4619      	mov	r1, r3
 8019d32:	4808      	ldr	r0, [pc, #32]	; (8019d54 <RadioSend+0x1f0>)
 8019d34:	f003 f95a 	bl	801cfec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019d38:	4806      	ldr	r0, [pc, #24]	; (8019d54 <RadioSend+0x1f0>)
 8019d3a:	f003 f879 	bl	801ce30 <UTIL_TIMER_Start>
}
 8019d3e:	3710      	adds	r7, #16
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}
 8019d44:	20003d94 	.word	0x20003d94
 8019d48:	20003da2 	.word	0x20003da2
 8019d4c:	0801e0e0 	.word	0x0801e0e0
 8019d50:	20003c90 	.word	0x20003c90
 8019d54:	20003dec 	.word	0x20003dec

08019d58 <RadioSleep>:

static void RadioSleep( void )
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019d5e:	2300      	movs	r3, #0
 8019d60:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019d62:	793b      	ldrb	r3, [r7, #4]
 8019d64:	f043 0304 	orr.w	r3, r3, #4
 8019d68:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019d6a:	7938      	ldrb	r0, [r7, #4]
 8019d6c:	f001 f952 	bl	801b014 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019d70:	2002      	movs	r0, #2
 8019d72:	f7e7 ff68 	bl	8001c46 <HAL_Delay>
}
 8019d76:	bf00      	nop
 8019d78:	3708      	adds	r7, #8
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}

08019d7e <RadioStandby>:

static void RadioStandby( void )
{
 8019d7e:	b580      	push	{r7, lr}
 8019d80:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019d82:	2000      	movs	r0, #0
 8019d84:	f001 f978 	bl	801b078 <SUBGRF_SetStandby>
}
 8019d88:	bf00      	nop
 8019d8a:	bd80      	pop	{r7, pc}

08019d8c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019d8c:	b580      	push	{r7, lr}
 8019d8e:	b082      	sub	sp, #8
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8019d94:	f002 f965 	bl	801c062 <RFW_Is_Init>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	d102      	bne.n	8019da4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8019d9e:	f002 f988 	bl	801c0b2 <RFW_ReceiveInit>
 8019da2:	e007      	b.n	8019db4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019da4:	2300      	movs	r3, #0
 8019da6:	2200      	movs	r2, #0
 8019da8:	f240 2162 	movw	r1, #610	; 0x262
 8019dac:	f240 2062 	movw	r0, #610	; 0x262
 8019db0:	f001 fb32 	bl	801b418 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d006      	beq.n	8019dc8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019dba:	6879      	ldr	r1, [r7, #4]
 8019dbc:	480f      	ldr	r0, [pc, #60]	; (8019dfc <RadioRx+0x70>)
 8019dbe:	f003 f915 	bl	801cfec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019dc2:	480e      	ldr	r0, [pc, #56]	; (8019dfc <RadioRx+0x70>)
 8019dc4:	f003 f834 	bl	801ce30 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019dc8:	4b0d      	ldr	r3, [pc, #52]	; (8019e00 <RadioRx+0x74>)
 8019dca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019dce:	2100      	movs	r1, #0
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f001 ff5d 	bl	801bc90 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019dd6:	4b0a      	ldr	r3, [pc, #40]	; (8019e00 <RadioRx+0x74>)
 8019dd8:	785b      	ldrb	r3, [r3, #1]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d004      	beq.n	8019de8 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019dde:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019de2:	f001 f985 	bl	801b0f0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019de6:	e005      	b.n	8019df4 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019de8:	4b05      	ldr	r3, [pc, #20]	; (8019e00 <RadioRx+0x74>)
 8019dea:	689b      	ldr	r3, [r3, #8]
 8019dec:	019b      	lsls	r3, r3, #6
 8019dee:	4618      	mov	r0, r3
 8019df0:	f001 f97e 	bl	801b0f0 <SUBGRF_SetRx>
}
 8019df4:	bf00      	nop
 8019df6:	3708      	adds	r7, #8
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	20003e04 	.word	0x20003e04
 8019e00:	20003d94 	.word	0x20003d94

08019e04 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b082      	sub	sp, #8
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8019e0c:	f002 f929 	bl	801c062 <RFW_Is_Init>
 8019e10:	4603      	mov	r3, r0
 8019e12:	2b01      	cmp	r3, #1
 8019e14:	d102      	bne.n	8019e1c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8019e16:	f002 f94c 	bl	801c0b2 <RFW_ReceiveInit>
 8019e1a:	e007      	b.n	8019e2c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	2200      	movs	r2, #0
 8019e20:	f240 2162 	movw	r1, #610	; 0x262
 8019e24:	f240 2062 	movw	r0, #610	; 0x262
 8019e28:	f001 faf6 	bl	801b418 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d006      	beq.n	8019e40 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e32:	6879      	ldr	r1, [r7, #4]
 8019e34:	480f      	ldr	r0, [pc, #60]	; (8019e74 <RadioRxBoosted+0x70>)
 8019e36:	f003 f8d9 	bl	801cfec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e3a:	480e      	ldr	r0, [pc, #56]	; (8019e74 <RadioRxBoosted+0x70>)
 8019e3c:	f002 fff8 	bl	801ce30 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019e40:	4b0d      	ldr	r3, [pc, #52]	; (8019e78 <RadioRxBoosted+0x74>)
 8019e42:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e46:	2100      	movs	r1, #0
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f001 ff21 	bl	801bc90 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019e4e:	4b0a      	ldr	r3, [pc, #40]	; (8019e78 <RadioRxBoosted+0x74>)
 8019e50:	785b      	ldrb	r3, [r3, #1]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d004      	beq.n	8019e60 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019e56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019e5a:	f001 f969 	bl	801b130 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019e5e:	e005      	b.n	8019e6c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019e60:	4b05      	ldr	r3, [pc, #20]	; (8019e78 <RadioRxBoosted+0x74>)
 8019e62:	689b      	ldr	r3, [r3, #8]
 8019e64:	019b      	lsls	r3, r3, #6
 8019e66:	4618      	mov	r0, r3
 8019e68:	f001 f962 	bl	801b130 <SUBGRF_SetRxBoosted>
}
 8019e6c:	bf00      	nop
 8019e6e:	3708      	adds	r7, #8
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}
 8019e74:	20003e04 	.word	0x20003e04
 8019e78:	20003d94 	.word	0x20003d94

08019e7c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b082      	sub	sp, #8
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019e86:	4b07      	ldr	r3, [pc, #28]	; (8019ea4 <RadioSetRxDutyCycle+0x28>)
 8019e88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e8c:	2100      	movs	r1, #0
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f001 fefe 	bl	801bc90 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019e94:	6839      	ldr	r1, [r7, #0]
 8019e96:	6878      	ldr	r0, [r7, #4]
 8019e98:	f001 f96e 	bl	801b178 <SUBGRF_SetRxDutyCycle>
}
 8019e9c:	bf00      	nop
 8019e9e:	3708      	adds	r7, #8
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}
 8019ea4:	20003d94 	.word	0x20003d94

08019ea8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019eac:	4b09      	ldr	r3, [pc, #36]	; (8019ed4 <RadioStartCad+0x2c>)
 8019eae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019eb2:	2100      	movs	r1, #0
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f001 feeb 	bl	801bc90 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019eba:	2300      	movs	r3, #0
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019ec2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019ec6:	f001 faa7 	bl	801b418 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019eca:	f001 f981 	bl	801b1d0 <SUBGRF_SetCad>
}
 8019ece:	bf00      	nop
 8019ed0:	bd80      	pop	{r7, pc}
 8019ed2:	bf00      	nop
 8019ed4:	20003d94 	.word	0x20003d94

08019ed8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b084      	sub	sp, #16
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	70fb      	strb	r3, [r7, #3]
 8019ee4:	4613      	mov	r3, r2
 8019ee6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019ee8:	883b      	ldrh	r3, [r7, #0]
 8019eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019eee:	fb02 f303 	mul.w	r3, r2, r3
 8019ef2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f001 faeb 	bl	801b4d0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019efe:	4618      	mov	r0, r3
 8019f00:	f001 feee 	bl	801bce0 <SUBGRF_SetRfTxPower>
 8019f04:	4603      	mov	r3, r0
 8019f06:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8019f08:	7afb      	ldrb	r3, [r7, #11]
 8019f0a:	2101      	movs	r1, #1
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f001 febf 	bl	801bc90 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019f12:	f001 f96b 	bl	801b1ec <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019f16:	68f9      	ldr	r1, [r7, #12]
 8019f18:	4804      	ldr	r0, [pc, #16]	; (8019f2c <RadioSetTxContinuousWave+0x54>)
 8019f1a:	f003 f867 	bl	801cfec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019f1e:	4803      	ldr	r0, [pc, #12]	; (8019f2c <RadioSetTxContinuousWave+0x54>)
 8019f20:	f002 ff86 	bl	801ce30 <UTIL_TIMER_Start>
}
 8019f24:	bf00      	nop
 8019f26:	3710      	adds	r7, #16
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd80      	pop	{r7, pc}
 8019f2c:	20003dec 	.word	0x20003dec

08019f30 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b082      	sub	sp, #8
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	4603      	mov	r3, r0
 8019f38:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019f3a:	f001 fd22 	bl	801b982 <SUBGRF_GetRssiInst>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	b21b      	sxth	r3, r3
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	3708      	adds	r7, #8
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}

08019f4a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019f4a:	b580      	push	{r7, lr}
 8019f4c:	b082      	sub	sp, #8
 8019f4e:	af00      	add	r7, sp, #0
 8019f50:	4603      	mov	r3, r0
 8019f52:	460a      	mov	r2, r1
 8019f54:	80fb      	strh	r3, [r7, #6]
 8019f56:	4613      	mov	r3, r2
 8019f58:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8019f5a:	797a      	ldrb	r2, [r7, #5]
 8019f5c:	88fb      	ldrh	r3, [r7, #6]
 8019f5e:	4611      	mov	r1, r2
 8019f60:	4618      	mov	r0, r3
 8019f62:	f001 fda1 	bl	801baa8 <SUBGRF_WriteRegister>
}
 8019f66:	bf00      	nop
 8019f68:	3708      	adds	r7, #8
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}

08019f6e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019f6e:	b580      	push	{r7, lr}
 8019f70:	b082      	sub	sp, #8
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	4603      	mov	r3, r0
 8019f76:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8019f78:	88fb      	ldrh	r3, [r7, #6]
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f001 fda8 	bl	801bad0 <SUBGRF_ReadRegister>
 8019f80:	4603      	mov	r3, r0
}
 8019f82:	4618      	mov	r0, r3
 8019f84:	3708      	adds	r7, #8
 8019f86:	46bd      	mov	sp, r7
 8019f88:	bd80      	pop	{r7, pc}

08019f8a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019f8a:	b580      	push	{r7, lr}
 8019f8c:	b082      	sub	sp, #8
 8019f8e:	af00      	add	r7, sp, #0
 8019f90:	4603      	mov	r3, r0
 8019f92:	6039      	str	r1, [r7, #0]
 8019f94:	80fb      	strh	r3, [r7, #6]
 8019f96:	4613      	mov	r3, r2
 8019f98:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019f9a:	797b      	ldrb	r3, [r7, #5]
 8019f9c:	b29a      	uxth	r2, r3
 8019f9e:	88fb      	ldrh	r3, [r7, #6]
 8019fa0:	6839      	ldr	r1, [r7, #0]
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f001 fda8 	bl	801baf8 <SUBGRF_WriteRegisters>
}
 8019fa8:	bf00      	nop
 8019faa:	3708      	adds	r7, #8
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}

08019fb0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b082      	sub	sp, #8
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	6039      	str	r1, [r7, #0]
 8019fba:	80fb      	strh	r3, [r7, #6]
 8019fbc:	4613      	mov	r3, r2
 8019fbe:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019fc0:	797b      	ldrb	r3, [r7, #5]
 8019fc2:	b29a      	uxth	r2, r3
 8019fc4:	88fb      	ldrh	r3, [r7, #6]
 8019fc6:	6839      	ldr	r1, [r7, #0]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f001 fdb7 	bl	801bb3c <SUBGRF_ReadRegisters>
}
 8019fce:	bf00      	nop
 8019fd0:	3708      	adds	r7, #8
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bd80      	pop	{r7, pc}
	...

08019fd8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	4603      	mov	r3, r0
 8019fe0:	460a      	mov	r2, r1
 8019fe2:	71fb      	strb	r3, [r7, #7]
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019fe8:	79fb      	ldrb	r3, [r7, #7]
 8019fea:	2b01      	cmp	r3, #1
 8019fec:	d10a      	bne.n	801a004 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019fee:	4a0e      	ldr	r2, [pc, #56]	; (801a028 <RadioSetMaxPayloadLength+0x50>)
 8019ff0:	79bb      	ldrb	r3, [r7, #6]
 8019ff2:	7013      	strb	r3, [r2, #0]
 8019ff4:	4b0c      	ldr	r3, [pc, #48]	; (801a028 <RadioSetMaxPayloadLength+0x50>)
 8019ff6:	781a      	ldrb	r2, [r3, #0]
 8019ff8:	4b0c      	ldr	r3, [pc, #48]	; (801a02c <RadioSetMaxPayloadLength+0x54>)
 8019ffa:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ffc:	480c      	ldr	r0, [pc, #48]	; (801a030 <RadioSetMaxPayloadLength+0x58>)
 8019ffe:	f001 fc0b 	bl	801b818 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a002:	e00d      	b.n	801a020 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a004:	4b09      	ldr	r3, [pc, #36]	; (801a02c <RadioSetMaxPayloadLength+0x54>)
 801a006:	7d5b      	ldrb	r3, [r3, #21]
 801a008:	2b01      	cmp	r3, #1
 801a00a:	d109      	bne.n	801a020 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a00c:	4a06      	ldr	r2, [pc, #24]	; (801a028 <RadioSetMaxPayloadLength+0x50>)
 801a00e:	79bb      	ldrb	r3, [r7, #6]
 801a010:	7013      	strb	r3, [r2, #0]
 801a012:	4b05      	ldr	r3, [pc, #20]	; (801a028 <RadioSetMaxPayloadLength+0x50>)
 801a014:	781a      	ldrb	r2, [r3, #0]
 801a016:	4b05      	ldr	r3, [pc, #20]	; (801a02c <RadioSetMaxPayloadLength+0x54>)
 801a018:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a01a:	4805      	ldr	r0, [pc, #20]	; (801a030 <RadioSetMaxPayloadLength+0x58>)
 801a01c:	f001 fbfc 	bl	801b818 <SUBGRF_SetPacketParams>
}
 801a020:	bf00      	nop
 801a022:	3708      	adds	r7, #8
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}
 801a028:	20000104 	.word	0x20000104
 801a02c:	20003d94 	.word	0x20003d94
 801a030:	20003da2 	.word	0x20003da2

0801a034 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	4603      	mov	r3, r0
 801a03c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a03e:	4a13      	ldr	r2, [pc, #76]	; (801a08c <RadioSetPublicNetwork+0x58>)
 801a040:	79fb      	ldrb	r3, [r7, #7]
 801a042:	7313      	strb	r3, [r2, #12]
 801a044:	4b11      	ldr	r3, [pc, #68]	; (801a08c <RadioSetPublicNetwork+0x58>)
 801a046:	7b1a      	ldrb	r2, [r3, #12]
 801a048:	4b10      	ldr	r3, [pc, #64]	; (801a08c <RadioSetPublicNetwork+0x58>)
 801a04a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a04c:	2001      	movs	r0, #1
 801a04e:	f7ff f82b 	bl	80190a8 <RadioSetModem>
    if( enable == true )
 801a052:	79fb      	ldrb	r3, [r7, #7]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d00a      	beq.n	801a06e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a058:	2134      	movs	r1, #52	; 0x34
 801a05a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a05e:	f001 fd23 	bl	801baa8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a062:	2144      	movs	r1, #68	; 0x44
 801a064:	f240 7041 	movw	r0, #1857	; 0x741
 801a068:	f001 fd1e 	bl	801baa8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a06c:	e009      	b.n	801a082 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a06e:	2114      	movs	r1, #20
 801a070:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a074:	f001 fd18 	bl	801baa8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a078:	2124      	movs	r1, #36	; 0x24
 801a07a:	f240 7041 	movw	r0, #1857	; 0x741
 801a07e:	f001 fd13 	bl	801baa8 <SUBGRF_WriteRegister>
}
 801a082:	bf00      	nop
 801a084:	3708      	adds	r7, #8
 801a086:	46bd      	mov	sp, r7
 801a088:	bd80      	pop	{r7, pc}
 801a08a:	bf00      	nop
 801a08c:	20003d94 	.word	0x20003d94

0801a090 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a090:	b580      	push	{r7, lr}
 801a092:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a094:	f001 fe58 	bl	801bd48 <SUBGRF_GetRadioWakeUpTime>
 801a098:	4603      	mov	r3, r0
 801a09a:	3303      	adds	r3, #3
}
 801a09c:	4618      	mov	r0, r3
 801a09e:	bd80      	pop	{r7, pc}

0801a0a0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a0a8:	f000 f80e 	bl	801a0c8 <RadioOnTxTimeoutProcess>
}
 801a0ac:	bf00      	nop
 801a0ae:	3708      	adds	r7, #8
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}

0801a0b4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a0bc:	f000 f818 	bl	801a0f0 <RadioOnRxTimeoutProcess>
}
 801a0c0:	bf00      	nop
 801a0c2:	3708      	adds	r7, #8
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a0cc:	4b07      	ldr	r3, [pc, #28]	; (801a0ec <RadioOnTxTimeoutProcess+0x24>)
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d008      	beq.n	801a0e6 <RadioOnTxTimeoutProcess+0x1e>
 801a0d4:	4b05      	ldr	r3, [pc, #20]	; (801a0ec <RadioOnTxTimeoutProcess+0x24>)
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	685b      	ldr	r3, [r3, #4]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d003      	beq.n	801a0e6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a0de:	4b03      	ldr	r3, [pc, #12]	; (801a0ec <RadioOnTxTimeoutProcess+0x24>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	4798      	blx	r3
    }
}
 801a0e6:	bf00      	nop
 801a0e8:	bd80      	pop	{r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	20003d90 	.word	0x20003d90

0801a0f0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a0f4:	4b07      	ldr	r3, [pc, #28]	; (801a114 <RadioOnRxTimeoutProcess+0x24>)
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d008      	beq.n	801a10e <RadioOnRxTimeoutProcess+0x1e>
 801a0fc:	4b05      	ldr	r3, [pc, #20]	; (801a114 <RadioOnRxTimeoutProcess+0x24>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	68db      	ldr	r3, [r3, #12]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d003      	beq.n	801a10e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a106:	4b03      	ldr	r3, [pc, #12]	; (801a114 <RadioOnRxTimeoutProcess+0x24>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	68db      	ldr	r3, [r3, #12]
 801a10c:	4798      	blx	r3
    }
}
 801a10e:	bf00      	nop
 801a110:	bd80      	pop	{r7, pc}
 801a112:	bf00      	nop
 801a114:	20003d90 	.word	0x20003d90

0801a118 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	4603      	mov	r3, r0
 801a120:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a122:	4a05      	ldr	r2, [pc, #20]	; (801a138 <RadioOnDioIrq+0x20>)
 801a124:	88fb      	ldrh	r3, [r7, #6]
 801a126:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a12a:	f000 f807 	bl	801a13c <RadioIrqProcess>
}
 801a12e:	bf00      	nop
 801a130:	3708      	adds	r7, #8
 801a132:	46bd      	mov	sp, r7
 801a134:	bd80      	pop	{r7, pc}
 801a136:	bf00      	nop
 801a138:	20003d94 	.word	0x20003d94

0801a13c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a13c:	b590      	push	{r4, r7, lr}
 801a13e:	b083      	sub	sp, #12
 801a140:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a142:	2300      	movs	r3, #0
 801a144:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a146:	2300      	movs	r3, #0
 801a148:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801a14a:	4bb5      	ldr	r3, [pc, #724]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a14c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a154:	f000 810c 	beq.w	801a370 <RadioIrqProcess+0x234>
 801a158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a15c:	f300 81b5 	bgt.w	801a4ca <RadioIrqProcess+0x38e>
 801a160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a164:	f000 80f0 	beq.w	801a348 <RadioIrqProcess+0x20c>
 801a168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a16c:	f300 81ad 	bgt.w	801a4ca <RadioIrqProcess+0x38e>
 801a170:	2b80      	cmp	r3, #128	; 0x80
 801a172:	f000 80d5 	beq.w	801a320 <RadioIrqProcess+0x1e4>
 801a176:	2b80      	cmp	r3, #128	; 0x80
 801a178:	f300 81a7 	bgt.w	801a4ca <RadioIrqProcess+0x38e>
 801a17c:	2b20      	cmp	r3, #32
 801a17e:	dc49      	bgt.n	801a214 <RadioIrqProcess+0xd8>
 801a180:	2b00      	cmp	r3, #0
 801a182:	f340 81a2 	ble.w	801a4ca <RadioIrqProcess+0x38e>
 801a186:	3b01      	subs	r3, #1
 801a188:	2b1f      	cmp	r3, #31
 801a18a:	f200 819e 	bhi.w	801a4ca <RadioIrqProcess+0x38e>
 801a18e:	a201      	add	r2, pc, #4	; (adr r2, 801a194 <RadioIrqProcess+0x58>)
 801a190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a194:	0801a21d 	.word	0x0801a21d
 801a198:	0801a257 	.word	0x0801a257
 801a19c:	0801a4cb 	.word	0x0801a4cb
 801a1a0:	0801a3e9 	.word	0x0801a3e9
 801a1a4:	0801a4cb 	.word	0x0801a4cb
 801a1a8:	0801a4cb 	.word	0x0801a4cb
 801a1ac:	0801a4cb 	.word	0x0801a4cb
 801a1b0:	0801a3f7 	.word	0x0801a3f7
 801a1b4:	0801a4cb 	.word	0x0801a4cb
 801a1b8:	0801a4cb 	.word	0x0801a4cb
 801a1bc:	0801a4cb 	.word	0x0801a4cb
 801a1c0:	0801a4cb 	.word	0x0801a4cb
 801a1c4:	0801a4cb 	.word	0x0801a4cb
 801a1c8:	0801a4cb 	.word	0x0801a4cb
 801a1cc:	0801a4cb 	.word	0x0801a4cb
 801a1d0:	0801a413 	.word	0x0801a413
 801a1d4:	0801a4cb 	.word	0x0801a4cb
 801a1d8:	0801a4cb 	.word	0x0801a4cb
 801a1dc:	0801a4cb 	.word	0x0801a4cb
 801a1e0:	0801a4cb 	.word	0x0801a4cb
 801a1e4:	0801a4cb 	.word	0x0801a4cb
 801a1e8:	0801a4cb 	.word	0x0801a4cb
 801a1ec:	0801a4cb 	.word	0x0801a4cb
 801a1f0:	0801a4cb 	.word	0x0801a4cb
 801a1f4:	0801a4cb 	.word	0x0801a4cb
 801a1f8:	0801a4cb 	.word	0x0801a4cb
 801a1fc:	0801a4cb 	.word	0x0801a4cb
 801a200:	0801a4cb 	.word	0x0801a4cb
 801a204:	0801a4cb 	.word	0x0801a4cb
 801a208:	0801a4cb 	.word	0x0801a4cb
 801a20c:	0801a4cb 	.word	0x0801a4cb
 801a210:	0801a44d 	.word	0x0801a44d
 801a214:	2b40      	cmp	r3, #64	; 0x40
 801a216:	f000 813a 	beq.w	801a48e <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801a21a:	e156      	b.n	801a4ca <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 801a21c:	4881      	ldr	r0, [pc, #516]	; (801a424 <RadioIrqProcess+0x2e8>)
 801a21e:	f002 fe75 	bl	801cf0c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a222:	2000      	movs	r0, #0
 801a224:	f000 ff28 	bl	801b078 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801a228:	f001 ff22 	bl	801c070 <RFW_Is_LongPacketModeEnabled>
 801a22c:	4603      	mov	r3, r0
 801a22e:	2b01      	cmp	r3, #1
 801a230:	d101      	bne.n	801a236 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a232:	f001 ff46 	bl	801c0c2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a236:	4b7c      	ldr	r3, [pc, #496]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	f000 8147 	beq.w	801a4ce <RadioIrqProcess+0x392>
 801a240:	4b79      	ldr	r3, [pc, #484]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2b00      	cmp	r3, #0
 801a248:	f000 8141 	beq.w	801a4ce <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 801a24c:	4b76      	ldr	r3, [pc, #472]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	4798      	blx	r3
        break;
 801a254:	e13b      	b.n	801a4ce <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 801a256:	4875      	ldr	r0, [pc, #468]	; (801a42c <RadioIrqProcess+0x2f0>)
 801a258:	f002 fe58 	bl	801cf0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a25c:	4b70      	ldr	r3, [pc, #448]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a25e:	785b      	ldrb	r3, [r3, #1]
 801a260:	f083 0301 	eor.w	r3, r3, #1
 801a264:	b2db      	uxtb	r3, r3
 801a266:	2b00      	cmp	r3, #0
 801a268:	d014      	beq.n	801a294 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a26a:	2000      	movs	r0, #0
 801a26c:	f000 ff04 	bl	801b078 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801a270:	2100      	movs	r1, #0
 801a272:	f640 1002 	movw	r0, #2306	; 0x902
 801a276:	f001 fc17 	bl	801baa8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801a27a:	f640 1044 	movw	r0, #2372	; 0x944
 801a27e:	f001 fc27 	bl	801bad0 <SUBGRF_ReadRegister>
 801a282:	4603      	mov	r3, r0
 801a284:	f043 0302 	orr.w	r3, r3, #2
 801a288:	b2db      	uxtb	r3, r3
 801a28a:	4619      	mov	r1, r3
 801a28c:	f640 1044 	movw	r0, #2372	; 0x944
 801a290:	f001 fc0a 	bl	801baa8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801a294:	1dfb      	adds	r3, r7, #7
 801a296:	22ff      	movs	r2, #255	; 0xff
 801a298:	4619      	mov	r1, r3
 801a29a:	4865      	ldr	r0, [pc, #404]	; (801a430 <RadioIrqProcess+0x2f4>)
 801a29c:	f000 fdbc 	bl	801ae18 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801a2a0:	4864      	ldr	r0, [pc, #400]	; (801a434 <RadioIrqProcess+0x2f8>)
 801a2a2:	f001 fbaf 	bl	801ba04 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a2a6:	4b60      	ldr	r3, [pc, #384]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d036      	beq.n	801a31c <RadioIrqProcess+0x1e0>
 801a2ae:	4b5e      	ldr	r3, [pc, #376]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	689b      	ldr	r3, [r3, #8]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d031      	beq.n	801a31c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 801a2b8:	4b59      	ldr	r3, [pc, #356]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a2ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a2be:	2b01      	cmp	r3, #1
 801a2c0:	d10e      	bne.n	801a2e0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801a2c2:	4b59      	ldr	r3, [pc, #356]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	689c      	ldr	r4, [r3, #8]
 801a2c8:	79fb      	ldrb	r3, [r7, #7]
 801a2ca:	b299      	uxth	r1, r3
 801a2cc:	4b54      	ldr	r3, [pc, #336]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a2ce:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a2d2:	b21a      	sxth	r2, r3
 801a2d4:	4b52      	ldr	r3, [pc, #328]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a2d6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a2da:	4855      	ldr	r0, [pc, #340]	; (801a430 <RadioIrqProcess+0x2f4>)
 801a2dc:	47a0      	blx	r4
                break;
 801a2de:	e01e      	b.n	801a31e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a2e0:	4b4f      	ldr	r3, [pc, #316]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2e4:	463a      	mov	r2, r7
 801a2e6:	4611      	mov	r1, r2
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f001 fe0f 	bl	801bf0c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801a2ee:	4b4e      	ldr	r3, [pc, #312]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	689c      	ldr	r4, [r3, #8]
 801a2f4:	79fb      	ldrb	r3, [r7, #7]
 801a2f6:	b299      	uxth	r1, r3
 801a2f8:	4b49      	ldr	r3, [pc, #292]	; (801a420 <RadioIrqProcess+0x2e4>)
 801a2fa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a2fe:	b218      	sxth	r0, r3
 801a300:	683b      	ldr	r3, [r7, #0]
 801a302:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a306:	4a4c      	ldr	r2, [pc, #304]	; (801a438 <RadioIrqProcess+0x2fc>)
 801a308:	fb82 c203 	smull	ip, r2, r2, r3
 801a30c:	1192      	asrs	r2, r2, #6
 801a30e:	17db      	asrs	r3, r3, #31
 801a310:	1ad3      	subs	r3, r2, r3
 801a312:	b25b      	sxtb	r3, r3
 801a314:	4602      	mov	r2, r0
 801a316:	4846      	ldr	r0, [pc, #280]	; (801a430 <RadioIrqProcess+0x2f4>)
 801a318:	47a0      	blx	r4
                break;
 801a31a:	e000      	b.n	801a31e <RadioIrqProcess+0x1e2>
        }
 801a31c:	bf00      	nop
        break;
 801a31e:	e0e3      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 801a320:	2000      	movs	r0, #0
 801a322:	f000 fea9 	bl	801b078 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a326:	4b40      	ldr	r3, [pc, #256]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	f000 80d1 	beq.w	801a4d2 <RadioIrqProcess+0x396>
 801a330:	4b3d      	ldr	r3, [pc, #244]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	699b      	ldr	r3, [r3, #24]
 801a336:	2b00      	cmp	r3, #0
 801a338:	f000 80cb 	beq.w	801a4d2 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 801a33c:	4b3a      	ldr	r3, [pc, #232]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	699b      	ldr	r3, [r3, #24]
 801a342:	2000      	movs	r0, #0
 801a344:	4798      	blx	r3
        break;
 801a346:	e0c4      	b.n	801a4d2 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 801a348:	2000      	movs	r0, #0
 801a34a:	f000 fe95 	bl	801b078 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a34e:	4b36      	ldr	r3, [pc, #216]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	f000 80bf 	beq.w	801a4d6 <RadioIrqProcess+0x39a>
 801a358:	4b33      	ldr	r3, [pc, #204]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	699b      	ldr	r3, [r3, #24]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	f000 80b9 	beq.w	801a4d6 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 801a364:	4b30      	ldr	r3, [pc, #192]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	699b      	ldr	r3, [r3, #24]
 801a36a:	2001      	movs	r0, #1
 801a36c:	4798      	blx	r3
        break;
 801a36e:	e0b2      	b.n	801a4d6 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a370:	4b32      	ldr	r3, [pc, #200]	; (801a43c <RadioIrqProcess+0x300>)
 801a372:	2201      	movs	r2, #1
 801a374:	2100      	movs	r1, #0
 801a376:	2002      	movs	r0, #2
 801a378:	f001 fee8 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a37c:	f000 fd32 	bl	801ade4 <SUBGRF_GetOperatingMode>
 801a380:	4603      	mov	r3, r0
 801a382:	2b04      	cmp	r3, #4
 801a384:	d115      	bne.n	801a3b2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801a386:	4827      	ldr	r0, [pc, #156]	; (801a424 <RadioIrqProcess+0x2e8>)
 801a388:	f002 fdc0 	bl	801cf0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a38c:	2000      	movs	r0, #0
 801a38e:	f000 fe73 	bl	801b078 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a392:	4b25      	ldr	r3, [pc, #148]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	2b00      	cmp	r3, #0
 801a398:	f000 809f 	beq.w	801a4da <RadioIrqProcess+0x39e>
 801a39c:	4b22      	ldr	r3, [pc, #136]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	f000 8099 	beq.w	801a4da <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 801a3a8:	4b1f      	ldr	r3, [pc, #124]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	685b      	ldr	r3, [r3, #4]
 801a3ae:	4798      	blx	r3
        break;
 801a3b0:	e093      	b.n	801a4da <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a3b2:	f000 fd17 	bl	801ade4 <SUBGRF_GetOperatingMode>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	2b05      	cmp	r3, #5
 801a3ba:	f040 808e 	bne.w	801a4da <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 801a3be:	481b      	ldr	r0, [pc, #108]	; (801a42c <RadioIrqProcess+0x2f0>)
 801a3c0:	f002 fda4 	bl	801cf0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3c4:	2000      	movs	r0, #0
 801a3c6:	f000 fe57 	bl	801b078 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a3ca:	4b17      	ldr	r3, [pc, #92]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	f000 8083 	beq.w	801a4da <RadioIrqProcess+0x39e>
 801a3d4:	4b14      	ldr	r3, [pc, #80]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d07d      	beq.n	801a4da <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 801a3de:	4b12      	ldr	r3, [pc, #72]	; (801a428 <RadioIrqProcess+0x2ec>)
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	68db      	ldr	r3, [r3, #12]
 801a3e4:	4798      	blx	r3
        break;
 801a3e6:	e078      	b.n	801a4da <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a3e8:	4b15      	ldr	r3, [pc, #84]	; (801a440 <RadioIrqProcess+0x304>)
 801a3ea:	2201      	movs	r2, #1
 801a3ec:	2100      	movs	r1, #0
 801a3ee:	2002      	movs	r0, #2
 801a3f0:	f001 feac 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a3f4:	e078      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a3f6:	4b13      	ldr	r3, [pc, #76]	; (801a444 <RadioIrqProcess+0x308>)
 801a3f8:	2201      	movs	r2, #1
 801a3fa:	2100      	movs	r1, #0
 801a3fc:	2002      	movs	r0, #2
 801a3fe:	f001 fea5 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801a402:	f001 fe2e 	bl	801c062 <RFW_Is_Init>
 801a406:	4603      	mov	r3, r0
 801a408:	2b01      	cmp	r3, #1
 801a40a:	d168      	bne.n	801a4de <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 801a40c:	f001 fe5f 	bl	801c0ce <RFW_ReceivePayload>
        break;
 801a410:	e065      	b.n	801a4de <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a412:	4b0d      	ldr	r3, [pc, #52]	; (801a448 <RadioIrqProcess+0x30c>)
 801a414:	2201      	movs	r2, #1
 801a416:	2100      	movs	r1, #0
 801a418:	2002      	movs	r0, #2
 801a41a:	f001 fe97 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a41e:	e063      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
 801a420:	20003d94 	.word	0x20003d94
 801a424:	20003dec 	.word	0x20003dec
 801a428:	20003d90 	.word	0x20003d90
 801a42c:	20003e04 	.word	0x20003e04
 801a430:	20003c90 	.word	0x20003c90
 801a434:	20003db8 	.word	0x20003db8
 801a438:	10624dd3 	.word	0x10624dd3
 801a43c:	0801e0f8 	.word	0x0801e0f8
 801a440:	0801e10c 	.word	0x0801e10c
 801a444:	0801e118 	.word	0x0801e118
 801a448:	0801e124 	.word	0x0801e124
        TimerStop( &RxTimeoutTimer );
 801a44c:	4828      	ldr	r0, [pc, #160]	; (801a4f0 <RadioIrqProcess+0x3b4>)
 801a44e:	f002 fd5d 	bl	801cf0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a452:	4b28      	ldr	r3, [pc, #160]	; (801a4f4 <RadioIrqProcess+0x3b8>)
 801a454:	785b      	ldrb	r3, [r3, #1]
 801a456:	f083 0301 	eor.w	r3, r3, #1
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d002      	beq.n	801a466 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 801a460:	2000      	movs	r0, #0
 801a462:	f000 fe09 	bl	801b078 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a466:	4b24      	ldr	r3, [pc, #144]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d039      	beq.n	801a4e2 <RadioIrqProcess+0x3a6>
 801a46e:	4b22      	ldr	r3, [pc, #136]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d034      	beq.n	801a4e2 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 801a478:	4b1f      	ldr	r3, [pc, #124]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	68db      	ldr	r3, [r3, #12]
 801a47e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a480:	4b1e      	ldr	r3, [pc, #120]	; (801a4fc <RadioIrqProcess+0x3c0>)
 801a482:	2201      	movs	r2, #1
 801a484:	2100      	movs	r1, #0
 801a486:	2002      	movs	r0, #2
 801a488:	f001 fe60 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a48c:	e029      	b.n	801a4e2 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a48e:	4b1c      	ldr	r3, [pc, #112]	; (801a500 <RadioIrqProcess+0x3c4>)
 801a490:	2201      	movs	r2, #1
 801a492:	2100      	movs	r1, #0
 801a494:	2002      	movs	r0, #2
 801a496:	f001 fe59 	bl	801c14c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a49a:	4b16      	ldr	r3, [pc, #88]	; (801a4f4 <RadioIrqProcess+0x3b8>)
 801a49c:	785b      	ldrb	r3, [r3, #1]
 801a49e:	f083 0301 	eor.w	r3, r3, #1
 801a4a2:	b2db      	uxtb	r3, r3
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d002      	beq.n	801a4ae <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 801a4a8:	2000      	movs	r0, #0
 801a4aa:	f000 fde5 	bl	801b078 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a4ae:	4b12      	ldr	r3, [pc, #72]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d017      	beq.n	801a4e6 <RadioIrqProcess+0x3aa>
 801a4b6:	4b10      	ldr	r3, [pc, #64]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	691b      	ldr	r3, [r3, #16]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d012      	beq.n	801a4e6 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 801a4c0:	4b0d      	ldr	r3, [pc, #52]	; (801a4f8 <RadioIrqProcess+0x3bc>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	691b      	ldr	r3, [r3, #16]
 801a4c6:	4798      	blx	r3
        break;
 801a4c8:	e00d      	b.n	801a4e6 <RadioIrqProcess+0x3aa>
        break;
 801a4ca:	bf00      	nop
 801a4cc:	e00c      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4ce:	bf00      	nop
 801a4d0:	e00a      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4d2:	bf00      	nop
 801a4d4:	e008      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4d6:	bf00      	nop
 801a4d8:	e006      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4da:	bf00      	nop
 801a4dc:	e004      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4de:	bf00      	nop
 801a4e0:	e002      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4e2:	bf00      	nop
 801a4e4:	e000      	b.n	801a4e8 <RadioIrqProcess+0x3ac>
        break;
 801a4e6:	bf00      	nop
  }
}
 801a4e8:	bf00      	nop
 801a4ea:	370c      	adds	r7, #12
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd90      	pop	{r4, r7, pc}
 801a4f0:	20003e04 	.word	0x20003e04
 801a4f4:	20003d94 	.word	0x20003d94
 801a4f8:	20003d90 	.word	0x20003d90
 801a4fc:	0801e130 	.word	0x0801e130
 801a500:	0801e13c 	.word	0x0801e13c

0801a504 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a504:	b580      	push	{r7, lr}
 801a506:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a508:	4b09      	ldr	r3, [pc, #36]	; (801a530 <RadioTxPrbs+0x2c>)
 801a50a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a50e:	2101      	movs	r1, #1
 801a510:	4618      	mov	r0, r3
 801a512:	f001 fbbd 	bl	801bc90 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 801a516:	4b07      	ldr	r3, [pc, #28]	; (801a534 <RadioTxPrbs+0x30>)
 801a518:	212d      	movs	r1, #45	; 0x2d
 801a51a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a51e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a520:	f000 fe6d 	bl	801b1fe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a524:	4804      	ldr	r0, [pc, #16]	; (801a538 <RadioTxPrbs+0x34>)
 801a526:	f000 fdc3 	bl	801b0b0 <SUBGRF_SetTx>
}
 801a52a:	bf00      	nop
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	bf00      	nop
 801a530:	20003d94 	.word	0x20003d94
 801a534:	08019f4b 	.word	0x08019f4b
 801a538:	000fffff 	.word	0x000fffff

0801a53c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b084      	sub	sp, #16
 801a540:	af00      	add	r7, sp, #0
 801a542:	4603      	mov	r3, r0
 801a544:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a54a:	4618      	mov	r0, r3
 801a54c:	f001 fbc8 	bl	801bce0 <SUBGRF_SetRfTxPower>
 801a550:	4603      	mov	r3, r0
 801a552:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a554:	7bfb      	ldrb	r3, [r7, #15]
 801a556:	2101      	movs	r1, #1
 801a558:	4618      	mov	r0, r3
 801a55a:	f001 fb99 	bl	801bc90 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a55e:	f000 fe45 	bl	801b1ec <SUBGRF_SetTxContinuousWave>
}
 801a562:	bf00      	nop
 801a564:	3710      	adds	r7, #16
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}

0801a56a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a56a:	b480      	push	{r7}
 801a56c:	b089      	sub	sp, #36	; 0x24
 801a56e:	af00      	add	r7, sp, #0
 801a570:	60f8      	str	r0, [r7, #12]
 801a572:	60b9      	str	r1, [r7, #8]
 801a574:	4613      	mov	r3, r2
 801a576:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a578:	2300      	movs	r3, #0
 801a57a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801a57c:	2300      	movs	r3, #0
 801a57e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 801a580:	2300      	movs	r3, #0
 801a582:	61bb      	str	r3, [r7, #24]
 801a584:	e011      	b.n	801a5aa <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a586:	69bb      	ldr	r3, [r7, #24]
 801a588:	68ba      	ldr	r2, [r7, #8]
 801a58a:	4413      	add	r3, r2
 801a58c:	781a      	ldrb	r2, [r3, #0]
 801a58e:	69bb      	ldr	r3, [r7, #24]
 801a590:	68b9      	ldr	r1, [r7, #8]
 801a592:	440b      	add	r3, r1
 801a594:	43d2      	mvns	r2, r2
 801a596:	b2d2      	uxtb	r2, r2
 801a598:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a59a:	69bb      	ldr	r3, [r7, #24]
 801a59c:	68fa      	ldr	r2, [r7, #12]
 801a59e:	4413      	add	r3, r2
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801a5a4:	69bb      	ldr	r3, [r7, #24]
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	61bb      	str	r3, [r7, #24]
 801a5aa:	79fb      	ldrb	r3, [r7, #7]
 801a5ac:	69ba      	ldr	r2, [r7, #24]
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	dbe9      	blt.n	801a586 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	61bb      	str	r3, [r7, #24]
 801a5b6:	e049      	b.n	801a64c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a5b8:	69bb      	ldr	r3, [r7, #24]
 801a5ba:	425a      	negs	r2, r3
 801a5bc:	f003 0307 	and.w	r3, r3, #7
 801a5c0:	f002 0207 	and.w	r2, r2, #7
 801a5c4:	bf58      	it	pl
 801a5c6:	4253      	negpl	r3, r2
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	f1c3 0307 	rsb	r3, r3, #7
 801a5ce:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a5d0:	69bb      	ldr	r3, [r7, #24]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	da00      	bge.n	801a5d8 <payload_integration+0x6e>
 801a5d6:	3307      	adds	r3, #7
 801a5d8:	10db      	asrs	r3, r3, #3
 801a5da:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a5dc:	69bb      	ldr	r3, [r7, #24]
 801a5de:	3301      	adds	r3, #1
 801a5e0:	425a      	negs	r2, r3
 801a5e2:	f003 0307 	and.w	r3, r3, #7
 801a5e6:	f002 0207 	and.w	r2, r2, #7
 801a5ea:	bf58      	it	pl
 801a5ec:	4253      	negpl	r3, r2
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	f1c3 0307 	rsb	r3, r3, #7
 801a5f4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a5f6:	69bb      	ldr	r3, [r7, #24]
 801a5f8:	3301      	adds	r3, #1
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	da00      	bge.n	801a600 <payload_integration+0x96>
 801a5fe:	3307      	adds	r3, #7
 801a600:	10db      	asrs	r3, r3, #3
 801a602:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a604:	7dbb      	ldrb	r3, [r7, #22]
 801a606:	68ba      	ldr	r2, [r7, #8]
 801a608:	4413      	add	r3, r2
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	461a      	mov	r2, r3
 801a60e:	7dfb      	ldrb	r3, [r7, #23]
 801a610:	fa42 f303 	asr.w	r3, r2, r3
 801a614:	b2db      	uxtb	r3, r3
 801a616:	f003 0301 	and.w	r3, r3, #1
 801a61a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a61c:	7ffa      	ldrb	r2, [r7, #31]
 801a61e:	7cfb      	ldrb	r3, [r7, #19]
 801a620:	4053      	eors	r3, r2
 801a622:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a624:	7d3b      	ldrb	r3, [r7, #20]
 801a626:	68fa      	ldr	r2, [r7, #12]
 801a628:	4413      	add	r3, r2
 801a62a:	781b      	ldrb	r3, [r3, #0]
 801a62c:	b25a      	sxtb	r2, r3
 801a62e:	7ff9      	ldrb	r1, [r7, #31]
 801a630:	7d7b      	ldrb	r3, [r7, #21]
 801a632:	fa01 f303 	lsl.w	r3, r1, r3
 801a636:	b25b      	sxtb	r3, r3
 801a638:	4313      	orrs	r3, r2
 801a63a:	b259      	sxtb	r1, r3
 801a63c:	7d3b      	ldrb	r3, [r7, #20]
 801a63e:	68fa      	ldr	r2, [r7, #12]
 801a640:	4413      	add	r3, r2
 801a642:	b2ca      	uxtb	r2, r1
 801a644:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801a646:	69bb      	ldr	r3, [r7, #24]
 801a648:	3301      	adds	r3, #1
 801a64a:	61bb      	str	r3, [r7, #24]
 801a64c:	79fb      	ldrb	r3, [r7, #7]
 801a64e:	00db      	lsls	r3, r3, #3
 801a650:	69ba      	ldr	r2, [r7, #24]
 801a652:	429a      	cmp	r2, r3
 801a654:	dbb0      	blt.n	801a5b8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a656:	7ffb      	ldrb	r3, [r7, #31]
 801a658:	01db      	lsls	r3, r3, #7
 801a65a:	b25a      	sxtb	r2, r3
 801a65c:	7ffb      	ldrb	r3, [r7, #31]
 801a65e:	019b      	lsls	r3, r3, #6
 801a660:	b25b      	sxtb	r3, r3
 801a662:	4313      	orrs	r3, r2
 801a664:	b25b      	sxtb	r3, r3
 801a666:	7ffa      	ldrb	r2, [r7, #31]
 801a668:	2a00      	cmp	r2, #0
 801a66a:	d101      	bne.n	801a670 <payload_integration+0x106>
 801a66c:	2220      	movs	r2, #32
 801a66e:	e000      	b.n	801a672 <payload_integration+0x108>
 801a670:	2200      	movs	r2, #0
 801a672:	4313      	orrs	r3, r2
 801a674:	b259      	sxtb	r1, r3
 801a676:	79fb      	ldrb	r3, [r7, #7]
 801a678:	68fa      	ldr	r2, [r7, #12]
 801a67a:	4413      	add	r3, r2
 801a67c:	b2ca      	uxtb	r2, r1
 801a67e:	701a      	strb	r2, [r3, #0]
}
 801a680:	bf00      	nop
 801a682:	3724      	adds	r7, #36	; 0x24
 801a684:	46bd      	mov	sp, r7
 801a686:	bc80      	pop	{r7}
 801a688:	4770      	bx	lr
	...

0801a68c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b08c      	sub	sp, #48	; 0x30
 801a690:	af00      	add	r7, sp, #0
 801a692:	60b9      	str	r1, [r7, #8]
 801a694:	607a      	str	r2, [r7, #4]
 801a696:	603b      	str	r3, [r7, #0]
 801a698:	4603      	mov	r3, r0
 801a69a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a69c:	2300      	movs	r3, #0
 801a69e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	61fb      	str	r3, [r7, #28]
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a6a8:	f001 fcd5 	bl	801c056 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d001      	beq.n	801a6b6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	bf14      	ite	ne
 801a6bc:	2301      	movne	r3, #1
 801a6be:	2300      	moveq	r3, #0
 801a6c0:	b2da      	uxtb	r2, r3
 801a6c2:	4b9f      	ldr	r3, [pc, #636]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a6c4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a6c6:	7bfb      	ldrb	r3, [r7, #15]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d003      	beq.n	801a6d4 <RadioSetRxGenericConfig+0x48>
 801a6cc:	2b01      	cmp	r3, #1
 801a6ce:	f000 80e8 	beq.w	801a8a2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a6d2:	e1a0      	b.n	801aa16 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a6d4:	68bb      	ldr	r3, [r7, #8]
 801a6d6:	68db      	ldr	r3, [r3, #12]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d003      	beq.n	801a6e4 <RadioSetRxGenericConfig+0x58>
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	691b      	ldr	r3, [r3, #16]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d102      	bne.n	801a6ea <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a6e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a6e8:	e196      	b.n	801aa18 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	7d5b      	ldrb	r3, [r3, #21]
 801a6ee:	2b08      	cmp	r3, #8
 801a6f0:	d902      	bls.n	801a6f8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a6f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f6:	e18f      	b.n	801aa18 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6fc:	e00d      	b.n	801a71a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	699a      	ldr	r2, [r3, #24]
 801a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a704:	4413      	add	r3, r2
 801a706:	7819      	ldrb	r1, [r3, #0]
 801a708:	f107 021c 	add.w	r2, r7, #28
 801a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a70e:	4413      	add	r3, r2
 801a710:	460a      	mov	r2, r1
 801a712:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a716:	3301      	adds	r3, #1
 801a718:	62bb      	str	r3, [r7, #40]	; 0x28
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	7d5b      	ldrb	r3, [r3, #21]
 801a71e:	461a      	mov	r2, r3
 801a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a722:	4293      	cmp	r3, r2
 801a724:	dbeb      	blt.n	801a6fe <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a726:	68bb      	ldr	r3, [r7, #8]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	bf14      	ite	ne
 801a72e:	2301      	movne	r3, #1
 801a730:	2300      	moveq	r3, #0
 801a732:	b2db      	uxtb	r3, r3
 801a734:	4618      	mov	r0, r3
 801a736:	f000 fd6b 	bl	801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a73a:	4b81      	ldr	r3, [pc, #516]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a73c:	2200      	movs	r2, #0
 801a73e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	68db      	ldr	r3, [r3, #12]
 801a746:	4a7e      	ldr	r2, [pc, #504]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a748:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	791a      	ldrb	r2, [r3, #4]
 801a74e:	4b7c      	ldr	r3, [pc, #496]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	689b      	ldr	r3, [r3, #8]
 801a758:	4618      	mov	r0, r3
 801a75a:	f001 fbaf 	bl	801bebc <SUBGRF_GetFskBandwidthRegValue>
 801a75e:	4603      	mov	r3, r0
 801a760:	461a      	mov	r2, r3
 801a762:	4b77      	ldr	r3, [pc, #476]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a768:	4b75      	ldr	r3, [pc, #468]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a76a:	2200      	movs	r2, #0
 801a76c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a76e:	68bb      	ldr	r3, [r7, #8]
 801a770:	691b      	ldr	r3, [r3, #16]
 801a772:	b29b      	uxth	r3, r3
 801a774:	00db      	lsls	r3, r3, #3
 801a776:	b29a      	uxth	r2, r3
 801a778:	4b71      	ldr	r3, [pc, #452]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a77a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	7d1a      	ldrb	r2, [r3, #20]
 801a780:	4b6f      	ldr	r3, [pc, #444]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a782:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	7d5b      	ldrb	r3, [r3, #21]
 801a788:	00db      	lsls	r3, r3, #3
 801a78a:	b2da      	uxtb	r2, r3
 801a78c:	4b6c      	ldr	r3, [pc, #432]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a78e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a796:	4b6a      	ldr	r3, [pc, #424]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a798:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a79a:	68bb      	ldr	r3, [r7, #8]
 801a79c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d105      	bne.n	801a7b0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	69db      	ldr	r3, [r3, #28]
 801a7a8:	b2da      	uxtb	r2, r3
 801a7aa:	4b65      	ldr	r3, [pc, #404]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a7ac:	759a      	strb	r2, [r3, #22]
 801a7ae:	e00b      	b.n	801a7c8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a7b6:	2b02      	cmp	r3, #2
 801a7b8:	d103      	bne.n	801a7c2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a7ba:	4b61      	ldr	r3, [pc, #388]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a7bc:	22ff      	movs	r2, #255	; 0xff
 801a7be:	759a      	strb	r2, [r3, #22]
 801a7c0:	e002      	b.n	801a7c8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a7c2:	4b5f      	ldr	r3, [pc, #380]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a7c4:	22ff      	movs	r2, #255	; 0xff
 801a7c6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801a7ce:	2b02      	cmp	r3, #2
 801a7d0:	d004      	beq.n	801a7dc <RadioSetRxGenericConfig+0x150>
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a7d8:	2b02      	cmp	r3, #2
 801a7da:	d12d      	bne.n	801a838 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a7e2:	2bf1      	cmp	r3, #241	; 0xf1
 801a7e4:	d00c      	beq.n	801a800 <RadioSetRxGenericConfig+0x174>
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a7ec:	2bf2      	cmp	r3, #242	; 0xf2
 801a7ee:	d007      	beq.n	801a800 <RadioSetRxGenericConfig+0x174>
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a7f6:	2b01      	cmp	r3, #1
 801a7f8:	d002      	beq.n	801a800 <RadioSetRxGenericConfig+0x174>
            return -1;
 801a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a7fe:	e10b      	b.n	801aa18 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801a800:	2300      	movs	r3, #0
 801a802:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a808:	4b4e      	ldr	r3, [pc, #312]	; (801a944 <RadioSetRxGenericConfig+0x2b8>)
 801a80a:	6819      	ldr	r1, [r3, #0]
 801a80c:	f107 0310 	add.w	r3, r7, #16
 801a810:	4a4d      	ldr	r2, [pc, #308]	; (801a948 <RadioSetRxGenericConfig+0x2bc>)
 801a812:	4618      	mov	r0, r3
 801a814:	f001 fc12 	bl	801c03c <RFW_Init>
 801a818:	4603      	mov	r3, r0
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d002      	beq.n	801a824 <RadioSetRxGenericConfig+0x198>
            return -1;
 801a81e:	f04f 33ff 	mov.w	r3, #4294967295
 801a822:	e0f9      	b.n	801aa18 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a824:	4b46      	ldr	r3, [pc, #280]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a826:	2200      	movs	r2, #0
 801a828:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a82a:	4b45      	ldr	r3, [pc, #276]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a82c:	2201      	movs	r2, #1
 801a82e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a830:	4b43      	ldr	r3, [pc, #268]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a832:	2200      	movs	r2, #0
 801a834:	755a      	strb	r2, [r3, #21]
        {
 801a836:	e00e      	b.n	801a856 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a83e:	4b40      	ldr	r3, [pc, #256]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a840:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801a848:	4b3d      	ldr	r3, [pc, #244]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a84a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a852:	4b3b      	ldr	r3, [pc, #236]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a854:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a856:	f7ff fa92 	bl	8019d7e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a85a:	2000      	movs	r0, #0
 801a85c:	f7fe fc24 	bl	80190a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a860:	483a      	ldr	r0, [pc, #232]	; (801a94c <RadioSetRxGenericConfig+0x2c0>)
 801a862:	f000 ff07 	bl	801b674 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a866:	483a      	ldr	r0, [pc, #232]	; (801a950 <RadioSetRxGenericConfig+0x2c4>)
 801a868:	f000 ffd6 	bl	801b818 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a86c:	f107 031c 	add.w	r3, r7, #28
 801a870:	4618      	mov	r0, r3
 801a872:	f000 fb06 	bl	801ae82 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a876:	68bb      	ldr	r3, [r7, #8]
 801a878:	8c1b      	ldrh	r3, [r3, #32]
 801a87a:	4618      	mov	r0, r3
 801a87c:	f000 fb50 	bl	801af20 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a884:	4618      	mov	r0, r3
 801a886:	f000 fb2b 	bl	801aee0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a890:	fb03 f202 	mul.w	r2, r3, r2
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	68db      	ldr	r3, [r3, #12]
 801a898:	fbb2 f3f3 	udiv	r3, r2, r3
 801a89c:	4a28      	ldr	r2, [pc, #160]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a89e:	6093      	str	r3, [r2, #8]
        break;
 801a8a0:	e0b9      	b.n	801aa16 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d102      	bne.n	801a8b0 <RadioSetRxGenericConfig+0x224>
            return -1;
 801a8aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ae:	e0b3      	b.n	801aa18 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801a8b6:	2b01      	cmp	r3, #1
 801a8b8:	d104      	bne.n	801a8c4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	69db      	ldr	r3, [r3, #28]
 801a8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a8c2:	e002      	b.n	801a8ca <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801a8c4:	23ff      	movs	r3, #255	; 0xff
 801a8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	bf14      	ite	ne
 801a8d2:	2301      	movne	r3, #1
 801a8d4:	2300      	moveq	r3, #0
 801a8d6:	b2db      	uxtb	r3, r3
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f000 fc99 	bl	801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	b2db      	uxtb	r3, r3
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f000 fca3 	bl	801b22e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a8e8:	4b15      	ldr	r3, [pc, #84]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a8ea:	2201      	movs	r2, #1
 801a8ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801a8f6:	4b12      	ldr	r3, [pc, #72]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a8f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a8fc:	68bb      	ldr	r3, [r7, #8]
 801a8fe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801a902:	4b0f      	ldr	r3, [pc, #60]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a90e:	4b0c      	ldr	r3, [pc, #48]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a910:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801a91a:	2b02      	cmp	r3, #2
 801a91c:	d01a      	beq.n	801a954 <RadioSetRxGenericConfig+0x2c8>
 801a91e:	2b02      	cmp	r3, #2
 801a920:	dc2c      	bgt.n	801a97c <RadioSetRxGenericConfig+0x2f0>
 801a922:	2b00      	cmp	r3, #0
 801a924:	d002      	beq.n	801a92c <RadioSetRxGenericConfig+0x2a0>
 801a926:	2b01      	cmp	r3, #1
 801a928:	d005      	beq.n	801a936 <RadioSetRxGenericConfig+0x2aa>
            break;
 801a92a:	e027      	b.n	801a97c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a92c:	4b04      	ldr	r3, [pc, #16]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a92e:	2200      	movs	r2, #0
 801a930:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a934:	e023      	b.n	801a97e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a936:	4b02      	ldr	r3, [pc, #8]	; (801a940 <RadioSetRxGenericConfig+0x2b4>)
 801a938:	2201      	movs	r2, #1
 801a93a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a93e:	e01e      	b.n	801a97e <RadioSetRxGenericConfig+0x2f2>
 801a940:	20003d94 	.word	0x20003d94
 801a944:	20003d90 	.word	0x20003d90
 801a948:	20003e04 	.word	0x20003e04
 801a94c:	20003dcc 	.word	0x20003dcc
 801a950:	20003da2 	.word	0x20003da2
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a95a:	2b0b      	cmp	r3, #11
 801a95c:	d004      	beq.n	801a968 <RadioSetRxGenericConfig+0x2dc>
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a964:	2b0c      	cmp	r3, #12
 801a966:	d104      	bne.n	801a972 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a968:	4b2d      	ldr	r3, [pc, #180]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a96a:	2201      	movs	r2, #1
 801a96c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a970:	e005      	b.n	801a97e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a972:	4b2b      	ldr	r3, [pc, #172]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a974:	2200      	movs	r2, #0
 801a976:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a97a:	e000      	b.n	801a97e <RadioSetRxGenericConfig+0x2f2>
            break;
 801a97c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a97e:	4b28      	ldr	r3, [pc, #160]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a980:	2201      	movs	r2, #1
 801a982:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801a988:	4b25      	ldr	r3, [pc, #148]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a98a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801a992:	4b23      	ldr	r3, [pc, #140]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a994:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a996:	4a22      	ldr	r2, [pc, #136]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a99c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801a9a4:	4b1e      	ldr	r3, [pc, #120]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a9a6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801a9b0:	4b1b      	ldr	r3, [pc, #108]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a9b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a9b6:	f7ff f9e2 	bl	8019d7e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a9ba:	2001      	movs	r0, #1
 801a9bc:	f7fe fb74 	bl	80190a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a9c0:	4818      	ldr	r0, [pc, #96]	; (801aa24 <RadioSetRxGenericConfig+0x398>)
 801a9c2:	f000 fe57 	bl	801b674 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9c6:	4818      	ldr	r0, [pc, #96]	; (801aa28 <RadioSetRxGenericConfig+0x39c>)
 801a9c8:	f000 ff26 	bl	801b818 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a9cc:	4b14      	ldr	r3, [pc, #80]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801a9ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a9d2:	2b01      	cmp	r3, #1
 801a9d4:	d10d      	bne.n	801a9f2 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801a9d6:	f240 7036 	movw	r0, #1846	; 0x736
 801a9da:	f001 f879 	bl	801bad0 <SUBGRF_ReadRegister>
 801a9de:	4603      	mov	r3, r0
 801a9e0:	f023 0304 	bic.w	r3, r3, #4
 801a9e4:	b2db      	uxtb	r3, r3
 801a9e6:	4619      	mov	r1, r3
 801a9e8:	f240 7036 	movw	r0, #1846	; 0x736
 801a9ec:	f001 f85c 	bl	801baa8 <SUBGRF_WriteRegister>
 801a9f0:	e00c      	b.n	801aa0c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801a9f2:	f240 7036 	movw	r0, #1846	; 0x736
 801a9f6:	f001 f86b 	bl	801bad0 <SUBGRF_ReadRegister>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	f043 0304 	orr.w	r3, r3, #4
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	4619      	mov	r1, r3
 801aa04:	f240 7036 	movw	r0, #1846	; 0x736
 801aa08:	f001 f84e 	bl	801baa8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801aa0c:	4b04      	ldr	r3, [pc, #16]	; (801aa20 <RadioSetRxGenericConfig+0x394>)
 801aa0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa12:	609a      	str	r2, [r3, #8]
        break;
 801aa14:	bf00      	nop
    }
    return status;
 801aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3730      	adds	r7, #48	; 0x30
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	20003d94 	.word	0x20003d94
 801aa24:	20003dcc 	.word	0x20003dcc
 801aa28:	20003da2 	.word	0x20003da2

0801aa2c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b08a      	sub	sp, #40	; 0x28
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	60b9      	str	r1, [r7, #8]
 801aa34:	607b      	str	r3, [r7, #4]
 801aa36:	4603      	mov	r3, r0
 801aa38:	73fb      	strb	r3, [r7, #15]
 801aa3a:	4613      	mov	r3, r2
 801aa3c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801aa3e:	2300      	movs	r3, #0
 801aa40:	61fb      	str	r3, [r7, #28]
 801aa42:	2300      	movs	r3, #0
 801aa44:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801aa46:	f001 fb06 	bl	801c056 <RFW_DeInit>
    switch( modem )
 801aa4a:	7bfb      	ldrb	r3, [r7, #15]
 801aa4c:	2b02      	cmp	r3, #2
 801aa4e:	f000 8144 	beq.w	801acda <RadioSetTxGenericConfig+0x2ae>
 801aa52:	2b02      	cmp	r3, #2
 801aa54:	f300 8160 	bgt.w	801ad18 <RadioSetTxGenericConfig+0x2ec>
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d003      	beq.n	801aa64 <RadioSetTxGenericConfig+0x38>
 801aa5c:	2b01      	cmp	r3, #1
 801aa5e:	f000 80b7 	beq.w	801abd0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801aa62:	e159      	b.n	801ad18 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	689b      	ldr	r3, [r3, #8]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d003      	beq.n	801aa74 <RadioSetTxGenericConfig+0x48>
 801aa6c:	68bb      	ldr	r3, [r7, #8]
 801aa6e:	691b      	ldr	r3, [r3, #16]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d102      	bne.n	801aa7a <RadioSetTxGenericConfig+0x4e>
            return -1;
 801aa74:	f04f 33ff 	mov.w	r3, #4294967295
 801aa78:	e163      	b.n	801ad42 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	7d1b      	ldrb	r3, [r3, #20]
 801aa7e:	2b08      	cmp	r3, #8
 801aa80:	d902      	bls.n	801aa88 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801aa82:	f04f 33ff 	mov.w	r3, #4294967295
 801aa86:	e15c      	b.n	801ad42 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801aa88:	2300      	movs	r3, #0
 801aa8a:	627b      	str	r3, [r7, #36]	; 0x24
 801aa8c:	e00d      	b.n	801aaaa <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	699a      	ldr	r2, [r3, #24]
 801aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa94:	4413      	add	r3, r2
 801aa96:	7819      	ldrb	r1, [r3, #0]
 801aa98:	f107 021c 	add.w	r2, r7, #28
 801aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9e:	4413      	add	r3, r2
 801aaa0:	460a      	mov	r2, r1
 801aaa2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa6:	3301      	adds	r3, #1
 801aaa8:	627b      	str	r3, [r7, #36]	; 0x24
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	7d1b      	ldrb	r3, [r3, #20]
 801aaae:	461a      	mov	r2, r3
 801aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aab2:	4293      	cmp	r3, r2
 801aab4:	dbeb      	blt.n	801aa8e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aab6:	4ba5      	ldr	r3, [pc, #660]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aab8:	2200      	movs	r2, #0
 801aaba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801aabe:	68bb      	ldr	r3, [r7, #8]
 801aac0:	689b      	ldr	r3, [r3, #8]
 801aac2:	4aa2      	ldr	r2, [pc, #648]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aac4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801aac6:	68bb      	ldr	r3, [r7, #8]
 801aac8:	781a      	ldrb	r2, [r3, #0]
 801aaca:	4ba0      	ldr	r3, [pc, #640]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801aad0:	68bb      	ldr	r3, [r7, #8]
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	4618      	mov	r0, r3
 801aad6:	f001 f9f1 	bl	801bebc <SUBGRF_GetFskBandwidthRegValue>
 801aada:	4603      	mov	r3, r0
 801aadc:	461a      	mov	r2, r3
 801aade:	4b9b      	ldr	r3, [pc, #620]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	68db      	ldr	r3, [r3, #12]
 801aae8:	4a98      	ldr	r2, [pc, #608]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aaea:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801aaec:	4b97      	ldr	r3, [pc, #604]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aaee:	2200      	movs	r2, #0
 801aaf0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	691b      	ldr	r3, [r3, #16]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	00db      	lsls	r3, r3, #3
 801aafa:	b29a      	uxth	r2, r3
 801aafc:	4b93      	ldr	r3, [pc, #588]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801aafe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ab00:	4b92      	ldr	r3, [pc, #584]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab02:	2204      	movs	r2, #4
 801ab04:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	7d1b      	ldrb	r3, [r3, #20]
 801ab0a:	00db      	lsls	r3, r3, #3
 801ab0c:	b2da      	uxtb	r2, r3
 801ab0e:	4b8f      	ldr	r3, [pc, #572]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab10:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ab12:	4b8e      	ldr	r3, [pc, #568]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab14:	2200      	movs	r2, #0
 801ab16:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ab1e:	2b02      	cmp	r3, #2
 801ab20:	d003      	beq.n	801ab2a <RadioSetTxGenericConfig+0xfe>
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	7f9b      	ldrb	r3, [r3, #30]
 801ab26:	2b02      	cmp	r3, #2
 801ab28:	d12a      	bne.n	801ab80 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	7fdb      	ldrb	r3, [r3, #31]
 801ab2e:	2bf1      	cmp	r3, #241	; 0xf1
 801ab30:	d00a      	beq.n	801ab48 <RadioSetTxGenericConfig+0x11c>
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	7fdb      	ldrb	r3, [r3, #31]
 801ab36:	2bf2      	cmp	r3, #242	; 0xf2
 801ab38:	d006      	beq.n	801ab48 <RadioSetTxGenericConfig+0x11c>
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	7fdb      	ldrb	r3, [r3, #31]
 801ab3e:	2b01      	cmp	r3, #1
 801ab40:	d002      	beq.n	801ab48 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801ab42:	f04f 33ff 	mov.w	r3, #4294967295
 801ab46:	e0fc      	b.n	801ad42 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801ab48:	2301      	movs	r3, #1
 801ab4a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ab50:	4b7f      	ldr	r3, [pc, #508]	; (801ad50 <RadioSetTxGenericConfig+0x324>)
 801ab52:	6819      	ldr	r1, [r3, #0]
 801ab54:	f107 0310 	add.w	r3, r7, #16
 801ab58:	4a7e      	ldr	r2, [pc, #504]	; (801ad54 <RadioSetTxGenericConfig+0x328>)
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f001 fa6e 	bl	801c03c <RFW_Init>
 801ab60:	4603      	mov	r3, r0
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d002      	beq.n	801ab6c <RadioSetTxGenericConfig+0x140>
              return -1;
 801ab66:	f04f 33ff 	mov.w	r3, #4294967295
 801ab6a:	e0ea      	b.n	801ad42 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ab6c:	4b77      	ldr	r3, [pc, #476]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab6e:	2200      	movs	r2, #0
 801ab70:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801ab72:	4b76      	ldr	r3, [pc, #472]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab74:	2201      	movs	r2, #1
 801ab76:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ab78:	4b74      	ldr	r3, [pc, #464]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	755a      	strb	r2, [r3, #21]
        {
 801ab7e:	e00c      	b.n	801ab9a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	7fda      	ldrb	r2, [r3, #31]
 801ab84:	4b71      	ldr	r3, [pc, #452]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab86:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801ab8e:	4b6f      	ldr	r3, [pc, #444]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab90:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	7f9a      	ldrb	r2, [r3, #30]
 801ab96:	4b6d      	ldr	r3, [pc, #436]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ab98:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801ab9a:	f7ff f8f0 	bl	8019d7e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ab9e:	2000      	movs	r0, #0
 801aba0:	f7fe fa82 	bl	80190a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aba4:	486c      	ldr	r0, [pc, #432]	; (801ad58 <RadioSetTxGenericConfig+0x32c>)
 801aba6:	f000 fd65 	bl	801b674 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abaa:	486c      	ldr	r0, [pc, #432]	; (801ad5c <RadioSetTxGenericConfig+0x330>)
 801abac:	f000 fe34 	bl	801b818 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801abb0:	f107 031c 	add.w	r3, r7, #28
 801abb4:	4618      	mov	r0, r3
 801abb6:	f000 f964 	bl	801ae82 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	8b9b      	ldrh	r3, [r3, #28]
 801abbe:	4618      	mov	r0, r3
 801abc0:	f000 f9ae 	bl	801af20 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	8c1b      	ldrh	r3, [r3, #32]
 801abc8:	4618      	mov	r0, r3
 801abca:	f000 f989 	bl	801aee0 <SUBGRF_SetCrcPolynomial>
        break;
 801abce:	e0a4      	b.n	801ad1a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801abd0:	4b5e      	ldr	r3, [pc, #376]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801abd2:	2201      	movs	r2, #1
 801abd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801abde:	4b5b      	ldr	r3, [pc, #364]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801abe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801abea:	4b58      	ldr	r3, [pc, #352]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801abec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801abf6:	4b55      	ldr	r3, [pc, #340]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801abf8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801abfc:	68bb      	ldr	r3, [r7, #8]
 801abfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801ac02:	2b02      	cmp	r3, #2
 801ac04:	d010      	beq.n	801ac28 <RadioSetTxGenericConfig+0x1fc>
 801ac06:	2b02      	cmp	r3, #2
 801ac08:	dc22      	bgt.n	801ac50 <RadioSetTxGenericConfig+0x224>
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d002      	beq.n	801ac14 <RadioSetTxGenericConfig+0x1e8>
 801ac0e:	2b01      	cmp	r3, #1
 801ac10:	d005      	beq.n	801ac1e <RadioSetTxGenericConfig+0x1f2>
            break;
 801ac12:	e01d      	b.n	801ac50 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ac14:	4b4d      	ldr	r3, [pc, #308]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac1c:	e019      	b.n	801ac52 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ac1e:	4b4b      	ldr	r3, [pc, #300]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac20:	2201      	movs	r2, #1
 801ac22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac26:	e014      	b.n	801ac52 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ac2e:	2b0b      	cmp	r3, #11
 801ac30:	d004      	beq.n	801ac3c <RadioSetTxGenericConfig+0x210>
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ac38:	2b0c      	cmp	r3, #12
 801ac3a:	d104      	bne.n	801ac46 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ac3c:	4b43      	ldr	r3, [pc, #268]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac3e:	2201      	movs	r2, #1
 801ac40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac44:	e005      	b.n	801ac52 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ac46:	4b41      	ldr	r3, [pc, #260]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac48:	2200      	movs	r2, #0
 801ac4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac4e:	e000      	b.n	801ac52 <RadioSetTxGenericConfig+0x226>
            break;
 801ac50:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ac52:	4b3e      	ldr	r3, [pc, #248]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac54:	2201      	movs	r2, #1
 801ac56:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801ac5c:	4b3b      	ldr	r3, [pc, #236]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac5e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801ac66:	4b39      	ldr	r3, [pc, #228]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac68:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801ac70:	4b36      	ldr	r3, [pc, #216]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac72:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801ac7c:	4b33      	ldr	r3, [pc, #204]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ac82:	f7ff f87c 	bl	8019d7e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ac86:	2001      	movs	r0, #1
 801ac88:	f7fe fa0e 	bl	80190a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac8c:	4832      	ldr	r0, [pc, #200]	; (801ad58 <RadioSetTxGenericConfig+0x32c>)
 801ac8e:	f000 fcf1 	bl	801b674 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac92:	4832      	ldr	r0, [pc, #200]	; (801ad5c <RadioSetTxGenericConfig+0x330>)
 801ac94:	f000 fdc0 	bl	801b818 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801ac98:	4b2c      	ldr	r3, [pc, #176]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ac9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ac9e:	2b06      	cmp	r3, #6
 801aca0:	d10d      	bne.n	801acbe <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801aca2:	f640 0089 	movw	r0, #2185	; 0x889
 801aca6:	f000 ff13 	bl	801bad0 <SUBGRF_ReadRegister>
 801acaa:	4603      	mov	r3, r0
 801acac:	f023 0304 	bic.w	r3, r3, #4
 801acb0:	b2db      	uxtb	r3, r3
 801acb2:	4619      	mov	r1, r3
 801acb4:	f640 0089 	movw	r0, #2185	; 0x889
 801acb8:	f000 fef6 	bl	801baa8 <SUBGRF_WriteRegister>
        break;
 801acbc:	e02d      	b.n	801ad1a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801acbe:	f640 0089 	movw	r0, #2185	; 0x889
 801acc2:	f000 ff05 	bl	801bad0 <SUBGRF_ReadRegister>
 801acc6:	4603      	mov	r3, r0
 801acc8:	f043 0304 	orr.w	r3, r3, #4
 801accc:	b2db      	uxtb	r3, r3
 801acce:	4619      	mov	r1, r3
 801acd0:	f640 0089 	movw	r0, #2185	; 0x889
 801acd4:	f000 fee8 	bl	801baa8 <SUBGRF_WriteRegister>
        break;
 801acd8:	e01f      	b.n	801ad1a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d004      	beq.n	801acec <RadioSetTxGenericConfig+0x2c0>
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ace6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801acea:	d902      	bls.n	801acf2 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801acec:	f04f 33ff 	mov.w	r3, #4294967295
 801acf0:	e027      	b.n	801ad42 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801acf2:	2002      	movs	r0, #2
 801acf4:	f7fe f9d8 	bl	80190a8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801acf8:	4b14      	ldr	r3, [pc, #80]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801acfa:	2202      	movs	r2, #2
 801acfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad04:	4a11      	ldr	r2, [pc, #68]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ad06:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ad08:	4b10      	ldr	r3, [pc, #64]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ad0a:	2216      	movs	r2, #22
 801ad0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad10:	4811      	ldr	r0, [pc, #68]	; (801ad58 <RadioSetTxGenericConfig+0x32c>)
 801ad12:	f000 fcaf 	bl	801b674 <SUBGRF_SetModulationParams>
        break;
 801ad16:	e000      	b.n	801ad1a <RadioSetTxGenericConfig+0x2ee>
        break;
 801ad18:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ad1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f000 ffde 	bl	801bce0 <SUBGRF_SetRfTxPower>
 801ad24:	4603      	mov	r3, r0
 801ad26:	461a      	mov	r2, r3
 801ad28:	4b08      	ldr	r3, [pc, #32]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ad2a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ad2e:	4b07      	ldr	r3, [pc, #28]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ad30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad34:	4618      	mov	r0, r3
 801ad36:	f001 f9a2 	bl	801c07e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ad3a:	4a04      	ldr	r2, [pc, #16]	; (801ad4c <RadioSetTxGenericConfig+0x320>)
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	6053      	str	r3, [r2, #4]
    return 0;
 801ad40:	2300      	movs	r3, #0
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3728      	adds	r7, #40	; 0x28
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	20003d94 	.word	0x20003d94
 801ad50:	20003d90 	.word	0x20003d90
 801ad54:	20003dec 	.word	0x20003dec
 801ad58:	20003dcc 	.word	0x20003dcc
 801ad5c:	20003da2 	.word	0x20003da2

0801ad60 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d002      	beq.n	801ad74 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801ad6e:	4a1a      	ldr	r2, [pc, #104]	; (801add8 <SUBGRF_Init+0x78>)
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801ad74:	f7e6 fdac 	bl	80018d0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801ad78:	2002      	movs	r0, #2
 801ad7a:	f001 f87d 	bl	801be78 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801ad7e:	4b17      	ldr	r3, [pc, #92]	; (801addc <SUBGRF_Init+0x7c>)
 801ad80:	2200      	movs	r2, #0
 801ad82:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801ad84:	2000      	movs	r0, #0
 801ad86:	f000 f977 	bl	801b078 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ad8a:	f7ef fbbf 	bl	800a50c <RBI_IsTCXO>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	2b01      	cmp	r3, #1
 801ad92:	d10e      	bne.n	801adb2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801ad94:	2140      	movs	r1, #64	; 0x40
 801ad96:	2001      	movs	r0, #1
 801ad98:	f000 fb78 	bl	801b48c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801ad9c:	2100      	movs	r1, #0
 801ad9e:	f640 1011 	movw	r0, #2321	; 0x911
 801ada2:	f000 fe81 	bl	801baa8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801ada6:	237f      	movs	r3, #127	; 0x7f
 801ada8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801adaa:	7b38      	ldrb	r0, [r7, #12]
 801adac:	f000 fa85 	bl	801b2ba <SUBGRF_Calibrate>
 801adb0:	e009      	b.n	801adc6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801adb2:	2120      	movs	r1, #32
 801adb4:	f640 1011 	movw	r0, #2321	; 0x911
 801adb8:	f000 fe76 	bl	801baa8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801adbc:	2120      	movs	r1, #32
 801adbe:	f640 1012 	movw	r0, #2322	; 0x912
 801adc2:	f000 fe71 	bl	801baa8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801adc6:	f7ef fb85 	bl	800a4d4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801adca:	4b05      	ldr	r3, [pc, #20]	; (801ade0 <SUBGRF_Init+0x80>)
 801adcc:	2201      	movs	r2, #1
 801adce:	701a      	strb	r2, [r3, #0]
}
 801add0:	bf00      	nop
 801add2:	3710      	adds	r7, #16
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	20003e28 	.word	0x20003e28
 801addc:	20003e24 	.word	0x20003e24
 801ade0:	20003e1c 	.word	0x20003e1c

0801ade4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ade4:	b480      	push	{r7}
 801ade6:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ade8:	4b02      	ldr	r3, [pc, #8]	; (801adf4 <SUBGRF_GetOperatingMode+0x10>)
 801adea:	781b      	ldrb	r3, [r3, #0]
}
 801adec:	4618      	mov	r0, r3
 801adee:	46bd      	mov	sp, r7
 801adf0:	bc80      	pop	{r7}
 801adf2:	4770      	bx	lr
 801adf4:	20003e1c 	.word	0x20003e1c

0801adf8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	460b      	mov	r3, r1
 801ae02:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ae04:	78fb      	ldrb	r3, [r7, #3]
 801ae06:	461a      	mov	r2, r3
 801ae08:	6879      	ldr	r1, [r7, #4]
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	f000 feb8 	bl	801bb80 <SUBGRF_WriteBuffer>
}
 801ae10:	bf00      	nop
 801ae12:	3708      	adds	r7, #8
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}

0801ae18 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b086      	sub	sp, #24
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	4613      	mov	r3, r2
 801ae24:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801ae26:	2300      	movs	r3, #0
 801ae28:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801ae2a:	f107 0317 	add.w	r3, r7, #23
 801ae2e:	4619      	mov	r1, r3
 801ae30:	68b8      	ldr	r0, [r7, #8]
 801ae32:	f000 fdbb 	bl	801b9ac <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	781b      	ldrb	r3, [r3, #0]
 801ae3a:	79fa      	ldrb	r2, [r7, #7]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d201      	bcs.n	801ae44 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801ae40:	2301      	movs	r3, #1
 801ae42:	e007      	b.n	801ae54 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801ae44:	7df8      	ldrb	r0, [r7, #23]
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	781b      	ldrb	r3, [r3, #0]
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	68f9      	ldr	r1, [r7, #12]
 801ae4e:	f000 feb9 	bl	801bbc4 <SUBGRF_ReadBuffer>

    return 0;
 801ae52:	2300      	movs	r3, #0
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3718      	adds	r7, #24
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b084      	sub	sp, #16
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	60f8      	str	r0, [r7, #12]
 801ae64:	460b      	mov	r3, r1
 801ae66:	607a      	str	r2, [r7, #4]
 801ae68:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801ae6a:	7afb      	ldrb	r3, [r7, #11]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	68f8      	ldr	r0, [r7, #12]
 801ae70:	f7ff ffc2 	bl	801adf8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f000 f91b 	bl	801b0b0 <SUBGRF_SetTx>
}
 801ae7a:	bf00      	nop
 801ae7c:	3710      	adds	r7, #16
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}

0801ae82 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ae82:	b580      	push	{r7, lr}
 801ae84:	b082      	sub	sp, #8
 801ae86:	af00      	add	r7, sp, #0
 801ae88:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ae8a:	2208      	movs	r2, #8
 801ae8c:	6879      	ldr	r1, [r7, #4]
 801ae8e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801ae92:	f000 fe31 	bl	801baf8 <SUBGRF_WriteRegisters>
    return 0;
 801ae96:	2300      	movs	r3, #0
}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3708      	adds	r7, #8
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}

0801aea0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b084      	sub	sp, #16
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	4603      	mov	r3, r0
 801aea8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801aeaa:	88fb      	ldrh	r3, [r7, #6]
 801aeac:	0a1b      	lsrs	r3, r3, #8
 801aeae:	b29b      	uxth	r3, r3
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801aeb4:	88fb      	ldrh	r3, [r7, #6]
 801aeb6:	b2db      	uxtb	r3, r3
 801aeb8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801aeba:	f000 fb6b 	bl	801b594 <SUBGRF_GetPacketType>
 801aebe:	4603      	mov	r3, r0
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d108      	bne.n	801aed6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801aec4:	f107 030c 	add.w	r3, r7, #12
 801aec8:	2202      	movs	r2, #2
 801aeca:	4619      	mov	r1, r3
 801aecc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801aed0:	f000 fe12 	bl	801baf8 <SUBGRF_WriteRegisters>
            break;
 801aed4:	e000      	b.n	801aed8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801aed6:	bf00      	nop
    }
}
 801aed8:	bf00      	nop
 801aeda:	3710      	adds	r7, #16
 801aedc:	46bd      	mov	sp, r7
 801aede:	bd80      	pop	{r7, pc}

0801aee0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b084      	sub	sp, #16
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	4603      	mov	r3, r0
 801aee8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801aeea:	88fb      	ldrh	r3, [r7, #6]
 801aeec:	0a1b      	lsrs	r3, r3, #8
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801aef4:	88fb      	ldrh	r3, [r7, #6]
 801aef6:	b2db      	uxtb	r3, r3
 801aef8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801aefa:	f000 fb4b 	bl	801b594 <SUBGRF_GetPacketType>
 801aefe:	4603      	mov	r3, r0
 801af00:	2b00      	cmp	r3, #0
 801af02:	d108      	bne.n	801af16 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801af04:	f107 030c 	add.w	r3, r7, #12
 801af08:	2202      	movs	r2, #2
 801af0a:	4619      	mov	r1, r3
 801af0c:	f240 60be 	movw	r0, #1726	; 0x6be
 801af10:	f000 fdf2 	bl	801baf8 <SUBGRF_WriteRegisters>
            break;
 801af14:	e000      	b.n	801af18 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801af16:	bf00      	nop
    }
}
 801af18:	bf00      	nop
 801af1a:	3710      	adds	r7, #16
 801af1c:	46bd      	mov	sp, r7
 801af1e:	bd80      	pop	{r7, pc}

0801af20 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b084      	sub	sp, #16
 801af24:	af00      	add	r7, sp, #0
 801af26:	4603      	mov	r3, r0
 801af28:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801af2a:	2300      	movs	r3, #0
 801af2c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801af2e:	f000 fb31 	bl	801b594 <SUBGRF_GetPacketType>
 801af32:	4603      	mov	r3, r0
 801af34:	2b00      	cmp	r3, #0
 801af36:	d121      	bne.n	801af7c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801af38:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801af3c:	f000 fdc8 	bl	801bad0 <SUBGRF_ReadRegister>
 801af40:	4603      	mov	r3, r0
 801af42:	f023 0301 	bic.w	r3, r3, #1
 801af46:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801af48:	88fb      	ldrh	r3, [r7, #6]
 801af4a:	0a1b      	lsrs	r3, r3, #8
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	b25b      	sxtb	r3, r3
 801af50:	f003 0301 	and.w	r3, r3, #1
 801af54:	b25a      	sxtb	r2, r3
 801af56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af5a:	4313      	orrs	r3, r2
 801af5c:	b25b      	sxtb	r3, r3
 801af5e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801af60:	7bfb      	ldrb	r3, [r7, #15]
 801af62:	4619      	mov	r1, r3
 801af64:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801af68:	f000 fd9e 	bl	801baa8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801af6c:	88fb      	ldrh	r3, [r7, #6]
 801af6e:	b2db      	uxtb	r3, r3
 801af70:	4619      	mov	r1, r3
 801af72:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801af76:	f000 fd97 	bl	801baa8 <SUBGRF_WriteRegister>
            break;
 801af7a:	e000      	b.n	801af7e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801af7c:	bf00      	nop
    }
}
 801af7e:	bf00      	nop
 801af80:	3710      	adds	r7, #16
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}

0801af86 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801af86:	b580      	push	{r7, lr}
 801af88:	b082      	sub	sp, #8
 801af8a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801af8c:	2300      	movs	r3, #0
 801af8e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801af90:	2300      	movs	r3, #0
 801af92:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801af94:	2300      	movs	r3, #0
 801af96:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801af98:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801af9c:	f000 fd98 	bl	801bad0 <SUBGRF_ReadRegister>
 801afa0:	4603      	mov	r3, r0
 801afa2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801afa4:	79fb      	ldrb	r3, [r7, #7]
 801afa6:	f023 0301 	bic.w	r3, r3, #1
 801afaa:	b2db      	uxtb	r3, r3
 801afac:	4619      	mov	r1, r3
 801afae:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801afb2:	f000 fd79 	bl	801baa8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801afb6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801afba:	f000 fd89 	bl	801bad0 <SUBGRF_ReadRegister>
 801afbe:	4603      	mov	r3, r0
 801afc0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801afc2:	79bb      	ldrb	r3, [r7, #6]
 801afc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801afc8:	b2db      	uxtb	r3, r3
 801afca:	4619      	mov	r1, r3
 801afcc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801afd0:	f000 fd6a 	bl	801baa8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801afd4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801afd8:	f000 f88a 	bl	801b0f0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801afdc:	463b      	mov	r3, r7
 801afde:	2204      	movs	r2, #4
 801afe0:	4619      	mov	r1, r3
 801afe2:	f640 0019 	movw	r0, #2073	; 0x819
 801afe6:	f000 fda9 	bl	801bb3c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801afea:	2000      	movs	r0, #0
 801afec:	f000 f844 	bl	801b078 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801aff0:	79fb      	ldrb	r3, [r7, #7]
 801aff2:	4619      	mov	r1, r3
 801aff4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801aff8:	f000 fd56 	bl	801baa8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801affc:	79bb      	ldrb	r3, [r7, #6]
 801affe:	4619      	mov	r1, r3
 801b000:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b004:	f000 fd50 	bl	801baa8 <SUBGRF_WriteRegister>

    return number;
 801b008:	683b      	ldr	r3, [r7, #0]
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3708      	adds	r7, #8
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
	...

0801b014 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b084      	sub	sp, #16
 801b018:	af00      	add	r7, sp, #0
 801b01a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b01c:	2000      	movs	r0, #0
 801b01e:	f7ef fa60 	bl	800a4e2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b022:	2002      	movs	r0, #2
 801b024:	f000 ff28 	bl	801be78 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b028:	793b      	ldrb	r3, [r7, #4]
 801b02a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b02e:	b2db      	uxtb	r3, r3
 801b030:	009b      	lsls	r3, r3, #2
 801b032:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b034:	793b      	ldrb	r3, [r7, #4]
 801b036:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b03a:	b2db      	uxtb	r3, r3
 801b03c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b03e:	b25b      	sxtb	r3, r3
 801b040:	4313      	orrs	r3, r2
 801b042:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b044:	793b      	ldrb	r3, [r7, #4]
 801b046:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b04a:	b2db      	uxtb	r3, r3
 801b04c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b04e:	4313      	orrs	r3, r2
 801b050:	b25b      	sxtb	r3, r3
 801b052:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b054:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b056:	f107 030f 	add.w	r3, r7, #15
 801b05a:	2201      	movs	r2, #1
 801b05c:	4619      	mov	r1, r3
 801b05e:	2084      	movs	r0, #132	; 0x84
 801b060:	f000 fdd2 	bl	801bc08 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b064:	4b03      	ldr	r3, [pc, #12]	; (801b074 <SUBGRF_SetSleep+0x60>)
 801b066:	2200      	movs	r2, #0
 801b068:	701a      	strb	r2, [r3, #0]
}
 801b06a:	bf00      	nop
 801b06c:	3710      	adds	r7, #16
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}
 801b072:	bf00      	nop
 801b074:	20003e1c 	.word	0x20003e1c

0801b078 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	4603      	mov	r3, r0
 801b080:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b082:	1dfb      	adds	r3, r7, #7
 801b084:	2201      	movs	r2, #1
 801b086:	4619      	mov	r1, r3
 801b088:	2080      	movs	r0, #128	; 0x80
 801b08a:	f000 fdbd 	bl	801bc08 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b08e:	79fb      	ldrb	r3, [r7, #7]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d103      	bne.n	801b09c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b094:	4b05      	ldr	r3, [pc, #20]	; (801b0ac <SUBGRF_SetStandby+0x34>)
 801b096:	2201      	movs	r2, #1
 801b098:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b09a:	e002      	b.n	801b0a2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b09c:	4b03      	ldr	r3, [pc, #12]	; (801b0ac <SUBGRF_SetStandby+0x34>)
 801b09e:	2202      	movs	r2, #2
 801b0a0:	701a      	strb	r2, [r3, #0]
}
 801b0a2:	bf00      	nop
 801b0a4:	3708      	adds	r7, #8
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	20003e1c 	.word	0x20003e1c

0801b0b0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b084      	sub	sp, #16
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b0b8:	4b0c      	ldr	r3, [pc, #48]	; (801b0ec <SUBGRF_SetTx+0x3c>)
 801b0ba:	2204      	movs	r2, #4
 801b0bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	0c1b      	lsrs	r3, r3, #16
 801b0c2:	b2db      	uxtb	r3, r3
 801b0c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	0a1b      	lsrs	r3, r3, #8
 801b0ca:	b2db      	uxtb	r3, r3
 801b0cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b0d4:	f107 030c 	add.w	r3, r7, #12
 801b0d8:	2203      	movs	r2, #3
 801b0da:	4619      	mov	r1, r3
 801b0dc:	2083      	movs	r0, #131	; 0x83
 801b0de:	f000 fd93 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b0e2:	bf00      	nop
 801b0e4:	3710      	adds	r7, #16
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}
 801b0ea:	bf00      	nop
 801b0ec:	20003e1c 	.word	0x20003e1c

0801b0f0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b084      	sub	sp, #16
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b0f8:	4b0c      	ldr	r3, [pc, #48]	; (801b12c <SUBGRF_SetRx+0x3c>)
 801b0fa:	2205      	movs	r2, #5
 801b0fc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	0c1b      	lsrs	r3, r3, #16
 801b102:	b2db      	uxtb	r3, r3
 801b104:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	0a1b      	lsrs	r3, r3, #8
 801b10a:	b2db      	uxtb	r3, r3
 801b10c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	b2db      	uxtb	r3, r3
 801b112:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b114:	f107 030c 	add.w	r3, r7, #12
 801b118:	2203      	movs	r2, #3
 801b11a:	4619      	mov	r1, r3
 801b11c:	2082      	movs	r0, #130	; 0x82
 801b11e:	f000 fd73 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b122:	bf00      	nop
 801b124:	3710      	adds	r7, #16
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	20003e1c 	.word	0x20003e1c

0801b130 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b084      	sub	sp, #16
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b138:	4b0e      	ldr	r3, [pc, #56]	; (801b174 <SUBGRF_SetRxBoosted+0x44>)
 801b13a:	2205      	movs	r2, #5
 801b13c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b13e:	2197      	movs	r1, #151	; 0x97
 801b140:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b144:	f000 fcb0 	bl	801baa8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	0c1b      	lsrs	r3, r3, #16
 801b14c:	b2db      	uxtb	r3, r3
 801b14e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	0a1b      	lsrs	r3, r3, #8
 801b154:	b2db      	uxtb	r3, r3
 801b156:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b15e:	f107 030c 	add.w	r3, r7, #12
 801b162:	2203      	movs	r2, #3
 801b164:	4619      	mov	r1, r3
 801b166:	2082      	movs	r0, #130	; 0x82
 801b168:	f000 fd4e 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b16c:	bf00      	nop
 801b16e:	3710      	adds	r7, #16
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	20003e1c 	.word	0x20003e1c

0801b178 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b084      	sub	sp, #16
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	0c1b      	lsrs	r3, r3, #16
 801b186:	b2db      	uxtb	r3, r3
 801b188:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	0a1b      	lsrs	r3, r3, #8
 801b18e:	b2db      	uxtb	r3, r3
 801b190:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	b2db      	uxtb	r3, r3
 801b196:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	0c1b      	lsrs	r3, r3, #16
 801b19c:	b2db      	uxtb	r3, r3
 801b19e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b1a0:	683b      	ldr	r3, [r7, #0]
 801b1a2:	0a1b      	lsrs	r3, r3, #8
 801b1a4:	b2db      	uxtb	r3, r3
 801b1a6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	b2db      	uxtb	r3, r3
 801b1ac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b1ae:	f107 0308 	add.w	r3, r7, #8
 801b1b2:	2206      	movs	r2, #6
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	2094      	movs	r0, #148	; 0x94
 801b1b8:	f000 fd26 	bl	801bc08 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b1bc:	4b03      	ldr	r3, [pc, #12]	; (801b1cc <SUBGRF_SetRxDutyCycle+0x54>)
 801b1be:	2206      	movs	r2, #6
 801b1c0:	701a      	strb	r2, [r3, #0]
}
 801b1c2:	bf00      	nop
 801b1c4:	3710      	adds	r7, #16
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd80      	pop	{r7, pc}
 801b1ca:	bf00      	nop
 801b1cc:	20003e1c 	.word	0x20003e1c

0801b1d0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	2100      	movs	r1, #0
 801b1d8:	20c5      	movs	r0, #197	; 0xc5
 801b1da:	f000 fd15 	bl	801bc08 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b1de:	4b02      	ldr	r3, [pc, #8]	; (801b1e8 <SUBGRF_SetCad+0x18>)
 801b1e0:	2207      	movs	r2, #7
 801b1e2:	701a      	strb	r2, [r3, #0]
}
 801b1e4:	bf00      	nop
 801b1e6:	bd80      	pop	{r7, pc}
 801b1e8:	20003e1c 	.word	0x20003e1c

0801b1ec <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	2100      	movs	r1, #0
 801b1f4:	20d1      	movs	r0, #209	; 0xd1
 801b1f6:	f000 fd07 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b1fa:	bf00      	nop
 801b1fc:	bd80      	pop	{r7, pc}

0801b1fe <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b1fe:	b580      	push	{r7, lr}
 801b200:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b202:	2200      	movs	r2, #0
 801b204:	2100      	movs	r1, #0
 801b206:	20d2      	movs	r0, #210	; 0xd2
 801b208:	f000 fcfe 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b20c:	bf00      	nop
 801b20e:	bd80      	pop	{r7, pc}

0801b210 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b082      	sub	sp, #8
 801b214:	af00      	add	r7, sp, #0
 801b216:	4603      	mov	r3, r0
 801b218:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b21a:	1dfb      	adds	r3, r7, #7
 801b21c:	2201      	movs	r2, #1
 801b21e:	4619      	mov	r1, r3
 801b220:	209f      	movs	r0, #159	; 0x9f
 801b222:	f000 fcf1 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b226:	bf00      	nop
 801b228:	3708      	adds	r7, #8
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}

0801b22e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b22e:	b580      	push	{r7, lr}
 801b230:	b084      	sub	sp, #16
 801b232:	af00      	add	r7, sp, #0
 801b234:	4603      	mov	r3, r0
 801b236:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b238:	1dfb      	adds	r3, r7, #7
 801b23a:	2201      	movs	r2, #1
 801b23c:	4619      	mov	r1, r3
 801b23e:	20a0      	movs	r0, #160	; 0xa0
 801b240:	f000 fce2 	bl	801bc08 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b244:	79fb      	ldrb	r3, [r7, #7]
 801b246:	2b3f      	cmp	r3, #63	; 0x3f
 801b248:	d91c      	bls.n	801b284 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b24a:	79fb      	ldrb	r3, [r7, #7]
 801b24c:	085b      	lsrs	r3, r3, #1
 801b24e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b250:	2300      	movs	r3, #0
 801b252:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b254:	2300      	movs	r3, #0
 801b256:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b258:	e005      	b.n	801b266 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b25a:	7bfb      	ldrb	r3, [r7, #15]
 801b25c:	089b      	lsrs	r3, r3, #2
 801b25e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b260:	7bbb      	ldrb	r3, [r7, #14]
 801b262:	3301      	adds	r3, #1
 801b264:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b266:	7bfb      	ldrb	r3, [r7, #15]
 801b268:	2b1f      	cmp	r3, #31
 801b26a:	d8f6      	bhi.n	801b25a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
 801b26e:	00db      	lsls	r3, r3, #3
 801b270:	b2da      	uxtb	r2, r3
 801b272:	7bbb      	ldrb	r3, [r7, #14]
 801b274:	4413      	add	r3, r2
 801b276:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b278:	7b7b      	ldrb	r3, [r7, #13]
 801b27a:	4619      	mov	r1, r3
 801b27c:	f240 7006 	movw	r0, #1798	; 0x706
 801b280:	f000 fc12 	bl	801baa8 <SUBGRF_WriteRegister>
    }
}
 801b284:	bf00      	nop
 801b286:	3710      	adds	r7, #16
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}

0801b28c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b082      	sub	sp, #8
 801b290:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b292:	f7ef f942 	bl	800a51a <RBI_IsDCDC>
 801b296:	4603      	mov	r3, r0
 801b298:	2b01      	cmp	r3, #1
 801b29a:	d102      	bne.n	801b2a2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b29c:	2301      	movs	r3, #1
 801b29e:	71fb      	strb	r3, [r7, #7]
 801b2a0:	e001      	b.n	801b2a6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b2a6:	1dfb      	adds	r3, r7, #7
 801b2a8:	2201      	movs	r2, #1
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	2096      	movs	r0, #150	; 0x96
 801b2ae:	f000 fcab 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b2b2:	bf00      	nop
 801b2b4:	3708      	adds	r7, #8
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd80      	pop	{r7, pc}

0801b2ba <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b2ba:	b580      	push	{r7, lr}
 801b2bc:	b084      	sub	sp, #16
 801b2be:	af00      	add	r7, sp, #0
 801b2c0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b2c2:	793b      	ldrb	r3, [r7, #4]
 801b2c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b2c8:	b2db      	uxtb	r3, r3
 801b2ca:	019b      	lsls	r3, r3, #6
 801b2cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b2ce:	793b      	ldrb	r3, [r7, #4]
 801b2d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b2d4:	b2db      	uxtb	r3, r3
 801b2d6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b2d8:	b25b      	sxtb	r3, r3
 801b2da:	4313      	orrs	r3, r2
 801b2dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b2de:	793b      	ldrb	r3, [r7, #4]
 801b2e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b2e8:	b25b      	sxtb	r3, r3
 801b2ea:	4313      	orrs	r3, r2
 801b2ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b2ee:	793b      	ldrb	r3, [r7, #4]
 801b2f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b2f8:	b25b      	sxtb	r3, r3
 801b2fa:	4313      	orrs	r3, r2
 801b2fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b2fe:	793b      	ldrb	r3, [r7, #4]
 801b300:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b304:	b2db      	uxtb	r3, r3
 801b306:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b308:	b25b      	sxtb	r3, r3
 801b30a:	4313      	orrs	r3, r2
 801b30c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b30e:	793b      	ldrb	r3, [r7, #4]
 801b310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b314:	b2db      	uxtb	r3, r3
 801b316:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b318:	b25b      	sxtb	r3, r3
 801b31a:	4313      	orrs	r3, r2
 801b31c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b31e:	793b      	ldrb	r3, [r7, #4]
 801b320:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b324:	b2db      	uxtb	r3, r3
 801b326:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b328:	4313      	orrs	r3, r2
 801b32a:	b25b      	sxtb	r3, r3
 801b32c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b32e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b330:	f107 030f 	add.w	r3, r7, #15
 801b334:	2201      	movs	r2, #1
 801b336:	4619      	mov	r1, r3
 801b338:	2089      	movs	r0, #137	; 0x89
 801b33a:	f000 fc65 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b33e:	bf00      	nop
 801b340:	3710      	adds	r7, #16
 801b342:	46bd      	mov	sp, r7
 801b344:	bd80      	pop	{r7, pc}
	...

0801b348 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b084      	sub	sp, #16
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	4a1b      	ldr	r2, [pc, #108]	; (801b3c0 <SUBGRF_CalibrateImage+0x78>)
 801b354:	4293      	cmp	r3, r2
 801b356:	d904      	bls.n	801b362 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b358:	23e1      	movs	r3, #225	; 0xe1
 801b35a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b35c:	23e9      	movs	r3, #233	; 0xe9
 801b35e:	737b      	strb	r3, [r7, #13]
 801b360:	e022      	b.n	801b3a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	4a17      	ldr	r2, [pc, #92]	; (801b3c4 <SUBGRF_CalibrateImage+0x7c>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d904      	bls.n	801b374 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b36a:	23d7      	movs	r3, #215	; 0xd7
 801b36c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b36e:	23db      	movs	r3, #219	; 0xdb
 801b370:	737b      	strb	r3, [r7, #13]
 801b372:	e019      	b.n	801b3a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	4a14      	ldr	r2, [pc, #80]	; (801b3c8 <SUBGRF_CalibrateImage+0x80>)
 801b378:	4293      	cmp	r3, r2
 801b37a:	d904      	bls.n	801b386 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b37c:	23c1      	movs	r3, #193	; 0xc1
 801b37e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b380:	23c5      	movs	r3, #197	; 0xc5
 801b382:	737b      	strb	r3, [r7, #13]
 801b384:	e010      	b.n	801b3a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	4a10      	ldr	r2, [pc, #64]	; (801b3cc <SUBGRF_CalibrateImage+0x84>)
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d904      	bls.n	801b398 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b38e:	2375      	movs	r3, #117	; 0x75
 801b390:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b392:	2381      	movs	r3, #129	; 0x81
 801b394:	737b      	strb	r3, [r7, #13]
 801b396:	e007      	b.n	801b3a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	4a0d      	ldr	r2, [pc, #52]	; (801b3d0 <SUBGRF_CalibrateImage+0x88>)
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d903      	bls.n	801b3a8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801b3a0:	236b      	movs	r3, #107	; 0x6b
 801b3a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b3a4:	236f      	movs	r3, #111	; 0x6f
 801b3a6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b3a8:	f107 030c 	add.w	r3, r7, #12
 801b3ac:	2202      	movs	r2, #2
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	2098      	movs	r0, #152	; 0x98
 801b3b2:	f000 fc29 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b3b6:	bf00      	nop
 801b3b8:	3710      	adds	r7, #16
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	bd80      	pop	{r7, pc}
 801b3be:	bf00      	nop
 801b3c0:	35a4e900 	.word	0x35a4e900
 801b3c4:	32a9f880 	.word	0x32a9f880
 801b3c8:	2de54480 	.word	0x2de54480
 801b3cc:	1b6b0b00 	.word	0x1b6b0b00
 801b3d0:	1954fc40 	.word	0x1954fc40

0801b3d4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b3d4:	b590      	push	{r4, r7, lr}
 801b3d6:	b085      	sub	sp, #20
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	4604      	mov	r4, r0
 801b3dc:	4608      	mov	r0, r1
 801b3de:	4611      	mov	r1, r2
 801b3e0:	461a      	mov	r2, r3
 801b3e2:	4623      	mov	r3, r4
 801b3e4:	71fb      	strb	r3, [r7, #7]
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	71bb      	strb	r3, [r7, #6]
 801b3ea:	460b      	mov	r3, r1
 801b3ec:	717b      	strb	r3, [r7, #5]
 801b3ee:	4613      	mov	r3, r2
 801b3f0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b3f2:	79fb      	ldrb	r3, [r7, #7]
 801b3f4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b3f6:	79bb      	ldrb	r3, [r7, #6]
 801b3f8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b3fa:	797b      	ldrb	r3, [r7, #5]
 801b3fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b3fe:	793b      	ldrb	r3, [r7, #4]
 801b400:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b402:	f107 030c 	add.w	r3, r7, #12
 801b406:	2204      	movs	r2, #4
 801b408:	4619      	mov	r1, r3
 801b40a:	2095      	movs	r0, #149	; 0x95
 801b40c:	f000 fbfc 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b410:	bf00      	nop
 801b412:	3714      	adds	r7, #20
 801b414:	46bd      	mov	sp, r7
 801b416:	bd90      	pop	{r4, r7, pc}

0801b418 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b418:	b590      	push	{r4, r7, lr}
 801b41a:	b085      	sub	sp, #20
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	4604      	mov	r4, r0
 801b420:	4608      	mov	r0, r1
 801b422:	4611      	mov	r1, r2
 801b424:	461a      	mov	r2, r3
 801b426:	4623      	mov	r3, r4
 801b428:	80fb      	strh	r3, [r7, #6]
 801b42a:	4603      	mov	r3, r0
 801b42c:	80bb      	strh	r3, [r7, #4]
 801b42e:	460b      	mov	r3, r1
 801b430:	807b      	strh	r3, [r7, #2]
 801b432:	4613      	mov	r3, r2
 801b434:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b436:	88fb      	ldrh	r3, [r7, #6]
 801b438:	0a1b      	lsrs	r3, r3, #8
 801b43a:	b29b      	uxth	r3, r3
 801b43c:	b2db      	uxtb	r3, r3
 801b43e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b440:	88fb      	ldrh	r3, [r7, #6]
 801b442:	b2db      	uxtb	r3, r3
 801b444:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b446:	88bb      	ldrh	r3, [r7, #4]
 801b448:	0a1b      	lsrs	r3, r3, #8
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	b2db      	uxtb	r3, r3
 801b44e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b450:	88bb      	ldrh	r3, [r7, #4]
 801b452:	b2db      	uxtb	r3, r3
 801b454:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b456:	887b      	ldrh	r3, [r7, #2]
 801b458:	0a1b      	lsrs	r3, r3, #8
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	b2db      	uxtb	r3, r3
 801b45e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b460:	887b      	ldrh	r3, [r7, #2]
 801b462:	b2db      	uxtb	r3, r3
 801b464:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b466:	883b      	ldrh	r3, [r7, #0]
 801b468:	0a1b      	lsrs	r3, r3, #8
 801b46a:	b29b      	uxth	r3, r3
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b470:	883b      	ldrh	r3, [r7, #0]
 801b472:	b2db      	uxtb	r3, r3
 801b474:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b476:	f107 0308 	add.w	r3, r7, #8
 801b47a:	2208      	movs	r2, #8
 801b47c:	4619      	mov	r1, r3
 801b47e:	2008      	movs	r0, #8
 801b480:	f000 fbc2 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b484:	bf00      	nop
 801b486:	3714      	adds	r7, #20
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd90      	pop	{r4, r7, pc}

0801b48c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	4603      	mov	r3, r0
 801b494:	6039      	str	r1, [r7, #0]
 801b496:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b498:	79fb      	ldrb	r3, [r7, #7]
 801b49a:	f003 0307 	and.w	r3, r3, #7
 801b49e:	b2db      	uxtb	r3, r3
 801b4a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	0c1b      	lsrs	r3, r3, #16
 801b4a6:	b2db      	uxtb	r3, r3
 801b4a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	0a1b      	lsrs	r3, r3, #8
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b4b8:	f107 030c 	add.w	r3, r7, #12
 801b4bc:	2204      	movs	r2, #4
 801b4be:	4619      	mov	r1, r3
 801b4c0:	2097      	movs	r0, #151	; 0x97
 801b4c2:	f000 fba1 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b4c6:	bf00      	nop
 801b4c8:	3710      	adds	r7, #16
 801b4ca:	46bd      	mov	sp, r7
 801b4cc:	bd80      	pop	{r7, pc}
	...

0801b4d0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b4d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b4d4:	b084      	sub	sp, #16
 801b4d6:	af00      	add	r7, sp, #0
 801b4d8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b4da:	2300      	movs	r3, #0
 801b4dc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b4de:	4b1d      	ldr	r3, [pc, #116]	; (801b554 <SUBGRF_SetRfFrequency+0x84>)
 801b4e0:	781b      	ldrb	r3, [r3, #0]
 801b4e2:	f083 0301 	eor.w	r3, r3, #1
 801b4e6:	b2db      	uxtb	r3, r3
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d005      	beq.n	801b4f8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b4ec:	6878      	ldr	r0, [r7, #4]
 801b4ee:	f7ff ff2b 	bl	801b348 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b4f2:	4b18      	ldr	r3, [pc, #96]	; (801b554 <SUBGRF_SetRfFrequency+0x84>)
 801b4f4:	2201      	movs	r2, #1
 801b4f6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	461c      	mov	r4, r3
 801b4fe:	4615      	mov	r5, r2
 801b500:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b504:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b508:	4a13      	ldr	r2, [pc, #76]	; (801b558 <SUBGRF_SetRfFrequency+0x88>)
 801b50a:	f04f 0300 	mov.w	r3, #0
 801b50e:	4640      	mov	r0, r8
 801b510:	4649      	mov	r1, r9
 801b512:	f7e5 fb27 	bl	8000b64 <__aeabi_uldivmod>
 801b516:	4602      	mov	r2, r0
 801b518:	460b      	mov	r3, r1
 801b51a:	4613      	mov	r3, r2
 801b51c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	0e1b      	lsrs	r3, r3, #24
 801b522:	b2db      	uxtb	r3, r3
 801b524:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	0c1b      	lsrs	r3, r3, #16
 801b52a:	b2db      	uxtb	r3, r3
 801b52c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	0a1b      	lsrs	r3, r3, #8
 801b532:	b2db      	uxtb	r3, r3
 801b534:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	b2db      	uxtb	r3, r3
 801b53a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b53c:	f107 0308 	add.w	r3, r7, #8
 801b540:	2204      	movs	r2, #4
 801b542:	4619      	mov	r1, r3
 801b544:	2086      	movs	r0, #134	; 0x86
 801b546:	f000 fb5f 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b54a:	bf00      	nop
 801b54c:	3710      	adds	r7, #16
 801b54e:	46bd      	mov	sp, r7
 801b550:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b554:	20003e24 	.word	0x20003e24
 801b558:	01e84800 	.word	0x01e84800

0801b55c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b082      	sub	sp, #8
 801b560:	af00      	add	r7, sp, #0
 801b562:	4603      	mov	r3, r0
 801b564:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b566:	79fa      	ldrb	r2, [r7, #7]
 801b568:	4b09      	ldr	r3, [pc, #36]	; (801b590 <SUBGRF_SetPacketType+0x34>)
 801b56a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b56c:	79fb      	ldrb	r3, [r7, #7]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d104      	bne.n	801b57c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b572:	2100      	movs	r1, #0
 801b574:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b578:	f000 fa96 	bl	801baa8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b57c:	1dfb      	adds	r3, r7, #7
 801b57e:	2201      	movs	r2, #1
 801b580:	4619      	mov	r1, r3
 801b582:	208a      	movs	r0, #138	; 0x8a
 801b584:	f000 fb40 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b588:	bf00      	nop
 801b58a:	3708      	adds	r7, #8
 801b58c:	46bd      	mov	sp, r7
 801b58e:	bd80      	pop	{r7, pc}
 801b590:	20003e1d 	.word	0x20003e1d

0801b594 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b594:	b480      	push	{r7}
 801b596:	af00      	add	r7, sp, #0
    return PacketType;
 801b598:	4b02      	ldr	r3, [pc, #8]	; (801b5a4 <SUBGRF_GetPacketType+0x10>)
 801b59a:	781b      	ldrb	r3, [r3, #0]
}
 801b59c:	4618      	mov	r0, r3
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bc80      	pop	{r7}
 801b5a2:	4770      	bx	lr
 801b5a4:	20003e1d 	.word	0x20003e1d

0801b5a8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b084      	sub	sp, #16
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	71fb      	strb	r3, [r7, #7]
 801b5b2:	460b      	mov	r3, r1
 801b5b4:	71bb      	strb	r3, [r7, #6]
 801b5b6:	4613      	mov	r3, r2
 801b5b8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801b5ba:	79fb      	ldrb	r3, [r7, #7]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d124      	bne.n	801b60a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801b5c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5c4:	2b0f      	cmp	r3, #15
 801b5c6:	d106      	bne.n	801b5d6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	2100      	movs	r1, #0
 801b5ce:	2006      	movs	r0, #6
 801b5d0:	f7ff ff00 	bl	801b3d4 <SUBGRF_SetPaConfig>
 801b5d4:	e005      	b.n	801b5e2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801b5d6:	2301      	movs	r3, #1
 801b5d8:	2201      	movs	r2, #1
 801b5da:	2100      	movs	r1, #0
 801b5dc:	2004      	movs	r0, #4
 801b5de:	f7ff fef9 	bl	801b3d4 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801b5e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5e6:	2b0d      	cmp	r3, #13
 801b5e8:	dd02      	ble.n	801b5f0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801b5ea:	230e      	movs	r3, #14
 801b5ec:	71bb      	strb	r3, [r7, #6]
 801b5ee:	e006      	b.n	801b5fe <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801b5f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5f4:	f113 0f11 	cmn.w	r3, #17
 801b5f8:	da01      	bge.n	801b5fe <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801b5fa:	23ef      	movs	r3, #239	; 0xef
 801b5fc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801b5fe:	2118      	movs	r1, #24
 801b600:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b604:	f000 fa50 	bl	801baa8 <SUBGRF_WriteRegister>
 801b608:	e025      	b.n	801b656 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801b60a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b60e:	f000 fa5f 	bl	801bad0 <SUBGRF_ReadRegister>
 801b612:	4603      	mov	r3, r0
 801b614:	f043 031e 	orr.w	r3, r3, #30
 801b618:	b2db      	uxtb	r3, r3
 801b61a:	4619      	mov	r1, r3
 801b61c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b620:	f000 fa42 	bl	801baa8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801b624:	2301      	movs	r3, #1
 801b626:	2200      	movs	r2, #0
 801b628:	2107      	movs	r1, #7
 801b62a:	2004      	movs	r0, #4
 801b62c:	f7ff fed2 	bl	801b3d4 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801b630:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b634:	2b16      	cmp	r3, #22
 801b636:	dd02      	ble.n	801b63e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801b638:	2316      	movs	r3, #22
 801b63a:	71bb      	strb	r3, [r7, #6]
 801b63c:	e006      	b.n	801b64c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801b63e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b642:	f113 0f09 	cmn.w	r3, #9
 801b646:	da01      	bge.n	801b64c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801b648:	23f7      	movs	r3, #247	; 0xf7
 801b64a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801b64c:	2138      	movs	r1, #56	; 0x38
 801b64e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b652:	f000 fa29 	bl	801baa8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b656:	79bb      	ldrb	r3, [r7, #6]
 801b658:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801b65a:	797b      	ldrb	r3, [r7, #5]
 801b65c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801b65e:	f107 030c 	add.w	r3, r7, #12
 801b662:	2202      	movs	r2, #2
 801b664:	4619      	mov	r1, r3
 801b666:	208e      	movs	r0, #142	; 0x8e
 801b668:	f000 face 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b66c:	bf00      	nop
 801b66e:	3710      	adds	r7, #16
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}

0801b674 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b674:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b678:	b086      	sub	sp, #24
 801b67a:	af00      	add	r7, sp, #0
 801b67c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b67e:	2300      	movs	r3, #0
 801b680:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b682:	4a61      	ldr	r2, [pc, #388]	; (801b808 <SUBGRF_SetModulationParams+0x194>)
 801b684:	f107 0308 	add.w	r3, r7, #8
 801b688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b68c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	781a      	ldrb	r2, [r3, #0]
 801b694:	4b5d      	ldr	r3, [pc, #372]	; (801b80c <SUBGRF_SetModulationParams+0x198>)
 801b696:	781b      	ldrb	r3, [r3, #0]
 801b698:	429a      	cmp	r2, r3
 801b69a:	d004      	beq.n	801b6a6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	781b      	ldrb	r3, [r3, #0]
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f7ff ff5b 	bl	801b55c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	781b      	ldrb	r3, [r3, #0]
 801b6aa:	2b03      	cmp	r3, #3
 801b6ac:	f200 80a5 	bhi.w	801b7fa <SUBGRF_SetModulationParams+0x186>
 801b6b0:	a201      	add	r2, pc, #4	; (adr r2, 801b6b8 <SUBGRF_SetModulationParams+0x44>)
 801b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6b6:	bf00      	nop
 801b6b8:	0801b6c9 	.word	0x0801b6c9
 801b6bc:	0801b789 	.word	0x0801b789
 801b6c0:	0801b74b 	.word	0x0801b74b
 801b6c4:	0801b7b7 	.word	0x0801b7b7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b6c8:	2308      	movs	r3, #8
 801b6ca:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	685b      	ldr	r3, [r3, #4]
 801b6d0:	4a4f      	ldr	r2, [pc, #316]	; (801b810 <SUBGRF_SetModulationParams+0x19c>)
 801b6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6d6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b6d8:	697b      	ldr	r3, [r7, #20]
 801b6da:	0c1b      	lsrs	r3, r3, #16
 801b6dc:	b2db      	uxtb	r3, r3
 801b6de:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b6e0:	697b      	ldr	r3, [r7, #20]
 801b6e2:	0a1b      	lsrs	r3, r3, #8
 801b6e4:	b2db      	uxtb	r3, r3
 801b6e6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	7b1b      	ldrb	r3, [r3, #12]
 801b6f2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	7b5b      	ldrb	r3, [r3, #13]
 801b6f8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	689b      	ldr	r3, [r3, #8]
 801b6fe:	2200      	movs	r2, #0
 801b700:	461c      	mov	r4, r3
 801b702:	4615      	mov	r5, r2
 801b704:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b708:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b70c:	4a41      	ldr	r2, [pc, #260]	; (801b814 <SUBGRF_SetModulationParams+0x1a0>)
 801b70e:	f04f 0300 	mov.w	r3, #0
 801b712:	4640      	mov	r0, r8
 801b714:	4649      	mov	r1, r9
 801b716:	f7e5 fa25 	bl	8000b64 <__aeabi_uldivmod>
 801b71a:	4602      	mov	r2, r0
 801b71c:	460b      	mov	r3, r1
 801b71e:	4613      	mov	r3, r2
 801b720:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b722:	697b      	ldr	r3, [r7, #20]
 801b724:	0c1b      	lsrs	r3, r3, #16
 801b726:	b2db      	uxtb	r3, r3
 801b728:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	0a1b      	lsrs	r3, r3, #8
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	b2db      	uxtb	r3, r3
 801b736:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b738:	7cfb      	ldrb	r3, [r7, #19]
 801b73a:	b29a      	uxth	r2, r3
 801b73c:	f107 0308 	add.w	r3, r7, #8
 801b740:	4619      	mov	r1, r3
 801b742:	208b      	movs	r0, #139	; 0x8b
 801b744:	f000 fa60 	bl	801bc08 <SUBGRF_WriteCommand>
        break;
 801b748:	e058      	b.n	801b7fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b74a:	2304      	movs	r3, #4
 801b74c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	691b      	ldr	r3, [r3, #16]
 801b752:	4a2f      	ldr	r2, [pc, #188]	; (801b810 <SUBGRF_SetModulationParams+0x19c>)
 801b754:	fbb2 f3f3 	udiv	r3, r2, r3
 801b758:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b75a:	697b      	ldr	r3, [r7, #20]
 801b75c:	0c1b      	lsrs	r3, r3, #16
 801b75e:	b2db      	uxtb	r3, r3
 801b760:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b762:	697b      	ldr	r3, [r7, #20]
 801b764:	0a1b      	lsrs	r3, r3, #8
 801b766:	b2db      	uxtb	r3, r3
 801b768:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b76a:	697b      	ldr	r3, [r7, #20]
 801b76c:	b2db      	uxtb	r3, r3
 801b76e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	7d1b      	ldrb	r3, [r3, #20]
 801b774:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b776:	7cfb      	ldrb	r3, [r7, #19]
 801b778:	b29a      	uxth	r2, r3
 801b77a:	f107 0308 	add.w	r3, r7, #8
 801b77e:	4619      	mov	r1, r3
 801b780:	208b      	movs	r0, #139	; 0x8b
 801b782:	f000 fa41 	bl	801bc08 <SUBGRF_WriteCommand>
        break;
 801b786:	e039      	b.n	801b7fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b788:	2304      	movs	r3, #4
 801b78a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	7e1b      	ldrb	r3, [r3, #24]
 801b790:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	7e5b      	ldrb	r3, [r3, #25]
 801b796:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	7e9b      	ldrb	r3, [r3, #26]
 801b79c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	7edb      	ldrb	r3, [r3, #27]
 801b7a2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b7a4:	7cfb      	ldrb	r3, [r7, #19]
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	f107 0308 	add.w	r3, r7, #8
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	208b      	movs	r0, #139	; 0x8b
 801b7b0:	f000 fa2a 	bl	801bc08 <SUBGRF_WriteCommand>

        break;
 801b7b4:	e022      	b.n	801b7fc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b7b6:	2305      	movs	r3, #5
 801b7b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	685b      	ldr	r3, [r3, #4]
 801b7be:	4a14      	ldr	r2, [pc, #80]	; (801b810 <SUBGRF_SetModulationParams+0x19c>)
 801b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b7c6:	697b      	ldr	r3, [r7, #20]
 801b7c8:	0c1b      	lsrs	r3, r3, #16
 801b7ca:	b2db      	uxtb	r3, r3
 801b7cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b7ce:	697b      	ldr	r3, [r7, #20]
 801b7d0:	0a1b      	lsrs	r3, r3, #8
 801b7d2:	b2db      	uxtb	r3, r3
 801b7d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b7d6:	697b      	ldr	r3, [r7, #20]
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	7b1b      	ldrb	r3, [r3, #12]
 801b7e0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	7b5b      	ldrb	r3, [r3, #13]
 801b7e6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b7e8:	7cfb      	ldrb	r3, [r7, #19]
 801b7ea:	b29a      	uxth	r2, r3
 801b7ec:	f107 0308 	add.w	r3, r7, #8
 801b7f0:	4619      	mov	r1, r3
 801b7f2:	208b      	movs	r0, #139	; 0x8b
 801b7f4:	f000 fa08 	bl	801bc08 <SUBGRF_WriteCommand>
        break;
 801b7f8:	e000      	b.n	801b7fc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b7fa:	bf00      	nop
    }
}
 801b7fc:	bf00      	nop
 801b7fe:	3718      	adds	r7, #24
 801b800:	46bd      	mov	sp, r7
 801b802:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b806:	bf00      	nop
 801b808:	0801e14c 	.word	0x0801e14c
 801b80c:	20003e1d 	.word	0x20003e1d
 801b810:	3d090000 	.word	0x3d090000
 801b814:	01e84800 	.word	0x01e84800

0801b818 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	b086      	sub	sp, #24
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b820:	2300      	movs	r3, #0
 801b822:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b824:	4a48      	ldr	r2, [pc, #288]	; (801b948 <SUBGRF_SetPacketParams+0x130>)
 801b826:	f107 030c 	add.w	r3, r7, #12
 801b82a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b82c:	c303      	stmia	r3!, {r0, r1}
 801b82e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	781a      	ldrb	r2, [r3, #0]
 801b834:	4b45      	ldr	r3, [pc, #276]	; (801b94c <SUBGRF_SetPacketParams+0x134>)
 801b836:	781b      	ldrb	r3, [r3, #0]
 801b838:	429a      	cmp	r2, r3
 801b83a:	d004      	beq.n	801b846 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	781b      	ldrb	r3, [r3, #0]
 801b840:	4618      	mov	r0, r3
 801b842:	f7ff fe8b 	bl	801b55c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	2b03      	cmp	r3, #3
 801b84c:	d878      	bhi.n	801b940 <SUBGRF_SetPacketParams+0x128>
 801b84e:	a201      	add	r2, pc, #4	; (adr r2, 801b854 <SUBGRF_SetPacketParams+0x3c>)
 801b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b854:	0801b865 	.word	0x0801b865
 801b858:	0801b8f5 	.word	0x0801b8f5
 801b85c:	0801b8e9 	.word	0x0801b8e9
 801b860:	0801b865 	.word	0x0801b865
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	7a5b      	ldrb	r3, [r3, #9]
 801b868:	2bf1      	cmp	r3, #241	; 0xf1
 801b86a:	d10a      	bne.n	801b882 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b86c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b870:	f7ff fb16 	bl	801aea0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b874:	f248 0005 	movw	r0, #32773	; 0x8005
 801b878:	f7ff fb32 	bl	801aee0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b87c:	2302      	movs	r3, #2
 801b87e:	75bb      	strb	r3, [r7, #22]
 801b880:	e011      	b.n	801b8a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	7a5b      	ldrb	r3, [r3, #9]
 801b886:	2bf2      	cmp	r3, #242	; 0xf2
 801b888:	d10a      	bne.n	801b8a0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b88a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b88e:	f7ff fb07 	bl	801aea0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b892:	f241 0021 	movw	r0, #4129	; 0x1021
 801b896:	f7ff fb23 	bl	801aee0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b89a:	2306      	movs	r3, #6
 801b89c:	75bb      	strb	r3, [r7, #22]
 801b89e:	e002      	b.n	801b8a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	7a5b      	ldrb	r3, [r3, #9]
 801b8a4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b8a6:	2309      	movs	r3, #9
 801b8a8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	885b      	ldrh	r3, [r3, #2]
 801b8ae:	0a1b      	lsrs	r3, r3, #8
 801b8b0:	b29b      	uxth	r3, r3
 801b8b2:	b2db      	uxtb	r3, r3
 801b8b4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	885b      	ldrh	r3, [r3, #2]
 801b8ba:	b2db      	uxtb	r3, r3
 801b8bc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	791b      	ldrb	r3, [r3, #4]
 801b8c2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	795b      	ldrb	r3, [r3, #5]
 801b8c8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	799b      	ldrb	r3, [r3, #6]
 801b8ce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	79db      	ldrb	r3, [r3, #7]
 801b8d4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	7a1b      	ldrb	r3, [r3, #8]
 801b8da:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b8dc:	7dbb      	ldrb	r3, [r7, #22]
 801b8de:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	7a9b      	ldrb	r3, [r3, #10]
 801b8e4:	753b      	strb	r3, [r7, #20]
        break;
 801b8e6:	e022      	b.n	801b92e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b8e8:	2301      	movs	r3, #1
 801b8ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	7b1b      	ldrb	r3, [r3, #12]
 801b8f0:	733b      	strb	r3, [r7, #12]
        break;
 801b8f2:	e01c      	b.n	801b92e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b8f4:	2306      	movs	r3, #6
 801b8f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	89db      	ldrh	r3, [r3, #14]
 801b8fc:	0a1b      	lsrs	r3, r3, #8
 801b8fe:	b29b      	uxth	r3, r3
 801b900:	b2db      	uxtb	r3, r3
 801b902:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	89db      	ldrh	r3, [r3, #14]
 801b908:	b2db      	uxtb	r3, r3
 801b90a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7c1a      	ldrb	r2, [r3, #16]
 801b910:	4b0f      	ldr	r3, [pc, #60]	; (801b950 <SUBGRF_SetPacketParams+0x138>)
 801b912:	4611      	mov	r1, r2
 801b914:	7019      	strb	r1, [r3, #0]
 801b916:	4613      	mov	r3, r2
 801b918:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	7c5b      	ldrb	r3, [r3, #17]
 801b91e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	7c9b      	ldrb	r3, [r3, #18]
 801b924:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	7cdb      	ldrb	r3, [r3, #19]
 801b92a:	747b      	strb	r3, [r7, #17]
        break;
 801b92c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b92e:	7dfb      	ldrb	r3, [r7, #23]
 801b930:	b29a      	uxth	r2, r3
 801b932:	f107 030c 	add.w	r3, r7, #12
 801b936:	4619      	mov	r1, r3
 801b938:	208c      	movs	r0, #140	; 0x8c
 801b93a:	f000 f965 	bl	801bc08 <SUBGRF_WriteCommand>
 801b93e:	e000      	b.n	801b942 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b940:	bf00      	nop
}
 801b942:	3718      	adds	r7, #24
 801b944:	46bd      	mov	sp, r7
 801b946:	bd80      	pop	{r7, pc}
 801b948:	0801e154 	.word	0x0801e154
 801b94c:	20003e1d 	.word	0x20003e1d
 801b950:	20003e1e 	.word	0x20003e1e

0801b954 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b954:	b580      	push	{r7, lr}
 801b956:	b084      	sub	sp, #16
 801b958:	af00      	add	r7, sp, #0
 801b95a:	4603      	mov	r3, r0
 801b95c:	460a      	mov	r2, r1
 801b95e:	71fb      	strb	r3, [r7, #7]
 801b960:	4613      	mov	r3, r2
 801b962:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b964:	79fb      	ldrb	r3, [r7, #7]
 801b966:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b968:	79bb      	ldrb	r3, [r7, #6]
 801b96a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b96c:	f107 030c 	add.w	r3, r7, #12
 801b970:	2202      	movs	r2, #2
 801b972:	4619      	mov	r1, r3
 801b974:	208f      	movs	r0, #143	; 0x8f
 801b976:	f000 f947 	bl	801bc08 <SUBGRF_WriteCommand>
}
 801b97a:	bf00      	nop
 801b97c:	3710      	adds	r7, #16
 801b97e:	46bd      	mov	sp, r7
 801b980:	bd80      	pop	{r7, pc}

0801b982 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b982:	b580      	push	{r7, lr}
 801b984:	b082      	sub	sp, #8
 801b986:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b988:	2300      	movs	r3, #0
 801b98a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b98c:	1d3b      	adds	r3, r7, #4
 801b98e:	2201      	movs	r2, #1
 801b990:	4619      	mov	r1, r3
 801b992:	2015      	movs	r0, #21
 801b994:	f000 f95a 	bl	801bc4c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b998:	793b      	ldrb	r3, [r7, #4]
 801b99a:	425b      	negs	r3, r3
 801b99c:	105b      	asrs	r3, r3, #1
 801b99e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b9a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	3708      	adds	r7, #8
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	bd80      	pop	{r7, pc}

0801b9ac <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
 801b9b4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b9b6:	f107 030c 	add.w	r3, r7, #12
 801b9ba:	2202      	movs	r2, #2
 801b9bc:	4619      	mov	r1, r3
 801b9be:	2013      	movs	r0, #19
 801b9c0:	f000 f944 	bl	801bc4c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b9c4:	f7ff fde6 	bl	801b594 <SUBGRF_GetPacketType>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	2b01      	cmp	r3, #1
 801b9cc:	d10d      	bne.n	801b9ea <SUBGRF_GetRxBufferStatus+0x3e>
 801b9ce:	4b0c      	ldr	r3, [pc, #48]	; (801ba00 <SUBGRF_GetRxBufferStatus+0x54>)
 801b9d0:	781b      	ldrb	r3, [r3, #0]
 801b9d2:	b2db      	uxtb	r3, r3
 801b9d4:	2b01      	cmp	r3, #1
 801b9d6:	d108      	bne.n	801b9ea <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b9d8:	f240 7002 	movw	r0, #1794	; 0x702
 801b9dc:	f000 f878 	bl	801bad0 <SUBGRF_ReadRegister>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	461a      	mov	r2, r3
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	701a      	strb	r2, [r3, #0]
 801b9e8:	e002      	b.n	801b9f0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b9ea:	7b3a      	ldrb	r2, [r7, #12]
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b9f0:	7b7a      	ldrb	r2, [r7, #13]
 801b9f2:	683b      	ldr	r3, [r7, #0]
 801b9f4:	701a      	strb	r2, [r3, #0]
}
 801b9f6:	bf00      	nop
 801b9f8:	3710      	adds	r7, #16
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}
 801b9fe:	bf00      	nop
 801ba00:	20003e1e 	.word	0x20003e1e

0801ba04 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801ba0c:	f107 030c 	add.w	r3, r7, #12
 801ba10:	2203      	movs	r2, #3
 801ba12:	4619      	mov	r1, r3
 801ba14:	2014      	movs	r0, #20
 801ba16:	f000 f919 	bl	801bc4c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ba1a:	f7ff fdbb 	bl	801b594 <SUBGRF_GetPacketType>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	461a      	mov	r2, r3
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	781b      	ldrb	r3, [r3, #0]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d002      	beq.n	801ba34 <SUBGRF_GetPacketStatus+0x30>
 801ba2e:	2b01      	cmp	r3, #1
 801ba30:	d013      	beq.n	801ba5a <SUBGRF_GetPacketStatus+0x56>
 801ba32:	e02a      	b.n	801ba8a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801ba34:	7b3a      	ldrb	r2, [r7, #12]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ba3a:	7b7b      	ldrb	r3, [r7, #13]
 801ba3c:	425b      	negs	r3, r3
 801ba3e:	105b      	asrs	r3, r3, #1
 801ba40:	b25a      	sxtb	r2, r3
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ba46:	7bbb      	ldrb	r3, [r7, #14]
 801ba48:	425b      	negs	r3, r3
 801ba4a:	105b      	asrs	r3, r3, #1
 801ba4c:	b25a      	sxtb	r2, r3
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	2200      	movs	r2, #0
 801ba56:	609a      	str	r2, [r3, #8]
            break;
 801ba58:	e020      	b.n	801ba9c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ba5a:	7b3b      	ldrb	r3, [r7, #12]
 801ba5c:	425b      	negs	r3, r3
 801ba5e:	105b      	asrs	r3, r3, #1
 801ba60:	b25a      	sxtb	r2, r3
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ba66:	7b7b      	ldrb	r3, [r7, #13]
 801ba68:	b25b      	sxtb	r3, r3
 801ba6a:	3302      	adds	r3, #2
 801ba6c:	109b      	asrs	r3, r3, #2
 801ba6e:	b25a      	sxtb	r2, r3
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ba74:	7bbb      	ldrb	r3, [r7, #14]
 801ba76:	425b      	negs	r3, r3
 801ba78:	105b      	asrs	r3, r3, #1
 801ba7a:	b25a      	sxtb	r2, r3
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801ba80:	4b08      	ldr	r3, [pc, #32]	; (801baa4 <SUBGRF_GetPacketStatus+0xa0>)
 801ba82:	681a      	ldr	r2, [r3, #0]
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	611a      	str	r2, [r3, #16]
            break;
 801ba88:	e008      	b.n	801ba9c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801ba8a:	2214      	movs	r2, #20
 801ba8c:	2100      	movs	r1, #0
 801ba8e:	6878      	ldr	r0, [r7, #4]
 801ba90:	f000 fe99 	bl	801c7c6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	220f      	movs	r2, #15
 801ba98:	701a      	strb	r2, [r3, #0]
            break;
 801ba9a:	bf00      	nop
    }
}
 801ba9c:	bf00      	nop
 801ba9e:	3710      	adds	r7, #16
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}
 801baa4:	20003e20 	.word	0x20003e20

0801baa8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b082      	sub	sp, #8
 801baac:	af00      	add	r7, sp, #0
 801baae:	4603      	mov	r3, r0
 801bab0:	460a      	mov	r2, r1
 801bab2:	80fb      	strh	r3, [r7, #6]
 801bab4:	4613      	mov	r3, r2
 801bab6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bab8:	1d7a      	adds	r2, r7, #5
 801baba:	88f9      	ldrh	r1, [r7, #6]
 801babc:	2301      	movs	r3, #1
 801babe:	4803      	ldr	r0, [pc, #12]	; (801bacc <SUBGRF_WriteRegister+0x24>)
 801bac0:	f7eb fc8e 	bl	80073e0 <HAL_SUBGHZ_WriteRegisters>
}
 801bac4:	bf00      	nop
 801bac6:	3708      	adds	r7, #8
 801bac8:	46bd      	mov	sp, r7
 801baca:	bd80      	pop	{r7, pc}
 801bacc:	20000a64 	.word	0x20000a64

0801bad0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b084      	sub	sp, #16
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	4603      	mov	r3, r0
 801bad8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bada:	f107 020f 	add.w	r2, r7, #15
 801bade:	88f9      	ldrh	r1, [r7, #6]
 801bae0:	2301      	movs	r3, #1
 801bae2:	4804      	ldr	r0, [pc, #16]	; (801baf4 <SUBGRF_ReadRegister+0x24>)
 801bae4:	f7eb fcdb 	bl	800749e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bae8:	7bfb      	ldrb	r3, [r7, #15]
}
 801baea:	4618      	mov	r0, r3
 801baec:	3710      	adds	r7, #16
 801baee:	46bd      	mov	sp, r7
 801baf0:	bd80      	pop	{r7, pc}
 801baf2:	bf00      	nop
 801baf4:	20000a64 	.word	0x20000a64

0801baf8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b086      	sub	sp, #24
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	4603      	mov	r3, r0
 801bb00:	6039      	str	r1, [r7, #0]
 801bb02:	80fb      	strh	r3, [r7, #6]
 801bb04:	4613      	mov	r3, r2
 801bb06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb08:	f3ef 8310 	mrs	r3, PRIMASK
 801bb0c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb12:	b672      	cpsid	i
}
 801bb14:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bb16:	88bb      	ldrh	r3, [r7, #4]
 801bb18:	88f9      	ldrh	r1, [r7, #6]
 801bb1a:	683a      	ldr	r2, [r7, #0]
 801bb1c:	4806      	ldr	r0, [pc, #24]	; (801bb38 <SUBGRF_WriteRegisters+0x40>)
 801bb1e:	f7eb fc5f 	bl	80073e0 <HAL_SUBGHZ_WriteRegisters>
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb26:	693b      	ldr	r3, [r7, #16]
 801bb28:	f383 8810 	msr	PRIMASK, r3
}
 801bb2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb2e:	bf00      	nop
 801bb30:	3718      	adds	r7, #24
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}
 801bb36:	bf00      	nop
 801bb38:	20000a64 	.word	0x20000a64

0801bb3c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b086      	sub	sp, #24
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	4603      	mov	r3, r0
 801bb44:	6039      	str	r1, [r7, #0]
 801bb46:	80fb      	strh	r3, [r7, #6]
 801bb48:	4613      	mov	r3, r2
 801bb4a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb4c:	f3ef 8310 	mrs	r3, PRIMASK
 801bb50:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb56:	b672      	cpsid	i
}
 801bb58:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bb5a:	88bb      	ldrh	r3, [r7, #4]
 801bb5c:	88f9      	ldrh	r1, [r7, #6]
 801bb5e:	683a      	ldr	r2, [r7, #0]
 801bb60:	4806      	ldr	r0, [pc, #24]	; (801bb7c <SUBGRF_ReadRegisters+0x40>)
 801bb62:	f7eb fc9c 	bl	800749e <HAL_SUBGHZ_ReadRegisters>
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	f383 8810 	msr	PRIMASK, r3
}
 801bb70:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb72:	bf00      	nop
 801bb74:	3718      	adds	r7, #24
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}
 801bb7a:	bf00      	nop
 801bb7c:	20000a64 	.word	0x20000a64

0801bb80 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b086      	sub	sp, #24
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	4603      	mov	r3, r0
 801bb88:	6039      	str	r1, [r7, #0]
 801bb8a:	71fb      	strb	r3, [r7, #7]
 801bb8c:	4613      	mov	r3, r2
 801bb8e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb90:	f3ef 8310 	mrs	r3, PRIMASK
 801bb94:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb96:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb9a:	b672      	cpsid	i
}
 801bb9c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bb9e:	79bb      	ldrb	r3, [r7, #6]
 801bba0:	b29b      	uxth	r3, r3
 801bba2:	79f9      	ldrb	r1, [r7, #7]
 801bba4:	683a      	ldr	r2, [r7, #0]
 801bba6:	4806      	ldr	r0, [pc, #24]	; (801bbc0 <SUBGRF_WriteBuffer+0x40>)
 801bba8:	f7eb fd8d 	bl	80076c6 <HAL_SUBGHZ_WriteBuffer>
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	f383 8810 	msr	PRIMASK, r3
}
 801bbb6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bbb8:	bf00      	nop
 801bbba:	3718      	adds	r7, #24
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}
 801bbc0:	20000a64 	.word	0x20000a64

0801bbc4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b086      	sub	sp, #24
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	4603      	mov	r3, r0
 801bbcc:	6039      	str	r1, [r7, #0]
 801bbce:	71fb      	strb	r3, [r7, #7]
 801bbd0:	4613      	mov	r3, r2
 801bbd2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbd4:	f3ef 8310 	mrs	r3, PRIMASK
 801bbd8:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbde:	b672      	cpsid	i
}
 801bbe0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bbe2:	79bb      	ldrb	r3, [r7, #6]
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	79f9      	ldrb	r1, [r7, #7]
 801bbe8:	683a      	ldr	r2, [r7, #0]
 801bbea:	4806      	ldr	r0, [pc, #24]	; (801bc04 <SUBGRF_ReadBuffer+0x40>)
 801bbec:	f7eb fdbe 	bl	800776c <HAL_SUBGHZ_ReadBuffer>
 801bbf0:	697b      	ldr	r3, [r7, #20]
 801bbf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbf4:	693b      	ldr	r3, [r7, #16]
 801bbf6:	f383 8810 	msr	PRIMASK, r3
}
 801bbfa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bbfc:	bf00      	nop
 801bbfe:	3718      	adds	r7, #24
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}
 801bc04:	20000a64 	.word	0x20000a64

0801bc08 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b086      	sub	sp, #24
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	4603      	mov	r3, r0
 801bc10:	6039      	str	r1, [r7, #0]
 801bc12:	71fb      	strb	r3, [r7, #7]
 801bc14:	4613      	mov	r3, r2
 801bc16:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc18:	f3ef 8310 	mrs	r3, PRIMASK
 801bc1c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc22:	b672      	cpsid	i
}
 801bc24:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bc26:	88bb      	ldrh	r3, [r7, #4]
 801bc28:	79f9      	ldrb	r1, [r7, #7]
 801bc2a:	683a      	ldr	r2, [r7, #0]
 801bc2c:	4806      	ldr	r0, [pc, #24]	; (801bc48 <SUBGRF_WriteCommand+0x40>)
 801bc2e:	f7eb fc97 	bl	8007560 <HAL_SUBGHZ_ExecSetCmd>
 801bc32:	697b      	ldr	r3, [r7, #20]
 801bc34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	f383 8810 	msr	PRIMASK, r3
}
 801bc3c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc3e:	bf00      	nop
 801bc40:	3718      	adds	r7, #24
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}
 801bc46:	bf00      	nop
 801bc48:	20000a64 	.word	0x20000a64

0801bc4c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b086      	sub	sp, #24
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	4603      	mov	r3, r0
 801bc54:	6039      	str	r1, [r7, #0]
 801bc56:	71fb      	strb	r3, [r7, #7]
 801bc58:	4613      	mov	r3, r2
 801bc5a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc5c:	f3ef 8310 	mrs	r3, PRIMASK
 801bc60:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc66:	b672      	cpsid	i
}
 801bc68:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bc6a:	88bb      	ldrh	r3, [r7, #4]
 801bc6c:	79f9      	ldrb	r1, [r7, #7]
 801bc6e:	683a      	ldr	r2, [r7, #0]
 801bc70:	4806      	ldr	r0, [pc, #24]	; (801bc8c <SUBGRF_ReadCommand+0x40>)
 801bc72:	f7eb fcd4 	bl	800761e <HAL_SUBGHZ_ExecGetCmd>
 801bc76:	697b      	ldr	r3, [r7, #20]
 801bc78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc7a:	693b      	ldr	r3, [r7, #16]
 801bc7c:	f383 8810 	msr	PRIMASK, r3
}
 801bc80:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc82:	bf00      	nop
 801bc84:	3718      	adds	r7, #24
 801bc86:	46bd      	mov	sp, r7
 801bc88:	bd80      	pop	{r7, pc}
 801bc8a:	bf00      	nop
 801bc8c:	20000a64 	.word	0x20000a64

0801bc90 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b084      	sub	sp, #16
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	4603      	mov	r3, r0
 801bc98:	460a      	mov	r2, r1
 801bc9a:	71fb      	strb	r3, [r7, #7]
 801bc9c:	4613      	mov	r3, r2
 801bc9e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bca0:	2301      	movs	r3, #1
 801bca2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bca4:	79bb      	ldrb	r3, [r7, #6]
 801bca6:	2b01      	cmp	r3, #1
 801bca8:	d10d      	bne.n	801bcc6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bcaa:	79fb      	ldrb	r3, [r7, #7]
 801bcac:	2b01      	cmp	r3, #1
 801bcae:	d104      	bne.n	801bcba <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bcb0:	2302      	movs	r3, #2
 801bcb2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bcb4:	2004      	movs	r0, #4
 801bcb6:	f000 f8df 	bl	801be78 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bcba:	79fb      	ldrb	r3, [r7, #7]
 801bcbc:	2b02      	cmp	r3, #2
 801bcbe:	d107      	bne.n	801bcd0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bcc0:	2303      	movs	r3, #3
 801bcc2:	73fb      	strb	r3, [r7, #15]
 801bcc4:	e004      	b.n	801bcd0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bcc6:	79bb      	ldrb	r3, [r7, #6]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d101      	bne.n	801bcd0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bccc:	2301      	movs	r3, #1
 801bcce:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bcd0:	7bfb      	ldrb	r3, [r7, #15]
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	f7ee fc05 	bl	800a4e2 <RBI_ConfigRFSwitch>
}
 801bcd8:	bf00      	nop
 801bcda:	3710      	adds	r7, #16
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	bd80      	pop	{r7, pc}

0801bce0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b084      	sub	sp, #16
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	4603      	mov	r3, r0
 801bce8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bcea:	2301      	movs	r3, #1
 801bcec:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bcee:	f7ee fc06 	bl	800a4fe <RBI_GetTxConfig>
 801bcf2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	2b02      	cmp	r3, #2
 801bcf8:	d016      	beq.n	801bd28 <SUBGRF_SetRfTxPower+0x48>
 801bcfa:	68bb      	ldr	r3, [r7, #8]
 801bcfc:	2b02      	cmp	r3, #2
 801bcfe:	dc16      	bgt.n	801bd2e <SUBGRF_SetRfTxPower+0x4e>
 801bd00:	68bb      	ldr	r3, [r7, #8]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d003      	beq.n	801bd0e <SUBGRF_SetRfTxPower+0x2e>
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	2b01      	cmp	r3, #1
 801bd0a:	d00a      	beq.n	801bd22 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bd0c:	e00f      	b.n	801bd2e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd12:	2b0f      	cmp	r3, #15
 801bd14:	dd02      	ble.n	801bd1c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bd16:	2302      	movs	r3, #2
 801bd18:	73fb      	strb	r3, [r7, #15]
            break;
 801bd1a:	e009      	b.n	801bd30 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bd1c:	2301      	movs	r3, #1
 801bd1e:	73fb      	strb	r3, [r7, #15]
            break;
 801bd20:	e006      	b.n	801bd30 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bd22:	2301      	movs	r3, #1
 801bd24:	73fb      	strb	r3, [r7, #15]
            break;
 801bd26:	e003      	b.n	801bd30 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bd28:	2302      	movs	r3, #2
 801bd2a:	73fb      	strb	r3, [r7, #15]
            break;
 801bd2c:	e000      	b.n	801bd30 <SUBGRF_SetRfTxPower+0x50>
            break;
 801bd2e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801bd30:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bd34:	7bfb      	ldrb	r3, [r7, #15]
 801bd36:	2202      	movs	r2, #2
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7ff fc35 	bl	801b5a8 <SUBGRF_SetTxParams>

    return paSelect;
 801bd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3710      	adds	r7, #16
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd80      	pop	{r7, pc}

0801bd48 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bd48:	b480      	push	{r7}
 801bd4a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bd4c:	2301      	movs	r3, #1
}
 801bd4e:	4618      	mov	r0, r3
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bc80      	pop	{r7}
 801bd54:	4770      	bx	lr
	...

0801bd58 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd58:	b580      	push	{r7, lr}
 801bd5a:	b082      	sub	sp, #8
 801bd5c:	af00      	add	r7, sp, #0
 801bd5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bd60:	4b03      	ldr	r3, [pc, #12]	; (801bd70 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	2001      	movs	r0, #1
 801bd66:	4798      	blx	r3
}
 801bd68:	bf00      	nop
 801bd6a:	3708      	adds	r7, #8
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	20003e28 	.word	0x20003e28

0801bd74 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b082      	sub	sp, #8
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bd7c:	4b03      	ldr	r3, [pc, #12]	; (801bd8c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	2002      	movs	r0, #2
 801bd82:	4798      	blx	r3
}
 801bd84:	bf00      	nop
 801bd86:	3708      	adds	r7, #8
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	20003e28 	.word	0x20003e28

0801bd90 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b082      	sub	sp, #8
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bd98:	4b03      	ldr	r3, [pc, #12]	; (801bda8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	2040      	movs	r0, #64	; 0x40
 801bd9e:	4798      	blx	r3
}
 801bda0:	bf00      	nop
 801bda2:	3708      	adds	r7, #8
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bd80      	pop	{r7, pc}
 801bda8:	20003e28 	.word	0x20003e28

0801bdac <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b082      	sub	sp, #8
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bdb8:	78fb      	ldrb	r3, [r7, #3]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d002      	beq.n	801bdc4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bdbe:	2b01      	cmp	r3, #1
 801bdc0:	d005      	beq.n	801bdce <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bdc2:	e00a      	b.n	801bdda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bdc4:	4b07      	ldr	r3, [pc, #28]	; (801bde4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	2080      	movs	r0, #128	; 0x80
 801bdca:	4798      	blx	r3
            break;
 801bdcc:	e005      	b.n	801bdda <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bdce:	4b05      	ldr	r3, [pc, #20]	; (801bde4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bdd6:	4798      	blx	r3
            break;
 801bdd8:	bf00      	nop
    }
}
 801bdda:	bf00      	nop
 801bddc:	3708      	adds	r7, #8
 801bdde:	46bd      	mov	sp, r7
 801bde0:	bd80      	pop	{r7, pc}
 801bde2:	bf00      	nop
 801bde4:	20003e28 	.word	0x20003e28

0801bde8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bdf0:	4b04      	ldr	r3, [pc, #16]	; (801be04 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bdf8:	4798      	blx	r3
}
 801bdfa:	bf00      	nop
 801bdfc:	3708      	adds	r7, #8
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd80      	pop	{r7, pc}
 801be02:	bf00      	nop
 801be04:	20003e28 	.word	0x20003e28

0801be08 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801be10:	4b03      	ldr	r3, [pc, #12]	; (801be20 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	2020      	movs	r0, #32
 801be16:	4798      	blx	r3
}
 801be18:	bf00      	nop
 801be1a:	3708      	adds	r7, #8
 801be1c:	46bd      	mov	sp, r7
 801be1e:	bd80      	pop	{r7, pc}
 801be20:	20003e28 	.word	0x20003e28

0801be24 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be24:	b580      	push	{r7, lr}
 801be26:	b082      	sub	sp, #8
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801be2c:	4b03      	ldr	r3, [pc, #12]	; (801be3c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	2004      	movs	r0, #4
 801be32:	4798      	blx	r3
}
 801be34:	bf00      	nop
 801be36:	3708      	adds	r7, #8
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}
 801be3c:	20003e28 	.word	0x20003e28

0801be40 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b082      	sub	sp, #8
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801be48:	4b03      	ldr	r3, [pc, #12]	; (801be58 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	2008      	movs	r0, #8
 801be4e:	4798      	blx	r3
}
 801be50:	bf00      	nop
 801be52:	3708      	adds	r7, #8
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}
 801be58:	20003e28 	.word	0x20003e28

0801be5c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b082      	sub	sp, #8
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801be64:	4b03      	ldr	r3, [pc, #12]	; (801be74 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	2010      	movs	r0, #16
 801be6a:	4798      	blx	r3
}
 801be6c:	bf00      	nop
 801be6e:	3708      	adds	r7, #8
 801be70:	46bd      	mov	sp, r7
 801be72:	bd80      	pop	{r7, pc}
 801be74:	20003e28 	.word	0x20003e28

0801be78 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b084      	sub	sp, #16
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	4603      	mov	r3, r0
 801be80:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801be82:	f7ee fb4a 	bl	800a51a <RBI_IsDCDC>
 801be86:	4603      	mov	r3, r0
 801be88:	2b01      	cmp	r3, #1
 801be8a:	d112      	bne.n	801beb2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801be8c:	f640 1023 	movw	r0, #2339	; 0x923
 801be90:	f7ff fe1e 	bl	801bad0 <SUBGRF_ReadRegister>
 801be94:	4603      	mov	r3, r0
 801be96:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801be98:	7bfb      	ldrb	r3, [r7, #15]
 801be9a:	f023 0306 	bic.w	r3, r3, #6
 801be9e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801bea0:	7bfa      	ldrb	r2, [r7, #15]
 801bea2:	79fb      	ldrb	r3, [r7, #7]
 801bea4:	4313      	orrs	r3, r2
 801bea6:	b2db      	uxtb	r3, r3
 801bea8:	4619      	mov	r1, r3
 801beaa:	f640 1023 	movw	r0, #2339	; 0x923
 801beae:	f7ff fdfb 	bl	801baa8 <SUBGRF_WriteRegister>
  }
}
 801beb2:	bf00      	nop
 801beb4:	3710      	adds	r7, #16
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bd80      	pop	{r7, pc}
	...

0801bebc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801bebc:	b480      	push	{r7}
 801bebe:	b085      	sub	sp, #20
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d101      	bne.n	801bece <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801beca:	231f      	movs	r3, #31
 801becc:	e016      	b.n	801befc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801bece:	2300      	movs	r3, #0
 801bed0:	73fb      	strb	r3, [r7, #15]
 801bed2:	e00f      	b.n	801bef4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801bed4:	7bfb      	ldrb	r3, [r7, #15]
 801bed6:	4a0c      	ldr	r2, [pc, #48]	; (801bf08 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801bed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801bedc:	687a      	ldr	r2, [r7, #4]
 801bede:	429a      	cmp	r2, r3
 801bee0:	d205      	bcs.n	801beee <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801bee2:	7bfb      	ldrb	r3, [r7, #15]
 801bee4:	4a08      	ldr	r2, [pc, #32]	; (801bf08 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801bee6:	00db      	lsls	r3, r3, #3
 801bee8:	4413      	add	r3, r2
 801beea:	791b      	ldrb	r3, [r3, #4]
 801beec:	e006      	b.n	801befc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801beee:	7bfb      	ldrb	r3, [r7, #15]
 801bef0:	3301      	adds	r3, #1
 801bef2:	73fb      	strb	r3, [r7, #15]
 801bef4:	7bfb      	ldrb	r3, [r7, #15]
 801bef6:	2b15      	cmp	r3, #21
 801bef8:	d9ec      	bls.n	801bed4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801befa:	e7fe      	b.n	801befa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801befc:	4618      	mov	r0, r3
 801befe:	3714      	adds	r7, #20
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bc80      	pop	{r7}
 801bf04:	4770      	bx	lr
 801bf06:	bf00      	nop
 801bf08:	0801e740 	.word	0x0801e740

0801bf0c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801bf0c:	b580      	push	{r7, lr}
 801bf0e:	b08a      	sub	sp, #40	; 0x28
 801bf10:	af00      	add	r7, sp, #0
 801bf12:	6078      	str	r0, [r7, #4]
 801bf14:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801bf16:	4b35      	ldr	r3, [pc, #212]	; (801bfec <SUBGRF_GetCFO+0xe0>)
 801bf18:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801bf1a:	f640 0007 	movw	r0, #2055	; 0x807
 801bf1e:	f7ff fdd7 	bl	801bad0 <SUBGRF_ReadRegister>
 801bf22:	4603      	mov	r3, r0
 801bf24:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801bf26:	7ffb      	ldrb	r3, [r7, #31]
 801bf28:	08db      	lsrs	r3, r3, #3
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	f003 0303 	and.w	r3, r3, #3
 801bf30:	3328      	adds	r3, #40	; 0x28
 801bf32:	443b      	add	r3, r7
 801bf34:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801bf38:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801bf3a:	7ffb      	ldrb	r3, [r7, #31]
 801bf3c:	f003 0307 	and.w	r3, r3, #7
 801bf40:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801bf42:	7fba      	ldrb	r2, [r7, #30]
 801bf44:	7f7b      	ldrb	r3, [r7, #29]
 801bf46:	3b01      	subs	r3, #1
 801bf48:	fa02 f303 	lsl.w	r3, r2, r3
 801bf4c:	461a      	mov	r2, r3
 801bf4e:	4b28      	ldr	r3, [pc, #160]	; (801bff0 <SUBGRF_GetCFO+0xe4>)
 801bf50:	fbb3 f3f2 	udiv	r3, r3, r2
 801bf54:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801bf56:	69ba      	ldr	r2, [r7, #24]
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf5e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801bf60:	2301      	movs	r3, #1
 801bf62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801bf66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf6a:	697a      	ldr	r2, [r7, #20]
 801bf6c:	fb02 f303 	mul.w	r3, r2, r3
 801bf70:	2b07      	cmp	r3, #7
 801bf72:	d802      	bhi.n	801bf7a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801bf74:	2302      	movs	r3, #2
 801bf76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801bf7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf7e:	697a      	ldr	r2, [r7, #20]
 801bf80:	fb02 f303 	mul.w	r3, r2, r3
 801bf84:	2b03      	cmp	r3, #3
 801bf86:	d802      	bhi.n	801bf8e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801bf88:	2304      	movs	r3, #4
 801bf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801bf8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bf92:	69bb      	ldr	r3, [r7, #24]
 801bf94:	fb02 f303 	mul.w	r3, r2, r3
 801bf98:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801bf9a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801bf9e:	f7ff fd97 	bl	801bad0 <SUBGRF_ReadRegister>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	021b      	lsls	r3, r3, #8
 801bfa6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bfaa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801bfac:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801bfb0:	f7ff fd8e 	bl	801bad0 <SUBGRF_ReadRegister>
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	6a3b      	ldr	r3, [r7, #32]
 801bfba:	4313      	orrs	r3, r2
 801bfbc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801bfbe:	6a3b      	ldr	r3, [r7, #32]
 801bfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d005      	beq.n	801bfd4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801bfc8:	6a3b      	ldr	r3, [r7, #32]
 801bfca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801bfce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801bfd2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801bfd4:	693b      	ldr	r3, [r7, #16]
 801bfd6:	095b      	lsrs	r3, r3, #5
 801bfd8:	6a3a      	ldr	r2, [r7, #32]
 801bfda:	fb02 f303 	mul.w	r3, r2, r3
 801bfde:	11da      	asrs	r2, r3, #7
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	601a      	str	r2, [r3, #0]
}
 801bfe4:	bf00      	nop
 801bfe6:	3728      	adds	r7, #40	; 0x28
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	0c0a0804 	.word	0x0c0a0804
 801bff0:	01e84800 	.word	0x01e84800

0801bff4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801bff4:	b480      	push	{r7}
 801bff6:	b087      	sub	sp, #28
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	4603      	mov	r3, r0
 801bffc:	60b9      	str	r1, [r7, #8]
 801bffe:	607a      	str	r2, [r7, #4]
 801c000:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801c002:	2300      	movs	r3, #0
 801c004:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801c006:	f04f 33ff 	mov.w	r3, #4294967295
 801c00a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c00c:	697b      	ldr	r3, [r7, #20]
}
 801c00e:	4618      	mov	r0, r3
 801c010:	371c      	adds	r7, #28
 801c012:	46bd      	mov	sp, r7
 801c014:	bc80      	pop	{r7}
 801c016:	4770      	bx	lr

0801c018 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801c018:	b480      	push	{r7}
 801c01a:	b087      	sub	sp, #28
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	4603      	mov	r3, r0
 801c020:	60b9      	str	r1, [r7, #8]
 801c022:	607a      	str	r2, [r7, #4]
 801c024:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801c026:	2300      	movs	r3, #0
 801c028:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801c02a:	f04f 33ff 	mov.w	r3, #4294967295
 801c02e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c030:	697b      	ldr	r3, [r7, #20]
}
 801c032:	4618      	mov	r0, r3
 801c034:	371c      	adds	r7, #28
 801c036:	46bd      	mov	sp, r7
 801c038:	bc80      	pop	{r7}
 801c03a:	4770      	bx	lr

0801c03c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801c03c:	b480      	push	{r7}
 801c03e:	b085      	sub	sp, #20
 801c040:	af00      	add	r7, sp, #0
 801c042:	60f8      	str	r0, [r7, #12]
 801c044:	60b9      	str	r1, [r7, #8]
 801c046:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801c048:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c04c:	4618      	mov	r0, r3
 801c04e:	3714      	adds	r7, #20
 801c050:	46bd      	mov	sp, r7
 801c052:	bc80      	pop	{r7}
 801c054:	4770      	bx	lr

0801c056 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801c056:	b480      	push	{r7}
 801c058:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801c05a:	bf00      	nop
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bc80      	pop	{r7}
 801c060:	4770      	bx	lr

0801c062 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801c062:	b480      	push	{r7}
 801c064:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801c066:	2300      	movs	r3, #0
#endif
}
 801c068:	4618      	mov	r0, r3
 801c06a:	46bd      	mov	sp, r7
 801c06c:	bc80      	pop	{r7}
 801c06e:	4770      	bx	lr

0801c070 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801c070:	b480      	push	{r7}
 801c072:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801c074:	2300      	movs	r3, #0
#endif
}
 801c076:	4618      	mov	r0, r3
 801c078:	46bd      	mov	sp, r7
 801c07a:	bc80      	pop	{r7}
 801c07c:	4770      	bx	lr

0801c07e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801c07e:	b480      	push	{r7}
 801c080:	b083      	sub	sp, #12
 801c082:	af00      	add	r7, sp, #0
 801c084:	4603      	mov	r3, r0
 801c086:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801c088:	bf00      	nop
 801c08a:	370c      	adds	r7, #12
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bc80      	pop	{r7}
 801c090:	4770      	bx	lr

0801c092 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801c092:	b480      	push	{r7}
 801c094:	b087      	sub	sp, #28
 801c096:	af00      	add	r7, sp, #0
 801c098:	60f8      	str	r0, [r7, #12]
 801c09a:	460b      	mov	r3, r1
 801c09c:	607a      	str	r2, [r7, #4]
 801c09e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801c0a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801c0a6:	697b      	ldr	r3, [r7, #20]
}
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	371c      	adds	r7, #28
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bc80      	pop	{r7}
 801c0b0:	4770      	bx	lr

0801c0b2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c0b2:	b480      	push	{r7}
 801c0b4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801c0b6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bc80      	pop	{r7}
 801c0c0:	4770      	bx	lr

0801c0c2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801c0c2:	b480      	push	{r7}
 801c0c4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801c0c6:	bf00      	nop
 801c0c8:	46bd      	mov	sp, r7
 801c0ca:	bc80      	pop	{r7}
 801c0cc:	4770      	bx	lr

0801c0ce <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c0ce:	b480      	push	{r7}
 801c0d0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801c0d2:	bf00      	nop
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bc80      	pop	{r7}
 801c0d8:	4770      	bx	lr

0801c0da <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801c0da:	b480      	push	{r7}
 801c0dc:	b083      	sub	sp, #12
 801c0de:	af00      	add	r7, sp, #0
 801c0e0:	4603      	mov	r3, r0
 801c0e2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801c0e4:	bf00      	nop
 801c0e6:	370c      	adds	r7, #12
 801c0e8:	46bd      	mov	sp, r7
 801c0ea:	bc80      	pop	{r7}
 801c0ec:	4770      	bx	lr
	...

0801c0f0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c0f4:	2218      	movs	r2, #24
 801c0f6:	2100      	movs	r1, #0
 801c0f8:	4807      	ldr	r0, [pc, #28]	; (801c118 <UTIL_ADV_TRACE_Init+0x28>)
 801c0fa:	f000 fb64 	bl	801c7c6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c0fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c102:	2100      	movs	r1, #0
 801c104:	4805      	ldr	r0, [pc, #20]	; (801c11c <UTIL_ADV_TRACE_Init+0x2c>)
 801c106:	f000 fb5e 	bl	801c7c6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c10a:	4b05      	ldr	r3, [pc, #20]	; (801c120 <UTIL_ADV_TRACE_Init+0x30>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	4805      	ldr	r0, [pc, #20]	; (801c124 <UTIL_ADV_TRACE_Init+0x34>)
 801c110:	4798      	blx	r3
 801c112:	4603      	mov	r3, r0
}
 801c114:	4618      	mov	r0, r3
 801c116:	bd80      	pop	{r7, pc}
 801c118:	20003e2c 	.word	0x20003e2c
 801c11c:	20003e44 	.word	0x20003e44
 801c120:	0801e2b0 	.word	0x0801e2b0
 801c124:	0801c391 	.word	0x0801c391

0801c128 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c128:	b480      	push	{r7}
 801c12a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c12c:	4b06      	ldr	r3, [pc, #24]	; (801c148 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c12e:	8a5a      	ldrh	r2, [r3, #18]
 801c130:	4b05      	ldr	r3, [pc, #20]	; (801c148 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c132:	8a1b      	ldrh	r3, [r3, #16]
 801c134:	429a      	cmp	r2, r3
 801c136:	d101      	bne.n	801c13c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c138:	2301      	movs	r3, #1
 801c13a:	e000      	b.n	801c13e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c13c:	2300      	movs	r3, #0
}
 801c13e:	4618      	mov	r0, r3
 801c140:	46bd      	mov	sp, r7
 801c142:	bc80      	pop	{r7}
 801c144:	4770      	bx	lr
 801c146:	bf00      	nop
 801c148:	20003e2c 	.word	0x20003e2c

0801c14c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c14c:	b408      	push	{r3}
 801c14e:	b580      	push	{r7, lr}
 801c150:	b08d      	sub	sp, #52	; 0x34
 801c152:	af00      	add	r7, sp, #0
 801c154:	60f8      	str	r0, [r7, #12]
 801c156:	60b9      	str	r1, [r7, #8]
 801c158:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c15a:	2300      	movs	r3, #0
 801c15c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c15e:	2300      	movs	r3, #0
 801c160:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c162:	4b37      	ldr	r3, [pc, #220]	; (801c240 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c164:	7a1b      	ldrb	r3, [r3, #8]
 801c166:	461a      	mov	r2, r3
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	4293      	cmp	r3, r2
 801c16c:	d902      	bls.n	801c174 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c16e:	f06f 0304 	mvn.w	r3, #4
 801c172:	e05e      	b.n	801c232 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c174:	4b32      	ldr	r3, [pc, #200]	; (801c240 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c176:	68da      	ldr	r2, [r3, #12]
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	4013      	ands	r3, r2
 801c17c:	68ba      	ldr	r2, [r7, #8]
 801c17e:	429a      	cmp	r2, r3
 801c180:	d002      	beq.n	801c188 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c182:	f06f 0305 	mvn.w	r3, #5
 801c186:	e054      	b.n	801c232 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c188:	4b2d      	ldr	r3, [pc, #180]	; (801c240 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c18a:	685b      	ldr	r3, [r3, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d00a      	beq.n	801c1a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d007      	beq.n	801c1a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c196:	4b2a      	ldr	r3, [pc, #168]	; (801c240 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c198:	685b      	ldr	r3, [r3, #4]
 801c19a:	f107 0116 	add.w	r1, r7, #22
 801c19e:	f107 0218 	add.w	r2, r7, #24
 801c1a2:	4610      	mov	r0, r2
 801c1a4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c1a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c1aa:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c1b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c1b4:	4823      	ldr	r0, [pc, #140]	; (801c244 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c1b6:	f001 f999 	bl	801d4ec <tiny_vsnprintf_like>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c1be:	f000 f9f1 	bl	801c5a4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c1c2:	8afa      	ldrh	r2, [r7, #22]
 801c1c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c1c6:	4413      	add	r3, r2
 801c1c8:	b29b      	uxth	r3, r3
 801c1ca:	f107 0214 	add.w	r2, r7, #20
 801c1ce:	4611      	mov	r1, r2
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	f000 f969 	bl	801c4a8 <TRACE_AllocateBufer>
 801c1d6:	4603      	mov	r3, r0
 801c1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1dc:	d025      	beq.n	801c22a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c1de:	2300      	movs	r3, #0
 801c1e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c1e2:	e00e      	b.n	801c202 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c1e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c1e6:	8aba      	ldrh	r2, [r7, #20]
 801c1e8:	3330      	adds	r3, #48	; 0x30
 801c1ea:	443b      	add	r3, r7
 801c1ec:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c1f0:	4b15      	ldr	r3, [pc, #84]	; (801c248 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c1f2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c1f4:	8abb      	ldrh	r3, [r7, #20]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	b29b      	uxth	r3, r3
 801c1fa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c1fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c1fe:	3301      	adds	r3, #1
 801c200:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c202:	8afb      	ldrh	r3, [r7, #22]
 801c204:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c206:	429a      	cmp	r2, r3
 801c208:	d3ec      	bcc.n	801c1e4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c20a:	8abb      	ldrh	r3, [r7, #20]
 801c20c:	461a      	mov	r2, r3
 801c20e:	4b0e      	ldr	r3, [pc, #56]	; (801c248 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c210:	18d0      	adds	r0, r2, r3
 801c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c216:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c21a:	f001 f967 	bl	801d4ec <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c21e:	f000 f9df 	bl	801c5e0 <TRACE_UnLock>

    return TRACE_Send();
 801c222:	f000 f831 	bl	801c288 <TRACE_Send>
 801c226:	4603      	mov	r3, r0
 801c228:	e003      	b.n	801c232 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c22a:	f000 f9d9 	bl	801c5e0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c22e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c232:	4618      	mov	r0, r3
 801c234:	3734      	adds	r7, #52	; 0x34
 801c236:	46bd      	mov	sp, r7
 801c238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c23c:	b001      	add	sp, #4
 801c23e:	4770      	bx	lr
 801c240:	20003e2c 	.word	0x20003e2c
 801c244:	20004244 	.word	0x20004244
 801c248:	20003e44 	.word	0x20003e44

0801c24c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c24c:	b480      	push	{r7}
 801c24e:	b083      	sub	sp, #12
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c254:	4a03      	ldr	r2, [pc, #12]	; (801c264 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	6053      	str	r3, [r2, #4]
}
 801c25a:	bf00      	nop
 801c25c:	370c      	adds	r7, #12
 801c25e:	46bd      	mov	sp, r7
 801c260:	bc80      	pop	{r7}
 801c262:	4770      	bx	lr
 801c264:	20003e2c 	.word	0x20003e2c

0801c268 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c268:	b480      	push	{r7}
 801c26a:	b083      	sub	sp, #12
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	4603      	mov	r3, r0
 801c270:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c272:	4a04      	ldr	r2, [pc, #16]	; (801c284 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c274:	79fb      	ldrb	r3, [r7, #7]
 801c276:	7213      	strb	r3, [r2, #8]
}
 801c278:	bf00      	nop
 801c27a:	370c      	adds	r7, #12
 801c27c:	46bd      	mov	sp, r7
 801c27e:	bc80      	pop	{r7}
 801c280:	4770      	bx	lr
 801c282:	bf00      	nop
 801c284:	20003e2c 	.word	0x20003e2c

0801c288 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b088      	sub	sp, #32
 801c28c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c28e:	2300      	movs	r3, #0
 801c290:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c292:	2300      	movs	r3, #0
 801c294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c296:	f3ef 8310 	mrs	r3, PRIMASK
 801c29a:	613b      	str	r3, [r7, #16]
  return(result);
 801c29c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c29e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2a0:	b672      	cpsid	i
}
 801c2a2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c2a4:	f000 f9ba 	bl	801c61c <TRACE_IsLocked>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d15d      	bne.n	801c36a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c2ae:	f000 f979 	bl	801c5a4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c2b2:	4b34      	ldr	r3, [pc, #208]	; (801c384 <TRACE_Send+0xfc>)
 801c2b4:	8a1a      	ldrh	r2, [r3, #16]
 801c2b6:	4b33      	ldr	r3, [pc, #204]	; (801c384 <TRACE_Send+0xfc>)
 801c2b8:	8a5b      	ldrh	r3, [r3, #18]
 801c2ba:	429a      	cmp	r2, r3
 801c2bc:	d04d      	beq.n	801c35a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c2be:	4b31      	ldr	r3, [pc, #196]	; (801c384 <TRACE_Send+0xfc>)
 801c2c0:	789b      	ldrb	r3, [r3, #2]
 801c2c2:	2b01      	cmp	r3, #1
 801c2c4:	d117      	bne.n	801c2f6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c2c6:	4b2f      	ldr	r3, [pc, #188]	; (801c384 <TRACE_Send+0xfc>)
 801c2c8:	881a      	ldrh	r2, [r3, #0]
 801c2ca:	4b2e      	ldr	r3, [pc, #184]	; (801c384 <TRACE_Send+0xfc>)
 801c2cc:	8a1b      	ldrh	r3, [r3, #16]
 801c2ce:	1ad3      	subs	r3, r2, r3
 801c2d0:	b29a      	uxth	r2, r3
 801c2d2:	4b2c      	ldr	r3, [pc, #176]	; (801c384 <TRACE_Send+0xfc>)
 801c2d4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c2d6:	4b2b      	ldr	r3, [pc, #172]	; (801c384 <TRACE_Send+0xfc>)
 801c2d8:	2202      	movs	r2, #2
 801c2da:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c2dc:	4b29      	ldr	r3, [pc, #164]	; (801c384 <TRACE_Send+0xfc>)
 801c2de:	2200      	movs	r2, #0
 801c2e0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c2e2:	4b28      	ldr	r3, [pc, #160]	; (801c384 <TRACE_Send+0xfc>)
 801c2e4:	8a9b      	ldrh	r3, [r3, #20]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d105      	bne.n	801c2f6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c2ea:	4b26      	ldr	r3, [pc, #152]	; (801c384 <TRACE_Send+0xfc>)
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c2f0:	4b24      	ldr	r3, [pc, #144]	; (801c384 <TRACE_Send+0xfc>)
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c2f6:	4b23      	ldr	r3, [pc, #140]	; (801c384 <TRACE_Send+0xfc>)
 801c2f8:	789b      	ldrb	r3, [r3, #2]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d115      	bne.n	801c32a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c2fe:	4b21      	ldr	r3, [pc, #132]	; (801c384 <TRACE_Send+0xfc>)
 801c300:	8a5a      	ldrh	r2, [r3, #18]
 801c302:	4b20      	ldr	r3, [pc, #128]	; (801c384 <TRACE_Send+0xfc>)
 801c304:	8a1b      	ldrh	r3, [r3, #16]
 801c306:	429a      	cmp	r2, r3
 801c308:	d908      	bls.n	801c31c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c30a:	4b1e      	ldr	r3, [pc, #120]	; (801c384 <TRACE_Send+0xfc>)
 801c30c:	8a5a      	ldrh	r2, [r3, #18]
 801c30e:	4b1d      	ldr	r3, [pc, #116]	; (801c384 <TRACE_Send+0xfc>)
 801c310:	8a1b      	ldrh	r3, [r3, #16]
 801c312:	1ad3      	subs	r3, r2, r3
 801c314:	b29a      	uxth	r2, r3
 801c316:	4b1b      	ldr	r3, [pc, #108]	; (801c384 <TRACE_Send+0xfc>)
 801c318:	829a      	strh	r2, [r3, #20]
 801c31a:	e006      	b.n	801c32a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c31c:	4b19      	ldr	r3, [pc, #100]	; (801c384 <TRACE_Send+0xfc>)
 801c31e:	8a1b      	ldrh	r3, [r3, #16]
 801c320:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c324:	b29a      	uxth	r2, r3
 801c326:	4b17      	ldr	r3, [pc, #92]	; (801c384 <TRACE_Send+0xfc>)
 801c328:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c32a:	4b16      	ldr	r3, [pc, #88]	; (801c384 <TRACE_Send+0xfc>)
 801c32c:	8a1b      	ldrh	r3, [r3, #16]
 801c32e:	461a      	mov	r2, r3
 801c330:	4b15      	ldr	r3, [pc, #84]	; (801c388 <TRACE_Send+0x100>)
 801c332:	4413      	add	r3, r2
 801c334:	61bb      	str	r3, [r7, #24]
 801c336:	697b      	ldr	r3, [r7, #20]
 801c338:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	f383 8810 	msr	PRIMASK, r3
}
 801c340:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c342:	f7e5 fc49 	bl	8001bd8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c346:	4b11      	ldr	r3, [pc, #68]	; (801c38c <TRACE_Send+0x104>)
 801c348:	68db      	ldr	r3, [r3, #12]
 801c34a:	4a0e      	ldr	r2, [pc, #56]	; (801c384 <TRACE_Send+0xfc>)
 801c34c:	8a92      	ldrh	r2, [r2, #20]
 801c34e:	4611      	mov	r1, r2
 801c350:	69b8      	ldr	r0, [r7, #24]
 801c352:	4798      	blx	r3
 801c354:	4603      	mov	r3, r0
 801c356:	77fb      	strb	r3, [r7, #31]
 801c358:	e00d      	b.n	801c376 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c35a:	f000 f941 	bl	801c5e0 <TRACE_UnLock>
 801c35e:	697b      	ldr	r3, [r7, #20]
 801c360:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c362:	68bb      	ldr	r3, [r7, #8]
 801c364:	f383 8810 	msr	PRIMASK, r3
}
 801c368:	e005      	b.n	801c376 <TRACE_Send+0xee>
 801c36a:	697b      	ldr	r3, [r7, #20]
 801c36c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	f383 8810 	msr	PRIMASK, r3
}
 801c374:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c376:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c37a:	4618      	mov	r0, r3
 801c37c:	3720      	adds	r7, #32
 801c37e:	46bd      	mov	sp, r7
 801c380:	bd80      	pop	{r7, pc}
 801c382:	bf00      	nop
 801c384:	20003e2c 	.word	0x20003e2c
 801c388:	20003e44 	.word	0x20003e44
 801c38c:	0801e2b0 	.word	0x0801e2b0

0801c390 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b088      	sub	sp, #32
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c398:	2300      	movs	r3, #0
 801c39a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c39c:	f3ef 8310 	mrs	r3, PRIMASK
 801c3a0:	617b      	str	r3, [r7, #20]
  return(result);
 801c3a2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c3a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3a6:	b672      	cpsid	i
}
 801c3a8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c3aa:	4b3c      	ldr	r3, [pc, #240]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3ac:	789b      	ldrb	r3, [r3, #2]
 801c3ae:	2b02      	cmp	r3, #2
 801c3b0:	d106      	bne.n	801c3c0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c3b2:	4b3a      	ldr	r3, [pc, #232]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c3b8:	4b38      	ldr	r3, [pc, #224]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	821a      	strh	r2, [r3, #16]
 801c3be:	e00a      	b.n	801c3d6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c3c0:	4b36      	ldr	r3, [pc, #216]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3c2:	8a1a      	ldrh	r2, [r3, #16]
 801c3c4:	4b35      	ldr	r3, [pc, #212]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3c6:	8a9b      	ldrh	r3, [r3, #20]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	b29b      	uxth	r3, r3
 801c3cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c3d0:	b29a      	uxth	r2, r3
 801c3d2:	4b32      	ldr	r3, [pc, #200]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3d4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c3d6:	4b31      	ldr	r3, [pc, #196]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3d8:	8a1a      	ldrh	r2, [r3, #16]
 801c3da:	4b30      	ldr	r3, [pc, #192]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3dc:	8a5b      	ldrh	r3, [r3, #18]
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d04d      	beq.n	801c47e <TRACE_TxCpltCallback+0xee>
 801c3e2:	4b2e      	ldr	r3, [pc, #184]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3e4:	8adb      	ldrh	r3, [r3, #22]
 801c3e6:	2b01      	cmp	r3, #1
 801c3e8:	d149      	bne.n	801c47e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c3ea:	4b2c      	ldr	r3, [pc, #176]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3ec:	789b      	ldrb	r3, [r3, #2]
 801c3ee:	2b01      	cmp	r3, #1
 801c3f0:	d117      	bne.n	801c422 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c3f2:	4b2a      	ldr	r3, [pc, #168]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3f4:	881a      	ldrh	r2, [r3, #0]
 801c3f6:	4b29      	ldr	r3, [pc, #164]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c3f8:	8a1b      	ldrh	r3, [r3, #16]
 801c3fa:	1ad3      	subs	r3, r2, r3
 801c3fc:	b29a      	uxth	r2, r3
 801c3fe:	4b27      	ldr	r3, [pc, #156]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c400:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c402:	4b26      	ldr	r3, [pc, #152]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c404:	2202      	movs	r2, #2
 801c406:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c408:	4b24      	ldr	r3, [pc, #144]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c40a:	2200      	movs	r2, #0
 801c40c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c40e:	4b23      	ldr	r3, [pc, #140]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c410:	8a9b      	ldrh	r3, [r3, #20]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d105      	bne.n	801c422 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c416:	4b21      	ldr	r3, [pc, #132]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c418:	2200      	movs	r2, #0
 801c41a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c41c:	4b1f      	ldr	r3, [pc, #124]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c41e:	2200      	movs	r2, #0
 801c420:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c422:	4b1e      	ldr	r3, [pc, #120]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c424:	789b      	ldrb	r3, [r3, #2]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d115      	bne.n	801c456 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c42a:	4b1c      	ldr	r3, [pc, #112]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c42c:	8a5a      	ldrh	r2, [r3, #18]
 801c42e:	4b1b      	ldr	r3, [pc, #108]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c430:	8a1b      	ldrh	r3, [r3, #16]
 801c432:	429a      	cmp	r2, r3
 801c434:	d908      	bls.n	801c448 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c436:	4b19      	ldr	r3, [pc, #100]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c438:	8a5a      	ldrh	r2, [r3, #18]
 801c43a:	4b18      	ldr	r3, [pc, #96]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c43c:	8a1b      	ldrh	r3, [r3, #16]
 801c43e:	1ad3      	subs	r3, r2, r3
 801c440:	b29a      	uxth	r2, r3
 801c442:	4b16      	ldr	r3, [pc, #88]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c444:	829a      	strh	r2, [r3, #20]
 801c446:	e006      	b.n	801c456 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c448:	4b14      	ldr	r3, [pc, #80]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c44a:	8a1b      	ldrh	r3, [r3, #16]
 801c44c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c450:	b29a      	uxth	r2, r3
 801c452:	4b12      	ldr	r3, [pc, #72]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c454:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c456:	4b11      	ldr	r3, [pc, #68]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c458:	8a1b      	ldrh	r3, [r3, #16]
 801c45a:	461a      	mov	r2, r3
 801c45c:	4b10      	ldr	r3, [pc, #64]	; (801c4a0 <TRACE_TxCpltCallback+0x110>)
 801c45e:	4413      	add	r3, r2
 801c460:	61fb      	str	r3, [r7, #28]
 801c462:	69bb      	ldr	r3, [r7, #24]
 801c464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c466:	693b      	ldr	r3, [r7, #16]
 801c468:	f383 8810 	msr	PRIMASK, r3
}
 801c46c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c46e:	4b0d      	ldr	r3, [pc, #52]	; (801c4a4 <TRACE_TxCpltCallback+0x114>)
 801c470:	68db      	ldr	r3, [r3, #12]
 801c472:	4a0a      	ldr	r2, [pc, #40]	; (801c49c <TRACE_TxCpltCallback+0x10c>)
 801c474:	8a92      	ldrh	r2, [r2, #20]
 801c476:	4611      	mov	r1, r2
 801c478:	69f8      	ldr	r0, [r7, #28]
 801c47a:	4798      	blx	r3
 801c47c:	e00a      	b.n	801c494 <TRACE_TxCpltCallback+0x104>
 801c47e:	69bb      	ldr	r3, [r7, #24]
 801c480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	f383 8810 	msr	PRIMASK, r3
}
 801c488:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c48a:	f7e5 fbad 	bl	8001be8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c48e:	f000 f8a7 	bl	801c5e0 <TRACE_UnLock>
  }
}
 801c492:	bf00      	nop
 801c494:	bf00      	nop
 801c496:	3720      	adds	r7, #32
 801c498:	46bd      	mov	sp, r7
 801c49a:	bd80      	pop	{r7, pc}
 801c49c:	20003e2c 	.word	0x20003e2c
 801c4a0:	20003e44 	.word	0x20003e44
 801c4a4:	0801e2b0 	.word	0x0801e2b0

0801c4a8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c4a8:	b480      	push	{r7}
 801c4aa:	b087      	sub	sp, #28
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	4603      	mov	r3, r0
 801c4b0:	6039      	str	r1, [r7, #0]
 801c4b2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c4b8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c4be:	60fb      	str	r3, [r7, #12]
  return(result);
 801c4c0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c4c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4c4:	b672      	cpsid	i
}
 801c4c6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c4c8:	4b35      	ldr	r3, [pc, #212]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4ca:	8a5a      	ldrh	r2, [r3, #18]
 801c4cc:	4b34      	ldr	r3, [pc, #208]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4ce:	8a1b      	ldrh	r3, [r3, #16]
 801c4d0:	429a      	cmp	r2, r3
 801c4d2:	d11b      	bne.n	801c50c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c4d4:	4b32      	ldr	r3, [pc, #200]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4d6:	8a5b      	ldrh	r3, [r3, #18]
 801c4d8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c4dc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c4de:	88fa      	ldrh	r2, [r7, #6]
 801c4e0:	8afb      	ldrh	r3, [r7, #22]
 801c4e2:	429a      	cmp	r2, r3
 801c4e4:	d33a      	bcc.n	801c55c <TRACE_AllocateBufer+0xb4>
 801c4e6:	4b2e      	ldr	r3, [pc, #184]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4e8:	8a1b      	ldrh	r3, [r3, #16]
 801c4ea:	88fa      	ldrh	r2, [r7, #6]
 801c4ec:	429a      	cmp	r2, r3
 801c4ee:	d235      	bcs.n	801c55c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c4f0:	4b2b      	ldr	r3, [pc, #172]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c4f6:	4b2a      	ldr	r3, [pc, #168]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4f8:	8a5a      	ldrh	r2, [r3, #18]
 801c4fa:	4b29      	ldr	r3, [pc, #164]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c4fc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c4fe:	4b28      	ldr	r3, [pc, #160]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c500:	8a1b      	ldrh	r3, [r3, #16]
 801c502:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c504:	4b26      	ldr	r3, [pc, #152]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c506:	2200      	movs	r2, #0
 801c508:	825a      	strh	r2, [r3, #18]
 801c50a:	e027      	b.n	801c55c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c50c:	4b24      	ldr	r3, [pc, #144]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c50e:	8a5a      	ldrh	r2, [r3, #18]
 801c510:	4b23      	ldr	r3, [pc, #140]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c512:	8a1b      	ldrh	r3, [r3, #16]
 801c514:	429a      	cmp	r2, r3
 801c516:	d91b      	bls.n	801c550 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c518:	4b21      	ldr	r3, [pc, #132]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c51a:	8a5b      	ldrh	r3, [r3, #18]
 801c51c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c520:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c522:	88fa      	ldrh	r2, [r7, #6]
 801c524:	8afb      	ldrh	r3, [r7, #22]
 801c526:	429a      	cmp	r2, r3
 801c528:	d318      	bcc.n	801c55c <TRACE_AllocateBufer+0xb4>
 801c52a:	4b1d      	ldr	r3, [pc, #116]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c52c:	8a1b      	ldrh	r3, [r3, #16]
 801c52e:	88fa      	ldrh	r2, [r7, #6]
 801c530:	429a      	cmp	r2, r3
 801c532:	d213      	bcs.n	801c55c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c534:	4b1a      	ldr	r3, [pc, #104]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c536:	2201      	movs	r2, #1
 801c538:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c53a:	4b19      	ldr	r3, [pc, #100]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c53c:	8a5a      	ldrh	r2, [r3, #18]
 801c53e:	4b18      	ldr	r3, [pc, #96]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c540:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c542:	4b17      	ldr	r3, [pc, #92]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c544:	8a1b      	ldrh	r3, [r3, #16]
 801c546:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c548:	4b15      	ldr	r3, [pc, #84]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c54a:	2200      	movs	r2, #0
 801c54c:	825a      	strh	r2, [r3, #18]
 801c54e:	e005      	b.n	801c55c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c550:	4b13      	ldr	r3, [pc, #76]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c552:	8a1a      	ldrh	r2, [r3, #16]
 801c554:	4b12      	ldr	r3, [pc, #72]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c556:	8a5b      	ldrh	r3, [r3, #18]
 801c558:	1ad3      	subs	r3, r2, r3
 801c55a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c55c:	8afa      	ldrh	r2, [r7, #22]
 801c55e:	88fb      	ldrh	r3, [r7, #6]
 801c560:	429a      	cmp	r2, r3
 801c562:	d90f      	bls.n	801c584 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c564:	4b0e      	ldr	r3, [pc, #56]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c566:	8a5a      	ldrh	r2, [r3, #18]
 801c568:	683b      	ldr	r3, [r7, #0]
 801c56a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c56c:	4b0c      	ldr	r3, [pc, #48]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c56e:	8a5a      	ldrh	r2, [r3, #18]
 801c570:	88fb      	ldrh	r3, [r7, #6]
 801c572:	4413      	add	r3, r2
 801c574:	b29b      	uxth	r3, r3
 801c576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c57a:	b29a      	uxth	r2, r3
 801c57c:	4b08      	ldr	r3, [pc, #32]	; (801c5a0 <TRACE_AllocateBufer+0xf8>)
 801c57e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c580:	2300      	movs	r3, #0
 801c582:	82bb      	strh	r3, [r7, #20]
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	f383 8810 	msr	PRIMASK, r3
}
 801c58e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c594:	4618      	mov	r0, r3
 801c596:	371c      	adds	r7, #28
 801c598:	46bd      	mov	sp, r7
 801c59a:	bc80      	pop	{r7}
 801c59c:	4770      	bx	lr
 801c59e:	bf00      	nop
 801c5a0:	20003e2c 	.word	0x20003e2c

0801c5a4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c5a4:	b480      	push	{r7}
 801c5a6:	b085      	sub	sp, #20
 801c5a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5aa:	f3ef 8310 	mrs	r3, PRIMASK
 801c5ae:	607b      	str	r3, [r7, #4]
  return(result);
 801c5b0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c5b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5b4:	b672      	cpsid	i
}
 801c5b6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c5b8:	4b08      	ldr	r3, [pc, #32]	; (801c5dc <TRACE_Lock+0x38>)
 801c5ba:	8adb      	ldrh	r3, [r3, #22]
 801c5bc:	3301      	adds	r3, #1
 801c5be:	b29a      	uxth	r2, r3
 801c5c0:	4b06      	ldr	r3, [pc, #24]	; (801c5dc <TRACE_Lock+0x38>)
 801c5c2:	82da      	strh	r2, [r3, #22]
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5c8:	68bb      	ldr	r3, [r7, #8]
 801c5ca:	f383 8810 	msr	PRIMASK, r3
}
 801c5ce:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c5d0:	bf00      	nop
 801c5d2:	3714      	adds	r7, #20
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bc80      	pop	{r7}
 801c5d8:	4770      	bx	lr
 801c5da:	bf00      	nop
 801c5dc:	20003e2c 	.word	0x20003e2c

0801c5e0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b085      	sub	sp, #20
 801c5e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5e6:	f3ef 8310 	mrs	r3, PRIMASK
 801c5ea:	607b      	str	r3, [r7, #4]
  return(result);
 801c5ec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c5ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5f0:	b672      	cpsid	i
}
 801c5f2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c5f4:	4b08      	ldr	r3, [pc, #32]	; (801c618 <TRACE_UnLock+0x38>)
 801c5f6:	8adb      	ldrh	r3, [r3, #22]
 801c5f8:	3b01      	subs	r3, #1
 801c5fa:	b29a      	uxth	r2, r3
 801c5fc:	4b06      	ldr	r3, [pc, #24]	; (801c618 <TRACE_UnLock+0x38>)
 801c5fe:	82da      	strh	r2, [r3, #22]
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c604:	68bb      	ldr	r3, [r7, #8]
 801c606:	f383 8810 	msr	PRIMASK, r3
}
 801c60a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c60c:	bf00      	nop
 801c60e:	3714      	adds	r7, #20
 801c610:	46bd      	mov	sp, r7
 801c612:	bc80      	pop	{r7}
 801c614:	4770      	bx	lr
 801c616:	bf00      	nop
 801c618:	20003e2c 	.word	0x20003e2c

0801c61c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c61c:	b480      	push	{r7}
 801c61e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c620:	4b05      	ldr	r3, [pc, #20]	; (801c638 <TRACE_IsLocked+0x1c>)
 801c622:	8adb      	ldrh	r3, [r3, #22]
 801c624:	2b00      	cmp	r3, #0
 801c626:	bf14      	ite	ne
 801c628:	2301      	movne	r3, #1
 801c62a:	2300      	moveq	r3, #0
 801c62c:	b2db      	uxtb	r3, r3
}
 801c62e:	4618      	mov	r0, r3
 801c630:	46bd      	mov	sp, r7
 801c632:	bc80      	pop	{r7}
 801c634:	4770      	bx	lr
 801c636:	bf00      	nop
 801c638:	20003e2c 	.word	0x20003e2c

0801c63c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c63c:	b480      	push	{r7}
 801c63e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c640:	4b04      	ldr	r3, [pc, #16]	; (801c654 <UTIL_LPM_Init+0x18>)
 801c642:	2200      	movs	r2, #0
 801c644:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c646:	4b04      	ldr	r3, [pc, #16]	; (801c658 <UTIL_LPM_Init+0x1c>)
 801c648:	2200      	movs	r2, #0
 801c64a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c64c:	bf00      	nop
 801c64e:	46bd      	mov	sp, r7
 801c650:	bc80      	pop	{r7}
 801c652:	4770      	bx	lr
 801c654:	20004444 	.word	0x20004444
 801c658:	20004448 	.word	0x20004448

0801c65c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c65c:	b480      	push	{r7}
 801c65e:	b087      	sub	sp, #28
 801c660:	af00      	add	r7, sp, #0
 801c662:	6078      	str	r0, [r7, #4]
 801c664:	460b      	mov	r3, r1
 801c666:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c668:	f3ef 8310 	mrs	r3, PRIMASK
 801c66c:	613b      	str	r3, [r7, #16]
  return(result);
 801c66e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c670:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c672:	b672      	cpsid	i
}
 801c674:	bf00      	nop
  
  switch( state )
 801c676:	78fb      	ldrb	r3, [r7, #3]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d008      	beq.n	801c68e <UTIL_LPM_SetStopMode+0x32>
 801c67c:	2b01      	cmp	r3, #1
 801c67e:	d10e      	bne.n	801c69e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c680:	4b0d      	ldr	r3, [pc, #52]	; (801c6b8 <UTIL_LPM_SetStopMode+0x5c>)
 801c682:	681a      	ldr	r2, [r3, #0]
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	4313      	orrs	r3, r2
 801c688:	4a0b      	ldr	r2, [pc, #44]	; (801c6b8 <UTIL_LPM_SetStopMode+0x5c>)
 801c68a:	6013      	str	r3, [r2, #0]
      break;
 801c68c:	e008      	b.n	801c6a0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	43da      	mvns	r2, r3
 801c692:	4b09      	ldr	r3, [pc, #36]	; (801c6b8 <UTIL_LPM_SetStopMode+0x5c>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	4013      	ands	r3, r2
 801c698:	4a07      	ldr	r2, [pc, #28]	; (801c6b8 <UTIL_LPM_SetStopMode+0x5c>)
 801c69a:	6013      	str	r3, [r2, #0]
      break;
 801c69c:	e000      	b.n	801c6a0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c69e:	bf00      	nop
 801c6a0:	697b      	ldr	r3, [r7, #20]
 801c6a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	f383 8810 	msr	PRIMASK, r3
}
 801c6aa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c6ac:	bf00      	nop
 801c6ae:	371c      	adds	r7, #28
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	bc80      	pop	{r7}
 801c6b4:	4770      	bx	lr
 801c6b6:	bf00      	nop
 801c6b8:	20004444 	.word	0x20004444

0801c6bc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c6bc:	b480      	push	{r7}
 801c6be:	b087      	sub	sp, #28
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	6078      	str	r0, [r7, #4]
 801c6c4:	460b      	mov	r3, r1
 801c6c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6c8:	f3ef 8310 	mrs	r3, PRIMASK
 801c6cc:	613b      	str	r3, [r7, #16]
  return(result);
 801c6ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c6d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6d2:	b672      	cpsid	i
}
 801c6d4:	bf00      	nop
  
  switch(state)
 801c6d6:	78fb      	ldrb	r3, [r7, #3]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d008      	beq.n	801c6ee <UTIL_LPM_SetOffMode+0x32>
 801c6dc:	2b01      	cmp	r3, #1
 801c6de:	d10e      	bne.n	801c6fe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c6e0:	4b0d      	ldr	r3, [pc, #52]	; (801c718 <UTIL_LPM_SetOffMode+0x5c>)
 801c6e2:	681a      	ldr	r2, [r3, #0]
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	4313      	orrs	r3, r2
 801c6e8:	4a0b      	ldr	r2, [pc, #44]	; (801c718 <UTIL_LPM_SetOffMode+0x5c>)
 801c6ea:	6013      	str	r3, [r2, #0]
      break;
 801c6ec:	e008      	b.n	801c700 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	43da      	mvns	r2, r3
 801c6f2:	4b09      	ldr	r3, [pc, #36]	; (801c718 <UTIL_LPM_SetOffMode+0x5c>)
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	4013      	ands	r3, r2
 801c6f8:	4a07      	ldr	r2, [pc, #28]	; (801c718 <UTIL_LPM_SetOffMode+0x5c>)
 801c6fa:	6013      	str	r3, [r2, #0]
      break;
 801c6fc:	e000      	b.n	801c700 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c6fe:	bf00      	nop
 801c700:	697b      	ldr	r3, [r7, #20]
 801c702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	f383 8810 	msr	PRIMASK, r3
}
 801c70a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c70c:	bf00      	nop
 801c70e:	371c      	adds	r7, #28
 801c710:	46bd      	mov	sp, r7
 801c712:	bc80      	pop	{r7}
 801c714:	4770      	bx	lr
 801c716:	bf00      	nop
 801c718:	20004448 	.word	0x20004448

0801c71c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}
int32_t LED_control2(int value);
void UTIL_LPM_EnterLowPower( void )
{
 801c71c:	b580      	push	{r7, lr}
 801c71e:	b084      	sub	sp, #16
 801c720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c722:	f3ef 8310 	mrs	r3, PRIMASK
 801c726:	60bb      	str	r3, [r7, #8]
  return(result);
 801c728:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c72a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c72c:	b672      	cpsid	i
}
 801c72e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c730:	4b12      	ldr	r3, [pc, #72]	; (801c77c <UTIL_LPM_EnterLowPower+0x60>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d006      	beq.n	801c746 <UTIL_LPM_EnterLowPower+0x2a>
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
	 // LED_control2(1);
      UTIL_PowerDriver.EnterSleepMode( );
 801c738:	4b11      	ldr	r3, [pc, #68]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c73e:	4b10      	ldr	r3, [pc, #64]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c740:	685b      	ldr	r3, [r3, #4]
 801c742:	4798      	blx	r3
 801c744:	e010      	b.n	801c768 <UTIL_LPM_EnterLowPower+0x4c>
      //LED_control2(0);
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c746:	4b0f      	ldr	r3, [pc, #60]	; (801c784 <UTIL_LPM_EnterLowPower+0x68>)
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d006      	beq.n	801c75c <UTIL_LPM_EnterLowPower+0x40>
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */

        UTIL_PowerDriver.EnterStopMode( );
 801c74e:	4b0c      	ldr	r3, [pc, #48]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c750:	689b      	ldr	r3, [r3, #8]
 801c752:	4798      	blx	r3
        //__asm volatile( "wfi" );
        UTIL_PowerDriver.ExitStopMode( );
 801c754:	4b0a      	ldr	r3, [pc, #40]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c756:	68db      	ldr	r3, [r3, #12]
 801c758:	4798      	blx	r3
 801c75a:	e005      	b.n	801c768 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c75c:	4b08      	ldr	r3, [pc, #32]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c75e:	691b      	ldr	r3, [r3, #16]
 801c760:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c762:	4b07      	ldr	r3, [pc, #28]	; (801c780 <UTIL_LPM_EnterLowPower+0x64>)
 801c764:	695b      	ldr	r3, [r3, #20]
 801c766:	4798      	blx	r3
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	f383 8810 	msr	PRIMASK, r3
}
 801c772:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c774:	bf00      	nop
 801c776:	3710      	adds	r7, #16
 801c778:	46bd      	mov	sp, r7
 801c77a:	bd80      	pop	{r7, pc}
 801c77c:	20004444 	.word	0x20004444
 801c780:	0801e1b8 	.word	0x0801e1b8
 801c784:	20004448 	.word	0x20004448

0801c788 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c788:	b480      	push	{r7}
 801c78a:	b087      	sub	sp, #28
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	60f8      	str	r0, [r7, #12]
 801c790:	60b9      	str	r1, [r7, #8]
 801c792:	4613      	mov	r3, r2
 801c794:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c79a:	68bb      	ldr	r3, [r7, #8]
 801c79c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c79e:	e007      	b.n	801c7b0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c7a0:	693a      	ldr	r2, [r7, #16]
 801c7a2:	1c53      	adds	r3, r2, #1
 801c7a4:	613b      	str	r3, [r7, #16]
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	1c59      	adds	r1, r3, #1
 801c7aa:	6179      	str	r1, [r7, #20]
 801c7ac:	7812      	ldrb	r2, [r2, #0]
 801c7ae:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c7b0:	88fb      	ldrh	r3, [r7, #6]
 801c7b2:	1e5a      	subs	r2, r3, #1
 801c7b4:	80fa      	strh	r2, [r7, #6]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d1f2      	bne.n	801c7a0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c7ba:	bf00      	nop
 801c7bc:	bf00      	nop
 801c7be:	371c      	adds	r7, #28
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bc80      	pop	{r7}
 801c7c4:	4770      	bx	lr

0801c7c6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c7c6:	b480      	push	{r7}
 801c7c8:	b085      	sub	sp, #20
 801c7ca:	af00      	add	r7, sp, #0
 801c7cc:	6078      	str	r0, [r7, #4]
 801c7ce:	460b      	mov	r3, r1
 801c7d0:	70fb      	strb	r3, [r7, #3]
 801c7d2:	4613      	mov	r3, r2
 801c7d4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c7da:	e004      	b.n	801c7e6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	1c5a      	adds	r2, r3, #1
 801c7e0:	60fa      	str	r2, [r7, #12]
 801c7e2:	78fa      	ldrb	r2, [r7, #3]
 801c7e4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c7e6:	883b      	ldrh	r3, [r7, #0]
 801c7e8:	1e5a      	subs	r2, r3, #1
 801c7ea:	803a      	strh	r2, [r7, #0]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d1f5      	bne.n	801c7dc <UTIL_MEM_set_8+0x16>
  }
}
 801c7f0:	bf00      	nop
 801c7f2:	bf00      	nop
 801c7f4:	3714      	adds	r7, #20
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	bc80      	pop	{r7}
 801c7fa:	4770      	bx	lr

0801c7fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b08c      	sub	sp, #48	; 0x30
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c804:	4b67      	ldr	r3, [pc, #412]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c80a:	4b66      	ldr	r3, [pc, #408]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c80c:	681a      	ldr	r2, [r3, #0]
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	4013      	ands	r3, r2
 801c812:	4a64      	ldr	r2, [pc, #400]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c814:	6013      	str	r3, [r2, #0]
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   * y5dem l task lokl ma 8ir ma ythay3 hata w7da w kan tahma event jet t9os w ymchilha
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c816:	e083      	b.n	801c920 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801c818:	2300      	movs	r3, #0
 801c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower   //////// l while ychouf kan thama task o5rin 3indhm l awlawiya
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c81c:	e002      	b.n	801c824 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c820:	3301      	adds	r3, #1
 801c822:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c824:	4a60      	ldr	r2, [pc, #384]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c828:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c82c:	4b5f      	ldr	r3, [pc, #380]	; (801c9ac <UTIL_SEQ_Run+0x1b0>)
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	401a      	ands	r2, r3
 801c832:	4b5c      	ldr	r3, [pc, #368]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	4013      	ands	r3, r2
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d0f0      	beq.n	801c81e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c83c:	4a5a      	ldr	r2, [pc, #360]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c840:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c844:	4b59      	ldr	r3, [pc, #356]	; (801c9ac <UTIL_SEQ_Run+0x1b0>)
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	401a      	ands	r2, r3
 801c84a:	4b56      	ldr	r3, [pc, #344]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4013      	ands	r3, r2
 801c850:	627b      	str	r3, [r7, #36]	; 0x24
     * If on the next UTIL_SEQ_RUN(), the two same flags are set again, the round_robin mask will mask out the first flag
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c852:	4a55      	ldr	r2, [pc, #340]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c856:	00db      	lsls	r3, r3, #3
 801c858:	4413      	add	r3, r2
 801c85a:	685a      	ldr	r2, [r3, #4]
 801c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c85e:	4013      	ands	r3, r2
 801c860:	2b00      	cmp	r3, #0
 801c862:	d106      	bne.n	801c872 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c864:	4a50      	ldr	r2, [pc, #320]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c868:	00db      	lsls	r3, r3, #3
 801c86a:	4413      	add	r3, r2
 801c86c:	f04f 32ff 	mov.w	r2, #4294967295
 801c870:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c872:	4a4d      	ldr	r2, [pc, #308]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c876:	00db      	lsls	r3, r3, #3
 801c878:	4413      	add	r3, r2
 801c87a:	685a      	ldr	r2, [r3, #4]
 801c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c87e:	4013      	ands	r3, r2
 801c880:	4618      	mov	r0, r3
 801c882:	f000 f8f9 	bl	801ca78 <SEQ_BitPosition>
 801c886:	4603      	mov	r3, r0
 801c888:	461a      	mov	r2, r3
 801c88a:	4b49      	ldr	r3, [pc, #292]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c88c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c88e:	4a46      	ldr	r2, [pc, #280]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c892:	00db      	lsls	r3, r3, #3
 801c894:	4413      	add	r3, r2
 801c896:	685a      	ldr	r2, [r3, #4]
 801c898:	4b45      	ldr	r3, [pc, #276]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	2101      	movs	r1, #1
 801c89e:	fa01 f303 	lsl.w	r3, r1, r3
 801c8a2:	43db      	mvns	r3, r3
 801c8a4:	401a      	ands	r2, r3
 801c8a6:	4940      	ldr	r1, [pc, #256]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8aa:	00db      	lsls	r3, r3, #3
 801c8ac:	440b      	add	r3, r1
 801c8ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8b0:	f3ef 8310 	mrs	r3, PRIMASK
 801c8b4:	61bb      	str	r3, [r7, #24]
  return(result);
 801c8b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c8b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8ba:	b672      	cpsid	i
}
 801c8bc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c8be:	4b3c      	ldr	r3, [pc, #240]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	fa02 f303 	lsl.w	r3, r2, r3
 801c8c8:	43da      	mvns	r2, r3
 801c8ca:	4b3a      	ldr	r3, [pc, #232]	; (801c9b4 <UTIL_SEQ_Run+0x1b8>)
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	4013      	ands	r3, r2
 801c8d0:	4a38      	ldr	r2, [pc, #224]	; (801c9b4 <UTIL_SEQ_Run+0x1b8>)
 801c8d2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c8d4:	2302      	movs	r3, #2
 801c8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c8d8:	e013      	b.n	801c902 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8dc:	3b01      	subs	r3, #1
 801c8de:	4a32      	ldr	r2, [pc, #200]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c8e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c8e4:	4b32      	ldr	r3, [pc, #200]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	2201      	movs	r2, #1
 801c8ea:	fa02 f303 	lsl.w	r3, r2, r3
 801c8ee:	43da      	mvns	r2, r3
 801c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8f2:	3b01      	subs	r3, #1
 801c8f4:	400a      	ands	r2, r1
 801c8f6:	492c      	ldr	r1, [pc, #176]	; (801c9a8 <UTIL_SEQ_Run+0x1ac>)
 801c8f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8fe:	3b01      	subs	r3, #1
 801c900:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c904:	2b00      	cmp	r3, #0
 801c906:	d1e8      	bne.n	801c8da <UTIL_SEQ_Run+0xde>
 801c908:	6a3b      	ldr	r3, [r7, #32]
 801c90a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	f383 8810 	msr	PRIMASK, r3
}
 801c912:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c914:	4b26      	ldr	r3, [pc, #152]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c916:	681b      	ldr	r3, [r3, #0]
 801c918:	4a27      	ldr	r2, [pc, #156]	; (801c9b8 <UTIL_SEQ_Run+0x1bc>)
 801c91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c91e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c920:	4b24      	ldr	r3, [pc, #144]	; (801c9b4 <UTIL_SEQ_Run+0x1b8>)
 801c922:	681a      	ldr	r2, [r3, #0]
 801c924:	4b21      	ldr	r3, [pc, #132]	; (801c9ac <UTIL_SEQ_Run+0x1b0>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	401a      	ands	r2, r3
 801c92a:	4b1e      	ldr	r3, [pc, #120]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	4013      	ands	r3, r2
 801c930:	2b00      	cmp	r3, #0
 801c932:	d007      	beq.n	801c944 <UTIL_SEQ_Run+0x148>
 801c934:	4b21      	ldr	r3, [pc, #132]	; (801c9bc <UTIL_SEQ_Run+0x1c0>)
 801c936:	681a      	ldr	r2, [r3, #0]
 801c938:	4b21      	ldr	r3, [pc, #132]	; (801c9c0 <UTIL_SEQ_Run+0x1c4>)
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	4013      	ands	r3, r2
 801c93e:	2b00      	cmp	r3, #0
 801c940:	f43f af6a 	beq.w	801c818 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c944:	4b1a      	ldr	r3, [pc, #104]	; (801c9b0 <UTIL_SEQ_Run+0x1b4>)
 801c946:	f04f 32ff 	mov.w	r2, #4294967295
 801c94a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c94c:	f000 f888 	bl	801ca60 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c950:	f3ef 8310 	mrs	r3, PRIMASK
 801c954:	613b      	str	r3, [r7, #16]
  return(result);
 801c956:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c95a:	b672      	cpsid	i
}
 801c95c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c95e:	4b15      	ldr	r3, [pc, #84]	; (801c9b4 <UTIL_SEQ_Run+0x1b8>)
 801c960:	681a      	ldr	r2, [r3, #0]
 801c962:	4b12      	ldr	r3, [pc, #72]	; (801c9ac <UTIL_SEQ_Run+0x1b0>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	401a      	ands	r2, r3
 801c968:	4b0e      	ldr	r3, [pc, #56]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	4013      	ands	r3, r2
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d108      	bne.n	801c984 <UTIL_SEQ_Run+0x188>
 801c972:	4b12      	ldr	r3, [pc, #72]	; (801c9bc <UTIL_SEQ_Run+0x1c0>)
 801c974:	681a      	ldr	r2, [r3, #0]
 801c976:	4b12      	ldr	r3, [pc, #72]	; (801c9c0 <UTIL_SEQ_Run+0x1c4>)
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	4013      	ands	r3, r2
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d101      	bne.n	801c984 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801c980:	f7e5 f820 	bl	80019c4 <UTIL_SEQ_Idle>
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	f383 8810 	msr	PRIMASK, r3
}
 801c98e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c990:	f000 f86c 	bl	801ca6c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c994:	4a03      	ldr	r2, [pc, #12]	; (801c9a4 <UTIL_SEQ_Run+0x1a8>)
 801c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c998:	6013      	str	r3, [r2, #0]

  return;
 801c99a:	bf00      	nop
}
 801c99c:	3730      	adds	r7, #48	; 0x30
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	2000010c 	.word	0x2000010c
 801c9a8:	200044dc 	.word	0x200044dc
 801c9ac:	20000108 	.word	0x20000108
 801c9b0:	20004458 	.word	0x20004458
 801c9b4:	2000444c 	.word	0x2000444c
 801c9b8:	2000445c 	.word	0x2000445c
 801c9bc:	20004450 	.word	0x20004450
 801c9c0:	20004454 	.word	0x20004454

0801c9c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b088      	sub	sp, #32
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	60f8      	str	r0, [r7, #12]
 801c9cc:	60b9      	str	r1, [r7, #8]
 801c9ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9d0:	f3ef 8310 	mrs	r3, PRIMASK
 801c9d4:	617b      	str	r3, [r7, #20]
  return(result);
 801c9d6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c9d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9da:	b672      	cpsid	i
}
 801c9dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c9de:	68f8      	ldr	r0, [r7, #12]
 801c9e0:	f000 f84a 	bl	801ca78 <SEQ_BitPosition>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	4619      	mov	r1, r3
 801c9e8:	4a06      	ldr	r2, [pc, #24]	; (801ca04 <UTIL_SEQ_RegTask+0x40>)
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c9f0:	69fb      	ldr	r3, [r7, #28]
 801c9f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9f4:	69bb      	ldr	r3, [r7, #24]
 801c9f6:	f383 8810 	msr	PRIMASK, r3
}
 801c9fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c9fc:	bf00      	nop
}
 801c9fe:	3720      	adds	r7, #32
 801ca00:	46bd      	mov	sp, r7
 801ca02:	bd80      	pop	{r7, pc}
 801ca04:	2000445c 	.word	0x2000445c

0801ca08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ca08:	b480      	push	{r7}
 801ca0a:	b087      	sub	sp, #28
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
 801ca10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca12:	f3ef 8310 	mrs	r3, PRIMASK
 801ca16:	60fb      	str	r3, [r7, #12]
  return(result);
 801ca18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ca1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca1c:	b672      	cpsid	i
}
 801ca1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ca20:	4b0d      	ldr	r3, [pc, #52]	; (801ca58 <UTIL_SEQ_SetTask+0x50>)
 801ca22:	681a      	ldr	r2, [r3, #0]
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	4313      	orrs	r3, r2
 801ca28:	4a0b      	ldr	r2, [pc, #44]	; (801ca58 <UTIL_SEQ_SetTask+0x50>)
 801ca2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ca2c:	4a0b      	ldr	r2, [pc, #44]	; (801ca5c <UTIL_SEQ_SetTask+0x54>)
 801ca2e:	683b      	ldr	r3, [r7, #0]
 801ca30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	431a      	orrs	r2, r3
 801ca38:	4908      	ldr	r1, [pc, #32]	; (801ca5c <UTIL_SEQ_SetTask+0x54>)
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ca40:	697b      	ldr	r3, [r7, #20]
 801ca42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca44:	693b      	ldr	r3, [r7, #16]
 801ca46:	f383 8810 	msr	PRIMASK, r3
}
 801ca4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ca4c:	bf00      	nop
}
 801ca4e:	371c      	adds	r7, #28
 801ca50:	46bd      	mov	sp, r7
 801ca52:	bc80      	pop	{r7}
 801ca54:	4770      	bx	lr
 801ca56:	bf00      	nop
 801ca58:	2000444c 	.word	0x2000444c
 801ca5c:	200044dc 	.word	0x200044dc

0801ca60 <UTIL_SEQ_PreIdle>:
//	UTIL_LPM_EnterLowPower();
	return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ca60:	b480      	push	{r7}
 801ca62:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ca64:	bf00      	nop
}
 801ca66:	46bd      	mov	sp, r7
 801ca68:	bc80      	pop	{r7}
 801ca6a:	4770      	bx	lr

0801ca6c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ca6c:	b480      	push	{r7}
 801ca6e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ca70:	bf00      	nop
}
 801ca72:	46bd      	mov	sp, r7
 801ca74:	bc80      	pop	{r7}
 801ca76:	4770      	bx	lr

0801ca78 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ca78:	b480      	push	{r7}
 801ca7a:	b085      	sub	sp, #20
 801ca7c:	af00      	add	r7, sp, #0
 801ca7e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801ca80:	2300      	movs	r3, #0
 801ca82:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	0c1b      	lsrs	r3, r3, #16
 801ca88:	041b      	lsls	r3, r3, #16
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d104      	bne.n	801ca98 <SEQ_BitPosition+0x20>
 801ca8e:	2310      	movs	r3, #16
 801ca90:	73fb      	strb	r3, [r7, #15]
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	041b      	lsls	r3, r3, #16
 801ca96:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d105      	bne.n	801caae <SEQ_BitPosition+0x36>
 801caa2:	7bfb      	ldrb	r3, [r7, #15]
 801caa4:	3308      	adds	r3, #8
 801caa6:	73fb      	strb	r3, [r7, #15]
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	021b      	lsls	r3, r3, #8
 801caac:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d105      	bne.n	801cac4 <SEQ_BitPosition+0x4c>
 801cab8:	7bfb      	ldrb	r3, [r7, #15]
 801caba:	3304      	adds	r3, #4
 801cabc:	73fb      	strb	r3, [r7, #15]
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	011b      	lsls	r3, r3, #4
 801cac2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	0f1b      	lsrs	r3, r3, #28
 801cac8:	4a06      	ldr	r2, [pc, #24]	; (801cae4 <SEQ_BitPosition+0x6c>)
 801caca:	5cd2      	ldrb	r2, [r2, r3]
 801cacc:	7bfb      	ldrb	r3, [r7, #15]
 801cace:	4413      	add	r3, r2
 801cad0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cad2:	7bfb      	ldrb	r3, [r7, #15]
 801cad4:	f1c3 031f 	rsb	r3, r3, #31
 801cad8:	b2db      	uxtb	r3, r3
}
 801cada:	4618      	mov	r0, r3
 801cadc:	3714      	adds	r7, #20
 801cade:	46bd      	mov	sp, r7
 801cae0:	bc80      	pop	{r7}
 801cae2:	4770      	bx	lr
 801cae4:	0801e7f0 	.word	0x0801e7f0

0801cae8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cae8:	b082      	sub	sp, #8
 801caea:	b480      	push	{r7}
 801caec:	b087      	sub	sp, #28
 801caee:	af00      	add	r7, sp, #0
 801caf0:	60f8      	str	r0, [r7, #12]
 801caf2:	1d38      	adds	r0, r7, #4
 801caf4:	e880 0006 	stmia.w	r0, {r1, r2}
 801caf8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801cafa:	2300      	movs	r3, #0
 801cafc:	613b      	str	r3, [r7, #16]
 801cafe:	2300      	movs	r3, #0
 801cb00:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cb02:	687a      	ldr	r2, [r7, #4]
 801cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb06:	4413      	add	r3, r2
 801cb08:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cb0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cb0e:	b29a      	uxth	r2, r3
 801cb10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cb14:	b29b      	uxth	r3, r3
 801cb16:	4413      	add	r3, r2
 801cb18:	b29b      	uxth	r3, r3
 801cb1a:	b21b      	sxth	r3, r3
 801cb1c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cb1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cb26:	db0a      	blt.n	801cb3e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cb28:	693b      	ldr	r3, [r7, #16]
 801cb2a:	3301      	adds	r3, #1
 801cb2c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cb2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb32:	b29b      	uxth	r3, r3
 801cb34:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	b21b      	sxth	r3, r3
 801cb3c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	461a      	mov	r2, r3
 801cb42:	f107 0310 	add.w	r3, r7, #16
 801cb46:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cb4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cb4e:	68f8      	ldr	r0, [r7, #12]
 801cb50:	371c      	adds	r7, #28
 801cb52:	46bd      	mov	sp, r7
 801cb54:	bc80      	pop	{r7}
 801cb56:	b002      	add	sp, #8
 801cb58:	4770      	bx	lr

0801cb5a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801cb5a:	b082      	sub	sp, #8
 801cb5c:	b480      	push	{r7}
 801cb5e:	b087      	sub	sp, #28
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	60f8      	str	r0, [r7, #12]
 801cb64:	1d38      	adds	r0, r7, #4
 801cb66:	e880 0006 	stmia.w	r0, {r1, r2}
 801cb6a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	613b      	str	r3, [r7, #16]
 801cb70:	2300      	movs	r3, #0
 801cb72:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801cb74:	687a      	ldr	r2, [r7, #4]
 801cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb78:	1ad3      	subs	r3, r2, r3
 801cb7a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801cb7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cb80:	b29a      	uxth	r2, r3
 801cb82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	1ad3      	subs	r3, r2, r3
 801cb8a:	b29b      	uxth	r3, r3
 801cb8c:	b21b      	sxth	r3, r3
 801cb8e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801cb90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	da0a      	bge.n	801cbae <SysTimeSub+0x54>
  {
    c.Seconds--;
 801cb98:	693b      	ldr	r3, [r7, #16]
 801cb9a:	3b01      	subs	r3, #1
 801cb9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801cb9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cba2:	b29b      	uxth	r3, r3
 801cba4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cba8:	b29b      	uxth	r3, r3
 801cbaa:	b21b      	sxth	r3, r3
 801cbac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	461a      	mov	r2, r3
 801cbb2:	f107 0310 	add.w	r3, r7, #16
 801cbb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cbba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cbbe:	68f8      	ldr	r0, [r7, #12]
 801cbc0:	371c      	adds	r7, #28
 801cbc2:	46bd      	mov	sp, r7
 801cbc4:	bc80      	pop	{r7}
 801cbc6:	b002      	add	sp, #8
 801cbc8:	4770      	bx	lr
	...

0801cbcc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b088      	sub	sp, #32
 801cbd0:	af02      	add	r7, sp, #8
 801cbd2:	463b      	mov	r3, r7
 801cbd4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cbd8:	2300      	movs	r3, #0
 801cbda:	60bb      	str	r3, [r7, #8]
 801cbdc:	2300      	movs	r3, #0
 801cbde:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cbe0:	4b10      	ldr	r3, [pc, #64]	; (801cc24 <SysTimeSet+0x58>)
 801cbe2:	691b      	ldr	r3, [r3, #16]
 801cbe4:	f107 0208 	add.w	r2, r7, #8
 801cbe8:	3204      	adds	r2, #4
 801cbea:	4610      	mov	r0, r2
 801cbec:	4798      	blx	r3
 801cbee:	4603      	mov	r3, r0
 801cbf0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cbf2:	f107 0010 	add.w	r0, r7, #16
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	9300      	str	r3, [sp, #0]
 801cbfa:	68bb      	ldr	r3, [r7, #8]
 801cbfc:	463a      	mov	r2, r7
 801cbfe:	ca06      	ldmia	r2, {r1, r2}
 801cc00:	f7ff ffab 	bl	801cb5a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cc04:	4b07      	ldr	r3, [pc, #28]	; (801cc24 <SysTimeSet+0x58>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	693a      	ldr	r2, [r7, #16]
 801cc0a:	4610      	mov	r0, r2
 801cc0c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cc0e:	4b05      	ldr	r3, [pc, #20]	; (801cc24 <SysTimeSet+0x58>)
 801cc10:	689b      	ldr	r3, [r3, #8]
 801cc12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801cc16:	4610      	mov	r0, r2
 801cc18:	4798      	blx	r3
}
 801cc1a:	bf00      	nop
 801cc1c:	3718      	adds	r7, #24
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	bd80      	pop	{r7, pc}
 801cc22:	bf00      	nop
 801cc24:	0801e29c 	.word	0x0801e29c

0801cc28 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b08a      	sub	sp, #40	; 0x28
 801cc2c:	af02      	add	r7, sp, #8
 801cc2e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cc30:	2300      	movs	r3, #0
 801cc32:	61bb      	str	r3, [r7, #24]
 801cc34:	2300      	movs	r3, #0
 801cc36:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cc38:	2300      	movs	r3, #0
 801cc3a:	613b      	str	r3, [r7, #16]
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cc40:	4b14      	ldr	r3, [pc, #80]	; (801cc94 <SysTimeGet+0x6c>)
 801cc42:	691b      	ldr	r3, [r3, #16]
 801cc44:	f107 0218 	add.w	r2, r7, #24
 801cc48:	3204      	adds	r2, #4
 801cc4a:	4610      	mov	r0, r2
 801cc4c:	4798      	blx	r3
 801cc4e:	4603      	mov	r3, r0
 801cc50:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cc52:	4b10      	ldr	r3, [pc, #64]	; (801cc94 <SysTimeGet+0x6c>)
 801cc54:	68db      	ldr	r3, [r3, #12]
 801cc56:	4798      	blx	r3
 801cc58:	4603      	mov	r3, r0
 801cc5a:	b21b      	sxth	r3, r3
 801cc5c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cc5e:	4b0d      	ldr	r3, [pc, #52]	; (801cc94 <SysTimeGet+0x6c>)
 801cc60:	685b      	ldr	r3, [r3, #4]
 801cc62:	4798      	blx	r3
 801cc64:	4603      	mov	r3, r0
 801cc66:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cc68:	f107 0010 	add.w	r0, r7, #16
 801cc6c:	69fb      	ldr	r3, [r7, #28]
 801cc6e:	9300      	str	r3, [sp, #0]
 801cc70:	69bb      	ldr	r3, [r7, #24]
 801cc72:	f107 0208 	add.w	r2, r7, #8
 801cc76:	ca06      	ldmia	r2, {r1, r2}
 801cc78:	f7ff ff36 	bl	801cae8 <SysTimeAdd>

  return sysTime;
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	461a      	mov	r2, r3
 801cc80:	f107 0310 	add.w	r3, r7, #16
 801cc84:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cc88:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cc8c:	6878      	ldr	r0, [r7, #4]
 801cc8e:	3720      	adds	r7, #32
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}
 801cc94:	0801e29c 	.word	0x0801e29c

0801cc98 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b084      	sub	sp, #16
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cca0:	2300      	movs	r3, #0
 801cca2:	60bb      	str	r3, [r7, #8]
 801cca4:	2300      	movs	r3, #0
 801cca6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cca8:	4b0a      	ldr	r3, [pc, #40]	; (801ccd4 <SysTimeGetMcuTime+0x3c>)
 801ccaa:	691b      	ldr	r3, [r3, #16]
 801ccac:	f107 0208 	add.w	r2, r7, #8
 801ccb0:	3204      	adds	r2, #4
 801ccb2:	4610      	mov	r0, r2
 801ccb4:	4798      	blx	r3
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	461a      	mov	r2, r3
 801ccbe:	f107 0308 	add.w	r3, r7, #8
 801ccc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ccc6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ccca:	6878      	ldr	r0, [r7, #4]
 801cccc:	3710      	adds	r7, #16
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	bd80      	pop	{r7, pc}
 801ccd2:	bf00      	nop
 801ccd4:	0801e29c 	.word	0x0801e29c

0801ccd8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b088      	sub	sp, #32
 801ccdc:	af02      	add	r7, sp, #8
 801ccde:	463b      	mov	r3, r7
 801cce0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cce4:	4b0f      	ldr	r3, [pc, #60]	; (801cd24 <SysTimeToMs+0x4c>)
 801cce6:	68db      	ldr	r3, [r3, #12]
 801cce8:	4798      	blx	r3
 801ccea:	4603      	mov	r3, r0
 801ccec:	b21b      	sxth	r3, r3
 801ccee:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ccf0:	4b0c      	ldr	r3, [pc, #48]	; (801cd24 <SysTimeToMs+0x4c>)
 801ccf2:	685b      	ldr	r3, [r3, #4]
 801ccf4:	4798      	blx	r3
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ccfa:	f107 0008 	add.w	r0, r7, #8
 801ccfe:	697b      	ldr	r3, [r7, #20]
 801cd00:	9300      	str	r3, [sp, #0]
 801cd02:	693b      	ldr	r3, [r7, #16]
 801cd04:	463a      	mov	r2, r7
 801cd06:	ca06      	ldmia	r2, {r1, r2}
 801cd08:	f7ff ff27 	bl	801cb5a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd12:	fb02 f303 	mul.w	r3, r2, r3
 801cd16:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801cd1a:	4413      	add	r3, r2
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	3718      	adds	r7, #24
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	0801e29c 	.word	0x0801e29c

0801cd28 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b08a      	sub	sp, #40	; 0x28
 801cd2c:	af02      	add	r7, sp, #8
 801cd2e:	6078      	str	r0, [r7, #4]
 801cd30:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	4a19      	ldr	r2, [pc, #100]	; (801cd9c <SysTimeFromMs+0x74>)
 801cd36:	fba2 2303 	umull	r2, r3, r2, r3
 801cd3a:	099b      	lsrs	r3, r3, #6
 801cd3c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801cd3e:	69fb      	ldr	r3, [r7, #28]
 801cd40:	617b      	str	r3, [r7, #20]
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	b29a      	uxth	r2, r3
 801cd46:	69fb      	ldr	r3, [r7, #28]
 801cd48:	b29b      	uxth	r3, r3
 801cd4a:	4619      	mov	r1, r3
 801cd4c:	0149      	lsls	r1, r1, #5
 801cd4e:	1ac9      	subs	r1, r1, r3
 801cd50:	0089      	lsls	r1, r1, #2
 801cd52:	440b      	add	r3, r1
 801cd54:	00db      	lsls	r3, r3, #3
 801cd56:	b29b      	uxth	r3, r3
 801cd58:	1ad3      	subs	r3, r2, r3
 801cd5a:	b29b      	uxth	r3, r3
 801cd5c:	b21b      	sxth	r3, r3
 801cd5e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801cd60:	f107 030c 	add.w	r3, r7, #12
 801cd64:	2200      	movs	r2, #0
 801cd66:	601a      	str	r2, [r3, #0]
 801cd68:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cd6a:	4b0d      	ldr	r3, [pc, #52]	; (801cda0 <SysTimeFromMs+0x78>)
 801cd6c:	68db      	ldr	r3, [r3, #12]
 801cd6e:	4798      	blx	r3
 801cd70:	4603      	mov	r3, r0
 801cd72:	b21b      	sxth	r3, r3
 801cd74:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cd76:	4b0a      	ldr	r3, [pc, #40]	; (801cda0 <SysTimeFromMs+0x78>)
 801cd78:	685b      	ldr	r3, [r3, #4]
 801cd7a:	4798      	blx	r3
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801cd80:	6878      	ldr	r0, [r7, #4]
 801cd82:	693b      	ldr	r3, [r7, #16]
 801cd84:	9300      	str	r3, [sp, #0]
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	f107 0214 	add.w	r2, r7, #20
 801cd8c:	ca06      	ldmia	r2, {r1, r2}
 801cd8e:	f7ff feab 	bl	801cae8 <SysTimeAdd>
}
 801cd92:	6878      	ldr	r0, [r7, #4]
 801cd94:	3720      	adds	r7, #32
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	10624dd3 	.word	0x10624dd3
 801cda0:	0801e29c 	.word	0x0801e29c

0801cda4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cda8:	4b04      	ldr	r3, [pc, #16]	; (801cdbc <UTIL_TIMER_Init+0x18>)
 801cdaa:	2200      	movs	r2, #0
 801cdac:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cdae:	4b04      	ldr	r3, [pc, #16]	; (801cdc0 <UTIL_TIMER_Init+0x1c>)
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	4798      	blx	r3
 801cdb4:	4603      	mov	r3, r0
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	bd80      	pop	{r7, pc}
 801cdba:	bf00      	nop
 801cdbc:	200044ec 	.word	0x200044ec
 801cdc0:	0801e270 	.word	0x0801e270

0801cdc4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b084      	sub	sp, #16
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	60f8      	str	r0, [r7, #12]
 801cdcc:	60b9      	str	r1, [r7, #8]
 801cdce:	603b      	str	r3, [r7, #0]
 801cdd0:	4613      	mov	r3, r2
 801cdd2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d023      	beq.n	801ce22 <UTIL_TIMER_Create+0x5e>
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d020      	beq.n	801ce22 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	2200      	movs	r2, #0
 801cde4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cde6:	4b11      	ldr	r3, [pc, #68]	; (801ce2c <UTIL_TIMER_Create+0x68>)
 801cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdea:	68b8      	ldr	r0, [r7, #8]
 801cdec:	4798      	blx	r3
 801cdee:	4602      	mov	r2, r0
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	2200      	movs	r2, #0
 801cdfe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	2200      	movs	r2, #0
 801ce04:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	683a      	ldr	r2, [r7, #0]
 801ce0a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	69ba      	ldr	r2, [r7, #24]
 801ce10:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	79fa      	ldrb	r2, [r7, #7]
 801ce16:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801ce1e:	2300      	movs	r3, #0
 801ce20:	e000      	b.n	801ce24 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801ce22:	2301      	movs	r3, #1
  }
}
 801ce24:	4618      	mov	r0, r3
 801ce26:	3710      	adds	r7, #16
 801ce28:	46bd      	mov	sp, r7
 801ce2a:	bd80      	pop	{r7, pc}
 801ce2c:	0801e270 	.word	0x0801e270

0801ce30 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b08a      	sub	sp, #40	; 0x28
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ce38:	2300      	movs	r3, #0
 801ce3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d056      	beq.n	801cef2 <UTIL_TIMER_Start+0xc2>
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f000 f9a9 	bl	801d19c <TimerExists>
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	f083 0301 	eor.w	r3, r3, #1
 801ce50:	b2db      	uxtb	r3, r3
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d04d      	beq.n	801cef2 <UTIL_TIMER_Start+0xc2>
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	7a5b      	ldrb	r3, [r3, #9]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d149      	bne.n	801cef2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce5e:	f3ef 8310 	mrs	r3, PRIMASK
 801ce62:	613b      	str	r3, [r7, #16]
  return(result);
 801ce64:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ce66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce68:	b672      	cpsid	i
}
 801ce6a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	685b      	ldr	r3, [r3, #4]
 801ce70:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ce72:	4b24      	ldr	r3, [pc, #144]	; (801cf04 <UTIL_TIMER_Start+0xd4>)
 801ce74:	6a1b      	ldr	r3, [r3, #32]
 801ce76:	4798      	blx	r3
 801ce78:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ce7a:	6a3a      	ldr	r2, [r7, #32]
 801ce7c:	69bb      	ldr	r3, [r7, #24]
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	d201      	bcs.n	801ce86 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ce82:	69bb      	ldr	r3, [r7, #24]
 801ce84:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	6a3a      	ldr	r2, [r7, #32]
 801ce8a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2200      	movs	r2, #0
 801ce90:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	2201      	movs	r2, #1
 801ce96:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ce9e:	4b1a      	ldr	r3, [pc, #104]	; (801cf08 <UTIL_TIMER_Start+0xd8>)
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d106      	bne.n	801ceb4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cea6:	4b17      	ldr	r3, [pc, #92]	; (801cf04 <UTIL_TIMER_Start+0xd4>)
 801cea8:	691b      	ldr	r3, [r3, #16]
 801ceaa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ceac:	6878      	ldr	r0, [r7, #4]
 801ceae:	f000 f9eb 	bl	801d288 <TimerInsertNewHeadTimer>
 801ceb2:	e017      	b.n	801cee4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ceb4:	4b13      	ldr	r3, [pc, #76]	; (801cf04 <UTIL_TIMER_Start+0xd4>)
 801ceb6:	699b      	ldr	r3, [r3, #24]
 801ceb8:	4798      	blx	r3
 801ceba:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681a      	ldr	r2, [r3, #0]
 801cec0:	697b      	ldr	r3, [r7, #20]
 801cec2:	441a      	add	r2, r3
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	681a      	ldr	r2, [r3, #0]
 801cecc:	4b0e      	ldr	r3, [pc, #56]	; (801cf08 <UTIL_TIMER_Start+0xd8>)
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d203      	bcs.n	801cede <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ced6:	6878      	ldr	r0, [r7, #4]
 801ced8:	f000 f9d6 	bl	801d288 <TimerInsertNewHeadTimer>
 801cedc:	e002      	b.n	801cee4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cede:	6878      	ldr	r0, [r7, #4]
 801cee0:	f000 f9a2 	bl	801d228 <TimerInsertTimer>
 801cee4:	69fb      	ldr	r3, [r7, #28]
 801cee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	f383 8810 	msr	PRIMASK, r3
}
 801ceee:	bf00      	nop
  {
 801cef0:	e002      	b.n	801cef8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cef2:	2301      	movs	r3, #1
 801cef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801cef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801cefc:	4618      	mov	r0, r3
 801cefe:	3728      	adds	r7, #40	; 0x28
 801cf00:	46bd      	mov	sp, r7
 801cf02:	bd80      	pop	{r7, pc}
 801cf04:	0801e270 	.word	0x0801e270
 801cf08:	200044ec 	.word	0x200044ec

0801cf0c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b088      	sub	sp, #32
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cf14:	2300      	movs	r3, #0
 801cf16:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d05b      	beq.n	801cfd6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf1e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf22:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf24:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cf26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf28:	b672      	cpsid	i
}
 801cf2a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cf2c:	4b2d      	ldr	r3, [pc, #180]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cf32:	4b2c      	ldr	r3, [pc, #176]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	2201      	movs	r2, #1
 801cf3c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cf3e:	4b29      	ldr	r3, [pc, #164]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d041      	beq.n	801cfca <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	2200      	movs	r2, #0
 801cf4a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cf4c:	4b25      	ldr	r3, [pc, #148]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	687a      	ldr	r2, [r7, #4]
 801cf52:	429a      	cmp	r2, r3
 801cf54:	d134      	bne.n	801cfc0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801cf56:	4b23      	ldr	r3, [pc, #140]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cf5e:	4b21      	ldr	r3, [pc, #132]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	695b      	ldr	r3, [r3, #20]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d00a      	beq.n	801cf7e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801cf68:	4b1e      	ldr	r3, [pc, #120]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	695b      	ldr	r3, [r3, #20]
 801cf6e:	4a1d      	ldr	r2, [pc, #116]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf70:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801cf72:	4b1c      	ldr	r3, [pc, #112]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	4618      	mov	r0, r3
 801cf78:	f000 f92c 	bl	801d1d4 <TimerSetTimeout>
 801cf7c:	e023      	b.n	801cfc6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cf7e:	4b1a      	ldr	r3, [pc, #104]	; (801cfe8 <UTIL_TIMER_Stop+0xdc>)
 801cf80:	68db      	ldr	r3, [r3, #12]
 801cf82:	4798      	blx	r3
            TimerListHead = NULL;
 801cf84:	4b17      	ldr	r3, [pc, #92]	; (801cfe4 <UTIL_TIMER_Stop+0xd8>)
 801cf86:	2200      	movs	r2, #0
 801cf88:	601a      	str	r2, [r3, #0]
 801cf8a:	e01c      	b.n	801cfc6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cf8c:	697a      	ldr	r2, [r7, #20]
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	429a      	cmp	r2, r3
 801cf92:	d110      	bne.n	801cfb6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801cf94:	697b      	ldr	r3, [r7, #20]
 801cf96:	695b      	ldr	r3, [r3, #20]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d006      	beq.n	801cfaa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801cf9c:	697b      	ldr	r3, [r7, #20]
 801cf9e:	695b      	ldr	r3, [r3, #20]
 801cfa0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cfa2:	69bb      	ldr	r3, [r7, #24]
 801cfa4:	697a      	ldr	r2, [r7, #20]
 801cfa6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cfa8:	e00d      	b.n	801cfc6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cfae:	69bb      	ldr	r3, [r7, #24]
 801cfb0:	697a      	ldr	r2, [r7, #20]
 801cfb2:	615a      	str	r2, [r3, #20]
            break;
 801cfb4:	e007      	b.n	801cfc6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801cfb6:	697b      	ldr	r3, [r7, #20]
 801cfb8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cfba:	697b      	ldr	r3, [r7, #20]
 801cfbc:	695b      	ldr	r3, [r3, #20]
 801cfbe:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cfc0:	697b      	ldr	r3, [r7, #20]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d1e2      	bne.n	801cf8c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	77fb      	strb	r3, [r7, #31]
 801cfca:	693b      	ldr	r3, [r7, #16]
 801cfcc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfce:	68bb      	ldr	r3, [r7, #8]
 801cfd0:	f383 8810 	msr	PRIMASK, r3
}
 801cfd4:	e001      	b.n	801cfda <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cfd6:	2301      	movs	r3, #1
 801cfd8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801cfda:	7ffb      	ldrb	r3, [r7, #31]
}
 801cfdc:	4618      	mov	r0, r3
 801cfde:	3720      	adds	r7, #32
 801cfe0:	46bd      	mov	sp, r7
 801cfe2:	bd80      	pop	{r7, pc}
 801cfe4:	200044ec 	.word	0x200044ec
 801cfe8:	0801e270 	.word	0x0801e270

0801cfec <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b084      	sub	sp, #16
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	6078      	str	r0, [r7, #4]
 801cff4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cff6:	2300      	movs	r3, #0
 801cff8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d102      	bne.n	801d006 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d000:	2301      	movs	r3, #1
 801d002:	73fb      	strb	r3, [r7, #15]
 801d004:	e014      	b.n	801d030 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d006:	4b0d      	ldr	r3, [pc, #52]	; (801d03c <UTIL_TIMER_SetPeriod+0x50>)
 801d008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d00a:	6838      	ldr	r0, [r7, #0]
 801d00c:	4798      	blx	r3
 801d00e:	4602      	mov	r2, r0
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d014:	6878      	ldr	r0, [r7, #4]
 801d016:	f000 f8c1 	bl	801d19c <TimerExists>
 801d01a:	4603      	mov	r3, r0
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d007      	beq.n	801d030 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d020:	6878      	ldr	r0, [r7, #4]
 801d022:	f7ff ff73 	bl	801cf0c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	f7ff ff02 	bl	801ce30 <UTIL_TIMER_Start>
 801d02c:	4603      	mov	r3, r0
 801d02e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d030:	7bfb      	ldrb	r3, [r7, #15]
}
 801d032:	4618      	mov	r0, r3
 801d034:	3710      	adds	r7, #16
 801d036:	46bd      	mov	sp, r7
 801d038:	bd80      	pop	{r7, pc}
 801d03a:	bf00      	nop
 801d03c:	0801e270 	.word	0x0801e270

0801d040 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d040:	b590      	push	{r4, r7, lr}
 801d042:	b089      	sub	sp, #36	; 0x24
 801d044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d046:	f3ef 8310 	mrs	r3, PRIMASK
 801d04a:	60bb      	str	r3, [r7, #8]
  return(result);
 801d04c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d04e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d050:	b672      	cpsid	i
}
 801d052:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d054:	4b38      	ldr	r3, [pc, #224]	; (801d138 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d056:	695b      	ldr	r3, [r3, #20]
 801d058:	4798      	blx	r3
 801d05a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d05c:	4b36      	ldr	r3, [pc, #216]	; (801d138 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d05e:	691b      	ldr	r3, [r3, #16]
 801d060:	4798      	blx	r3
 801d062:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d064:	693a      	ldr	r2, [r7, #16]
 801d066:	697b      	ldr	r3, [r7, #20]
 801d068:	1ad3      	subs	r3, r2, r3
 801d06a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d06c:	4b33      	ldr	r3, [pc, #204]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	2b00      	cmp	r3, #0
 801d072:	d037      	beq.n	801d0e4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d074:	4b31      	ldr	r3, [pc, #196]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d07a:	69fb      	ldr	r3, [r7, #28]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	68fa      	ldr	r2, [r7, #12]
 801d080:	429a      	cmp	r2, r3
 801d082:	d206      	bcs.n	801d092 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d084:	69fb      	ldr	r3, [r7, #28]
 801d086:	681a      	ldr	r2, [r3, #0]
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	1ad2      	subs	r2, r2, r3
 801d08c:	69fb      	ldr	r3, [r7, #28]
 801d08e:	601a      	str	r2, [r3, #0]
 801d090:	e002      	b.n	801d098 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d092:	69fb      	ldr	r3, [r7, #28]
 801d094:	2200      	movs	r2, #0
 801d096:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d098:	69fb      	ldr	r3, [r7, #28]
 801d09a:	695b      	ldr	r3, [r3, #20]
 801d09c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d09e:	69fb      	ldr	r3, [r7, #28]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d1ea      	bne.n	801d07a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d0a4:	e01e      	b.n	801d0e4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d0a6:	4b25      	ldr	r3, [pc, #148]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d0ac:	4b23      	ldr	r3, [pc, #140]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	695b      	ldr	r3, [r3, #20]
 801d0b2:	4a22      	ldr	r2, [pc, #136]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0b4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d0b6:	69fb      	ldr	r3, [r7, #28]
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d0bc:	69fb      	ldr	r3, [r7, #28]
 801d0be:	2200      	movs	r2, #0
 801d0c0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d0c2:	69fb      	ldr	r3, [r7, #28]
 801d0c4:	68db      	ldr	r3, [r3, #12]
 801d0c6:	69fa      	ldr	r2, [r7, #28]
 801d0c8:	6912      	ldr	r2, [r2, #16]
 801d0ca:	4610      	mov	r0, r2
 801d0cc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d0ce:	69fb      	ldr	r3, [r7, #28]
 801d0d0:	7adb      	ldrb	r3, [r3, #11]
 801d0d2:	2b01      	cmp	r3, #1
 801d0d4:	d106      	bne.n	801d0e4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d0d6:	69fb      	ldr	r3, [r7, #28]
 801d0d8:	7a9b      	ldrb	r3, [r3, #10]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d102      	bne.n	801d0e4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d0de:	69f8      	ldr	r0, [r7, #28]
 801d0e0:	f7ff fea6 	bl	801ce30 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d0e4:	4b15      	ldr	r3, [pc, #84]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d00d      	beq.n	801d108 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d0ec:	4b13      	ldr	r3, [pc, #76]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d0d7      	beq.n	801d0a6 <UTIL_TIMER_IRQ_Handler+0x66>
 801d0f6:	4b11      	ldr	r3, [pc, #68]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	681c      	ldr	r4, [r3, #0]
 801d0fc:	4b0e      	ldr	r3, [pc, #56]	; (801d138 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d0fe:	699b      	ldr	r3, [r3, #24]
 801d100:	4798      	blx	r3
 801d102:	4603      	mov	r3, r0
 801d104:	429c      	cmp	r4, r3
 801d106:	d3ce      	bcc.n	801d0a6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d108:	4b0c      	ldr	r3, [pc, #48]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d009      	beq.n	801d124 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d110:	4b0a      	ldr	r3, [pc, #40]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	7a1b      	ldrb	r3, [r3, #8]
 801d116:	2b00      	cmp	r3, #0
 801d118:	d104      	bne.n	801d124 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d11a:	4b08      	ldr	r3, [pc, #32]	; (801d13c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	4618      	mov	r0, r3
 801d120:	f000 f858 	bl	801d1d4 <TimerSetTimeout>
 801d124:	69bb      	ldr	r3, [r7, #24]
 801d126:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	f383 8810 	msr	PRIMASK, r3
}
 801d12e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d130:	bf00      	nop
 801d132:	3724      	adds	r7, #36	; 0x24
 801d134:	46bd      	mov	sp, r7
 801d136:	bd90      	pop	{r4, r7, pc}
 801d138:	0801e270 	.word	0x0801e270
 801d13c:	200044ec 	.word	0x200044ec

0801d140 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	b082      	sub	sp, #8
 801d144:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d146:	4b06      	ldr	r3, [pc, #24]	; (801d160 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d148:	69db      	ldr	r3, [r3, #28]
 801d14a:	4798      	blx	r3
 801d14c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d14e:	4b04      	ldr	r3, [pc, #16]	; (801d160 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d152:	6878      	ldr	r0, [r7, #4]
 801d154:	4798      	blx	r3
 801d156:	4603      	mov	r3, r0
}
 801d158:	4618      	mov	r0, r3
 801d15a:	3708      	adds	r7, #8
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bd80      	pop	{r7, pc}
 801d160:	0801e270 	.word	0x0801e270

0801d164 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b084      	sub	sp, #16
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d16c:	4b0a      	ldr	r3, [pc, #40]	; (801d198 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d16e:	69db      	ldr	r3, [r3, #28]
 801d170:	4798      	blx	r3
 801d172:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d174:	4b08      	ldr	r3, [pc, #32]	; (801d198 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d178:	6878      	ldr	r0, [r7, #4]
 801d17a:	4798      	blx	r3
 801d17c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d17e:	4b06      	ldr	r3, [pc, #24]	; (801d198 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d182:	68f9      	ldr	r1, [r7, #12]
 801d184:	68ba      	ldr	r2, [r7, #8]
 801d186:	1a8a      	subs	r2, r1, r2
 801d188:	4610      	mov	r0, r2
 801d18a:	4798      	blx	r3
 801d18c:	4603      	mov	r3, r0
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3710      	adds	r7, #16
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}
 801d196:	bf00      	nop
 801d198:	0801e270 	.word	0x0801e270

0801d19c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d19c:	b480      	push	{r7}
 801d19e:	b085      	sub	sp, #20
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d1a4:	4b0a      	ldr	r3, [pc, #40]	; (801d1d0 <TimerExists+0x34>)
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d1aa:	e008      	b.n	801d1be <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d1ac:	68fa      	ldr	r2, [r7, #12]
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	429a      	cmp	r2, r3
 801d1b2:	d101      	bne.n	801d1b8 <TimerExists+0x1c>
    {
      return true;
 801d1b4:	2301      	movs	r3, #1
 801d1b6:	e006      	b.n	801d1c6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	695b      	ldr	r3, [r3, #20]
 801d1bc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d1f3      	bne.n	801d1ac <TimerExists+0x10>
  }
  return false;
 801d1c4:	2300      	movs	r3, #0
}
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	3714      	adds	r7, #20
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bc80      	pop	{r7}
 801d1ce:	4770      	bx	lr
 801d1d0:	200044ec 	.word	0x200044ec

0801d1d4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d1d4:	b590      	push	{r4, r7, lr}
 801d1d6:	b085      	sub	sp, #20
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d1dc:	4b11      	ldr	r3, [pc, #68]	; (801d224 <TimerSetTimeout+0x50>)
 801d1de:	6a1b      	ldr	r3, [r3, #32]
 801d1e0:	4798      	blx	r3
 801d1e2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2201      	movs	r2, #1
 801d1e8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	681c      	ldr	r4, [r3, #0]
 801d1ee:	4b0d      	ldr	r3, [pc, #52]	; (801d224 <TimerSetTimeout+0x50>)
 801d1f0:	699b      	ldr	r3, [r3, #24]
 801d1f2:	4798      	blx	r3
 801d1f4:	4602      	mov	r2, r0
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	4413      	add	r3, r2
 801d1fa:	429c      	cmp	r4, r3
 801d1fc:	d207      	bcs.n	801d20e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d1fe:	4b09      	ldr	r3, [pc, #36]	; (801d224 <TimerSetTimeout+0x50>)
 801d200:	699b      	ldr	r3, [r3, #24]
 801d202:	4798      	blx	r3
 801d204:	4602      	mov	r2, r0
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	441a      	add	r2, r3
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d20e:	4b05      	ldr	r3, [pc, #20]	; (801d224 <TimerSetTimeout+0x50>)
 801d210:	689b      	ldr	r3, [r3, #8]
 801d212:	687a      	ldr	r2, [r7, #4]
 801d214:	6812      	ldr	r2, [r2, #0]
 801d216:	4610      	mov	r0, r2
 801d218:	4798      	blx	r3
}
 801d21a:	bf00      	nop
 801d21c:	3714      	adds	r7, #20
 801d21e:	46bd      	mov	sp, r7
 801d220:	bd90      	pop	{r4, r7, pc}
 801d222:	bf00      	nop
 801d224:	0801e270 	.word	0x0801e270

0801d228 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d228:	b480      	push	{r7}
 801d22a:	b085      	sub	sp, #20
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d230:	4b14      	ldr	r3, [pc, #80]	; (801d284 <TimerInsertTimer+0x5c>)
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d236:	4b13      	ldr	r3, [pc, #76]	; (801d284 <TimerInsertTimer+0x5c>)
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	695b      	ldr	r3, [r3, #20]
 801d23c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d23e:	e012      	b.n	801d266 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	681a      	ldr	r2, [r3, #0]
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	429a      	cmp	r2, r3
 801d24a:	d905      	bls.n	801d258 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d250:	68bb      	ldr	r3, [r7, #8]
 801d252:	695b      	ldr	r3, [r3, #20]
 801d254:	60bb      	str	r3, [r7, #8]
 801d256:	e006      	b.n	801d266 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	687a      	ldr	r2, [r7, #4]
 801d25c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	68ba      	ldr	r2, [r7, #8]
 801d262:	615a      	str	r2, [r3, #20]
        return;
 801d264:	e009      	b.n	801d27a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	695b      	ldr	r3, [r3, #20]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d1e8      	bne.n	801d240 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	687a      	ldr	r2, [r7, #4]
 801d272:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2200      	movs	r2, #0
 801d278:	615a      	str	r2, [r3, #20]
}
 801d27a:	3714      	adds	r7, #20
 801d27c:	46bd      	mov	sp, r7
 801d27e:	bc80      	pop	{r7}
 801d280:	4770      	bx	lr
 801d282:	bf00      	nop
 801d284:	200044ec 	.word	0x200044ec

0801d288 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b084      	sub	sp, #16
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d290:	4b0b      	ldr	r3, [pc, #44]	; (801d2c0 <TimerInsertNewHeadTimer+0x38>)
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d002      	beq.n	801d2a2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	2200      	movs	r2, #0
 801d2a0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	68fa      	ldr	r2, [r7, #12]
 801d2a6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d2a8:	4a05      	ldr	r2, [pc, #20]	; (801d2c0 <TimerInsertNewHeadTimer+0x38>)
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d2ae:	4b04      	ldr	r3, [pc, #16]	; (801d2c0 <TimerInsertNewHeadTimer+0x38>)
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f7ff ff8e 	bl	801d1d4 <TimerSetTimeout>
}
 801d2b8:	bf00      	nop
 801d2ba:	3710      	adds	r7, #16
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	bd80      	pop	{r7, pc}
 801d2c0:	200044ec 	.word	0x200044ec

0801d2c4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d2c4:	b480      	push	{r7}
 801d2c6:	b085      	sub	sp, #20
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d2d0:	e00e      	b.n	801d2f0 <ee_skip_atoi+0x2c>
 801d2d2:	68fa      	ldr	r2, [r7, #12]
 801d2d4:	4613      	mov	r3, r2
 801d2d6:	009b      	lsls	r3, r3, #2
 801d2d8:	4413      	add	r3, r2
 801d2da:	005b      	lsls	r3, r3, #1
 801d2dc:	4618      	mov	r0, r3
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	1c59      	adds	r1, r3, #1
 801d2e4:	687a      	ldr	r2, [r7, #4]
 801d2e6:	6011      	str	r1, [r2, #0]
 801d2e8:	781b      	ldrb	r3, [r3, #0]
 801d2ea:	4403      	add	r3, r0
 801d2ec:	3b30      	subs	r3, #48	; 0x30
 801d2ee:	60fb      	str	r3, [r7, #12]
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	781b      	ldrb	r3, [r3, #0]
 801d2f6:	2b2f      	cmp	r3, #47	; 0x2f
 801d2f8:	d904      	bls.n	801d304 <ee_skip_atoi+0x40>
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	2b39      	cmp	r3, #57	; 0x39
 801d302:	d9e6      	bls.n	801d2d2 <ee_skip_atoi+0xe>
  return i;
 801d304:	68fb      	ldr	r3, [r7, #12]
}
 801d306:	4618      	mov	r0, r3
 801d308:	3714      	adds	r7, #20
 801d30a:	46bd      	mov	sp, r7
 801d30c:	bc80      	pop	{r7}
 801d30e:	4770      	bx	lr

0801d310 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d310:	b480      	push	{r7}
 801d312:	b099      	sub	sp, #100	; 0x64
 801d314:	af00      	add	r7, sp, #0
 801d316:	60f8      	str	r0, [r7, #12]
 801d318:	60b9      	str	r1, [r7, #8]
 801d31a:	607a      	str	r2, [r7, #4]
 801d31c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d31e:	4b71      	ldr	r3, [pc, #452]	; (801d4e4 <ee_number+0x1d4>)
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d002      	beq.n	801d334 <ee_number+0x24>
 801d32e:	4b6e      	ldr	r3, [pc, #440]	; (801d4e8 <ee_number+0x1d8>)
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d334:	683b      	ldr	r3, [r7, #0]
 801d336:	2b01      	cmp	r3, #1
 801d338:	dd02      	ble.n	801d340 <ee_number+0x30>
 801d33a:	683b      	ldr	r3, [r7, #0]
 801d33c:	2b24      	cmp	r3, #36	; 0x24
 801d33e:	dd01      	ble.n	801d344 <ee_number+0x34>
 801d340:	2300      	movs	r3, #0
 801d342:	e0ca      	b.n	801d4da <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d346:	f003 0301 	and.w	r3, r3, #1
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d001      	beq.n	801d352 <ee_number+0x42>
 801d34e:	2330      	movs	r3, #48	; 0x30
 801d350:	e000      	b.n	801d354 <ee_number+0x44>
 801d352:	2320      	movs	r3, #32
 801d354:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d358:	2300      	movs	r3, #0
 801d35a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d35e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d360:	f003 0302 	and.w	r3, r3, #2
 801d364:	2b00      	cmp	r3, #0
 801d366:	d00b      	beq.n	801d380 <ee_number+0x70>
  {
    if (num < 0)
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	da08      	bge.n	801d380 <ee_number+0x70>
    {
      sign = '-';
 801d36e:	232d      	movs	r3, #45	; 0x2d
 801d370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	425b      	negs	r3, r3
 801d378:	607b      	str	r3, [r7, #4]
      size--;
 801d37a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d37c:	3b01      	subs	r3, #1
 801d37e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d380:	2300      	movs	r3, #0
 801d382:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	2b00      	cmp	r3, #0
 801d388:	d11e      	bne.n	801d3c8 <ee_number+0xb8>
    tmp[i++] = '0';
 801d38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d38c:	1c5a      	adds	r2, r3, #1
 801d38e:	657a      	str	r2, [r7, #84]	; 0x54
 801d390:	3360      	adds	r3, #96	; 0x60
 801d392:	443b      	add	r3, r7
 801d394:	2230      	movs	r2, #48	; 0x30
 801d396:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d39a:	e018      	b.n	801d3ce <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	683a      	ldr	r2, [r7, #0]
 801d3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801d3a4:	fb01 f202 	mul.w	r2, r1, r2
 801d3a8:	1a9b      	subs	r3, r3, r2
 801d3aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d3ac:	441a      	add	r2, r3
 801d3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3b0:	1c59      	adds	r1, r3, #1
 801d3b2:	6579      	str	r1, [r7, #84]	; 0x54
 801d3b4:	7812      	ldrb	r2, [r2, #0]
 801d3b6:	3360      	adds	r3, #96	; 0x60
 801d3b8:	443b      	add	r3, r7
 801d3ba:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d3be:	687a      	ldr	r2, [r7, #4]
 801d3c0:	683b      	ldr	r3, [r7, #0]
 801d3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 801d3c6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d1e6      	bne.n	801d39c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d3ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3d2:	429a      	cmp	r2, r3
 801d3d4:	dd01      	ble.n	801d3da <ee_number+0xca>
 801d3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d3d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d3da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3de:	1ad3      	subs	r3, r2, r3
 801d3e0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d3e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3e4:	f003 0301 	and.w	r3, r3, #1
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d112      	bne.n	801d412 <ee_number+0x102>
 801d3ec:	e00c      	b.n	801d408 <ee_number+0xf8>
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	1c5a      	adds	r2, r3, #1
 801d3f2:	60fa      	str	r2, [r7, #12]
 801d3f4:	2220      	movs	r2, #32
 801d3f6:	701a      	strb	r2, [r3, #0]
 801d3f8:	68bb      	ldr	r3, [r7, #8]
 801d3fa:	3b01      	subs	r3, #1
 801d3fc:	60bb      	str	r3, [r7, #8]
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d101      	bne.n	801d408 <ee_number+0xf8>
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	e068      	b.n	801d4da <ee_number+0x1ca>
 801d408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d40a:	1e5a      	subs	r2, r3, #1
 801d40c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d40e:	2b00      	cmp	r3, #0
 801d410:	dced      	bgt.n	801d3ee <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d416:	2b00      	cmp	r3, #0
 801d418:	d01b      	beq.n	801d452 <ee_number+0x142>
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	1c5a      	adds	r2, r3, #1
 801d41e:	60fa      	str	r2, [r7, #12]
 801d420:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d424:	701a      	strb	r2, [r3, #0]
 801d426:	68bb      	ldr	r3, [r7, #8]
 801d428:	3b01      	subs	r3, #1
 801d42a:	60bb      	str	r3, [r7, #8]
 801d42c:	68bb      	ldr	r3, [r7, #8]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d10f      	bne.n	801d452 <ee_number+0x142>
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	e051      	b.n	801d4da <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	1c5a      	adds	r2, r3, #1
 801d43a:	60fa      	str	r2, [r7, #12]
 801d43c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d440:	701a      	strb	r2, [r3, #0]
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	3b01      	subs	r3, #1
 801d446:	60bb      	str	r3, [r7, #8]
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d101      	bne.n	801d452 <ee_number+0x142>
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	e043      	b.n	801d4da <ee_number+0x1ca>
 801d452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d454:	1e5a      	subs	r2, r3, #1
 801d456:	66ba      	str	r2, [r7, #104]	; 0x68
 801d458:	2b00      	cmp	r3, #0
 801d45a:	dcec      	bgt.n	801d436 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d45c:	e00c      	b.n	801d478 <ee_number+0x168>
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	1c5a      	adds	r2, r3, #1
 801d462:	60fa      	str	r2, [r7, #12]
 801d464:	2230      	movs	r2, #48	; 0x30
 801d466:	701a      	strb	r2, [r3, #0]
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	3b01      	subs	r3, #1
 801d46c:	60bb      	str	r3, [r7, #8]
 801d46e:	68bb      	ldr	r3, [r7, #8]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d101      	bne.n	801d478 <ee_number+0x168>
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	e030      	b.n	801d4da <ee_number+0x1ca>
 801d478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d47a:	1e5a      	subs	r2, r3, #1
 801d47c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d47e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d480:	429a      	cmp	r2, r3
 801d482:	dbec      	blt.n	801d45e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d484:	e010      	b.n	801d4a8 <ee_number+0x198>
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	1c5a      	adds	r2, r3, #1
 801d48a:	60fa      	str	r2, [r7, #12]
 801d48c:	f107 0110 	add.w	r1, r7, #16
 801d490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d492:	440a      	add	r2, r1
 801d494:	7812      	ldrb	r2, [r2, #0]
 801d496:	701a      	strb	r2, [r3, #0]
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	3b01      	subs	r3, #1
 801d49c:	60bb      	str	r3, [r7, #8]
 801d49e:	68bb      	ldr	r3, [r7, #8]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d101      	bne.n	801d4a8 <ee_number+0x198>
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	e018      	b.n	801d4da <ee_number+0x1ca>
 801d4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d4aa:	1e5a      	subs	r2, r3, #1
 801d4ac:	657a      	str	r2, [r7, #84]	; 0x54
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	dce9      	bgt.n	801d486 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d4b2:	e00c      	b.n	801d4ce <ee_number+0x1be>
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	1c5a      	adds	r2, r3, #1
 801d4b8:	60fa      	str	r2, [r7, #12]
 801d4ba:	2220      	movs	r2, #32
 801d4bc:	701a      	strb	r2, [r3, #0]
 801d4be:	68bb      	ldr	r3, [r7, #8]
 801d4c0:	3b01      	subs	r3, #1
 801d4c2:	60bb      	str	r3, [r7, #8]
 801d4c4:	68bb      	ldr	r3, [r7, #8]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d101      	bne.n	801d4ce <ee_number+0x1be>
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	e005      	b.n	801d4da <ee_number+0x1ca>
 801d4ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d4d0:	1e5a      	subs	r2, r3, #1
 801d4d2:	66ba      	str	r2, [r7, #104]	; 0x68
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	dced      	bgt.n	801d4b4 <ee_number+0x1a4>

  return str;
 801d4d8:	68fb      	ldr	r3, [r7, #12]
}
 801d4da:	4618      	mov	r0, r3
 801d4dc:	3764      	adds	r7, #100	; 0x64
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bc80      	pop	{r7}
 801d4e2:	4770      	bx	lr
 801d4e4:	20000110 	.word	0x20000110
 801d4e8:	20000114 	.word	0x20000114

0801d4ec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d4ec:	b580      	push	{r7, lr}
 801d4ee:	b092      	sub	sp, #72	; 0x48
 801d4f0:	af04      	add	r7, sp, #16
 801d4f2:	60f8      	str	r0, [r7, #12]
 801d4f4:	60b9      	str	r1, [r7, #8]
 801d4f6:	607a      	str	r2, [r7, #4]
 801d4f8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d4fa:	68bb      	ldr	r3, [r7, #8]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	dc01      	bgt.n	801d504 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d500:	2300      	movs	r3, #0
 801d502:	e142      	b.n	801d78a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d508:	e12a      	b.n	801d760 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	1ad2      	subs	r2, r2, r3
 801d510:	68bb      	ldr	r3, [r7, #8]
 801d512:	3b01      	subs	r3, #1
 801d514:	429a      	cmp	r2, r3
 801d516:	f280 8131 	bge.w	801d77c <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	781b      	ldrb	r3, [r3, #0]
 801d51e:	2b25      	cmp	r3, #37	; 0x25
 801d520:	d006      	beq.n	801d530 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d522:	687a      	ldr	r2, [r7, #4]
 801d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d526:	1c59      	adds	r1, r3, #1
 801d528:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d52a:	7812      	ldrb	r2, [r2, #0]
 801d52c:	701a      	strb	r2, [r3, #0]
      continue;
 801d52e:	e114      	b.n	801d75a <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801d530:	2300      	movs	r3, #0
 801d532:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	3301      	adds	r3, #1
 801d538:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	781b      	ldrb	r3, [r3, #0]
 801d53e:	2b30      	cmp	r3, #48	; 0x30
 801d540:	d103      	bne.n	801d54a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d542:	6a3b      	ldr	r3, [r7, #32]
 801d544:	f043 0301 	orr.w	r3, r3, #1
 801d548:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d54a:	f04f 33ff 	mov.w	r3, #4294967295
 801d54e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	781b      	ldrb	r3, [r3, #0]
 801d554:	2b2f      	cmp	r3, #47	; 0x2f
 801d556:	d908      	bls.n	801d56a <tiny_vsnprintf_like+0x7e>
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	781b      	ldrb	r3, [r3, #0]
 801d55c:	2b39      	cmp	r3, #57	; 0x39
 801d55e:	d804      	bhi.n	801d56a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d560:	1d3b      	adds	r3, r7, #4
 801d562:	4618      	mov	r0, r3
 801d564:	f7ff feae 	bl	801d2c4 <ee_skip_atoi>
 801d568:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d56a:	f04f 33ff 	mov.w	r3, #4294967295
 801d56e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d570:	f04f 33ff 	mov.w	r3, #4294967295
 801d574:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d576:	230a      	movs	r3, #10
 801d578:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	781b      	ldrb	r3, [r3, #0]
 801d57e:	3b58      	subs	r3, #88	; 0x58
 801d580:	2b20      	cmp	r3, #32
 801d582:	f200 8094 	bhi.w	801d6ae <tiny_vsnprintf_like+0x1c2>
 801d586:	a201      	add	r2, pc, #4	; (adr r2, 801d58c <tiny_vsnprintf_like+0xa0>)
 801d588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d58c:	0801d697 	.word	0x0801d697
 801d590:	0801d6af 	.word	0x0801d6af
 801d594:	0801d6af 	.word	0x0801d6af
 801d598:	0801d6af 	.word	0x0801d6af
 801d59c:	0801d6af 	.word	0x0801d6af
 801d5a0:	0801d6af 	.word	0x0801d6af
 801d5a4:	0801d6af 	.word	0x0801d6af
 801d5a8:	0801d6af 	.word	0x0801d6af
 801d5ac:	0801d6af 	.word	0x0801d6af
 801d5b0:	0801d6af 	.word	0x0801d6af
 801d5b4:	0801d6af 	.word	0x0801d6af
 801d5b8:	0801d61b 	.word	0x0801d61b
 801d5bc:	0801d6a5 	.word	0x0801d6a5
 801d5c0:	0801d6af 	.word	0x0801d6af
 801d5c4:	0801d6af 	.word	0x0801d6af
 801d5c8:	0801d6af 	.word	0x0801d6af
 801d5cc:	0801d6af 	.word	0x0801d6af
 801d5d0:	0801d6a5 	.word	0x0801d6a5
 801d5d4:	0801d6af 	.word	0x0801d6af
 801d5d8:	0801d6af 	.word	0x0801d6af
 801d5dc:	0801d6af 	.word	0x0801d6af
 801d5e0:	0801d6af 	.word	0x0801d6af
 801d5e4:	0801d6af 	.word	0x0801d6af
 801d5e8:	0801d6af 	.word	0x0801d6af
 801d5ec:	0801d6af 	.word	0x0801d6af
 801d5f0:	0801d6af 	.word	0x0801d6af
 801d5f4:	0801d6af 	.word	0x0801d6af
 801d5f8:	0801d63b 	.word	0x0801d63b
 801d5fc:	0801d6af 	.word	0x0801d6af
 801d600:	0801d6fb 	.word	0x0801d6fb
 801d604:	0801d6af 	.word	0x0801d6af
 801d608:	0801d6af 	.word	0x0801d6af
 801d60c:	0801d69f 	.word	0x0801d69f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d612:	1c5a      	adds	r2, r3, #1
 801d614:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d616:	2220      	movs	r2, #32
 801d618:	701a      	strb	r2, [r3, #0]
 801d61a:	69fb      	ldr	r3, [r7, #28]
 801d61c:	3b01      	subs	r3, #1
 801d61e:	61fb      	str	r3, [r7, #28]
 801d620:	69fb      	ldr	r3, [r7, #28]
 801d622:	2b00      	cmp	r3, #0
 801d624:	dcf4      	bgt.n	801d610 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d626:	683b      	ldr	r3, [r7, #0]
 801d628:	1d1a      	adds	r2, r3, #4
 801d62a:	603a      	str	r2, [r7, #0]
 801d62c:	6819      	ldr	r1, [r3, #0]
 801d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d630:	1c5a      	adds	r2, r3, #1
 801d632:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d634:	b2ca      	uxtb	r2, r1
 801d636:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d638:	e08f      	b.n	801d75a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801d63a:	683b      	ldr	r3, [r7, #0]
 801d63c:	1d1a      	adds	r2, r3, #4
 801d63e:	603a      	str	r2, [r7, #0]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d646:	2b00      	cmp	r3, #0
 801d648:	d101      	bne.n	801d64e <tiny_vsnprintf_like+0x162>
 801d64a:	4b52      	ldr	r3, [pc, #328]	; (801d794 <tiny_vsnprintf_like+0x2a8>)
 801d64c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d64e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d650:	f7e2 fd96 	bl	8000180 <strlen>
 801d654:	4603      	mov	r3, r0
 801d656:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d658:	e004      	b.n	801d664 <tiny_vsnprintf_like+0x178>
 801d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d65c:	1c5a      	adds	r2, r3, #1
 801d65e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d660:	2220      	movs	r2, #32
 801d662:	701a      	strb	r2, [r3, #0]
 801d664:	69fb      	ldr	r3, [r7, #28]
 801d666:	1e5a      	subs	r2, r3, #1
 801d668:	61fa      	str	r2, [r7, #28]
 801d66a:	693a      	ldr	r2, [r7, #16]
 801d66c:	429a      	cmp	r2, r3
 801d66e:	dbf4      	blt.n	801d65a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d670:	2300      	movs	r3, #0
 801d672:	62bb      	str	r3, [r7, #40]	; 0x28
 801d674:	e00a      	b.n	801d68c <tiny_vsnprintf_like+0x1a0>
 801d676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d678:	1c53      	adds	r3, r2, #1
 801d67a:	627b      	str	r3, [r7, #36]	; 0x24
 801d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d67e:	1c59      	adds	r1, r3, #1
 801d680:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d682:	7812      	ldrb	r2, [r2, #0]
 801d684:	701a      	strb	r2, [r3, #0]
 801d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d688:	3301      	adds	r3, #1
 801d68a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d68e:	693b      	ldr	r3, [r7, #16]
 801d690:	429a      	cmp	r2, r3
 801d692:	dbf0      	blt.n	801d676 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d694:	e061      	b.n	801d75a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d696:	6a3b      	ldr	r3, [r7, #32]
 801d698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d69c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d69e:	2310      	movs	r3, #16
 801d6a0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d6a2:	e02d      	b.n	801d700 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d6a4:	6a3b      	ldr	r3, [r7, #32]
 801d6a6:	f043 0302 	orr.w	r3, r3, #2
 801d6aa:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d6ac:	e025      	b.n	801d6fa <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	781b      	ldrb	r3, [r3, #0]
 801d6b2:	2b25      	cmp	r3, #37	; 0x25
 801d6b4:	d004      	beq.n	801d6c0 <tiny_vsnprintf_like+0x1d4>
 801d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6b8:	1c5a      	adds	r2, r3, #1
 801d6ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d6bc:	2225      	movs	r2, #37	; 0x25
 801d6be:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	1ad2      	subs	r2, r2, r3
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	3b01      	subs	r3, #1
 801d6ca:	429a      	cmp	r2, r3
 801d6cc:	da17      	bge.n	801d6fe <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	781b      	ldrb	r3, [r3, #0]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d006      	beq.n	801d6e4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d6d6:	687a      	ldr	r2, [r7, #4]
 801d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6da:	1c59      	adds	r1, r3, #1
 801d6dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d6de:	7812      	ldrb	r2, [r2, #0]
 801d6e0:	701a      	strb	r2, [r3, #0]
 801d6e2:	e002      	b.n	801d6ea <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	3b01      	subs	r3, #1
 801d6e8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	1ad2      	subs	r2, r2, r3
 801d6f0:	68bb      	ldr	r3, [r7, #8]
 801d6f2:	3b01      	subs	r3, #1
 801d6f4:	429a      	cmp	r2, r3
 801d6f6:	db2f      	blt.n	801d758 <tiny_vsnprintf_like+0x26c>
 801d6f8:	e002      	b.n	801d700 <tiny_vsnprintf_like+0x214>
        break;
 801d6fa:	bf00      	nop
 801d6fc:	e000      	b.n	801d700 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801d6fe:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d700:	697b      	ldr	r3, [r7, #20]
 801d702:	2b6c      	cmp	r3, #108	; 0x6c
 801d704:	d105      	bne.n	801d712 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	1d1a      	adds	r2, r3, #4
 801d70a:	603a      	str	r2, [r7, #0]
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	637b      	str	r3, [r7, #52]	; 0x34
 801d710:	e00f      	b.n	801d732 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801d712:	6a3b      	ldr	r3, [r7, #32]
 801d714:	f003 0302 	and.w	r3, r3, #2
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d005      	beq.n	801d728 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801d71c:	683b      	ldr	r3, [r7, #0]
 801d71e:	1d1a      	adds	r2, r3, #4
 801d720:	603a      	str	r2, [r7, #0]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	637b      	str	r3, [r7, #52]	; 0x34
 801d726:	e004      	b.n	801d732 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801d728:	683b      	ldr	r3, [r7, #0]
 801d72a:	1d1a      	adds	r2, r3, #4
 801d72c:	603a      	str	r2, [r7, #0]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d732:	68bb      	ldr	r3, [r7, #8]
 801d734:	1e5a      	subs	r2, r3, #1
 801d736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	1acb      	subs	r3, r1, r3
 801d73c:	1ad1      	subs	r1, r2, r3
 801d73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d740:	6a3b      	ldr	r3, [r7, #32]
 801d742:	9302      	str	r3, [sp, #8]
 801d744:	69bb      	ldr	r3, [r7, #24]
 801d746:	9301      	str	r3, [sp, #4]
 801d748:	69fb      	ldr	r3, [r7, #28]
 801d74a:	9300      	str	r3, [sp, #0]
 801d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d750:	f7ff fdde 	bl	801d310 <ee_number>
 801d754:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d756:	e000      	b.n	801d75a <tiny_vsnprintf_like+0x26e>
        continue;
 801d758:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	3301      	adds	r3, #1
 801d75e:	607b      	str	r3, [r7, #4]
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	f47f aed0 	bne.w	801d50a <tiny_vsnprintf_like+0x1e>
 801d76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	1ad2      	subs	r2, r2, r3
 801d770:	68bb      	ldr	r3, [r7, #8]
 801d772:	3b01      	subs	r3, #1
 801d774:	429a      	cmp	r2, r3
 801d776:	f6bf aec8 	bge.w	801d50a <tiny_vsnprintf_like+0x1e>
 801d77a:	e000      	b.n	801d77e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801d77c:	bf00      	nop
  }

  *str = '\0';
 801d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d780:	2200      	movs	r2, #0
 801d782:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	1ad3      	subs	r3, r2, r3
}
 801d78a:	4618      	mov	r0, r3
 801d78c:	3738      	adds	r7, #56	; 0x38
 801d78e:	46bd      	mov	sp, r7
 801d790:	bd80      	pop	{r7, pc}
 801d792:	bf00      	nop
 801d794:	0801e1b0 	.word	0x0801e1b0

0801d798 <__libc_init_array>:
 801d798:	b570      	push	{r4, r5, r6, lr}
 801d79a:	4d0d      	ldr	r5, [pc, #52]	; (801d7d0 <__libc_init_array+0x38>)
 801d79c:	4c0d      	ldr	r4, [pc, #52]	; (801d7d4 <__libc_init_array+0x3c>)
 801d79e:	1b64      	subs	r4, r4, r5
 801d7a0:	10a4      	asrs	r4, r4, #2
 801d7a2:	2600      	movs	r6, #0
 801d7a4:	42a6      	cmp	r6, r4
 801d7a6:	d109      	bne.n	801d7bc <__libc_init_array+0x24>
 801d7a8:	4d0b      	ldr	r5, [pc, #44]	; (801d7d8 <__libc_init_array+0x40>)
 801d7aa:	4c0c      	ldr	r4, [pc, #48]	; (801d7dc <__libc_init_array+0x44>)
 801d7ac:	f000 f8b0 	bl	801d910 <_init>
 801d7b0:	1b64      	subs	r4, r4, r5
 801d7b2:	10a4      	asrs	r4, r4, #2
 801d7b4:	2600      	movs	r6, #0
 801d7b6:	42a6      	cmp	r6, r4
 801d7b8:	d105      	bne.n	801d7c6 <__libc_init_array+0x2e>
 801d7ba:	bd70      	pop	{r4, r5, r6, pc}
 801d7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7c0:	4798      	blx	r3
 801d7c2:	3601      	adds	r6, #1
 801d7c4:	e7ee      	b.n	801d7a4 <__libc_init_array+0xc>
 801d7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7ca:	4798      	blx	r3
 801d7cc:	3601      	adds	r6, #1
 801d7ce:	e7f2      	b.n	801d7b6 <__libc_init_array+0x1e>
 801d7d0:	0801e808 	.word	0x0801e808
 801d7d4:	0801e808 	.word	0x0801e808
 801d7d8:	0801e808 	.word	0x0801e808
 801d7dc:	0801e80c 	.word	0x0801e80c

0801d7e0 <memcpy>:
 801d7e0:	440a      	add	r2, r1
 801d7e2:	4291      	cmp	r1, r2
 801d7e4:	f100 33ff 	add.w	r3, r0, #4294967295
 801d7e8:	d100      	bne.n	801d7ec <memcpy+0xc>
 801d7ea:	4770      	bx	lr
 801d7ec:	b510      	push	{r4, lr}
 801d7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d7f6:	4291      	cmp	r1, r2
 801d7f8:	d1f9      	bne.n	801d7ee <memcpy+0xe>
 801d7fa:	bd10      	pop	{r4, pc}

0801d7fc <memset>:
 801d7fc:	4402      	add	r2, r0
 801d7fe:	4603      	mov	r3, r0
 801d800:	4293      	cmp	r3, r2
 801d802:	d100      	bne.n	801d806 <memset+0xa>
 801d804:	4770      	bx	lr
 801d806:	f803 1b01 	strb.w	r1, [r3], #1
 801d80a:	e7f9      	b.n	801d800 <memset+0x4>
 801d80c:	0000      	movs	r0, r0
	...

0801d810 <floor>:
 801d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d814:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801d818:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801d81c:	2e13      	cmp	r6, #19
 801d81e:	4602      	mov	r2, r0
 801d820:	460b      	mov	r3, r1
 801d822:	4607      	mov	r7, r0
 801d824:	460c      	mov	r4, r1
 801d826:	4605      	mov	r5, r0
 801d828:	dc33      	bgt.n	801d892 <floor+0x82>
 801d82a:	2e00      	cmp	r6, #0
 801d82c:	da14      	bge.n	801d858 <floor+0x48>
 801d82e:	a334      	add	r3, pc, #208	; (adr r3, 801d900 <floor+0xf0>)
 801d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d834:	f7e2 fcb2 	bl	800019c <__adddf3>
 801d838:	2200      	movs	r2, #0
 801d83a:	2300      	movs	r3, #0
 801d83c:	f7e2 fee2 	bl	8000604 <__aeabi_dcmpgt>
 801d840:	b138      	cbz	r0, 801d852 <floor+0x42>
 801d842:	2c00      	cmp	r4, #0
 801d844:	da58      	bge.n	801d8f8 <floor+0xe8>
 801d846:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d84a:	431d      	orrs	r5, r3
 801d84c:	d001      	beq.n	801d852 <floor+0x42>
 801d84e:	4c2e      	ldr	r4, [pc, #184]	; (801d908 <floor+0xf8>)
 801d850:	2500      	movs	r5, #0
 801d852:	4623      	mov	r3, r4
 801d854:	462f      	mov	r7, r5
 801d856:	e025      	b.n	801d8a4 <floor+0x94>
 801d858:	4a2c      	ldr	r2, [pc, #176]	; (801d90c <floor+0xfc>)
 801d85a:	fa42 f806 	asr.w	r8, r2, r6
 801d85e:	ea01 0208 	and.w	r2, r1, r8
 801d862:	4302      	orrs	r2, r0
 801d864:	d01e      	beq.n	801d8a4 <floor+0x94>
 801d866:	a326      	add	r3, pc, #152	; (adr r3, 801d900 <floor+0xf0>)
 801d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d86c:	f7e2 fc96 	bl	800019c <__adddf3>
 801d870:	2200      	movs	r2, #0
 801d872:	2300      	movs	r3, #0
 801d874:	f7e2 fec6 	bl	8000604 <__aeabi_dcmpgt>
 801d878:	2800      	cmp	r0, #0
 801d87a:	d0ea      	beq.n	801d852 <floor+0x42>
 801d87c:	2c00      	cmp	r4, #0
 801d87e:	bfbe      	ittt	lt
 801d880:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d884:	fa43 f606 	asrlt.w	r6, r3, r6
 801d888:	19a4      	addlt	r4, r4, r6
 801d88a:	ea24 0408 	bic.w	r4, r4, r8
 801d88e:	2500      	movs	r5, #0
 801d890:	e7df      	b.n	801d852 <floor+0x42>
 801d892:	2e33      	cmp	r6, #51	; 0x33
 801d894:	dd0a      	ble.n	801d8ac <floor+0x9c>
 801d896:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d89a:	d103      	bne.n	801d8a4 <floor+0x94>
 801d89c:	f7e2 fc7e 	bl	800019c <__adddf3>
 801d8a0:	4607      	mov	r7, r0
 801d8a2:	460b      	mov	r3, r1
 801d8a4:	4638      	mov	r0, r7
 801d8a6:	4619      	mov	r1, r3
 801d8a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8ac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801d8b0:	f04f 32ff 	mov.w	r2, #4294967295
 801d8b4:	fa22 f808 	lsr.w	r8, r2, r8
 801d8b8:	ea18 0f00 	tst.w	r8, r0
 801d8bc:	d0f2      	beq.n	801d8a4 <floor+0x94>
 801d8be:	a310      	add	r3, pc, #64	; (adr r3, 801d900 <floor+0xf0>)
 801d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c4:	f7e2 fc6a 	bl	800019c <__adddf3>
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	f7e2 fe9a 	bl	8000604 <__aeabi_dcmpgt>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	d0be      	beq.n	801d852 <floor+0x42>
 801d8d4:	2c00      	cmp	r4, #0
 801d8d6:	da02      	bge.n	801d8de <floor+0xce>
 801d8d8:	2e14      	cmp	r6, #20
 801d8da:	d103      	bne.n	801d8e4 <floor+0xd4>
 801d8dc:	3401      	adds	r4, #1
 801d8de:	ea25 0508 	bic.w	r5, r5, r8
 801d8e2:	e7b6      	b.n	801d852 <floor+0x42>
 801d8e4:	2301      	movs	r3, #1
 801d8e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d8ea:	fa03 f606 	lsl.w	r6, r3, r6
 801d8ee:	4435      	add	r5, r6
 801d8f0:	42bd      	cmp	r5, r7
 801d8f2:	bf38      	it	cc
 801d8f4:	18e4      	addcc	r4, r4, r3
 801d8f6:	e7f2      	b.n	801d8de <floor+0xce>
 801d8f8:	2500      	movs	r5, #0
 801d8fa:	462c      	mov	r4, r5
 801d8fc:	e7a9      	b.n	801d852 <floor+0x42>
 801d8fe:	bf00      	nop
 801d900:	8800759c 	.word	0x8800759c
 801d904:	7e37e43c 	.word	0x7e37e43c
 801d908:	bff00000 	.word	0xbff00000
 801d90c:	000fffff 	.word	0x000fffff

0801d910 <_init>:
 801d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d912:	bf00      	nop
 801d914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d916:	bc08      	pop	{r3}
 801d918:	469e      	mov	lr, r3
 801d91a:	4770      	bx	lr

0801d91c <_fini>:
 801d91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d91e:	bf00      	nop
 801d920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d922:	bc08      	pop	{r3}
 801d924:	469e      	mov	lr, r3
 801d926:	4770      	bx	lr
